"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9859],{25354:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>_,frontMatter:()=>a,metadata:()=>d,toc:()=>o});var r=t(74848),s=t(28453);const a={},i=void 0,d={id:"Chcore\u6e90\u7801\u9605\u8bfb/\u9875\u8868\u5206\u914d/\u7f3a\u9875\u7ba1\u7406",title:"\u7f3a\u9875\u7ba1\u7406",description:"\u524d\u7f6e\u77e5\u8bc6\uff1aarm\u7684\u5f02\u5e38\u673a\u5236",source:"@site/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u9875\u8868\u5206\u914d/\u7f3a\u9875\u7ba1\u7406.md",sourceDirName:"Chcore\u6e90\u7801\u9605\u8bfb/\u9875\u8868\u5206\u914d",slug:"/Chcore\u6e90\u7801\u9605\u8bfb/\u9875\u8868\u5206\u914d/\u7f3a\u9875\u7ba1\u7406",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u9875\u8868\u5206\u914d/\u7f3a\u9875\u7ba1\u7406",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"notesSidebar",previous:{title:"\u7b2c\u4e00\u4e2a\u7ebf\u7a0b",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u8fdb\u7a0b\u7ba1\u7406/\u7b2c\u4e00\u4e2a\u7ebf\u7a0b"},next:{title:"\u9875\u8868\u7ba1\u7406",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u9875\u8868\u5206\u914d/\u9875\u8868\u7ba1\u7406"}},l={},o=[{value:"\u524d\u7f6e\u77e5\u8bc6\uff1aarm\u7684\u5f02\u5e38\u673a\u5236",id:"\u524d\u7f6e\u77e5\u8bc6arm\u7684\u5f02\u5e38\u673a\u5236",level:3},{value:"\u601d\u8def\u8bbe\u8ba1\uff1a\u5982\u4f55\u5b9e\u73b0\u5f02\u5e38\u7ba1\u7406\uff1f",id:"\u601d\u8def\u8bbe\u8ba1\u5982\u4f55\u5b9e\u73b0\u5f02\u5e38\u7ba1\u7406",level:3},{value:"\u6e90\u7801\u89e3\u8bfb",id:"\u6e90\u7801\u89e3\u8bfb",level:3}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h3,{id:"\u524d\u7f6e\u77e5\u8bc6arm\u7684\u5f02\u5e38\u673a\u5236",children:"\u524d\u7f6e\u77e5\u8bc6\uff1aarm\u7684\u5f02\u5e38\u673a\u5236"}),"\n",(0,r.jsx)(e.p,{children:"arm \u628a\u5f02\u5e38\u5206\u6210\u51e0\u79cd SYNC\uff0cIRQ\uff0cFIQ\uff0cERROR"}),"\n",(0,r.jsx)(e.p,{children:"\u8fd9\u51e0\u4e2a\u540d\u5b57\u90fd\u5f88\u62bd\u8c61\uff0c\u5148\u8bb2SYNC\u540c\u6b65\u5f02\u5e38"}),"\n",(0,r.jsx)(e.p,{children:"\u4ec0\u4e48\u662f\u540c\u6b65\u5f02\u5e38\uff1farm\u7684\u624b\u518c\u7ed9\u51fa\u7684\u5b9a\u4e49\u662f\uff1a\u786e\u5b9a\u6027\u7684(\u6bcf\u6b21\u6267\u884c\u5230\u90a3\u4e2a\u6307\u4ee4\u5c31\u4f1a\u4ea7\u751f)\uff0c\u7531\u6267\u884c\u6216\u5c1d\u8bd5\u6267\u884c\u6307\u4ee4\u5f15\u53d1\u7684\uff0c\u6309\u7167\u9884\u671f\u4ea7\u751f\u7684; \u800c\u5f02\u6b65\u5f02\u5e38\u5219\u662f\u975e\u786e\u5b9a\u6027\uff0c\u975e\u6307\u4ee4\u6027\u7684\uff0c\u9884\u671f\u4e4b\u5916\u7684"}),"\n",(0,r.jsx)(e.p,{children:"\u4f8b\u5982\u7535\u6e90\u88ab\u8e39\u4e86\u4e00\u811a\u65ad\u7535\u4e86\uff0c\u6216\u8005\u65f6\u949f\u5b9a\u65f6\u89e6\u53d1\u4e2d\u65ad\uff0c\u8fd9\u662f\u5f02\u6b65\u5f02\u5e38"}),"\n",(0,r.jsx)(e.p,{children:"\u800c\u8bbf\u95ee\u4e86\u4e0d\u8be5\u8bbf\u95ee\u7684\u6307\u4ee4\uff0c\u6ca1\u6709\u6743\u9650\u6216\u8005EL\u4e0d\u5bf9\uff0c\uff08\u6355\u83b7\u6d6e\u70b9\u9519\u8bef\u65f6\u7684\uff09\u96640\uff0c\u8fd9\u4e9b\u662f\u53ef\u4ee5\u6eaf\u6e90\u5230\u67d0\u6761\u6307\u4ee4\u4e0a\u7684\uff0c\u662f\u540c\u6b65\u5f02\u5e38"}),"\n",(0,r.jsx)(e.p,{children:"EL1t\u548cEL1h\u5206\u522b\u7528\u4e8e\u5b9e\u9645\u5185\u6838\u548c\u865a\u62df\u673ahypervisor\u6a21\u5f0f"}),"\n",(0,r.jsx)(e.p,{children:"\u5bf9\u4e8e\u5f02\u6b65\u5f02\u5e38\uff0c\u53c8\u53ef\u4ee5\u5206\u6210\u4e2d\u65ad\u548c\u9519\u8bef\uff0c\u6700\u7ec8\u7684\u6982\u8ff0\u5982\u4e0b"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"sync"}),": \u540c\u6b65\u5f02\u5e38\uff0c\u5982\u7cfb\u7edf\u8c03\u7528\u6216\u9875\u9762\u9519\u8bef\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"irq"}),": \u786c\u4ef6\u4e2d\u65ad\u8bf7\u6c42\uff08IRQ\uff09\uff0c\u7531\u5916\u90e8\u8bbe\u5907\u751f\u6210\u7684\u4e2d\u65ad\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"fiq"}),": \u5feb\u901f\u4e2d\u65ad\u8bf7\u6c42\uff08FIQ\uff09\uff0c\u7528\u4e8e\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u4e2d\u65ad\u5904\u7406\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"error"}),": \u5904\u7406\u5176\u4ed6\u7c7b\u578b\u7684\u9519\u8bef\uff0c\u5982\u672a\u5b9a\u4e49\u6307\u4ee4\u6216\u6545\u969c\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u4e0b\u9762\u8fd9\u4e2a\u6587\u4ef6\u5b9e\u9645\u4e0a\u4e5f\u662f\u53c2\u8003\u4e86linux\u7684\u539f\u59cb\u4ee3\u7801"}),"\n",(0,r.jsxs)(e.p,{children:["linux ref: ",(0,r.jsx)(e.a,{href:"https://www.cnblogs.com/charliechen114514-blogs/p/18455517",children:"https://www.cnblogs.com/charliechen114514-blogs/p/18455517"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"//chcore\u4e2d\u7684\u5bf9\u5e94\u90e8\u5206 kernel/arch/aarch64/irq/irq_entry.h\n#define SYNC_EL1t\t\t0\n#define IRQ_EL1t\t\t1\n#define FIQ_EL1t\t\t2\n#define ERROR_EL1t\t\t3\n\n#define SYNC_EL1h\t\t4\n#define IRQ_EL1h\t\t5\n#define FIQ_EL1h\t\t6\n#define ERROR_EL1h\t\t7\n\n#define SYNC_EL0_64             8\n#define IRQ_EL0_64              9\n#define FIQ_EL0_64              10\n#define ERROR_EL0_64            11\n\n#define SYNC_EL0_32             12\n#define IRQ_EL0_32              13\n#define FIQ_EL0_32              14\n#define ERROR_EL0_32            15\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\u601d\u8def\u8bbe\u8ba1\u5982\u4f55\u5b9e\u73b0\u5f02\u5e38\u7ba1\u7406",children:"\u601d\u8def\u8bbe\u8ba1\uff1a\u5982\u4f55\u5b9e\u73b0\u5f02\u5e38\u7ba1\u7406\uff1f"}),"\n",(0,r.jsx)(e.p,{children:"\u8981\u8bfb\u61c2\u7f3a\u9875\u7ba1\u7406\u7684\u6e90\u4ee3\u7801\uff0c\u4e0d\u59a8\u5148\u6765\u634b\u4e00\u634b\u7f3a\u9875\u7ba1\u7406\u7684\u601d\u8def"}),"\n",(0,r.jsx)(e.p,{children:"\u7f3a\u9875\u7ba1\u7406\u5b9e\u8d28\u4e0a\u662f\u5f02\u5e38\u7ba1\u7406\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u90a3\u5f02\u5e38\u7ba1\u7406\u7684\u6846\u67b6\u5e94\u8be5\u600e\u4e48\u8bbe\u8ba1\u5462?"}),"\n",(0,r.jsx)(e.p,{children:"\u9996\u5148\uff0c\u8981\u533a\u5206\u5f02\u5e38\u7684\u7c7b\u578b\uff0c\u6b63\u5982\u524d\u9762\u6240\u8bf4\u7684arm\u7684\u56db\u79cd\u5f02\u5e38"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u5982\u679c\u662f\u540c\u6b65\u5f02\u5e38\uff0c\u9700\u8981\u56de\u8c03\u5176\u5bf9\u5e94\u7684\u5904\u7406\u903b\u8f91\uff08\u4f8b\u5982demand paging\u6216\u8005COW\u4ea7\u751f\u7684\u9875\u5f02\u5e38\uff09","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u5982\u679c\u662f\u7528\u6237\u6001\u89e6\u53d1\u7684\u5f02\u5e38\uff0c\u4e0d\u80fd\u76f4\u63a5\u8ba9\u5185\u6838down\u6389\uff0c\u5fc5\u987b\u59a5\u5584\u5904\u7406"}),"\n",(0,r.jsx)(e.li,{children:"\u5982\u679c\u662f\u5185\u6838\u89e6\u53d1\u7684\u5f02\u5e38\uff0c\u5c1d\u8bd5fix\u4e00\u4e9b\u63d0\u524d\u8bbe\u8ba1\u7684\u673a\u5236\u548c\u53ef\u4ee5\u5904\u7406\u7684\u64cd\u4f5c\uff0c\u5176\u4ed6\u7684\u5e94\u8be5down\u6389"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:"\u5982\u679c\u662f\u4e2d\u65ad\uff0c\u9700\u8981\u8c03\u7528\u5176\u4e2d\u65ad\u5904\u7406\u903b\u8f91"}),"\n",(0,r.jsx)(e.li,{children:"\u5982\u679c\u662fError\uff0c\u5e94\u8be5down\u6389"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u5b9e\u73b0\u673a\u5236\u4e0a\uff0c\u533a\u5206\u5185\u6838\u548c\u7528\u6237\u6001\u770b\u5f53\u524d\u662fEL0/EL1\uff0c\u540c\u6b65\u5f02\u5e38\u65f6\u80fd\u5f97\u5230\u5f53\u524d\u4ea7\u751f\u5f02\u5e38\u7684\u6307\u4ee4\u5730\u5740\uff08\u4ece\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e4b\u4e2d\u8bfb\u53d6\uff0carm\u662fFAR_ELx\uff09\u5f02\u5e38\u89e6\u53d1\u7684\u56de\u8c03\u5e94\u8be5\u901a\u8fc7\u67e5\u5f02\u5e38\u8868\u89e3\u51b3"}),"\n",(0,r.jsx)(e.h3,{id:"\u6e90\u7801\u89e3\u8bfb",children:"\u6e90\u7801\u89e3\u8bfb"}),"\n",(0,r.jsx)(e.p,{children:"\u6709\u4e86\u8fd9\u6837\u7684\u673a\u5236\uff0c\u63a5\u4e0b\u6765\u5c31\u80fd\u770b\u61c2do_page_fault\u7684\u4ee3\u7801\u4e86\uff0c\u5177\u4f53\u7ec6\u8282\u53c2\u89c1\u6ce8\u91ca"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'void do_page_fault(u64 esr, u64 fault_ins_addr, int type, u64 *fix_addr)\n{\n        vaddr_t fault_addr;\n        int fsc; // fault status code\n        int wnr;\n        int ret;\n\t\t\t\t// \u4e00\u4e2a\u4ecefar_el1\u5bc4\u5b58\u5668\u8bfb\u7684\u6c47\u7f16\u7684\u7b80\u5355\u5305\u88c5\n        fault_addr = get_fault_addr();\n        // #define GET_ESR_EL1_FSC(esr_el1) (((esr_el1) >> ESR_EL1_FSC_SHIFT) & FSC_MASK)\n        fsc = GET_ESR_EL1_FSC(esr);\n        switch (fsc) {\n        case DFSC_TRANS_FAULT_L0:\n        case DFSC_TRANS_FAULT_L1:\n        case DFSC_TRANS_FAULT_L2:\n        case DFSC_TRANS_FAULT_L3: {\n\t\t\t\t// \u5730\u5740\u8f6c\u6362\u9519\u8bef\uff0c\u719f\u6089linux vma\u8bbe\u8ba1\u7684\u540c\u5b66\u5e94\u8be5\u77e5\u9053\uff0c\u9700\u8981\u6839\u636evma\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\n                ret = handle_trans_fault(current_thread->vmspace, fault_addr);\n                if (ret != 0) {\n                // \u6ca1\u6709\u6b63\u786e\u5904\u7406\n                        /* The trap happens in the kernel */\n                        if (type < SYNC_EL0_64) {\n                        // EL1 \u7684 type, \u5185\u6838\u6001\u7684\u5f02\u5e38\n                                goto no_context;\n                        }\n\t\t\t\t\t\t\t\t\t\t\t\t// \u7528\u6237\u6001\u7684\u5f02\u5e38\u5904\u7406\u5931\u8d25\u7b80\u5355\u6253\u5370\u540e\u9000\u51fa\n                        kinfo("do_page_fault: faulting ip is 0x%lx (real IP),"\n                              "faulting address is 0x%lx,"\n                              "fsc is trans_fault (0b%b),"\n                              "type is %d\\n",\n                              fault_ins_addr,\n                              fault_addr,\n                              fsc,\n                              type);\n                        kprint_vmr(current_thread->vmspace);\n\n                        kinfo("current_cap_group is %s\\n",\n                                        current_cap_group->cap_group_name);\n\n                        sys_exit_group(-1);\n                }\n                break;\n        }\n        case DFSC_PERM_FAULT_L1:\n        case DFSC_PERM_FAULT_L2:\n        case DFSC_PERM_FAULT_L3:\n        // \u6743\u9650\u9519\u8bef\n                wnr = GET_ESR_EL1_WnR(esr); \n                // WnR, ESR bit[6]. Write not Read. The cause of data abort.\n                if (wnr) {\n                        ret = handle_perm_fault(\n                                current_thread->vmspace, fault_addr, VMR_WRITE);\n                } else {\n                        ret = handle_perm_fault(\n                                current_thread->vmspace, fault_addr, VMR_READ);\n                }\n\n                if (ret != 0) {\n                        /* The trap happens in the kernel */\n                        if (type < SYNC_EL0_64) {\n                                goto no_context;\n                        }\n                        sys_exit_group(-1);\n                }\n                break;\n        case DFSC_ACCESS_FAULT_L1:\n        case DFSC_ACCESS_FAULT_L2:\n        case DFSC_ACCESS_FAULT_L3:\n        // Access faults\uff1a\u6ca1\u6709access bit\u7684pte\n                kinfo("do_page_fault: fsc is access_fault (0b%b)\\n", fsc);\n                BUG_ON(1);\n                break;\n        default:\n                kinfo("do_page_fault: faulting ip is 0x%lx (real IP),"\n                      "faulting address is 0x%lx,"\n                      "fsc is unsupported now (0b%b)\\n",\n                      fault_ins_addr,\n                      fault_addr,\n                      fsc);\n                kprint_vmr(current_thread->vmspace);\n\n                kinfo("current_cap_group is %s\\n",\n                      current_cap_group->cap_group_name);\n\n                BUG_ON(1);\n                break;\n        }\n\n        return;\n// no_context \u8fd9\u4e00\u540d\u79f0\u6765\u6e90\u4e8e\u5185\u6838\u7684\u5f02\u5e38\u5904\u7406\u6d41\u7a0b\u3002\n// \u5f53\u5185\u6838\u68c0\u6d4b\u5230\u5f02\u5e38\u53d1\u751f\u5728\u5185\u6838\u6001\u65f6\uff0c\u5b83\u53d1\u73b0\u6ca1\u6709\u201c\u7528\u6237\u6001\u4e0a\u4e0b\u6587\u201d\n//\uff08\u5373\u4e0d\u662f\u7528\u6237\u7a0b\u5e8f\u5f15\u53d1\u7684\u5f02\u5e38\uff09\uff0c\u56e0\u6b64\u79f0\u4e4b\u4e3a no_context\u3002\n// \u8fd9\u53ea\u662f\u4e00\u4e2a\u903b\u8f91\u5206\u652f\uff0c\u7528\u4e8e\u533a\u5206\u5185\u6838\u6001\u5f02\u5e38\u7684\u5904\u7406\u6d41\u7a0b\u3002\nno_context:\n        kinfo("kernel_fault: faulting ip is 0x%lx (real IP),"\n              "faulting address is 0x%lx,"\n              "fsc is 0b%b\\n",\n              fault_ins_addr,\n              fault_addr,\n              fsc);\n        __do_kernel_fault(esr, fault_ins_addr, fix_addr);\n}\nstatic void __do_kernel_fault(u64 esr, u64 fault_ins_addr, u64 *fix_addr)\n{\n        kdebug("kernel_fault triggered\\n");\n        // \u5185\u6838\u6001page fault\u7684\u65f6\u5019\uff0c\u67e5\u8868\u5c1d\u8bd5\u4fee\u590d\uff0c\u4fee\u590d\u4e0d\u4e86\u5c31down\n        if (fixup_exception(fault_ins_addr, fix_addr)) {\n                return;\n        }\n\n        BUG_ON(1);\n\n        sys_exit_group(-1);\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u4fee\u590d\u673a\u5236\u901a\u5e38\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\u5185\u6838\u5bf9\u7528\u6237\u7a7a\u95f4\u7684\u5185\u5b58\u8bbf\u95ee"}),"\uff1a\u5185\u6838\u53ef\u80fd\u5c1d\u8bd5\u8bbf\u95ee\u7528\u6237\u7a7a\u95f4\u7684\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c\u8fd9\u4e9b\u5730\u5740\u65e0\u6548\uff0c\u5185\u6838\u4f1a\u6355\u83b7\u5f02\u5e38\u5e76\u5c1d\u8bd5\u4fee\u590d\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f"}),"\uff1a\u5728\u67d0\u4e9b\u786c\u4ef6\u64cd\u4f5c\u4e2d\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u7279\u5b9a\u7684\u5f02\u5e38\uff08\u4f8b\u5982\u8bbe\u5907\u672a\u51c6\u5907\u597d\uff09\u3002\u901a\u8fc7\u5f02\u5e38\u4fee\u590d\u673a\u5236\uff0c\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e9b\u5f02\u5e38\u5e76\u6267\u884c\u5907\u7528\u4ee3\u7801\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"\u4f18\u5316\u4ee3\u7801\u8def\u5f84"}),"\uff1a\u67d0\u4e9b\u4ee3\u7801\u8def\u5f84\u53ef\u80fd\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u4f46\u5f00\u53d1\u8005\u77e5\u9053\u5982\u4f55\u6b63\u786e\u6062\u590d\u6267\u884c"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u4f8b\u5982\uff1a\u7528\u6237\u7a0b\u5e8f\u6709\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u7136\u540e\u4ee5\u5b83\u4e3a\u53c2\u6570\u53d1\u8d77\u4e86syscall, \u5185\u6838\u5728\u6b64\u5904\u89e6\u53d1\u4e86page fault\u9519\u8bef\uff0c\u6700\u540e\u7ed9\u51fa\u7684fix_addr\u53ef\u80fd\u5c31\u662f\u4e00\u6bb5\u6253\u5370Segmentation Fault\u7684\u4ee3\u7801"}),"\n",(0,r.jsx)(e.p,{children:"\u7ec3\u4e60\u98989 \u5c31\u662frb_search + rb_entry"}),"\n",(0,r.jsx)(e.p,{children:"\u81f3\u4e8evmspace, \u5176\u6570\u636e\u7ed3\u6784\u5982\u4e0b"}),"\n",(0,r.jsx)(e.mermaid,{value:'classDiagram\n    class vmregion {\n        -struct list_head list_node\n        -struct rb_node tree_node\n        -struct list_head mapping_list_node\n        -struct vmspace* vmspace\n        -vaddr_t start\n        -size_t size\n        -size_t offset\n        -vmr_prop_t perm\n        -struct pmobject* pmo\n        -struct list_head cow_private_pages\n    }\n    \n    class vmspace {\n        -struct list_head vmr_list\n        -struct rb_root vmr_tree\n        -void* pgtbl\n        -unsigned long pcid\n        -struct lock vmspace_lock\n        -struct lock pgtbl_lock\n        -unsigned char history_cpus[PLAT_CPU_NUM]\n        -struct vmregion* heap_boundary_vmr\n        -long rss\n    }\n    \n    vmregion "1" --\x3e "1" vmspace : back_ref\n    vmspace "1" --\x3e "many" vmregion : has(both rbtree & list)\n\t\tvmregion "1" --\x3e "1" vmregion : list_node, tree_node'}),"\n",(0,r.jsx)(e.p,{children:"\u5bf9\u5e94\u6e90\u7801"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"\n/* This struct represents one virtual memory region inside on address space */\nstruct vmregion {\n        struct list_head list_node; /* As one node of the vmr_list */\n        struct rb_node tree_node; /* As one node of the vmr_tree */\n        /* As one node of the pmo's mapping_list */\n        struct list_head mapping_list_node;\n\n        struct vmspace *vmspace;\n        vaddr_t start;\n        size_t size;\n        /* Offset of underlying pmo */\n        size_t offset;\n        vmr_prop_t perm;\n        struct pmobject *pmo;\n        struct list_head cow_private_pages;\n};\n\n/* This struct represents one virtual address space */\nstruct vmspace {\n        /* List head of vmregion (vmr_list) */\n        struct list_head vmr_list;\n        /* rbtree root node of vmregion (vmr_tree) */\n        struct rb_root vmr_tree;\n\n        /* Root page table */\n        void *pgtbl;\n        /* Address space ID for avoiding TLB conflicts */\n        unsigned long pcid;\n\n        /* The lock for manipulating vmregions */\n        struct lock vmspace_lock;\n        /* The lock for manipulating the page table */\n        struct lock pgtbl_lock;\n\n        /*\n         * For TLB flushing:\n         * Record the all the CPU that a vmspace ran on.\n         */\n        unsigned char history_cpus[PLAT_CPU_NUM];\n\n        struct vmregion *heap_boundary_vmr;\n\n        /* Records size of memory mapped. Protected by pgtbl_lock. */\n        long rss;\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u6ce8\u610f\u8fd9\u91cc\u7684list\u548crbtree\u7684node\u90fd\u662fvmregion\u7684\u5305\u88c5\uff0cvmspace\u91cc\u9762\u5b9e\u9645\u4e0a\u6709\u4e24\u7ec4\u76f8\u540c\u7684\u6570\u636elist\u548crbtree"}),"\n",(0,r.jsx)(e.p,{children:"\u540c\u65f6\u7ef4\u62a4list\u548ctree\u4e5f\u662f\u4e00\u4e2a\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u505a\u6cd5\uff0c\u4ece\u7b97\u6cd5\u590d\u6742\u5ea6\u4e0a\u770b\uff0c\u8fd9\u6837\u4f3c\u4e4e\u6ca1\u6709\u4ec0\u4e48\u660e\u663e\u7684\u63d0\u5347\uff0c\u4f46\u5982\u679c\u4ece\u7f13\u5b58\u7684\u89c6\u89d2\u4e0a\u770b\uff0c\u5728\u626b\u63cf\u65f6\uff0clist\u80fd\u4fdd\u8bc1\u65b0\u63d2\u5165\u7684\u9879\u88ab\u4f18\u5148\u904d\u5386\uff0c\u6709\u66f4\u5f3a\u7684TLB\u4eb2\u548c\u6027"}),"\n",(0,r.jsx)(e.p,{children:"\u5728linux6.1\u4e4b\u540e\uff0c\u8fd9\u4e2arbtree\u88ab\u6362\u6210\u4e86maple tree(\u591a\u53c9\u6811\u7684\u53d8\u79cd)"}),"\n",(0,r.jsx)(e.p,{children:"\u6587\u6863\u4e2d\u8bf4\u7684"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u5728 ChCore \u4e2d\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7531\u591a\u6bb5\u201c\u865a\u62df\u5730\u5740\u533a\u57df\u201d\uff08VMR\uff0c\u53c8\u79f0 VMA\uff09\u7ec4\u6210\uff0c\u4e00\u6bb5 VMR \u8bb0\u5f55\u4e86\u8fd9\u6bb5\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u201c\u7269\u7406\u5185\u5b58\u5bf9\u8c61\u201d\uff08PMO\uff09\uff0c\u800c PMO \u4e2d\u5219\u8bb0\u5f55\u4e86\u7269\u7406\u5730\u5740\u76f8\u5173\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u60f3\u8981\u5904\u7406\u7f3a\u9875\u5f02\u5e38\uff0c\u9996\u5148\u9700\u8981\u627e\u5230\u5f53\u524d\u8fdb\u7a0b\u53d1\u751f\u9875\u9519\u8bef\u7684\u865a\u62df\u5730\u5740\u6240\u5904\u7684 VMR\uff0c\u8fdb\u800c\u624d\u80fd\u5f97\u77e5\u5176\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\uff0c\u4ece\u800c\u5728\u9875\u8868\u4e2d\u5b8c\u6210\u6620\u5c04\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u5728\u5730\u5740\u7a7a\u95f4vma\u4e4b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u6301\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\uff0c\u901a\u8fc7\u8bb0\u5f55\u4e0b\u4e00\u7cfb\u5217\u7684\u9875\u9762\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\uff0c\u4ece\u800c\u907f\u514d\u67e5\u8fdb\u7a0b\u81ea\u8eab\u7a7a\u95f4\u7684\u9875\u8868\uff0c\u4e0d\u9700\u8981\u4fdd\u6301\u5185\u6838\u9875\u8868\u548c\u6bcf\u4e2a\u8fdb\u7a0b\u9875\u8868\u7684\u9879\u7684\u5bf9\u5e94\u3002\u8fd9\u6837\u7684\u201c\u4e00\u7cfb\u5217\u9875\u9762\u7684\u7269\u7406\u5730\u5740\u201d\u7684\u4fdd\u5b58\u7ed3\u6784\u5c31\u662f\u4e0b\u9762\u7684pmo, \u91c7\u7528\u7684\u662fstart+size\u7684\u65b9\u5f0f\u7701\u7a7a\u95f4"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"/* This struct represents some physical memory resource */\nstruct pmobject {\n        paddr_t start;\n        size_t size;\n        pmo_type_t type;\n        /* record physical pages for on-demand-paging pmo */\n        struct radix *radix;\n        /*\n         * The field of 'private' depends on 'type'.\n         * PMO_FILE: it points to fmap_fault_pool\n         * others: NULL\n         */\n        void *private;\n        struct list_head mapping_list;\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u6211\u4eec\u7ee7\u7eed\u53d1\u73b0\uff0cstart+size\u7684\u7ed3\u6784\u5929\u751f\u652f\u6301COW\u548con demand paging\uff01\u5177\u4f53\u800c\u8a00\uff0c\u58f0\u660e\u65f6\uff0c\u53ea\u9700\u8981\u8bb0\u5f55pmo \u7684start+size\uff0c\u5728pmo\u4e4b\u4e2d\u7ef4\u62a4\u8bbf\u95ee\u8fc7\u7684/\u6ca1\u8bbf\u95ee\u7684\u7269\u7406\u5730\u5740\u96c6\u5408\uff0c\u5728\u51fa\u73b0pagefault\u7684\u65f6\u5019\u5206\u914d\uff0c\u5e76\u66f4\u65b0\u8fd9\u4e2a\u96c6\u5408\u5c31\u884c"}),"\n",(0,r.jsx)(e.p,{children:"\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u80fd\u5728\u4e00\u4e2a\u8fde\u7eed\u7684\u5730\u5740\u8303\u56f4\u4e4b\u4e2d\uff0c\u6807\u8bb0\u54ea\u4e9b\u7269\u7406\u5730\u5740\u662f\u88ab\u8bbf\u95ee\u8fc7\u7684\uff08\u4ee5\u53ca\u62d3\u5c55\u5730\u6807\u8bb0\u66f4\u591ameta data\uff09\uff0cchcore\u91c7\u7528\u7684\u662f\u7c7b\u4f3clinux\u7684radix tree\u4f18\u5316\uff0c\u5373pmoobject\u4e4b\u4e2d\u7684radix"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u5728 Linux \u5185\u6838\u4e2d\uff0cradix tree\uff08\u6216\u5176\u6539\u8fdb\u7248\u672c xarray\uff09\u88ab\u7528\u4e8e\u7ba1\u7406 page cache \u548c\u5185\u5b58\u5bf9\u8c61\uff08\u5982 PMO\uff0cPhysical Memory Object\uff09\u65f6\u7684\u5730\u5740\u5230\u9875\u9762\u6620\u5c04\u3002\u8fd9\u79cd\u9009\u62e9\u7684\u80cc\u540e\u662f\u5bf9\u6027\u80fd\u3001\u529f\u80fd\u548c\u6269\u5c55\u6027\u7684\u6743\u8861\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u601d\u8003\uff1a\u4ece\u7a7a\u95f4\u5f00\u9500\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528bitmap?"}),"\n",(0,r.jsxs)(e.p,{children:["\u7b54\uff1a\u6838\u5fc3\u5728\u4e8eradix tree\u7ba1\u7406\u7684pmo\u7684\u5730\u5740\u7a7a\u95f4\u901a\u5e38\u662f",(0,r.jsx)(e.strong,{children:"\u5f88\u5927\u4e00\u6bb5\u7a00\u758f\u7684"}),"\uff08\u90fd\u542f\u7528on demand paging\u4e86\uff09\uff0c\u8fd9\u5bf9bitmap\u975e\u5e38\u4e0d\u53cb\u597d\uff0c\u800cradix tree\u5bf9\u7a00\u758f\u548c\u61d2\u5206\u914d\u6709\u5f88\u597d\u7684\u652f\u6301\u3002\u6b64\u5916\uff0cbitmap\u53ea\u80fd\u6807\u8bb0\u5b58\u5728\u4e0e\u5426\uff0c\u800cradix tree\u53ef\u4ee5\u5b58\u6307\u9488\u8fbe\u5230\u66f4\u7075\u6d3b\u7684\u5143\u6570\u636e\u7ba1\u7406"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"#define RADIX_LEVELS (DIV_ROUND_UP(RADIX_MAX_BITS, RADIX_NODE_BITS))\n// 64\u4f4d\u5730\u5740\uff0c4\u4f4dlevel\u7684radix tree\nstruct radix_node {\n\tunion {\n\t\tstruct radix_node *children[RADIX_NODE_SIZE]; // \u7a7a\u95f4\u590d\u7528\uff0c\u4f4d\u64cd\u4f5c\u505a\u67e5\u8be2\u7b49\n\t\tvoid *values[RADIX_NODE_SIZE];\n\t};\n};\nstruct radix {\n\tstruct radix_node *root;\n\tstruct lock radix_lock;\n\tvoid (*value_deleter)(void *);\n};\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u662f\u5426\u5fd8\u4e86\u6574\u4e2a\u6d41\u7a0b\u662f\u5e72\u4ec0\u4e48\u7684\uff1f\u63a5\u4e0b\u6765\u91cd\u65b0\u8d70\u4e00\u6b21\u5904\u7406\u7f3a\u9875\u5f02\u5e38\u7684\u6d41\u7a0b"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\u89e6\u53d1\u7f3a\u9875\u5f02\u5e38"}),"\n",(0,r.jsx)(e.li,{children:"\u5f02\u5e38\u88ab\u5f52\u7c7b\u4e3aSYNC_EL0/SYNC_EL1 + TRANS\u5f02\u5e38\uff0c\u5206\u522b\u5bf9\u5e94\u7528\u6237\u6001\u548c\u5185\u6838\u6001\uff0c\u533a\u522b\u53ea\u662f\u5728\u6700\u574f\u60c5\u51b5\u6709\u65e0\u5c1d\u8bd5\u4fee\u590d"}),"\n",(0,r.jsx)(e.li,{children:"\u5f02\u5e38\u5904\u7406\u51fd\u6570\u4ecefar_el1\u5bc4\u5b58\u5668\u83b7\u53d6\u51fa\u9519\u6307\u4ee4(\u6b64\u5904\u5e94\u8be5\u662f\u8bbf\u5b58)\u7684\u865a\u62df\u5730\u5740fault_addr\uff0c\u4ece\u5f53\u524d\u7684\u7ebf\u7a0bcur_thread\u83b7\u53d6\u5de5\u4f5c\u7684vmspace(vma)"}),"\n",(0,r.jsx)(e.li,{children:"\u5f02\u5e38\u5904\u7406\u51fd\u6570\u8c03\u7528handle_trans_fault\u7ee7\u7eed\u5904\u7406"}),"\n",(0,r.jsx)(e.li,{children:"\u6709\u4e86vmspace\u548cvaddr, \u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684vmregion\u548cpmo, \u4e5f\u5c31\u627e\u5230\u4e86\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u5bf9\u8c61"}),"\n",(0,r.jsx)(e.li,{children:"\u63a5\u4e0b\u6765\u6839\u636epmo\u7684\u7c7b\u578b\u8fdb\u884c\u8fdb\u4e00\u6b65\u5224\u65ad\uff0c\u6ce8\u610f\u53ef\u80fd\u51fa\u73b0\u5e76\u53d1pagefault, \u8fd9\u91cc\u7684\u8bed\u4e49\u5904\u7406\u6839\u636e\u4e0d\u540ctype\u8fd8\u4f1a\u53d1\u751f\u53d8\u5316\uff1a\u4f8b\u5982\u5982\u679c\u662f\u540c\u4e2a\u8fdb\u7a0b\u7684\u591a\u4e2a\u7ebf\u7a0b\uff0c\u4e14\u7c7b\u578b\u4e3aPMO_ANONYM(\u533f\u540d\u5185\u5b58\uff0ccow\u8bed\u4e49)\uff0c\u90a3\u53ea\u9700\u8981\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u65b0radix\u5c31\u591f\u4e86; \u5982\u679c\u662f\u8de8\u8fdb\u7a0b\u7684\u7ebf\u7a0b\uff0c\u6839\u636ecow\u8bed\u4e49\uff0c\u9700\u8981\u5404\u81ea\u66f4\u65b0\u5404\u81ea\u7684"}),"\n",(0,r.jsx)(e.li,{children:"\u67e5\u8be2radix tree\u5185\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u8bb0\u5f55\uff0c\u5982\u679c\u5b58\u5728\uff08\u5728PHO_SHM\u5171\u4eab\u5185\u5b58\u7684\u65f6\u5019\uff0c\u591a\u4e2a\u8fdb\u7a0b\u7684\u7269\u7406\u9875\u9762\u662f\u76f8\u540c\u7684\uff0c \u5373\u5404\u81ea\u7684vma\u5f15\u7528\u540c\u4e00\u4e2apmo\uff0c\u6240\u4ee5\u5e76\u53d1\u573a\u666f\u4e0b\u540e\u6765\u7684\u7ebf\u7a0b\u4f1a\u51fa\u73b0pa\u5df2\u7ecf\u5728radix\u4e4b\u4e2d\u5b58\u5728\u7684\u60c5\u51b5\uff09\uff0c\u5c31\u53ea\u9700\u8981\u5728\u81ea\u5df1\u7684\u9875\u8868\u4e2d\u8bbe\u7f6e\u9875\u8868\u6620\u5c04\uff08\u8fd9\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u201c\u8bbe\u7f6e\u201d\u53ef\u91cd\u5165\uff09; \u5426\u5219\u4e3a\u8fd9\u4e2aon demand paging\u7684\u9875\u9762\u5206\u914d\u7a7a\u95f4\uff0c \u66f4\u65b0radix tree\u548cpagetable"}),"\n",(0,r.jsx)(e.li,{children:"\u5904\u7406\u5b8c\u6bd5\uff0c\u91cd\u65b0\u5c1d\u8bd5\u7ffb\u8bd1\u8fd9\u4e2a\u5730\u5740\uff0c\u6b64\u65f6\u56e0\u4e3a\u5df2\u7ecf\u66f4\u65b0pagetable, \u5e94\u8be5\u80fd\u6210\u529f\u7ffb\u8bd1"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"step67\u7684\u5bf9\u5e94\u6e90\u7801\u5982\u4e0b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'int handle_trans_fault(struct vmspace *vmspace, vaddr_t fault_addr)\n{\n        struct vmregion *vmr;\n        struct pmobject *pmo;\n        paddr_t pa;\n        unsigned long offset;\n        unsigned long index;\n        int ret = 0;\n\n        /*\n         * Grab lock here.\n         * Because two threads (in same process) on different cores\n         * may fault on the same page, so we need to prevent them\n         * from adding the same mapping twice.\n         */\n        lock(&vmspace->vmspace_lock);\n        vmr = find_vmr_for_va(vmspace, fault_addr);\n\n        if (vmr == NULL) {\n                kinfo("handle_trans_fault: no vmr found for va 0x%lx!\\n",\n                      fault_addr);\n                dump_pgfault_error();\n                unlock(&vmspace->vmspace_lock);\n\n#if defined(CHCORE_ARCH_AARCH64) || defined(CHCORE_ARCH_SPARC)\n                /* kernel fault fixup is only supported on AArch64 and Sparc */\n                return -EFAULT;\n#endif\n                sys_exit_group(-1);\n        }\n\n        pmo = vmr->pmo;\n        /* Get the offset in the pmo for faulting addr */\n        offset = ROUND_DOWN(fault_addr, PAGE_SIZE) - vmr->start + vmr->offset;\n        vmr_prop_t perm = vmr->perm;\n        switch (pmo->type) {\n        case PMO_ANONYM:\n        case PMO_SHM: {\n                /* Boundary check */\n                BUG_ON(offset >= pmo->size);\n\n                /* Get the index in the pmo radix for faulting addr */\n                index = offset / PAGE_SIZE;\n\n                fault_addr = ROUND_DOWN(fault_addr, PAGE_SIZE);\n\n                pa = get_page_from_pmo(pmo, index);\n                if (pa == 0) {\n                        /*\n                         * Not committed before. Then, allocate the physical\n                         * page.\n                         */\n                        void *new_va = get_pages(0);\n                        long rss = 0;\n                        if (new_va == NULL) {\n                                unlock(&vmspace->vmspace_lock);\n                                return -ENOMEM;\n                        }\n                        pa = virt_to_phys(new_va);\n                        BUG_ON(pa == 0);\n                        /* Clear to 0 for the newly allocated page */\n                        memset((void *)phys_to_virt(pa), 0, PAGE_SIZE);\n                        /*\n                         * Record the physical page in the radix tree:\n                         * the offset is used as index in the radix tree\n                         */\n                        kdebug("commit: index: %ld, 0x%lx\\n", index, pa);\n                        commit_page_to_pmo(pmo, index, pa);\n\n                        /* Add mapping in the page table */\n                        lock(&vmspace->pgtbl_lock);\n                        map_range_in_pgtbl(vmspace->pgtbl,\n                                           fault_addr,\n                                           pa,\n                                           PAGE_SIZE,\n                                           perm,\n                                           &rss);\n                        vmspace->rss += rss;\n                        unlock(&vmspace->pgtbl_lock);\n                } else {\n                        /*\n                         * pa != 0: the faulting address has be committed a\n                         * physical page.\n                         *\n                         * For concurrent page faults:\n                         *\n                         * When type is PMO_ANONYM, the later faulting threads\n                         * of the process do not need to modify the page\n                         * table because a previous faulting thread will do\n                         * that. (This is always true for the same process)\n                         * However, if one process map an anonymous pmo for\n                         * another process (e.g., main stack pmo), the faulting\n                         * thread (e.g, in the new process) needs to update its\n                         * page table.\n                         * So, for simplicity, we just update the page table.\n                         * Note that adding the same mapping is harmless.\n                         *\n                         * When type is PMO_SHM, the later faulting threads\n                         * needs to add the mapping in the page table.\n                         * Repeated mapping operations are harmless.\n                         */\n                        if (pmo->type == PMO_SHM || pmo->type == PMO_ANONYM) {\n                                /* Add mapping in the page table */\n                                long rss = 0;\n                                lock(&vmspace->pgtbl_lock);\n                                map_range_in_pgtbl(vmspace->pgtbl,\n                                                   fault_addr,\n                                                   pa,\n                                                   PAGE_SIZE,\n                                                   perm,\n                                                   &rss);\n                                vmspace->rss += rss;\n                                unlock(&vmspace->pgtbl_lock);\n                        }\n                }\n\n                if (perm & VMR_EXEC) {\n                        arch_flush_cache(fault_addr, PAGE_SIZE, SYNC_IDCACHE);\n                }\n\n                break;\n        }\n        case PMO_FILE: {\n                unlock(&vmspace->vmspace_lock);\n                fault_addr = ROUND_DOWN(fault_addr, PAGE_SIZE);\n                handle_user_fault(pmo, ROUND_DOWN(fault_addr, PAGE_SIZE));\n                BUG("Should never be here!\\n");\n                break;\n        }\n        case PMO_FORBID: {\n                kinfo("Forbidden memory access (pmo->type is PMO_FORBID).\\n");\n                dump_pgfault_error();\n\n                unlock(&vmspace->vmspace_lock);\n                sys_exit_group(-1);\n                break;\n        }\n        default: {\n                kinfo("handle_trans_fault: faulting vmr->pmo->type"\n                      "(pmo type %d at 0x%lx)\\n",\n                      vmr->pmo->type,\n                      fault_addr);\n                dump_pgfault_error();\n\n                unlock(&vmspace->vmspace_lock);\n                sys_exit_group(-1);\n                break;\n        }\n        }\n\n        unlock(&vmspace->vmspace_lock);\n        return ret;\n}\n'})})]})}function _(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>d});var r=t(96540);const s={},a=r.createContext(s);function i(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);