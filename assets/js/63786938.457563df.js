"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7053],{4295:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>a,toc:()=>p});var r=s(4848),i=s(8453);const t={title:"xv6book Notes(C1-4)",date:new Date("2024-07-12T00:00:00.000Z"),author:"ayanami",tags:["xv6","os","system"],slug:"xv6book-notes"},l=void 0,a={permalink:"/blog/xv6book-notes",source:"@site/blog/xv6book.md",title:"xv6book Notes(C1-4)",description:"\u4e00\u4e9b\u7ec6\u8282\u548c\u601d\u8003\uff1a",date:"2024-07-12T00:00:00.000Z",tags:[{inline:!0,label:"xv6",permalink:"/blog/tags/xv-6"},{inline:!0,label:"os",permalink:"/blog/tags/os"},{inline:!0,label:"system",permalink:"/blog/tags/system"}],readingTime:90.675,hasTruncateMarker:!0,authors:[{name:"ayanami"}],frontMatter:{title:"xv6book Notes(C1-4)",date:"2024-07-12T00:00:00.000Z",author:"ayanami",tags:["xv6","os","system"],slug:"xv6book-notes"},unlisted:!1,prevItem:{title:"splay tree",permalink:"/blog/splay-tree"},nextItem:{title:"Go,Gin\u5b66\u4e60",permalink:"/blog/Go-Gin\u5b66\u4e60"}},c={authorsImageUrls:[void 0]},p=[{value:"Chapter 1",id:"chapter-1",level:3},{value:"1.1",id:"11",level:4},{value:"1.2",id:"12",level:4},{value:"1.3",id:"13",level:4},{value:"1.4",id:"14",level:4},{value:"1.5",id:"15",level:4},{value:"lab01 Utils",id:"lab01-utils",level:4},{value:"Chapter 2",id:"chapter-2",level:3},{value:"2.1 Abstracting physical resources",id:"21-abstracting-physical-resources",level:4},{value:"2.2 User mode, supervisor mode, and syscalls",id:"22-user-mode-supervisor-mode-and-syscalls",level:4},{value:"2.3 Kernel organization",id:"23-kernel-organization",level:4},{value:"2.4 Code: xv6 organization",id:"24-code-xv6-organization",level:4},{value:"2.5 Process overview",id:"25-process-overview",level:4},{value:"2.6 Code: starting xv6, the first process and system call",id:"26-code-starting-xv6-the-first-process-and-system-call",level:4},{value:"2.7 Security Model &amp; 2.8 Real World",id:"27-security-model--28-real-world",level:4},{value:"Chapter 3: Page tables",id:"chapter-3-page-tables",level:3},{value:"3.1 Paging Hardware",id:"31-paging-hardware",level:4},{value:"3.2 Kernel address space",id:"32-kernel-address-space",level:4},{value:"3.3 Code an address space",id:"33-code-an-address-space",level:4},{value:"3.4 Physical memory allocation",id:"34-physical-memory-allocation",level:4},{value:"3.5 Code: Physical memory allocator",id:"35-code-physical-memory-allocator",level:4},{value:"3.6 Process address space",id:"36-process-address-space",level:4},{value:"3.7 Code",id:"37-code",level:4},{value:"3.8 Code",id:"38-code",level:4},{value:"3.9 Real world",id:"39-real-world",level:4},{value:"Chapter 4: Traps and system calls",id:"chapter-4-traps-and-system-calls",level:3},{value:"4.1 RISC-V trap machinery",id:"41-risc-v-trap-machinery",level:4},{value:"4.2 Traps from user space",id:"42-traps-from-user-space",level:4},{value:"4.3 Code: Calling system calls",id:"43-code-calling-system-calls",level:4},{value:"4.4 Code: System call arguments",id:"44-code-system-call-arguments",level:4},{value:"4.5 Traps from kernel space",id:"45-traps-from-kernel-space",level:4},{value:"4.6 Page-fault exceptions",id:"46-page-fault-exceptions",level:4},{value:"4.7 Real World",id:"47-real-world",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"\u4e00\u4e9b\u7ec6\u8282\u548c\u601d\u8003\uff1a"}),"\n",(0,r.jsx)(n.p,{children:"Q: wait for reading the source code and thinking"}),"\n",(0,r.jsx)(n.p,{children:"A: after reading the source code and thinking"}),"\n",(0,r.jsx)(n.h3,{id:"chapter-1",children:"Chapter 1"}),"\n",(0,r.jsx)(n.h4,{id:"11",children:"1.1"}),"\n",(0,r.jsx)(n.p,{children:'close syscall just "Release the file fd", don\'t really operate on the file itself.'}),"\n",(0,r.jsx)(n.p,{children:"and correspandingly, the open syscall just ask for a fd and return"}),"\n",(0,r.jsx)(n.p,{children:'fd isn\'t something new, just the an "alias" or "abstraction" of file store location in real world'}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Q: Is fd a key-value mapping of inode which the kernel mainteins?"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"wait syscall's full def"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int wait(int* status);\n// wait for a child to exit; exit status in *status, returns child PID\n"})}),"\n",(0,r.jsx)(n.p,{children:"exit syscall"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int exit(int status);\n// terminate the current process; status reported to wait().No return\n// return 0 conventionally to indicate success, 1 to indicate failure\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Q: Is no return means the end of the process? FurtherMore, after exit syscall, OS is doing what during waiting(or scheding)? release resources, specific?"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"wait return -1 when the process has no children(when return? killed or exited)"}),"\n",(0,r.jsx)(n.p,{children:"exec syscall"}),"\n",(0,r.jsxs)(n.p,{children:["\"replacing the calling process's memory with a ",(0,r.jsx)(n.strong,{children:"new memory image"}),' loaded file stored in the file sys"']}),"\n",(0,r.jsxs)(n.p,{children:["not magic, the file must have some specific ",(0,r.jsx)(n.strong,{children:"format"})," to indicate which part of the file holds instruction, which part of the file holds data... etc"]}),"\n",(0,r.jsxs)(n.p,{children:["xv6 use ",(0,r.jsx)(n.em,{children:"ELF format"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Link: Chapter 3"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"the pipe implement in suer shell"}),"\n",(0,r.jsx)(n.p,{children:"assume that we have pipe syscall already"}),"\n",(0,r.jsx)(n.p,{children:"cmd, after parse, has been given a cmd type"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    case PIPE:\n        pcmd = (struct pipecmd *)cmd;\n// pipecmd is just\n/*\n   struct pipecmd{\n   \t \tint* type; // enum actually\n   \t \tcmd* leftcmd;\n   \t \tcmd* right;\n   \t \t// Q: cmd only has an element "type", why?\n   }\n*/\n        if (pipe(p) < 0)\n            panic("pipe");\n        if (fork1() == 0) {\n            close(1);\n            // close the write port\n            dup(p[1]);\n            // duplicate the write port of the pipe, now it will occupy the 1\n            // close the other pipe fd\n            close(p[0]);\n            close(p[1]);\n            runcmd(pcmd->left);\n            // now run the cmd\n        }\n        if (fork1() == 0) {\n            // same\n            close(0);\n            dup(p[0]);\n            close(p[0]);\n            close(p[1]);\n            runcmd(pcmd->right);\n        }\n        close(p[0]);\n        close(p[1]);\n        wait(0);\n        wait(0);\n        break;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Attention: It calls twice ",(0,r.jsx)(n.code,{children:"fork"}),". The left of pipe and the right of pipe are both the children of shell."]}),"\n",(0,r.jsxs)(n.p,{children:["And there' s a ",(0,r.jsx)(n.strong,{children:"recursion"})," here(",(0,r.jsx)(n.code,{children:"runcmd"}),"):"]}),"\n",(0,r.jsx)(n.p,{children:'the cmd struct only needs an element "type" because the cmd runs only when its type is "EXECCMD"'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"struct execcmd {\n    int type;\n    char *argv[MAXARGS];\n    char *eargv[MAXARGS];\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"The entire shell actual only has such a simple core in main function"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"    // Read and run input commands.\n    while (getcmd(buf, sizeof(buf)) >= 0) {\n        // ...\n        if (fork1() == 0) // fork a child process\n            runcmd(parsecmd(buf)); // run cmd\n        wait(0); // wait for the child be killed or exit\n    }\n\t// never return\n"})}),"\n",(0,r.jsxs)(n.p,{children:["So that's a reason why Unix(xv6) separate ",(0,r.jsx)(n.code,{children:"fork"})," and ",(0,r.jsx)(n.code,{children:"exec"}),". We need the possibility to execute some code between fork and exec, like implementing pipe(doing some operation on fd)"]}),"\n",(0,r.jsx)(n.p,{children:"Also, another reason is to waste the resources: Based on COPY-ON-WRITE"}),"\n",(0,r.jsxs)(n.p,{children:["xv6 allocates the memory of ",(0,r.jsx)(n.strong,{children:"user"})," implicitly using fork and exec"]}),"\n",(0,r.jsxs)(n.p,{children:["user process can also explicitly call ",(0,r.jsx)(n.code,{children:"sbrk"}),"to ask for more memory"]}),"\n",(0,r.jsx)(n.h4,{id:"12",children:"1.2"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["A file descriptor is a small integer representing ",(0,r.jsx)(n.strong,{children:"a kernel-managed object"})," that a process may read/write to"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"source:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"open: file\uff0c dir, device"}),"\n",(0,r.jsx)(n.li,{children:"create: pipe"}),"\n",(0,r.jsx)(n.li,{children:"dup"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.strong,{children:"abstraction"})," of a file, device, pipe, ",(0,r.jsx)(n.strong,{children:"making them all look like streams of bytes"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The shell ensures three fd open(which is the shell process's stdin, stdout and stderr)"})," (console)"]}),"\n",(0,r.jsx)(n.p,{children:"There's an offset binding with each fd, making it possible to write code like"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'if(fork()==0){\n    write(fd, "Hello ", 6);\n}\nelse{\n    wait(0);\n    write(fd, "world", 6);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"fork && dup will copy the fd and the offset"}),"\n",(0,r.jsx)(n.p,{children:"dup is used to implement the shell command like this"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[somecommand] 2>&1\n"})}),"\n",(0,r.jsx)(n.p,{children:"which means redirect the err message to the stdout"}),"\n",(0,r.jsx)(n.p,{children:"It can be implemented by"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"close(2);\nfd = dup(1);// so it copies the 1's fd and offset, and occupy the loc of 2(stderr).\n"})}),"\n",(0,r.jsx)(n.h4,{id:"13",children:"1.3"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"A pipe is a kernel buffer that exposed to process as a pair of file discriptors"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If there is no data available, the read side of a pipe will be blocked. A ",(0,r.jsx)(n.code,{children:"read"})," on a pipe waits:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"write data"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"the ref count of the write fd of the pipe is 0"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"So it's very important to close write fd in the child process"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"if one of wc's fd refers to the pipe, the wc would never see the end-of-file"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u9a8c\u8bc1\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n  // wc the std input\n  int p[2];\n  char *argv[2];\n  argv[0] = "wc";\n  argv[1] = NULL;\n  pipe(p);\n  if (fork() == 0) {\n    // child process\n    printf("switched to child process\\n");\n    close(0);\n    dup(p[0]);\n    close(p[0]);\n    close(p[1]); // \u6b64\u5904\u82e5\u6ce8\u91ca......\n    execvp(argv[0], argv);\n  } else {\n    printf("switched to parent process\\n");\n    close(p[0]);\n    write(p[1], "hello world\\n", 11);\n    close(p[1]);\n  }\n  return 0;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u7ed3\u679c\u662f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"\u276f gcc pipe.c\n\u276f ./a.out\nswitched to parent process\nswitched to child process\n      0       2      11\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u5982\u679c\u5c06",(0,r.jsx)(n.code,{children:"close(p[1])"}),"\u6ce8\u91ca\u6389\uff0c\u4e0d\u4f1a\u8f93\u51fa 0 2 11, \u56e0\u4e3a wc \u6839\u672c\u6ca1\u770b\u5230 end-of-file\uff08\u7ba1\u9053\u5199\u7aef\u5f15\u7528\u8ba1\u6570\u4e0d\u4e3a 0\uff09\uff0c\u786e\u5b9e\u5982\u6b64"]}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u91cc\u5176\u5b9e\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u4ee3\u7801\u4e4b\u4e2d\u6ca1\u6709\u4f7f\u7528",(0,r.jsx)(n.code,{children:"wait"}),"\uff0c\u56e0\u800c\u4e0d\u4fdd\u8bc1\u7236\u5b50\u8fdb\u7a0b\u7684\u5148\u540e\u987a\u5e8f\uff1b\u4f46\u662f\uff0c\u5982\u679c\u5148\u5207\u6362\u5230\u5b50\u8fdb\u7a0b\uff0c\u4f1a\u56e0\u4e3a\u7ba1\u9053\u5185\u90e8\u6ca1\u6709\u53ef\u8bfb\u7684\u6570\u636e\u800c\u5835\u585e\uff0c\u518d\u6b21\u53d1\u751f\u8fdb\u7a0b\u8c03\u5ea6\u3002"]}),"\n",(0,r.jsxs)(n.li,{children:["\u53ef\u80fd\u8fd8\u6709\u7591\u95ee\uff0c\u5982\u679c\u7236\u8fdb\u7a0b\u5728 write \u4e2d\u95f4\u53d1\u751f\u8fdb\u7a0b\u5207\u6362\u5462\uff1f\u5b9e\u9645\u4e0a\u662f\u4e0d\u4f1a\u53d1\u751f\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4",(0,r.jsx)(n.code,{children:"write"}),"\u662f atomic operation, ",(0,r.jsx)(n.strong,{children:"\u5728 Unix \u548c Linux \u7cfb\u7edf\u4e2d\uff0c\u5bf9\u4e8e\u7ba1\u9053\u548c\u666e\u901a\u6587\u4ef6\u7684 write \u64cd\u4f5c\uff0c\u5982\u679c\u5199\u5165\u7684\u6570\u636e\u91cf\u5c0f\u4e8e PIPE_BUF\uff08\u901a\u5e38\u662f 4096 \u5b57\u8282\uff09\uff0c\u90a3\u4e48 write \u64cd\u4f5c\u662f\u539f\u5b50\u7684"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"read the code of sh.c 100"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Thus, the shell may create the tree of process; The leaves of tree are command and the interior nodes are processes that wait the left and the right children complete."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4e66\u4e0b\u9762\u51e0\u6bb5\u5bf9\u8fd9\u79cd fork \u4e24\u6b21\uff0c\u5de6\u53f3\u4e2d\u7684\u6267\u884c\u987a\u5e8f\u7684 design \u4e5f\u505a\u4e86\u5f88\u6709\u610f\u601d\u7684\u63a2\u8ba8"}),"\n",(0,r.jsxs)(n.p,{children:["pipe's advtanges over temp file(why ",(0,r.jsx)(n.code,{children:"echo hi | wc"})," is better than ",(0,r.jsx)(n.code,{children:"echo hi > tmp; wc < tmp"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"pipes clean themselves up"}),"\n",(0,r.jsx)(n.li,{children:"pipes can pass arbitrarily long streams of data, while tmp file need enough space in disk and may be slower"}),"\n",(0,r.jsx)(n.li,{children:"pipes allows paralel execution(recall the pipe tree)"}),"\n",(0,r.jsx)(n.li,{children:"pipe's blocking reads"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"14",children:"1.4"}),"\n",(0,r.jsxs)(n.p,{children:["file system: a tree starting at ",(0,r.jsx)(n.code,{children:"root"})]}),"\n",(0,r.jsxs)(n.p,{children:["tree node: data file: ",(0,r.jsx)(n.strong,{children:"uninterpreted byte arrays"})]}),"\n",(0,r.jsxs)(n.p,{children:["dir: a ",(0,r.jsx)(n.strong,{children:"named ref"})," of data files and other dir"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"chdir"})," and ",(0,r.jsx)(n.code,{children:"open"})," syscall"]}),"\n",(0,r.jsx)(n.p,{children:"create new files or dirs?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'open("path", O_CREATE)'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'mkdir("path")'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:'mknod("path", major-dev-number, minor-dev-number)'})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"mknod \u8fd9\u4e2a syscall \u6bd4\u8f83\u7279\u6b8a\uff0c\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u547d\u540d\u7ba1\u9053 FIFO \u6216\u8005\u8bbe\u5907\u6587\u4ef6"}),"\n",(0,r.jsx)(n.p,{children:"\u547d\u540d\u7ba1\u9053\u5c31\u662f\u5e26\u540d\u5b57\u7684\u7ba1\u9053"}),"\n",(0,r.jsx)(n.p,{children:"\u8bbe\u5907\u6587\u4ef6\u5206\u6210\u4e24\u79cd"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u5728 Unix \u548c Linux \u7cfb\u7edf\u4e2d\uff0c\u8bbe\u5907\u88ab\u8868\u793a\u4e3a\u8bbe\u5907\u6587\u4ef6\uff0c\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6\u7c7b\u578b\u3002\u8bbe\u5907\u6587\u4ef6\u5206\u4e3a\u4e24\u79cd\uff1a\u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\u548c\u5757\u8bbe\u5907\u6587\u4ef6\u3002"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\uff1a\u63d0\u4f9b\u4e0d\u5e26\u7f13\u51b2\u7684\u3001\u4e32\u884c\u7684\u6570\u636e\u8bbf\u95ee\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bfb\u5199\u7684\u662f\u8bbe\u5907\u63d0\u4f9b\u7684\u539f\u59cb\u6570\u636e\u3002\u952e\u76d8\u548c\u9f20\u6807\u7b49\u8f93\u5165\u8bbe\u5907\u901a\u5e38\u662f\u5b57\u7b26\u8bbe\u5907\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u5757\u8bbe\u5907\u6587\u4ef6\uff1a\u63d0\u4f9b\u5e26\u7f13\u51b2\u7684\u3001\u968f\u673a\u8bbf\u95ee\u7684\u6570\u636e\u8bbf\u95ee\uff0c\u6570\u636e\u4ee5\u5757\u4e3a\u5355\u4f4d\u8fdb\u884c\u8bfb\u5199\u3002\u786c\u76d8\u548c\u5149\u9a71\u7b49\u5b58\u50a8\u8bbe\u5907\u901a\u5e38\u662f\u5757\u8bbe\u5907\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u8bbe\u5907\u6587\u4ef6\u4e0e\u666e\u901a\u6587\u4ef6\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u8bbe\u5907\u6587\u4ef6\u63d0\u4f9b\u4e86\u4e00\u79cd\u8bbf\u95ee\u786c\u4ef6\u8bbe\u5907\u7684\u63a5\u53e3\u3002\u5f53\u4f60\u5bf9\u8bbe\u5907\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u4e0e\u76f8\u5e94\u7684\u8bbe\u5907\u8fdb\u884c\u901a\u4fe1\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u8bbe\u5907\u53f7\u548c\u6b21\u8bbe\u5907\u53f7\u662f\u8bbe\u5907\u6587\u4ef6\u7684\u91cd\u8981\u5c5e\u6027\uff0c\u5b83\u4eec\u7528\u4e8e\u6807\u8bc6\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907\u3002"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u4e3b\u8bbe\u5907\u53f7\uff1a\u7528\u4e8e\u6807\u8bc6\u8bbe\u5907\u7684\u7c7b\u578b\u6216\u8bbe\u5907\u9a71\u52a8\u3002\u4f8b\u5982\uff0c\u6240\u6709\u7684 SCSI \u786c\u76d8\u90fd\u6709\u76f8\u540c\u7684\u4e3b\u8bbe\u5907\u53f7\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u6b21\u8bbe\u5907\u53f7\uff1a\u7528\u4e8e\u6807\u8bc6\u540c\u4e00\u7c7b\u578b\u7684\u8bbe\u5907\u4e2d\u7684\u5177\u4f53\u8bbe\u5907\u3002\u4f8b\u5982\uff0c\u7cfb\u7edf\u4e2d\u7684\u7b2c\u4e00\u4e2a SCSI \u786c\u76d8\u7684\u6b21\u8bbe\u5907\u53f7\u662f 0\uff0c\u7b2c\u4e8c\u4e2a SCSI \u786c\u76d8\u7684\u6b21\u8bbe\u5907\u53f7\u662f 1\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u8bbe\u5907\u53f7\u662f\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4f7f\u7528\u7684\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u5904\u7406\u8bbe\u5907\u53f7\u3002\u5f53\u4f60\u6253\u5f00\u4e00\u4e2a\u8bbe\u5907\u6587\u4ef6\u65f6\uff0c\u7cfb\u7edf\u4f1a\u6839\u636e\u8bbe\u5907\u6587\u4ef6\u7684\u8bbe\u5907\u53f7\u627e\u5230\u76f8\u5e94\u7684\u8bbe\u5907\u9a71\u52a8\uff0c\u7136\u540e\u7531\u8bbe\u5907\u9a71\u52a8\u5904\u7406\u4f60\u7684\u8bfb\u5199\u8bf7\u6c42\u3002(\u4e5f\u5c31\u662f\u8bf4\u5185\u6838\u7ef4\u62a4\u4e86\u4e00\u4e2a\u8bbe\u5907\u53f7->\u9a71\u52a8\u7684 jump table)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u6587\u4ef6\u548c\u6587\u4ef6\u540d\u5728\u6587\u4ef6\u7cfb\u7edf\u4e4b\u4e2d\u662f\u4e24\u4e2a\u4e1c\u897f\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u6587\u4ef6 file: \u662f\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684 metadata\uff0c\u6216\u8005\u53eb inode"}),"\n",(0,r.jsx)(n.li,{children:"\u6587\u4ef6\u540d\uff1a\u662f\u5bf9\u6587\u4ef6\u7684\u4e00\u4e2a link \u6216\u8005 ref, \u6587\u4ef6\u540d\u662f\u7531\u6587\u4ef6\u5939 dir \u6765\u7ef4\u62a4\u7684\u4e00\u4e2a dir entry"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"struct dirent {\n  ushort inum;\n  char name[DIRSIZ];\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"#define T_DIR     1   // Directory\n#define T_FILE    2   // File\n#define T_DEVICE  3   // Device\n\nstruct stat {\n  int dev;     // File system's disk device\n  uint ino;    // Inode number\n  short type;  // Type of file\n  short nlink; // Number of links to file\n  uint64 size; // Size of file in bytes\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"file \u662f\u7531\u4e00\u4e9b\u7c7b\u578b\u4fe1\u606f\u3001\u6743\u9650\u4fe1\u606f\u3001\u5f15\u7528\u8ba1\u6570\u7b49\u4fe1\u606f+data \u7ec4\u6210\u7684\uff08\u5176\u4e2d\u7684 data \u5c31\u662f inode\uff09"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"struct file {\n  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;\n  int ref; // reference count\n  char readable;\n  char writable;\n  struct pipe *pipe; // FD_PIPE\n  struct inode *ip;  // FD_INODE and FD_DEVICE\n  uint off;          // FD_INODE\n  short major;       // FD_DEVICE\n};\n\n// in-memory copy of an inode\nstruct inode {\n  uint dev;           // Device number\n  uint inum;          // Inode number\n  int ref;            // Reference count\n  struct sleeplock lock; // protects everything below here\n  int valid;          // inode has been read from disk?\n\n  short type;         // copy of disk inode\n  short major;\n  short minor;\n  short nlink;\n  uint size;\n  uint addrs[NDIRECT+1];\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"link"})," : \u7ed9\u6307\u5b9a\u7684 inode \u52a0\u4e0a\u53e6\u4e00\u4e2a\u540d\u5b57"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'open("a", O_CREATE);\nlink("a", "b"); // \u73b0\u5728\u540d\u5b57\u201cb\u201d\u4e5f\u6307\u5411\u201ca\u201d\u5bf9\u5e94\u7684inode\u4e86\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"unlink"}),": \u5220\u9664\u4e00\u4e2a\u540d\u5b57"]}),"\n",(0,r.jsx)(n.p,{children:"\u4e00\u4e2a\u6709\u8da3\u7684\u5e94\u7528\u662f\u521b\u5efa\u4e34\u65f6\u6587\u4ef6"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'open("temp", O_CREATE|O_RDWR);\nunlink("temp");\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6b64\u65f6\u53ea\u6709 open \u8fd4\u56de\u7684\u6216\u8005\u5176\u5b83\u5730\u65b9\u7684\u62ff\u5230\u7684 fd \u8fd8\u80fd\u8bbf\u95ee\u4e34\u65f6\u6587\u4ef6"}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u8fd9\u4e2a\u8fdb\u7a0b\u9000\u51fa\uff0c\u56de\u6536 fd \u7684\u65f6\u5019\uff0ctemp \u8fd9\u4e2a\u6587\u4ef6\u7684\u5f15\u7528\u8ba1\u6570\u4e3a 0\uff0c\u4f1a\u88ab\u6e05\u9664"}),"\n",(0,r.jsx)(n.p,{children:"\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0cshell \u5927\u90e8\u5206\u7684\u547d\u4ee4\u90fd\u662f\u653e\u5728\u5176\u4ed6\u6587\u4ef6\u4e4b\u4e2d\u8c03\u7528\u6765\u5b9e\u73b0\u7684\uff0c\u5373 fork+exec\uff0c\u4f46 cd \u662f\u5728 shell \u91cc\u9762\u7684"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int main(void) {\n    static char buf[100];\n    int fd;\n\n    // Ensure that three file descriptors are open.\n    while ((fd = open(\"console\", O_RDWR)) >= 0) {\n        if (fd >= 3) {\n            close(fd);\n            break;\n        }\n    }\n\n    // Read and run input commands.\n    while (getcmd(buf, sizeof(buf)) >= 0) {\n        if (buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' ') {\n            // Chdir must be called by the parent, not the child.\n            buf[strlen(buf) - 1] = 0; // chop \\n\n            if (chdir(buf + 3) < 0)\n                fprintf(2, \"cannot cd %s\\n\", buf + 3);\n            continue;\n        }\n        if (fork1() == 0)\n            runcmd(parsecmd(buf));\n        wait(0);\n    }\n    exit(0);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u56e0\u4e3a cd \u7684\u65f6\u5019\u662f shell \u8fdb\u7a0b cd \u800c\u4e0d\u662f\u5b50\u8fdb\u7a0b cd"}),"\n",(0,r.jsx)(n.h4,{id:"15",children:"1.5"}),"\n",(0,r.jsx)(n.p,{children:"Unix syscall interface standard: POSIX(Portable Operating System Interface)"}),"\n",(0,r.jsx)(n.h4,{id:"lab01-utils",children:"lab01 Utils"}),"\n",(0,r.jsx)(n.p,{children:"boot xv6\uff1a\u7167\u505a\u5373\u53ef\uff0c\u6216\u53c2\u7167\u8e29\u5751\u8bb0\u5f55"}),"\n",(0,r.jsx)(n.p,{children:"sleep: \u77e5\u9053 user.h \u662f syscall \u5b9a\u4e49\u7684\u5730\u65b9\u5373\u53ef\uff0c\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b syscall \u662f\u5565\u610f\u601d"}),"\n",(0,r.jsx)(n.p,{children:"pingpong: \u6ce8\u610f child process \u548c parent process \u7684\u6536\u53d1\u987a\u5e8f\uff0c\u4e0d\u8981\u8ba9\u4e24\u4e2a\u7ba1\u9053\u90fd block \u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6ce8\u610f\u6253\u5370\u7684 fd \u662f\u4ec0\u4e48"}),"\n",(0,r.jsx)(n.p,{children:"\u53c2\u8003\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include "kernel/stat.h"\n#include "kernel/types.h"\n#include "user/user.h"\nint main() {\n  // ping-pong: two thread byte communication\n  // note the pipe is unidirectional\n  int p2c_pipe[2];\n  int c2p_pipe[2];\n  pipe(p2c_pipe);\n  pipe(c2p_pipe);\n  if ((fork()) == 0) {\n    // child process\n    close(0);\n    dup(p2c_pipe[0]);\n    close(p2c_pipe[0]);\n    close(p2c_pipe[1]);\n\n    const char *send = "pong\\n";\n    char *received = malloc(5);\n    int pid = getpid();\n    read(0, received, 5);\n    fprintf(1, "%d: received %s", pid, received);\n    write(c2p_pipe[1], send, sizeof(send)); // write back\n\n    free(received);\n  } else {\n    close(0);\n    dup(c2p_pipe[0]);\n    close(c2p_pipe[0]);\n    close(c2p_pipe[1]);\n\n    // keep the STDOUT\'s fd: 1\n    const char *send = "ping\\n";\n    write(p2c_pipe[1], send, sizeof(send));\n\n    char *received = malloc(5);\n    int pid = getpid();\n    read(0, received, 5);\n\n    fprintf(1, "%d: received %s", pid, received);\n    free(received);\n  }\n  exit(0);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"primes: \u8fd9\u4e2a lab \u6709\u4e00\u4e9b\u96be\u5ea6"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u7b2c\u4e00\u6b21\u505a\u7684\u65f6\u5019\u5176\u5b9e\u6ca1\u641e\u61c2"}),"\n",(0,r.jsx)(n.p,{children:"\u9996\u5148\u8981\u7406\u89e3\u9898\u76ee\u610f\u601d\uff1a\u80cc\u666f\u6750\u6599\u7ed9\u51fa\u4e86\u8fd9\u6837\u7684\u7d20\u6570\u5e76\u884c\u7b5b\u6cd5"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"p = get a number from left neighbor\nprint p\nloop:\n    n = get a number from left neighbor\n    if (p does not divide n)\n        send n to right neighbor\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5176\u4e2d\u6bcf\u4e00\u6b21\u7b5b\u4e4b\u95f4\u90fd\u662f\u7ba1\u9053\uff0c\u800c\u6bcf\u4e00\u8f6e\u7b5b\u672c\u8eab\u662f\u4e00\u4e2a\u8fdb\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:'\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u5728\u67d0\u4e2a\u5faa\u73af\u4e4b\u4e2d\uff0c\u5b8c\u6210 "\u4ece\u4e0a\u4e00\u4e2a\u7ba1\u9053\u7684\u8f93\u5165\u8bfb\u53d6\u4e0a\u4e00\u6b21\u7b5b\u5269\u4e0b\u7684\u6570" \u5230 "\u91c7\u7528\u8bfb\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6570\u4f5c\u4e3a\u65b0\u7684\u7b5b\u5b50\uff0c\u5e76\u5c06\u5b83\u6253\u5370" \u5230 \u201c\u65b0\u5efa\u7ba1\u9053\uff0c\u5411\u7ba1\u9053\u91cc\u9762\u5199\u5165\u6570\u636e\u201d'}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u6700\u5173\u952e\u7684\u5176\u5b9e\u5728\u4e8e\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u6211\u4eec\u600e\u4e48\u6837\u53bb\u6307\u793a\u8bfb\u5230\u7684\u6570\u662f\u4e0d\u662f\u7b2c\u4e00\u4e2a\uff0c\u600e\u6837\u5224\u5b9a\u524d\u9762\u7684\u6570\u5df2\u7ecf\u8bfb\u5b8c\u548c\u6574\u4e2a\u65b9\u6cd5\u5df2\u7ecf\u7ed3\u675f"}),"\n",(0,r.jsx)(n.li,{children:"\u6211\u4eec\u600e\u4e48\u5904\u7406\u65b0\u5efa\u7ba1\u9053\u548c\u65b0\u5efa\u5b50\u8fdb\u7a0b\uff0c\u5305\u62ec\u5b83\u4eec\u4e4b\u95f4\u7684\u5148\u540e\u987a\u5e8f"}),"\n",(0,r.jsx)(n.li,{children:"\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u5806\u548c\u6808\uff0c\u6240\u4ee5\u4e0a\u8ff0\u7684\u6807\u8bc6\u7b26\u5e94\u8be5\u8981\u4e48\u662f\u672c\u5730\u91cf\uff0c\u8981\u4e48\u662f\u7ba1\u9053\u8fd9\u79cd\u5168\u5c40\u7ef4\u62a4\u7684"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u8fd8\u6709\u5c31\u662f\u6ce8\u610f\u63d0\u793a\uff0c\u4f8b\u5982:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u63d0\u793a\u91cc\u9762\u8bf4\u4e86",(0,r.jsx)(n.code,{children:"Be careful to close file descriptors that a process doesn't need, because otherwise your program will run xv6 out of resources before the first process reaches 35."}),"\u8fd9\u5b9e\u9645\u4e0a\u8bf4\u660e\u4e86\u5f53\u4f60\u7684\u8f93\u51fa\u91cc\u9762 ",(0,r.jsx)(n.code,{children:"$"}),"\u7b26\u53f7\u5939\u5728\u8f93\u51fa\u4e2d\u95f4\u7684\u65f6\u5019\uff0c\u662f\u56e0\u4e3a\u4f60\u7684\u7956\u5148\u8fdb\u7a0b\u6ca1\u6709\u7b49\u5230\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u90fd\u7ed3\u675f\u5c31\u9000\u51fa\u4e86\uff08\u6240\u4ee5 xv6 shell \u8ba4\u4e3a\u8981\u6267\u884c\u4e0b\u4e00\u6b21\u547d\u4ee4\u8f93\u5165\uff0c\u8f93\u51fa\u4e86",(0,r.jsx)(n.code,{children:"$"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Hint: ",(0,r.jsx)(n.code,{children:"read"})," returns zero when the write-side of a pipe is closed. \u8fd9\u4e00\u6761\u5b9e\u9645\u4e0a\u63d0\u793a\u4e86\u5faa\u73af\u7684\u5199\u6cd5"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4e0b\u9762\u7ed9\u51fa\u4e2a\u4eba\u5b9e\u73b0\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include "kernel/stat.h"\n#include "kernel/types.h"\n#include "user/user.h"\nint main() {\n  int curNumber = -1;\n  int p[2];\n  pipe(p);\n\n  int cnt = 0;\n  int div = 2;\n\n  if (fork() == 0) {\n    close(0);\n    dup(p[0]);\n    close(p[0]);\n    close(p[1]);\n\n    int newpipe[2];\n    int ret = 0;\n    int flag = 0; // if there are primes in the pipe.\n\n    // now pipe input is fd: 0\n    while (1) {\n      ret = read(0, &curNumber, sizeof(int));\n      //   fprintf(1, "cnt=%d, curNumber=%d\\n", cnt, curNumber);\n      //   all commented fprintf are some log info\n      cnt++;\n      if (cnt == 1) {\n        div = curNumber; // the prime to div\n        pipe(newpipe); // new pipe\n      }\n      if (ret == 0) {\n        // the parent process has written all the numbers and exit\n        if (flag == 0) {\n          // no prime left\n          // fprintf(1, "over\\n");\n          close(p[0]);\n          close(p[1]);\n          close(newpipe[0]);\n          close(newpipe[1]);\n          break;\n        } else if (fork() == 0) {\n          // the new child process(next stage)\n          // reset cnt and flag\n          cnt = 0;\n          flag = 0;\n\n          close(0);\n          dup(newpipe[0]);\n          close(newpipe[0]);\n          close(newpipe[1]);\n        } else {\n          close(0); // release the pipe and process\n          close(1);\n          close(p[0]);\n          close(p[1]);\n          wait(0); // wait for the latest process to exit, a wait "stack"\n          exit(0);\n        }\n      } else {\n        if (cnt == 1) {\n          // fprintf(1, "process: %d\\n", getpid());\n          fprintf(1, "prime %d\\n", curNumber);\n        }\n        if (curNumber % div != 0) {\n          write(newpipe[1], &curNumber, sizeof(int));\n          flag = 1;\n        }\n      }\n    }\n  }\n\n  close(p[0]);\n  for (int i = 2; i <= 35; i++) {\n    write(p[1], &i, sizeof(int));\n  }\n  close(p[1]);\n  wait(0);\n  exit(0);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5b9e\u9645\u4e0a\u662f\uff0c\u5148\u521b\u5efa pipe\uff0c\u7136\u540e\u628a\u6570\u636e\u653e\u5728 pipe \u91cc\u9762\uff0c\u7b49\u5230 read \u8fd4\u56de\u4e00\u4e2a 0\uff08\u7236\u8fdb\u7a0b\u5199\u5b8c\uff0c\u7ba1\u9053\u8bfb\u5b8c\uff0c\u7ba1\u9053\u5199\u7aef\u5df2\u7ecf\u6ca1\u6709\u5f15\u7528\uff09\u7684\u65f6\u5019\uff0c\u53bb fork \u4e00\u4e2a\u8fdb\u7a0b\uff0c\u7136\u540e\u201c\u627f\u63a5\u201d\u8fd9\u4e2a\u7ba1\u9053\u7684\u6570\u636e"}),"\n",(0,r.jsx)(n.p,{children:"find:"}),"\n",(0,r.jsx)(n.p,{children:"\u6839\u636e\u5b83\u7684 hint \u53bb\u770b ls.c\uff0c\u4f9d\u846b\u82a6\u753b\u74e2\u5373\u53ef"}),"\n",(0,r.jsx)(n.p,{children:"xargs\uff1a"}),"\n",(0,r.jsx)(n.p,{children:"\u4e5f\u662f\u7406\u89e3\u5c31\u4e0d\u96be\uff0c\u6ce8\u610f\u4e0d\u9700\u8981\u81ea\u5df1\u5199\u7ba1\u9053\u548c\u6267\u884c\u5206\u8bcd\u4e4b\u7c7b\uff0c\u53ea\u9700\u8981\u8bfb\u8f93\u5165\u5373\u53ef"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"chapter-2",children:"Chapter 2"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"An operating system must fulfill three requirements: multiplexing, isolation and interaction"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'xv6 runs on a multi-core RISC-V microprocessor and is written in "LP64"C'}),"\n",(0,r.jsxs)(n.p,{children:["The CPU in a complete computer is surrounded by support hardware, ",(0,r.jsx)(n.strong,{children:"much of it in the form of I/O interfaces"})]}),"\n",(0,r.jsx)(n.p,{children:"in xv6, this includes a RAM, a ROM containg boot code, a serial connection to the user's board/screen, and a disk for storage"}),"\n",(0,r.jsx)(n.h4,{id:"21-abstracting-physical-resources",children:"2.1 Abstracting physical resources"}),"\n",(0,r.jsx)(n.p,{children:"why?"}),"\n",(0,r.jsx)(n.p,{children:"\u4e3a\u4ec0\u4e48\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u505a\u6210\u4e00\u4e2a\u5e93\uff1f\u2014\u2014\u4e8b\u5b9e\u4e0a\u5728\u5d4c\u5165\u5f0f\u548c\u4e00\u4e9b\u5b9e\u65f6\u7cfb\u7edf\u91cc\u9762\u662f\u8fd9\u6837\u7684"}),"\n",(0,r.jsx)(n.p,{children:"\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u8981\u63d0\u4f9b\u5f3a\u9694\u79bb\u6027"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Such a cooperative time-sharing scheme may be OK if all applications trust each other and have no ",(0,r.jsx)(n.a,{href:"http://bugs.It",children:"bugs.It"}),"'s more typical for applications to not trust each other, and to have bugs"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u4e3a\u4e86\u5b9e\u73b0\u5f3a\u9694\u79bb\u6027\uff0c\u907f\u514d\u7a0b\u5e8f\u5bf9\u4e8e\u786c\u4ef6\u8d44\u6e90\u7684\u76f4\u63a5\u8bbf\u95ee\u662f\u5f88\u6709\u5e2e\u52a9\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981",(0,r.jsx)(n.strong,{children:"\u5c06 resource \u62bd\u8c61\u6210 service"})]}),"\n",(0,r.jsxs)(n.p,{children:["\u4f8b\u5982\u5728 Unix \u91cc\u9762\uff0c\u7a0b\u5e8f\u5bf9\u78c1\u76d8\u6ca1\u6709\u76f4\u63a5\u7684\u6982\u5ff5\uff0c\u8bfb\u5199\u662f\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u548c pathname \u5b8c\u6210\u7684\uff1b\u7a0b\u5e8f\u5bf9\u4e8e CPU \u548c\u65f6\u5206\u5171\u4eab\u6ca1\u6709\u76f4\u63a5\u7684\u6982\u5ff5\uff0c\u8fd9\u90e8\u5206\u662f\u7531\u7cfb\u7edf\u7684\u8c03\u5ea6\u7b56\u7565\u638c\u63a7\u7684\uff1b\u7a0b\u5e8f\u5bf9\u4e8e\u7269\u7406\u5185\u5b58\u6ca1\u6709\u76f4\u63a5\u7684\u6982\u5ff5\uff0c\u5bf9\u5185\u5b58\u7684\u64cd\u4f5c\u662f\u901a\u8fc7",(0,r.jsx)(n.code,{children:"exec"}),"syscall \u5b9e\u73b0\u7684\uff0c\u5982\u679c\u5185\u5b58\u7d27\u5f20\u7684\u8bdd\uff0c\u4e00\u4e9b\u8fdb\u7a0b\u7684\u6570\u636e\u751a\u81f3\u4f1a\u88ab\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a"]}),"\n",(0,r.jsx)(n.h4,{id:"22-user-mode-supervisor-mode-and-syscalls",children:"2.2 User mode, supervisor mode, and syscalls"}),"\n",(0,r.jsx)(n.p,{children:"\u4e3a\u4e86\u7ef4\u6301\u5f3a\u9694\u79bb\u6027\uff0c\u7528\u6237\u7a0b\u5e8f\u5fc5\u7136\u4e0d\u80fd\u6539\u5199\u7cfb\u7edf\u7a0b\u5e8f\uff0c\u8fd9\u662f\u7531 CPU \u6765\u5b9e\u73b0\u7684"}),"\n",(0,r.jsx)(n.p,{children:"\u786c\u4ef6\u4e0a\u63d0\u4f9b\u4e09\u79cd mode: machine mode, supervisor mode and user mode"}),"\n",(0,r.jsx)(n.p,{children:"\u5176\u4e2d machine mode \u5728\u7ecf\u8fc7\u4e00\u4e9b\u521d\u59cb\u7684\u5f15\u5bfc\u548c\u914d\u7f6e\u8ba1\u7b97\u673a\u7684\u4ee3\u7801\u4e4b\u540e\u5c31\u8f6c\u5230 supervisor mode"}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e\uff0c\u4e5f\u662f CPU \u786c\u4ef6\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7279\u6743\u6307\u4ee4\uff0c\u5982\u679c\u5728\u7528\u6237\u6001\u6267\u884c\u4e86\u7279\u6743\u6307\u4ee4\u5c31\u4f1a"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:'"then the CPU doesn\'t execute the instruction, but switch to supervisor-mode code that can terminate the application"'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u66f4\u5177\u4f53\u6765\u8bf4\uff0cCPU \u4f1a\u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38\uff0c\u7136\u540e\u4f1a\u53d1\u751f\u4e2d\u65ad\uff0c\u6839\u636e\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u4ee3\u7801\u5904\u6267\u884c"}),"\n",(0,r.jsx)(n.p,{children:"Q\uff1a\u4ee3\u7801\u600e\u4e48\u77e5\u9053\u8981\u7ec8\u6b62\u54ea\u4e2a\u8fdb\u7a0b\u5462\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"A\uff1aRISCV \u4e4b\u4e2d\u6709\u4e00\u5806\u4e2d\u65ad\u76f8\u5173\u7684\u5bc4\u5b58\u5668\uff0c\u5728 xv6 \u8fd9\u79cd\u6a21\u62df\u5668\u4e4b\u4e2d\u662f stvec, sepc, scause,stval......\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4fdd\u5b58\u4e86\u4e2d\u65ad\u53d1\u751f\u7684\u5730\u5740\uff0c\u4e2d\u65ad\u7684\u539f\u56e0\uff08\u4e2d\u65ad\u7c7b\u578b+\u7f16\u53f7\uff09\uff0c\u4e2d\u65ad\u5904\u7406\u5668\u72b6\u6001\u4fe1\u606f,.....\u8fd9\u662f\u5176\u4e00\uff1b\u4e2d\u65ad\u5185\u90e8\u4e00\u822c\u4e0d\u53d1\u751f\u8fdb\u7a0b\u8c03\u5ea6\uff08\u4fdd\u8bc1\u4e86\u8fdb\u7a0b\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff09\uff0c\u800c\u64cd\u4f5c\u7cfb\u7edf\u662f\u77e5\u9053\u5f53\u524d\u8fdb\u7a0b\u7684\uff08xv6 \u4e4b\u4e2d proc.c \u7684 myproc\uff09"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5728\u5904\u7406\u4e2d\u65ad\u7684\u8fc7\u7a0b\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6\u3002\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff08ISR\uff09\u7684\u76ee\u7684\u662f\u5feb\u901f\u54cd\u5e94\u786c\u4ef6\u4e8b\u4ef6\uff0c\u5982 I/O \u5b8c\u6210\u3001\u5b9a\u65f6\u5668\u5230\u671f\u7b49\u3002\u4e3a\u4e86\u4fdd\u6301\u7cfb\u7edf\u7684\u54cd\u5e94\u6027\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u9700\u8981\u5c3d\u53ef\u80fd\u77ed\u4e14\u9ad8\u6548\uff0c\u4ee5\u4fbf\u5c3d\u5feb\u5b8c\u6210\u4e2d\u65ad\u5904\u7406\u5e76\u8fd4\u56de\u5230\u88ab\u4e2d\u65ad\u7684\u8fdb\u7a0b\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\uff0cCPU \u5904\u4e8e\u5185\u6838\u6a21\u5f0f\uff08\u6216\u79f0\u4e3a\u7279\u6743\u6a21\u5f0f\uff09\uff0c\u6b64\u65f6\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6682\u505c\u5f53\u524d\u7528\u6237\u8fdb\u7a0b\u7684\u6267\u884c\uff0c\u4fdd\u5b58\u5176\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u5728\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\uff0c\u5176\u4ed6\u8fdb\u7a0b\u7684\u8c03\u5ea6\u548c\u6267\u884c\u88ab\u6682\u505c\uff0c\u76f4\u5230\u4e2d\u65ad\u5904\u7406\u5b8c\u6210\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4e00\u65e6\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6062\u590d\u4e4b\u524d\u88ab\u4e2d\u65ad\u7684\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u8be5\u8fdb\u7a0b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u4e0a\u4e0b\u6587\u5207\u6362\uff08Context Switching\uff09\uff0c\u5b83\u6d89\u53ca\u5230\u5c06 CPU \u7684\u63a7\u5236\u6743\u4ece\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5207\u6362\u56de\u7528\u6237\u8fdb\u7a0b\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4\u8f83\u957f\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u91c7\u7528\u4e2d\u65ad\u5d4c\u5957\uff08Nested Interrupts\uff09\u6216\u4f7f\u7528\u8f6f\u4e2d\u65ad\uff08Soft Interrupts\uff09\u7b49\u6280\u672f\u6765\u5904\u7406\u66f4\u590d\u6742\u7684\u4e2d\u65ad\u5904\u7406\u903b\u8f91\uff0c\u540c\u65f6\u5141\u8bb8\u5176\u4ed6\u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c\u3002\u4f46\u8fd9\u4e9b\u6280\u672f\u901a\u5e38\u7528\u4e8e\u7279\u5b9a\u7684\u573a\u666f\uff0c\u5982\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08RTOS\uff09\u6216\u9700\u8981\u5904\u7406\u5927\u91cf\u4e2d\u65ad\u7684\u7cfb\u7edf\u3002\u5728\u5927\u591a\u6570\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e2d\u65ad\u5904\u7406\u4ecd\u7136\u662f\u4e00\u4e2a\u5feb\u901f\u4e14\u4e0d\u6d89\u53ca\u8fdb\u7a0b\u8c03\u5ea6\u7684\u8fc7\u7a0b\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5728 Linux \u4e4b\u4e2d\uff0c\u4e2d\u65ad\u53ef\u4ee5\u88ab\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4e2d\u65ad\u4e2d\u65ad\uff0c\u5f62\u6210\u4e2d\u65ad\u5d4c\u5957"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Linux \u5c06\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5206\u4e3a\u4e0a\u4e0b\u4e24\u90e8\u5206\uff0c\u9700\u8981\u7d27\u6025\u5904\u7406\u7acb\u5373\u6267\u884c\u7684\u5f52\u4e3a\u4e0a\u534a\u90e8\uff0c\u4e0d\u90a3\u4e48\u7d27\u6025\u7684\u5f52\u4e3a\u4e0b\u534a\u90e8\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4fbf\u6d89\u53ca\u5230\u4e86\u5f00\u5173\u4e2d\u65ad\u7684\u95ee\u9898\u3002\u5f00\u4e2d\u65ad\uff0c\u5373 EFLAGS \u7684 IF \u4f4d\u7f6e 1\uff0c\u8868\u793a\u5141\u8bb8\u54cd\u5e94\u4e2d\u65ad\uff1b\u5173\u4e2d\u65ad\uff0c\u5373 EFLAGS \u7684 IF \u4f4d\u7f6e 0\uff0c\u8868\u793a\u4e0d\u5141\u8bb8\u54cd\u5e94\u4e2d\u65ad\u3002"}),"\n",(0,r.jsx)(n.p,{children:"**1\u3001**\u4e0a\u534a\u90e8\u5206\u662f\u523b\u4e0d\u5bb9\u7f13\u7684\uff0c\u9700\u8981\u7acb\u5373\u6267\u884c\u7684\u90e8\u5206\uff0c\u6240\u4ee5\u8981\u5728\u5173\u4e2d\u65ad\u7684\u72b6\u6001\u4e0b\u6267\u884c\u3002"}),"\n",(0,r.jsx)(n.p,{children:"**2\u3001**\u800c\u4e0b\u534a\u90e8\u5206\u4e0d\u90a3\u4e48\u7d27\u6025\uff0c\u5728\u5f00\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\uff0c\u5982\u679c\u6b64\u65f6\u6709\u65b0\u7684\u4e2d\u65ad\u53d1\u751f\uff0c\u5f53\u524d\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4fbf\u4f1a\u6362\u4e0b CPU\uff0cCPU \u4f1a\u53e6\u5bfb\u65f6\u95f4\u91cd\u65b0\u8c03\u5ea6\uff0c\u5b8c\u6210\u6574\u4e2a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u5bf9\u4e8e\u8fd9\u6837\u7684\u4e2d\u65ad\u5d4c\u5957\uff0c\u5b9e\u9645\u4e0a\u662f\u4fdd\u5b58\u4e86\u524d\u9762\u4e2d\u65ad\u7684\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u4e2d\u65ad\u6808\uff0c\u5728\u8fc7\u7a0b\u4e4b\u4e2d\u4e0d\u4f1a\u5207\u5230\u6b63\u5e38\u8fd0\u884c\u7684\u8fdb\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u7528\u6237\u7ea7\u6307\u4ee4\u6784\u6210\u4e86 user space\uff0c\u518d\u52a0\u4e0a\u7279\u6743\u7ea7\u6784\u6210\u4e86 kernel space"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd0\u884c\u518d kernel space \u7684 software \u5c31\u662f kernel"}),"\n",(0,r.jsxs)(n.p,{children:["\u7528\u6237\u7a0b\u5e8f\u4e0d\u80fd\u76f4\u63a5\u6267\u884c\u7279\u6743\u6307\u4ee4\uff0cCPU \u63d0\u4f9b\u4e86\u7279\u6b8a\u7684\u6307\u4ee4\uff08\u5728 RISCV \u91cc\u9762\u662f ecall\uff09\u6765\u5c06 user mode \u5207\u6362\u5230 supervisor mode \u5e76",(0,r.jsx)(n.strong,{children:"enter the kernel at an entry point specified by kernel"}),"(\u8fd9\u5c31\u662f syscall)"]}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u5207\u6362\u5230 supervisor mode \u7684\u65f6\u5019\uff0ckernel \u4f1a\u5bf9 syscall \u63d0\u4f9b\u7684 argument \u505a validation\uff0c\u4ee5\u6b64\u6765\u51b3\u5b9a\u540e\u7eed\u7684\u64cd\u4f5c"}),"\n",(0,r.jsx)(n.h4,{id:"23-kernel-organization",children:"2.3 Kernel organization"}),"\n",(0,r.jsx)(n.p,{children:"monolithic kernel and micro kernel: \u5b8f\u5185\u6838\u548c\u5fae\u5185\u6838"}),"\n",(0,r.jsx)(n.p,{children:"OS \u9996\u5148\u8981\u89e3\u51b3\u7684\u8bbe\u8ba1\u662f\uff0c\u6709\u591a\u5c11 OS \u7684\u90e8\u5206\u8fd0\u884c\u5728 supervisor mode?"}),"\n",(0,r.jsx)(n.p,{children:"\u8ba9\u5168\u90e8\u7684 OS \u8fd0\u884c\u5728 supervisor mode \u4e0a\u662f\u5b8f\u5185\u6838\uff0c\u4f8b\u5982 Linux \u7684\u601d\u8def\uff0c\u597d\u5904\u662f\u6548\u7387\uff08\u4f8b\u5982\u5185\u6838\u5185\u90e8\u5404\u6a21\u5757\u4e4b\u95f4\u7684\u901a\u4fe1\u66f4\u7b80\u5355\u4e86\uff09\uff0c\u574f\u5904\u662f\u5bf9\u4ee3\u7801\u7684\u66f4\u9ad8\u8981\u6c42\uff08\u5185\u6838\u4ee3\u7801\u6570\u91cf\u7684\u81a8\u80c0\uff0c\u4e00\u65e6\u5185\u6838\u9519\u8bef\u5c31\u5fc5\u987b\u91cd\u542f\u7535\u8111\uff09"}),"\n",(0,r.jsx)(n.p,{children:"\u65b0\u5174\u7684\u5fae\u5185\u6838\u601d\u8def\u662f OS \u628a\u6587\u4ef6\u7cfb\u7edf\u7b49\u5927\u91cf\u90e8\u5206\u4f5c\u4e3a server \u8fd0\u884c\u5728\u7528\u6237\u6001\uff0c\u53ea\u5c06\u5fc5\u8981\u7684\u5c11\u91cf\u4ee3\u7801\u548c server \u4e4b\u95f4\u901a\u4fe1\u7684\u4ee3\u7801\u653e\u5728 supervisor mode \u4e0b\u9762\u8fd0\u884c\uff0c\u8fd9\u6837\u7684\u597d\u5904\u6709\u6bd4\u5982 supervisor mode \u4e0b\u9762\u7684\u4ee3\u7801\u6b64\u65f6\u5c11\u5230\u53ef\u4ee5\u505a\u7a0b\u5e8f\u5b89\u5168\u6027\u9a8c\u8bc1"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Fig2.2 xv6 kernel \u5404\u6587\u4ef6\u7684\u7528\u9014"})}),"\n",(0,r.jsx)(n.p,{children:"(\u5404\u4e2a\u6587\u4ef6\u8fd1\u4f3c\u6a21\u5757\u5316\uff0c\u5404\u4e2a\u6a21\u5757\u4e4b\u95f4\u7684\u63a5\u53e3\u5b9a\u4e49\u5728 kernel/defs.h)"}),"\n",(0,r.jsx)(n.h4,{id:"24-code-xv6-organization",children:"2.4 Code: xv6 organization"}),"\n",(0,r.jsx)(n.h4,{id:"25-process-overview",children:"2.5 Process overview"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"The unit of isolation in xv6 (as in other Unix operating systems)is a process. The process abstraction prevents one process from wrecking or spying on other process's memory, CPU, fd, etc"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["The process provides the illusion to a program that it has its own private machine.(e.g own memory system(",(0,r.jsx)(n.strong,{children:"address space"}),"), own CPU, own disk)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"kernel/proc.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"// Saved registers for kernel context switches.\nstruct context {\n  uint64 ra;\n  uint64 sp;\n\n  // callee-saved\n  uint64 s0;\n  uint64 s1;\n  uint64 s2;\n  uint64 s3;\n  uint64 s4;\n  uint64 s5;\n  uint64 s6;\n  uint64 s7;\n  uint64 s8;\n  uint64 s9;\n  uint64 s10;\n  uint64 s11;\n};\n\n// Per-CPU state.\nstruct cpu {\n  struct proc *proc;          // The process running on this cpu, or null.\n  struct context context;     // swtch() here to enter scheduler().\n  int noff;                   // Depth of push_off() nesting.\n  int intena;                 // Were interrupts enabled before push_off()?\n};\n\nextern struct cpu cpus[NCPU];\n\n// per-process data for the trap handling code in trampoline.S.\n// sits in a page by itself just under the trampoline page in the\n// user page table. not specially mapped in the kernel page table.\n// the sscratch register points here.\n// uservec in trampoline.S saves user registers in the trapframe,\n// then initializes registers from the trapframe's\n// kernel_sp, kernel_hartid, kernel_satp, and jumps to kernel_trap.\n// usertrapret() and userret in trampoline.S set up\n// the trapframe's kernel_*, restore user registers from the\n// trapframe, switch to the user page table, and enter user space.\n// the trapframe includes callee-saved user registers like s0-s11 because the\n// return-to-user path via usertrapret() doesn't return through\n// the entire kernel call stack.\nstruct trapframe {\n  /*   0 */ uint64 kernel_satp;   // kernel page table\n  /*   8 */ uint64 kernel_sp;     // top of process's kernel stack\n  /*  16 */ uint64 kernel_trap;   // usertrap()\n  /*  24 */ uint64 epc;           // saved user program counter\n  /*  32 */ uint64 kernel_hartid; // saved kernel tp\n  /*  40 */ uint64 ra;\n  /*  48 */ uint64 sp;\n  /*  56 */ uint64 gp;\n  /*  64 */ uint64 tp;\n  /*  72 */ uint64 t0;\n  /*  80 */ uint64 t1;\n  /*  88 */ uint64 t2;\n  /*  96 */ uint64 s0;\n  /* 104 */ uint64 s1;\n  /* 112 */ uint64 a0;\n  /* 120 */ uint64 a1;\n  /* 128 */ uint64 a2;\n  /* 136 */ uint64 a3;\n  /* 144 */ uint64 a4;\n  /* 152 */ uint64 a5;\n  /* 160 */ uint64 a6;\n  /* 168 */ uint64 a7;\n  /* 176 */ uint64 s2;\n  /* 184 */ uint64 s3;\n  /* 192 */ uint64 s4;\n  /* 200 */ uint64 s5;\n  /* 208 */ uint64 s6;\n  /* 216 */ uint64 s7;\n  /* 224 */ uint64 s8;\n  /* 232 */ uint64 s9;\n  /* 240 */ uint64 s10;\n  /* 248 */ uint64 s11;\n  /* 256 */ uint64 t3;\n  /* 264 */ uint64 t4;\n  /* 272 */ uint64 t5;\n  /* 280 */ uint64 t6;\n};\n\nenum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };\n\n// Per-process state\nstruct proc {\n  struct spinlock lock;\n\n  // p->lock must be held when using these:\n  enum procstate state;        // Process state\n  struct proc *parent;         // Parent process\n  void *chan;                  // If non-zero, sleeping on chan\n  int killed;                  // If non-zero, have been killed\n  int xstate;                  // Exit status to be returned to parent's wait\n  int pid;                     // Process ID\n\n  // these are private to the process, so p->lock need not be held.\n  uint64 kstack;               // Virtual address of kernel stack\n  uint64 sz;                   // Size of process memory (bytes)\n  pagetable_t pagetable;       // User page table\n  struct trapframe *trapframe; // data page for trampoline.S\n  struct context context;      // swtch() here to run process\n  struct file *ofile[NOFILE];  // Open files\n  struct inode *cwd;           // Current directory\n  char name[16];               // Process name (debugging)\n};\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u6bcf\u4e2a process \u6709\u81ea\u5df1\u7684 pagetable, which defines each process's address space"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"At the top of the address space xv6 reserves a page for a trampoline and a map mapping the process's trapframe(\u8be6\u7ec6\u7684\u89e3\u91ca\u7559\u5f85 Chapter4 \u8865). Xv6 use these two pages to transition into the kernel and back;"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"process vs thread: thread**\u7ebf\u7a0b\u662f\u201cgive the process an illusion of its own CPU\u201d**\u5bf9 CPU \u7684\u62bd\u8c61\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u8ba8\u8bba\u8fdb\u7a0b\u7684\u5207\u6362\u548c\u8c03\u5ea6\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u8ba8\u8bba\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4 thread \u7684\u72b6\u6001\u7684\u53d8\u5316\uff0c\u5207\u6362\u8fdb\u7a0b\u5c31\u662f\u5c06\u8fd9\u4e2a\u8fdb\u7a0b\u7684 thread \u6302\u8d77\uff08suspend\uff09\uff0c\u518d\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u67d0\u4e2a\u7ebf\u7a0b\u6267\u884c\u3002xv6 \u4e4b\u4e2d\u4e00\u4e2a process \u53ea\u6709\u4e00\u4e2a thread\uff0c\u4f46\u662f\u73b0\u4ee3\u7684\u7cfb\u7edf\u6709\u591a\u4e2a thread \u6765\u5229\u7528\u591a\u6838 cpu\uff08Linux \u7684 thread \u6982\u5ff5\u548c Windows \u53c8\u6709\u4e00\u4e9b\u4e0d\u540c\uff0c\u8fd9\u91cc\u662f Linux \u7684 thread \u6982\u5ff5\uff09"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684 kernel stack \u548c user stack\uff0c\u5f53 syscall/IO \u7b49\uff0c\u9700\u8981\u8fdb\u5165 kernel \u7684\u65f6\u5019\uff0c",(0,r.jsx)(n.strong,{children:"\u5185\u6838\u7684\u4ee3\u7801\u653e\u5728 kernel stack \u91cc\u9762\u6267\u884c\uff0cuser stack \u662f\u7ef4\u6301\u4e0d\u52a8\u7684"}),"\uff08\u5b9e\u9645\u4e0a\u5728 ecall \u6307\u4ee4\u53d1\u8d77\u7684\u65f6\u5019\uff0c\u4ee3\u7801\u5c31\u4e0d\u5728\u7528\u6237\u6001\u4e86\uff0c\u90a3\u6267\u884c\u4ece\u7528\u6237\u6001->\u5185\u6838\u6001\u8fd9\u90e8\u5206\u4ee3\u7801\u4e5f\u8981\u4f7f\u7528\u5bc4\u5b58\u5668\uff0c\u5982\u4f55\u4fdd\u5b58\u539f\u6709\u5bc4\u5b58\u5668\u7684\u503c\u5462\uff1f\u8fd9\u4f1a\u5728 lab4 \u4e4b\u4e2d\u8bb2\u89e3\uff0c\u5927\u4f53\u6765\u8bf4\u662f\u4f7f\u7528\u7279\u6b8a\u7684\u989d\u5916\u5bc4\u5b58\u5668\uff08\u5b58\u653e trapframe \u57fa\u5740\uff09\u548c\u5bf9\u5e94\u7684\u7279\u6b8a\u6307\u4ee4\uff0c\u5148\u628a a0 \u4e0a\u7684\u503c\u548c\u989d\u5916\u5bc4\u5b58\u5668\u7684\u503c\u505a\u4ea4\u6362\uff0c\u7136\u540e\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u53ef\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u540c\u65f6\u5728\u989d\u5916\u5bc4\u5b58\u5668\u4e0a\u4fdd\u7559\u4e86\u539f\u6765\u7684\u5730\u5740\uff0c\u7136\u540e\u901a\u8fc7 a0 \u76f8\u5bf9\u5bfb\u5740\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5728 trapframe \u7684 page \u4e0a\uff0c\u6700\u540e\u4ece\u989d\u5916\u5bc4\u5b58\u5668\u8bfb\u56de\u6765 a0 \u5e76\u4fdd\u5b58\uff09"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"26-code-starting-xv6-the-first-process-and-system-call",children:"2.6 Code: starting xv6, the first process and system call"}),"\n",(0,r.jsx)(n.p,{children:"\u542f\u52a8 xv6 \u7684\u8fc7\u7a0b\u6982\u8ff0\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"When the risc-v computer powers on, it initializes itself and start boot loader in read-only memory.The boot loader load xv6 kernel into memory.(\u8fd9\u90e8\u5206\u5e94\u8be5\u662f qemu \u6a21\u62df\u7684)"}),"\n",(0,r.jsx)(n.li,{children:"in machine mode, the CPU executes xv6 at _entry(kernel/entry.S)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-assembly",children:"\t# qemu -kernel loads the kernel at 0x80000000\n        # and causes each CPU to jump there.\n        # kernel.ld causes the following code to\n        # be placed at 0x80000000.\n.section .text\n_entry:\n\t# set up a stack for C.\n        # stack0 is declared in start.c,\n        # with a 4096-byte stack per CPU.\n        # sp = stack0 + (hartid * 4096)\n        la sp, stack0\n        li a0, 1024*4\n\tcsrr a1, mhartid\n        addi a1, a1, 1\n        mul a0, a0, a1\n        add sp, sp, a0\n\t# jump to start() in start.c\n        call start\nspin:\n        j spin\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5176\u4e2d\u6709\u4e09\u4e2a\u6ce8\u610f\u7684\u5730\u65b9\uff1a\u4e00\u662f\u4ece 0x80000000 \u5f00\u59cb\u662f\u56e0\u4e3a 0x0 \u5230 0x80000000 \u7559\u4e0b\u6765\u505a IO \u7528\u4e86\uff1b\u4e8c\u4e2a\u662f start \u51fd\u6570\u201cperforms some configuration in machine mode and then switches to supervisor mode\u201d\uff1b\u4e09\u662f\u6b64\u65f6\u9875\u8868\u662f\u88ab\u7981\u7528\u7684\uff0c\u90fd\u662f direct-mapping"}),"\n",(0,r.jsx)(n.p,{children:"start \u8fd8\u5e72\u4e86\u542f\u7528\u4e2d\u65ad\uff0c\u542f\u7528\u65f6\u949f\uff0c\u8bbe\u7f6e\u8fd4\u56de\u5230 main \u7b49\u64cd\u4f5c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-assembly",children:'// entry.S jumps here in machine mode on stack0.\nvoid\nstart()\n{\n  // set M Previous Privilege mode to Supervisor, for mret.\n  unsigned long x = r_mstatus();\n  x &= ~MSTATUS_MPP_MASK;\n  x |= MSTATUS_MPP_S;\n  w_mstatus(x);\n\n  // set M Exception Program Counter to main, for mret.\n  // requires gcc -mcmodel=medany\n  w_mepc((uint64)main); // \u8fd4\u56de\u5230main(\u8bbe\u7f6epc)\n\n  // disable paging for now.\n  w_satp(0);\n\n  // delegate all interrupts and exceptions to supervisor mode.\n  w_medeleg(0xffff);\n  w_mideleg(0xffff);\n  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);\n\n  // ask for clock interrupts.\n  timerinit();\n\n  // keep each CPU\'s hartid in its tp register, for cpuid().\n  int id = r_mhartid();\n  w_tp(id);\n\n  // switch to supervisor mode and jump to main().\n  asm volatile("mret");\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e\u8fdb\u5165\u5230 main"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include "types.h"\n#include "param.h"\n#include "memlayout.h"\n#include "riscv.h"\n#include "defs.h"\n\nvolatile static int started = 0;\n\n// start() jumps here in supervisor mode on all CPUs.\nvoid\nmain()\n{\n  if(cpuid() == 0){\n    consoleinit();\n    printfinit();\n    printf("\\n");\n    printf("xv6 kernel is booting\\n");\n    printf("\\n");\n    kinit();         // physical page allocator\n    kvminit();       // create kernel page table\n    kvminithart();   // turn on paging\n    procinit();      // process table\n    trapinit();      // trap vectors\n    trapinithart();  // install kernel trap vector\n    plicinit();      // set up interrupt controller\n    plicinithart();  // ask PLIC for device interrupts\n    binit();         // buffer cache\n    iinit();         // inode cache\n    fileinit();      // file table\n    virtio_disk_init(); // emulated hard disk\n    userinit();      // first user process\n    __sync_synchronize();\n    started = 1;\n  } else {\n    while(started == 0)\n      ;\n    __sync_synchronize();\n    printf("hart %d starting\\n", cpuid());\n    kvminithart();    // turn on paging\n    trapinithart();   // install kernel trap vector\n    plicinithart();   // ask PLIC for device interrupts\n  }\n\n  scheduler();\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5148\u662f\u4e00\u4e9b\u8bbe\u7f6e\u7684\u521d\u59cb\u5316"}),"\n",(0,r.jsx)(n.p,{children:"\u521d\u59cb\u5316\u5b8c\u6bd5\u540e\uff0c\u8c03\u7528 userinit()\u8fdb\u5165\u7b2c\u4e00\u4e2a\u8fdb\u7a0b"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// Set up first user process.\nvoid\nuserinit(void)\n{\n  struct proc *p;\n\n  p = allocproc();\n  initproc = p;\n\n  // allocate one user page and copy init\'s instructions\n  // and data into it.\n  uvminit(p->pagetable, initcode, sizeof(initcode));\n  p->sz = PGSIZE;\n\n  // prepare for the very first "return" from kernel to user.\n  p->trapframe->epc = 0;      // user program counter\n  p->trapframe->sp = PGSIZE;  // user stack pointer\n\n  safestrcpy(p->name, "initcode", sizeof(p->name));\n  p->cwd = namei("/");\n\n  p->state = RUNNABLE;\n\n  release(&p->lock);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5176\u4e2d"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// a user program that calls exec("/init")\n// od -t xC initcode\nuchar initcode[] = {\n  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,\n  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,\n  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,\n  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,\n  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,\n  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u662f\u8fd9\u73a9\u610f\u7684\u4e8c\u8fdb\u5236"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'# Initial process that execs /init.\n# This code runs in user space.\n\n#include "syscall.h"\n\n# exec(init, argv)\n.globl start\nstart:\n        la a0, init\n        la a1, argv\n        li a7, SYS_exec\n        ecall\n\n# for(;;) exit();\nexit:\n        li a7, SYS_exit\n        ecall\n        jal exit\n\n# char init[] = "/init\\0";\ninit:\n  .string "/init\\0"\n\n# char *argv[] = { init, 0 };\n.p2align 2\nargv:\n  .long init\n  .long 0\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e\u901a\u8fc7\u8c03\u7528 SYS_exec \u8fdb\u884c syscall \u518d\u6b21\u8fdb\u5165\u5185\u6838\u6001\u6267\u884c init.c,\u542f\u52a8 shell,the system is up"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// init: The initial user-level program\n\n#include "kernel/types.h"\n#include "kernel/stat.h"\n#include "kernel/spinlock.h"\n#include "kernel/sleeplock.h"\n#include "kernel/fs.h"\n#include "kernel/file.h"\n#include "user/user.h"\n#include "kernel/fcntl.h"\n\nchar *argv[] = { "sh", 0 };\n\nint\nmain(void)\n{\n  int pid, wpid;\n\n  if(open("console", O_RDWR) < 0){\n    mknod("console", CONSOLE, 0);\n    open("console", O_RDWR);\n  }\n  dup(0);  // stdout\n  dup(0);  // stderr\n\n  for(;;){\n    printf("init: starting sh\\n");\n    pid = fork();\n    if(pid < 0){\n      printf("init: fork failed\\n");\n      exit(1);\n    }\n    if(pid == 0){\n      exec("sh", argv);\n      printf("init: exec sh failed\\n");\n      exit(1);\n    }\n\n    for(;;){\n      // this call to wait() returns if the shell exits,\n      // or if a parentless process exits.\n      wpid = wait((int *) 0);\n      if(wpid == pid){\n        // the shell exited; restart it.\n        break;\n      } else if(wpid < 0){\n        printf("init: wait returned an error\\n");\n        exit(1);\n      } else {\n        // it was a parentless process; do nothing.\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u540e\u9762\u8fd8\u8981\u56de\u6765\u52a0\u6df1\u7406\u89e3\uff0c\u8fd8\u662f\u8ff7\u8ff7\u7cca\u7cca\u7684"}),"\n",(0,r.jsx)(n.h4,{id:"27-security-model--28-real-world",children:"2.7 Security Model & 2.8 Real World"}),"\n",(0,r.jsx)(n.p,{children:"\u95f2\u804a\u6bb5"}),"\n",(0,r.jsx)(n.h3,{id:"chapter-3-page-tables",children:"Chapter 3: Page tables"}),"\n",(0,r.jsx)(n.h4,{id:"31-paging-hardware",children:"3.1 Paging Hardware"}),"\n",(0,r.jsx)(n.p,{children:"page table: allow xv6 to isolate different address space to multiplex them onto a single physical memory"}),"\n",(0,r.jsx)(n.p,{children:"xv6 performs a few tricks: mapping the same memory(a trampoline page)in several address space, and guarding kernel and user stacks with an unmapped page"}),"\n",(0,r.jsx)(n.p,{children:"xv6: Sv39 RISCV"}),"\n",(0,r.jsx)(n.p,{children:"Fig 3.1"}),"\n",(0,r.jsx)(n.p,{children:"VA\uff1a\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d 25 \u4f4d\u989d\u5916\u4f4d\uff08\u4e0d\u53c2\u4e0e\u8f6c\u6362\uff09\uff0c 27 \u4f4d\u9875\u8868 index, 12 \u4f4d Offset"}),"\n",(0,r.jsx)(n.p,{children:"PTE\uff1a 10 \u4f4d\u53ef\u62d3\u5c55\u4f4d\uff0c3 \u7ea7\u9875\u8868 * 9 \u4f4d index\uff08512^3^\u6761\uff09,\u6bcf\u6761 PTE 44 \u4f4d PPN\uff08Physical Page Number\uff09\uff0c10 \u4f4d\u6807\u5fd7\u4f4d Flag"}),"\n",(0,r.jsx)(n.p,{children:"PA: 44 \u4f4d PPN+12 \u4f4d Offset"}),"\n",(0,r.jsx)(n.p,{children:"\u4e09\u7ea7\u9875\u8868\uff1a"}),"\n",(0,r.jsx)(n.p,{children:"Pros:\u7a7a\u95f4\u6548\u7387\uff0c\u53ea\u6709\u88ab\u4f7f\u7528\u7684\u9875\uff08VALID \u6807\u5fd7\u4f4d\u4e3a 1\uff09\uff0c\u624d\u4f1a\u88ab\u5206\u914d\u5185\u5b58\uff0c\u76f8\u5f53\u4e8e\u9875\u8868\u6811\u4e0a\uff0c\u8bb8\u591a\u53f6\u5b50\u7684\u6df1\u5ea6\u90fd\u53ea\u6709 1 \u6216 2"}),"\n",(0,r.jsx)(n.p,{children:"Cons:\u4e00\u6761\u6307\u4ee4\u5fc5\u987b\u5728 PTE \u4e4b\u4e2d\u8d70\u4e09\u6b21\uff08\u901a\u8fc7\u79fb\u4f4d\u64cd\u4f5c\uff09\uff0c\u964d\u4f4e\u4e86\u4e00\u90e8\u5206\u65f6\u95f4\u6548\u7387"}),"\n",(0,r.jsx)(n.p,{children:"\u8865\u507f\uff1aTLB\uff08Translation Look-Aside Buffer\uff09"}),"\n",(0,r.jsx)(n.p,{children:"important Fig 3.2 detail"}),"\n",(0,r.jsx)(n.p,{children:"\u544a\u8bc9\u786c\u4ef6\u542f\u7528\u9875\u8868\uff1akernel \u628a\u6700\u9ad8\u7ea7\u9875\u8868\u7684\u57fa\u5740\u5b58\u5165 satp register"}),"\n",(0,r.jsx)(n.p,{children:"\u6bcf\u4e2a CPU \u90fd\u6709\u81ea\u5df1\u7684 satp\uff0c\u6240\u4ee5\u4e0d\u540c CPU \u53ef\u4ee5\u8fd0\u884c\u4e0d\u540c\u7684\u8fdb\u7a0b\uff08\u5404\u81ea\u6709\u81ea\u5df1\u7684\u5730\u5740\u7a7a\u95f4\u548c\u9875\u8868\uff09"}),"\n",(0,r.jsxs)(n.p,{children:["\u6bcf\u4e2a process(\u5305\u62ec\u5185\u6838)\u8bfb\u5199\u7684\u90fd\u662f VA\uff0cVA \u901a\u8fc7",(0,r.jsx)(n.strong,{children:"\u8fdb\u7a0b\u81ea\u5df1\u7684\u9875\u8868"}),"\u8f6c\u6362\u6210 PA\uff0c\u518d\u53bb\u8bfb\u5199\u5b9e\u9645\u7684\u7269\u7406\u5b58\u50a8"]}),"\n",(0,r.jsxs)(n.p,{children:["\u5185\u6838\u5e94\u8be5\u4fdd\u6301\u5bf9\u6574\u4e2a\u7269\u7406\u5b58\u50a8\u7684\u64cd\u63a7\u6743\uff0c\u6240\u4ee5\u6574\u4e2a\u7269\u7406\u7684\u5b58\u50a8\u7a7a\u95f4\u90fd\u88ab\u6620\u5c04\u5230\u4e86\u5185\u6838\u7684\u9875\u8868\u4e4b\u4e2d\uff0c\u800c xv6 \u4e3a\u4e86\u5b9e\u73b0\u7684\u7b80\u6d01\u6027\uff0c\u57fa\u672c\u90fd\u662f\u76f4\u63a5\u6620\u5c04\uff0c\u4e5f\u5c31\u662f VA=PA\uff0c\u8fd9\u6837",(0,r.jsx)(n.strong,{children:"\u5728\u5185\u6838\u4e4b\u4e2d"}),"\u8bfb\u5199 VA \u5c31\u7b49\u540c\u4e8e\u8bfb\u5199 PA \u4e86\u3002"]}),"\n",(0,r.jsx)(n.h4,{id:"32-kernel-address-space",children:"3.2 Kernel address space"}),"\n",(0,r.jsx)(n.p,{children:"\u5185\u6838\u603b\u8981\u77e5\u9053\u5404\u4e2a\u8bbe\u5907\u7684 PA \u548c\u5b83\u81ea\u5df1\u9875\u8868 VA \u7684\u5173\u7cfb\uff0c\u8fd9\u4e2a\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u914d\u7f6e\u6216\u8005\u7ea6\u5b9a\uff08QEMU \u7684\u914d\u7f6e\uff09"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u91cc"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:'The kernel gets at RAM and memory-mapped device registers using "direct mapping".That is, mapping the resources at virtual addresses that are equal to physical addresses'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u7b80\u5316\u5185\u6838\u8bfb\u5199\u7684\u4ee3\u7801\uff0c\u6bd4\u5982 fork \u5b9e\u9645\u4e0a\u7ed9\u5b50\u8fdb\u7a0b\u7533\u8bf7\u5230\u7684\u662f PA\uff08\u7269\u7406\u5185\u5b58\uff09\uff0c\u4f46\u662f\u5185\u6838\u4e4b\u540e\u5c31\u76f4\u63a5\u628a\u5b83\u5f53\u4f5c\u662f\u865a\u62df\u5730\u5740\u5728\u5bf9\u4ed6\u8fdb\u884c\u4ee3\u7801\u64cd\u4f5c\u4e86"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 fork \u8c03\u7528\u7684 uvmcopy \u4e4b\u4e2d"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"        if ((mem = kalloc()) == 0)\n            goto err; // \u8fd9\u91cc\u7684mem\u662fPA\uff08kalloc\u8fd4\u56de\u7684\u5730\u5740\uff09\n        memmove(mem, (char *)pa, PGSIZE); // \u8fd9\u91cc\u5c31\u76f4\u63a5\u628amem\u5f53VA\u4e86(\u4e00\u4e2a\u8fdb\u7a0b\u81ea\u5df1\u201c\u770b\u5230\u201d\u7684\u662fVA)\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4e24\u4e2a\u4e0d\u662f\u76f4\u63a5\u6620\u5c04\u7684\u5185\u5b58\u9875"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The trampoline page: \u5b83\u5728\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u4e0a\u90fd\u5360\u636e\u4e86\u6700\u9876\u7aef\u7684\u4e00\u9875\uff0c\u6240\u4ee5\u5728\u5185\u6838\u7684 VA \u5730\u5740\u7a7a\u95f4\u4e4b\u4e2d\uff0c\u5b83\u4e24\u6b21\u6620\u5c04\u5230\u540c\u4e00\u4e2a PA,\u4e00\u6b21\u662f\u5185\u6838\u7684 kernel text \u4ee3\u7801\u6bb5\uff0c\u53e6\u4e00\u6b21\u662f kernel \u7684 VA \u7684\u6700\u9876\u7aef"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The guard page: \u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u4e0b\u9762\u6709\u4e00\u4e2a guard page\uff0c\u5b83\u7684 PTE_V \u8bbe\u7f6e\u4e3a\u4e86 0\uff0c\u9632\u6ea2\u51fa\uff0c\u5982\u679c\u6808\u6ea2\u51fa\u4e86\u5c31\u4f1a\u4ea7\u751f pagefault"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u6b64\u65f6\u5185\u6838\u6808\u5bf9\u5e94\u7684 PA \u4e5f\u88ab\u4e24\u4e2a VA \u6620\u5c04\uff0c\u4e00\u4e2a\u662f kernel data \u6bb5\u7684\u76f4\u63a5\u6620\u5c04\uff1b\u53e6\u4e00\u4e2a\u662f VA \u9876\u90e8\u7684 Kstack \u6bb5"}),"\n",(0,r.jsx)(n.p,{children:"\u4e3a\u4ec0\u4e48\u8981\u7ef4\u6301\u8fd9\u6837\u4e24\u4e2a\u6620\u5c04\u662f\u56e0\u4e3a\uff0c\u5982\u679c\u53ea\u6709 kernel data \u6bb5\u7684\u76f4\u63a5\u6620\u5c04\uff0c\u90a3\u6211\u4eec\u60f3\u8981\u52a0\u4e0a guard page\uff0c\u5c31\u5fc5\u987b\u8981\u5c06\u8fd9\u4e00\u6bb5\u8bbe\u7f6e\u6210 invalid\uff0c\u4e5f\u5c31\u662f\u53d6\u6d88 guard page \u7684\u6620\u5c04\uff1b\u90a3\u83ab\u540d\u5176\u5999\u5730\uff0cRAM \u91cc\u9762\u7684\u67d0\u90e8\u5206\u7269\u7406\u5185\u5b58\u5bf9\u5185\u6838\u5c31\u4e0d\u80fd\u7528\u4e86"}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\u8981\u6263\u6263\u641c\u641c\uff0c\u4e24\u4e2a\u6620\u5c04\u4e4b\u540e\uff0c\u5185\u6838\u7684\u4fdd\u62a4\u9875\u4e0d\u653e\u5728\u5b9e\u9645\u7684 kernel data \u6bb5\uff0c\u800c\u662f\u653e\u5728 VA \u7684 top \u6bb5\uff0c\u800c\u5e76\u6ca1\u6709\u5b9e\u9645\u201c\u5bf9\u5e94\u201d\u7684\u7269\u7406\u9875\uff0c\u7701\u4e0b\u4e86\u4e0d\u5c11\u9875\u9762\u7684\u5185\u5b58\uff0c\u4e5f\u4fdd\u8bc1\u4e86\u7269\u7406\u9875\u7684\u8fde\u7eed\u6027"}),"\n",(0,r.jsx)(n.p,{children:"\uff08\u672c\u8d28\u4e0a\u5c31\u662f\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u60f3\u4fdd\u8bc1 kernel data/text \u6bb5\u662f\u76f4\u63a5\u6620\u5c04\u7684"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u60f3\u4fdd\u8bc1\u7269\u7406\u5185\u5b58 RAM \u7684\u4f7f\u7528\u662f\u8fde\u7eed\u7684"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u60f3\u8981\u52a0 guard page"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u6ca1\u6709\u4e24\u6b21\u6620\u5c04\uff0c12 \u548c 3 \u4e0d\u80fd\u540c\u65f6\u6210\u7acb\uff1b"}),"\n",(0,r.jsx)(n.p,{children:"\uff09"}),"\n",(0,r.jsxs)(n.h4,{id:"33-code-an-address-space",children:["3.3 Code",":creating"," an address space"]}),"\n",(0,r.jsx)(n.p,{children:"kvm \u76f8\u5173\u7684\u51fd\u6570\u5efa\u7acb\u5728 kernel \u7684\u76f4\u63a5\u6620\u5c04\u4e4b\u4e0a"}),"\n",(0,r.jsx)(n.p,{children:"\u4f8b\u5982 walk \u91cc\u9762"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"            if (!alloc || (pagetable = (pde_t *)kalloc()) == 0) // \u8fd9\u91cc\u7684pagetable\u662fPA\n                return 0;\n            memset(pagetable, 0, PGSIZE); // \u4f20\u8fdb\u5165\u5f53\u51fd\u6570\u53c2\u6570\u7684\u662fVA\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4ec0\u4e48\u65f6\u5019\u9875\u8868\u88ab\u542f\u7528\u5462\uff1fkvminithart \u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"    kinit();         // physical page allocator\n    kvminit();       // create kernel page table\n    kvminithart();   // turn on paging\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4e5f\u5c31\u662f\u6211\u4eec\u5148 kvminit()\u521d\u59cb\u5316 kernel pagetable(\u628a\u6574\u4e2a RAM \u5168\u90e8\u6620\u5c04\u5230 kernel pagetable)"}),"\n",(0,r.jsx)(n.p,{children:"\u5bf9\u7167\u4e0a\u9762\u7684\u56fe\u7406\u89e3\u4e0b\u9762\u7684\u4ee3\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"\n/*\n * the kernel's page table.\n */\npagetable_t kernel_pagetable;\n\nextern char etext[]; // kernel.ld sets this to end of kernel code.\n\nextern char trampoline[]; // trampoline.S\n\n/*\n * create a direct-map page table for the kernel.\n */\nvoid kvminit() {\n    kernel_pagetable = (pagetable_t)kalloc();\n    memset(kernel_pagetable, 0, PGSIZE);\n\n    // uart registers\n    kvmmap(UART0, UART0, PGSIZE, PTE_R | PTE_W);\n\n    // virtio mmio disk interface\n    kvmmap(VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);\n\n    // CLINT\n    kvmmap(CLINT, CLINT, 0x10000, PTE_R | PTE_W);\n\n    // PLIC\n    kvmmap(PLIC, PLIC, 0x400000, PTE_R | PTE_W);\n\n    // map kernel text executable and read-only.\n    kvmmap(KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R | PTE_X);\n\n    // map kernel data and the physical RAM we'll make use of.\n    kvmmap((uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext,\n           PTE_R | PTE_W);\n\n    // map the trampoline for trap entry/exit to\n    // the highest virtual address in the kernel.\n    kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e\u542f\u7528\u9875\u8868"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void kvminithart() {\n  w_satp(MAKE_SATP(kernel_pagetable)); // write the stap register\n  sfence_vma(); // clean TLB, \u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u5bf9RISCV\u6307\u4ee4sfence.vma\u7684\u6a21\u62df\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5b9e\u9645\u7684 RISCV CPU \u8fd8\u4f1a\u6709\u4e00\u4e9b\u5730\u5740\u7a7a\u95f4\u6807\u8bc6\u7b26\uff0c\u4f7f\u8fdb\u7a0b\u5207\u6362\u7684\u65f6\u5019\u4e0d\u9700\u8981\u51b2\u6d17\u6574\u4e2a TLB"}),"\n",(0,r.jsx)(n.h4,{id:"34-physical-memory-allocation",children:"3.4 Physical memory allocation"}),"\n",(0,r.jsx)(n.h4,{id:"35-code-physical-memory-allocator",children:"3.5 Code: Physical memory allocator"}),"\n",(0,r.jsx)(n.p,{children:"\u7ef4\u62a4\u4e86\u4e00\u4e2a struct run \u7684\u94fe\u8868 freelist\uff0c\u7136\u540e\u6bcf\u6b21\u5206\u914d\u5c31\u662f\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0cfree \u5c31\u662f\u5c06\u8be5\u9875\u8fde\u63a5\u5230\u94fe\u8868\u672b\u5c3e"}),"\n",(0,r.jsx)(n.p,{children:"\u6bcf\u6b21\u5206\u914d\u548c free \u90fd\u4f1a acquire spinlock\uff0c\u6765\u7ef4\u6301\u5e76\u53d1\u7684 robust"}),"\n",(0,r.jsx)(n.h4,{id:"36-process-address-space",children:"3.6 Process address space"}),"\n",(0,r.jsx)(n.p,{children:"\u8bb2\u5b8c\u4e86\u5185\u6838\u7a7a\u95f4\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u8bb2 user space,\u4e5f\u5c31\u662f\u5404\u4e2a\u7528\u6237\u8fdb\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u4e3b\u8981\u662f\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u5728 xv6 \u4e4b\u4e2d\u5c31\u662f\u7b80\u5355\u7684 single page \u7684\u5b9e\u73b0\uff0c\u53c2\u89c1 exec.c"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e2a page \u4e0a\u4ece\u9876\u5230\u5e95\u653e\u7740"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"argument 0~N (N \u4e2a\u5b57\u7b26\u4e32\uff0cargv[]\u7684\u503c)"}),"\n",(0,r.jsx)(n.li,{children:"address of argument \uff08N \u4e2a pointer\uff09"}),"\n",(0,r.jsx)(n.li,{children:"argc"}),"\n",(0,r.jsx)(n.li,{children:"return PC"}),"\n",(0,r.jsx)(n.li,{children:"...\uff08\u5176\u4ed6\uff09"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e\u8fd9\u4e2a stack page \u4e0b\u9762\u8fd8\u6709\u4e00\u4e2a guard page\uff0c\u5b83\u7684 PTE_V \u662f 0\uff0c\u7528\u4e8e\u5728 stack overflow \u7684\u65f6\u5019\u4ea7\u751f pagefault"}),"\n",(0,r.jsx)(n.p,{children:"Q\uff1a\u4e5f\u5c31\u662f xv6 \u7684\u7528\u6237\u7a0b\u5e8f\u7684\u6808\u7684\u5927\u5c0f\u6700\u591a\u53ea\u6709 4kb?"}),"\n",(0,r.jsx)(n.p,{children:"A\uff1a\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u662f\u7684"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u7528\u6237\u7a0b\u5e8f\u91cc\u9762\u52a0\u4e0a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    int a[100000];\n    for (int i = 0; i < 100000; i++)\n        a[i] = i;\n    fprintf(1, "a:alloc %d pages.\\n", sizeof(a) / PGSIZE);\n    fprintf(1, "the address of a is %p", a);\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5c31\u4f1a\u51fa\u73b0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ sleep\nusertrap(): unexpected scause 0x000000000000000f pid=4\n            sepc=0x000000000000002e stval=0xfffffffffffa1540\n"})}),"\n",(0,r.jsx)(n.p,{children:"scause \u5bc4\u5b58\u5668\u8bb0\u5f55\u4e86\u8fd9\u6b21\u5f02\u5e38\u7684\u539f\u56e0"}),"\n",(0,r.jsxs)(n.p,{children:["\u67e5\u8be2",(0,r.jsx)(n.a,{href:"https://raw.githubusercontent.com/riscv/virtual-memory/main/specs/663-Svpbmt.pdf",children:"riscv \u624b\u518c"}),"\u53ef\u77e5, 000f \u662f Store/AMO pagefault\uff0c\u9a8c\u8bc1\u4e86\u6211\u4eec\u6808\u6ea2\u51fa\u7684\u731c\u60f3"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["AMO page fault\uff08Atomic Memory Operation page fault\uff09\u662f\u6307\u5728 RISC-V \u67b6\u6784\u4e2d\uff0c\u5f53\u6267\u884c\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\uff08\u5982",(0,r.jsx)(n.code,{children:"amoadd"}),"\u3001",(0,r.jsx)(n.code,{children:"amoxor"}),"\u7b49\uff09\u65f6\uff0c\u7531\u4e8e\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u7269\u7406\u9875\u6ca1\u6709\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff08\u5373\u6ca1\u6709\u5bf9\u5e94\u7684\u7269\u7406\u9875\u5e27\uff09\uff0c\u6216\u8005\u8bbf\u95ee\u7684\u9875\u6ca1\u6709\u5199\u6743\u9650\uff0c\u800c\u89e6\u53d1\u7684\u9875\u9519\u8bef\uff08Page Fault\uff09\u5f02\u5e38\u3002"]}),"\n",(0,r.jsx)(n.p,{children:"\u5728 RISC-V \u4e2d\uff0c\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\uff08AMO\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\uff0c\u5b83\u5141\u8bb8\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\u540c\u6b65\u5730\u6267\u884c\u539f\u5b50\u64cd\u4f5c\uff0c\u5982\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4ea4\u6362\u7b49\uff0c\u800c\u4e0d\u9700\u8981\u989d\u5916\u7684\u540c\u6b65\u673a\u5236\u3002\u8fd9\u4e9b\u64cd\u4f5c\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u9501\u548c\u5176\u4ed6\u5e76\u53d1\u63a7\u5236\u7ed3\u6784\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u5904\u7406\u5668\u5c1d\u8bd5\u6267\u884c AMO \u6307\u4ee4\u65f6\uff0c\u5982\u679c\u9047\u5230\u4ee5\u4e0b\u60c5\u51b5\u4e4b\u4e00\uff0c\u5c31\u4f1a\u89e6\u53d1 AMO page fault\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\u865a\u62df\u5730\u5740\u672a\u6620\u5c04"}),"\uff1a\u5904\u7406\u5668\u5c1d\u8bd5\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u9875\u8868\u4e2d\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u3002"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\u5199\u6743\u9650\u4e0d\u8db3"}),"\uff1a\u5373\u4f7f\u865a\u62df\u5730\u5740\u5df2\u7ecf\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u4f46\u8be5\u9875\u6ca1\u6709\u5199\u6743\u9650\uff08\u5728\u9875\u8868\u9879\u4e2d\uff0c\u5199\u6743\u9650\u4f4d W \u88ab\u8bbe\u7f6e\u4e3a 0\uff09\u3002"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u53d1\u751f AMO page fault \u65f6\uff0c\u5904\u7406\u5668\u4f1a\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff08\u5728 RISC-V \u4e2d\u79f0\u4e3a\u4e2d\u65ad\u5411\u91cf\uff09\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u3002\u5904\u7406\u7a0b\u5e8f\u4f1a\u68c0\u67e5\u5bfc\u81f4\u5f02\u5e38\u7684\u865a\u62df\u5730\u5740\uff0c\u5982\u679c\u5730\u5740\u5408\u6cd5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u4ece\u78c1\u76d8\u6216\u5176\u4ed6\u5b58\u50a8\u4ecb\u8d28\u4e2d\u52a0\u8f7d\u7f3a\u5931\u7684\u9875\u5230\u7269\u7406\u5185\u5b58\uff0c\u5e76\u66f4\u65b0\u9875\u8868\u4ee5\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002\u5982\u679c\u5730\u5740\u4e0d\u5408\u6cd5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u7ec8\u6b62\u76f8\u5173\u8fdb\u7a0b\u3002"}),"\n",(0,r.jsx)(n.p,{children:"AMO page fault \u662f RISC-V \u67b6\u6784\u4e2d\u5904\u7406\u5e76\u53d1\u548c\u540c\u6b65\u95ee\u9898\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u786e\u4fdd\u4e86\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\u539f\u5b50\u64cd\u4f5c\u7684\u6b63\u786e\u6027\u548c\u4e00\u81f4\u6027\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4f46\u6709\u4e2a\u5947\u602a\u7684\u5730\u65b9\uff0c\u5982\u679c\u6ca1\u6709"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    fprintf(1, "the address of a is %p", a);\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e00\u884c"}),"\n",(0,r.jsx)(n.p,{children:"\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u89e6\u53d1, \u67e5\u770b\u4e86 fprintf \u5185\u90e8\uff0c\u5e76\u6ca1\u6709\u4ec0\u4e48\u5947\u602a\u7684\u5730\u65b9"}),"\n",(0,r.jsx)(n.p,{children:"\u6000\u7591\u662f\u5982\u679c\u4e0d\u8c03\u7528 fprintf \u7684\u8bdd\uff0c\u7f16\u8bd1\u5668\u4f18\u5316\u4e86\u8fd9\u4e00\u6bb5\u65e0\u7528\u4ee3\u7801\uff1f"}),"\n",(0,r.jsxs)(n.h4,{id:"37-code",children:["3.7 Code",":sbrk"]}),"\n",(0,r.jsx)(n.p,{children:"\u4e0a\u9762\u56fa\u5b9a\u4e86 Stack \u662f\u4e00\u4e2a PAGE \u4e4b\u540e\u6709\u4e00\u4e2a\u597d\u5904\u5c31\u662f\u5927\u5927\u7b80\u5316\u4e86\u540e\u9762\u7684\u5185\u5b58\u5206\u914d"}),"\n",(0,r.jsx)(n.p,{children:"\u4e4b\u524d\u770b\u5f97\u4e0d\u4ed4\u7ec6\uff0c\u6ca1\u770b\u5230\u6808\u53ea\u6709\u4e00\u9875\uff0c\u4e00\u76f4\u6ca1\u592a\u641e\u61c2\u4e3a\u5565\u5b83\u7684 growproc \u7ed9\u4e86\u4e00\u4e2a sz \u4f5c\u4e3a\u53c2\u6570\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u7684 sz\uff08\u5982\u679c\u662f\u4f20\u7edf\u7684\u6808\u4ece\u4e0a\u5f80\u4e0b\u589e\u957f\uff0c\u5806\u4ece\u4e0b\u5f80\u4e0a\u589e\u957f\u7684\u6a21\u578b\uff09\u672c\u8eab\u5c31\u4ee4\u4eba\u8ff7\u60d1\uff0callocproc \u7684\u65f6\u5019\u5c1a\u53ef\u89e3\u91ca\u4e3a\u662f\u5806+\u6808+\u5176\u4ed6\uff0cdealloc \u7684\u65f6\u5019\u5982\u4f55\u6839\u636e\u51cf\u5c0f\u7684 sz \u76f4\u63a5\u786e\u5b9a\u91ca\u653e\u7684\u9875\u5462\uff1f\u8fd8\u6709\u5c31\u662f\u5b83\u7684 sz \u662f\u5982\u4f55\u52a8\u6001\u76d1\u63a7\u6808\u7684\u589e\u957f\u7684\u5462\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"\u7b54\u6848\u662f\u6839\u672c\u6ca1\u6709\u76d1\u63a7\uff0c\u4e0a\u9762\u7684 text \u6bb5\u662f\u4ee3\u7801\u6587\u672c\uff0cdata \u6bb5\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u90fd\u662f\u7f16\u8bd1\u65f6\u786e\u5b9a\u7684\u4e1c\u897f\uff0c\u800c stack \u53ea\u6709\u4e00\u4e2a page\uff0cguard page \u4e5f\u53ea\u6709\u4e00\u4e2a page\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd0\u884c\u524d\uff0c\u5806\u5e95\u90e8\u6709\u591a\u5c11\u4e2a page \u5df2\u7ecf\u88ab\u6307\u5b9a\uff0c\u5e76\u4e14\u6808\u5728\u5806\u4e0b\u9762\uff08\u770b\u56fe\uff09\uff0c\u6211\u4eec\u7684\u5185\u5b58\u5206\u914d\u53d8\u6210\u53ea\u5bf9\u5806\u64cd\u4f5c\u4e86\uff0c\u8fd9\u4e2a sz \u4e5f\u53d8\u6210\u4e86\u5f88\u76f4\u63a5\u7684\u4ece\u5e95\u90e8\u5411\u4e0a\u6570\u7684 page \u6570\u91cf\uff08\u770b\u6e90\u7801\u53ef\u4ee5\u77e5\u9053\uff0ctrampoline page \u548c trapframe page \u6ca1\u6709\u88ab\u8ba1\u5165 p->sz \u91cc\u9762\uff0c\u800c\u662f\u88ab\u653e\u5728 kalloc \u7684 kernel \u7684\u7a7a\u95f4\u91cc\u9762\uff0c\u4e0d\u9700\u8981 user process \u77e5\u9053\u76f8\u5173\u7684\u4fe1\u606f\uff09"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e5f\u662f\u9875\u8868\u7684\u53e6\u4e00\u4e2a\u4f5c\u7528\u4f53\u73b0\u7684\u65f6\u5019\uff1a"}),"\n",(0,r.jsx)(n.p,{children:"xv6 \u7684\u6240\u6709\u5185\u5b58\u5206\u914d\u90fd\u662f\u901a\u8fc7 kalloc()\u5b9e\u73b0\u7684\uff0c\u5982\u4f55\u77e5\u6653 user process \u662f\u5426\u6709\u6743\u91ca\u653e\u67d0\u4e2a\u7269\u7406\u7a7a\u95f4\u5462\uff1f\u53c8\u6216\u8005\u8bf4\u600e\u4e48\u7ef4\u62a4\u54ea\u4e2a\u7269\u7406\u7a7a\u95f4\u662f\u88ab\u54ea\u4e2a\u8fdb\u7a0b\u62ff\u5230\u7684\u5462\uff1f\u5c31\u662f\u901a\u8fc7\u9875\u8868\uff0c\u5728\u91ca\u653e\u7a7a\u95f4\u4e4b\u524d\u8fdb\u884c\u6b64\u8fdb\u7a0b\u7684\u9875\u8868\u4e0a\u5230\u5e95\u6709\u6ca1\u6709\u8fd9\u4e2a\u5408\u6cd5 PA \u7684\u68c0\u67e5(uvmunmap)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'        if ((pte = walk(pagetable, a, 0)) == 0)\n            panic("uvmunmap: walk");\n        if ((*pte & PTE_V) == 0)\n            panic("uvmunmap: not mapped");\n        if (PTE_FLAGS(*pte) == PTE_V)\n            panic("uvmunmap: not a leaf");\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"38-code",children:["3.8 Code",":exec"]}),"\n",(0,r.jsx)(n.p,{children:"exec.c \u6e90\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include "types.h"\n#include "param.h"\n#include "memlayout.h"\n#include "riscv.h"\n#include "spinlock.h"\n#include "proc.h"\n#include "defs.h"\n#include "elf.h"\n\nstatic int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uint sz);\n\nint\nexec(char *path, char **argv)\n{\n  char *s, *last;\n  int i, off;\n  uint64 argc, sz = 0, sp, ustack[MAXARG+1], stackbase;\n  struct elfhdr elf;\n  struct inode *ip;\n  struct proghdr ph;\n  pagetable_t pagetable = 0, oldpagetable;\n  struct proc *p = myproc();\n\n  begin_op();\n\n  if((ip = namei(path)) == 0){\n    end_op();\n    return -1;\n  }\n  ilock(ip);\n\n  // Check ELF header\n  if(readi(ip, 0, (uint64)&elf, 0, sizeof(elf)) != sizeof(elf))\n    goto bad;\n  if(elf.magic != ELF_MAGIC)\n    goto bad;\n\n  if((pagetable = proc_pagetable(p)) == 0)\n    goto bad;\n\n  // Load program into memory.\n  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){\n    if(readi(ip, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))\n      goto bad;\n    if(ph.type != ELF_PROG_LOAD)\n      continue;\n    if(ph.memsz < ph.filesz)\n      goto bad;\n    if(ph.vaddr + ph.memsz < ph.vaddr)\n      goto bad;\n    uint64 sz1;\n    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)\n      goto bad;\n    sz = sz1;\n    if(ph.vaddr % PGSIZE != 0)\n      goto bad;\n    if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)\n      goto bad;\n  }\n  iunlockput(ip);\n  end_op();\n  ip = 0;\n\n  p = myproc();\n  uint64 oldsz = p->sz;\n\n  // Allocate two pages at the next page boundary.\n  // Use the second as the user stack.\n  sz = PGROUNDUP(sz);\n  uint64 sz1;\n  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)\n    goto bad;\n  sz = sz1;\n  uvmclear(pagetable, sz-2*PGSIZE);\n  sp = sz;\n  stackbase = sp - PGSIZE;\n\n  // Push argument strings, prepare rest of stack in ustack.\n  for(argc = 0; argv[argc]; argc++) {\n    if(argc >= MAXARG)\n      goto bad;\n    sp -= strlen(argv[argc]) + 1;\n    sp -= sp % 16; // riscv sp must be 16-byte aligned\n    if(sp < stackbase)\n      goto bad;\n    if(copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)\n      goto bad;\n    ustack[argc] = sp;\n  }\n  ustack[argc] = 0;\n\n  // push the array of argv[] pointers.\n  sp -= (argc+1) * sizeof(uint64);\n  sp -= sp % 16;\n  if(sp < stackbase)\n    goto bad;\n  if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)\n    goto bad;\n\n  // arguments to user main(argc, argv)\n  // argc is returned via the system call return\n  // value, which goes in a0.\n  p->trapframe->a1 = sp;\n\n  // Save program name for debugging.\n  for(last=s=path; *s; s++)\n    if(*s == \'/\')\n      last = s+1;\n  safestrcpy(p->name, last, sizeof(p->name));\n\n  // Commit to the user image.\n  oldpagetable = p->pagetable;\n  p->pagetable = pagetable;\n  p->sz = sz;\n  p->trapframe->epc = elf.entry;  // initial program counter = main\n  p->trapframe->sp = sp; // initial stack pointer\n  proc_freepagetable(oldpagetable, oldsz);\n\n  return argc; // this ends up in a0, the first argument to main(argc, argv)\n\n bad:\n  if(pagetable)\n    proc_freepagetable(pagetable, sz);\n  if(ip){\n    iunlockput(ip);\n    end_op();\n  }\n  return -1;\n}\n\n// Load a program segment into pagetable at virtual address va.\n// va must be page-aligned\n// and the pages from va to va+sz must already be mapped.\n// Returns 0 on success, -1 on failure.\nstatic int\nloadseg(pagetable_t pagetable, uint64 va, struct inode *ip, uint offset, uint sz)\n{\n  uint i, n;\n  uint64 pa;\n\n  if((va % PGSIZE) != 0)\n    panic("loadseg: va must be page aligned");\n\n  for(i = 0; i < sz; i += PGSIZE){\n    pa = walkaddr(pagetable, va + i);\n    if(pa == 0)\n      panic("loadseg: address should exist");\n    if(sz - i < PGSIZE)\n      n = sz - i;\n    else\n      n = PGSIZE;\n    if(readi(ip, 0, (uint64)pa, offset+i, n) != n)\n      return -1;\n  }\n\n  return 0;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5b83\u5148\u540e\u5e72\u4e86\u8fd9\u4e48\u51e0\u4ef6\u4e8b"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["\u4f7f\u7528",(0,r.jsx)(n.code,{children:"namei"}),"\u548c\u6587\u4ef6\u7cfb\u7edf\u4ea4\u4e92\uff0c\u62ff\u5230\u4e86",(0,r.jsx)(n.code,{children:"path"}),"\u6587\u4ef6\u7684",(0,r.jsx)(n.code,{children:"inode"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u68c0\u67e5\u6587\u4ef6\u7684 ELF \u7f16\u7801\uff08\u4f7f\u7528 int\uff084 Byte\uff09 ELF magic number, '0x7F','E','L','F'\uff09\uff0c\u5e76\u4ece\u6587\u4ef6\u4e4b\u4e2d\u5148\u8bfb\u53d6\u76f8\u5173\u6570\u636e\uff0c\u4f8b\u5982\u6587\u4ef6\u7684 offset \u548c\u7ed3\u675f\u4f4d\u7f6e\u3001\u7269\u7406\u5730\u5740\u7b49"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["\u7279\u522b\u5730\uff0c\u6709",(0,r.jsx)(n.code,{children:"if(ph.vaddr + ph.memsz < ph.vaddr) goto bad;"}),"\u7684\u68c0\u67e5\uff1b"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["\u68c0\u67e5\u5b8c\u6bd5\u540e\uff0c\u4f7f\u7528",(0,r.jsx)(n.code,{children:"loadseg"}),"\u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u8bfb\u5165\u5185\u6838\u6570\u636e\uff08\u8fdb\u7a0b\u76f8\u5173\uff09\u548c\u51c6\u5907\u7684\u9875\u8868"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u518d\u53bb\u6309\u7167 user space \u53bb\u5206\u914d user process \u7684\u4e00\u4e9b page\uff0c\u5e76\u5c06\u524d\u9762\u7ea6\u5b9a\u7684\u4e00\u4e9b args \u7684\u53c2\u6570\u4ee5\u7ea6\u5b9a\u987a\u5e8f\u586b\u5165\uff0c\u5e76\u586b\u597d\u8fdb\u7a0b\u65b0\u7684 sz,\u6309\u7167\u6587\u4ef6\u7684 elf \u7ed9\u7684\u6570\u636e\u586b\u7a0b\u5e8f\u7684\u5165\u53e3\uff08main\uff09\uff0c\u521d\u59cb\u5316\u7528\u6237\u6808\u6307\u9488"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u5230\u6700\u540e\u4e5f\u6ca1\u51fa\u9519\uff0c\u5c31\u66f4\u65b0\u6574\u4e2a\u8fdb\u7a0b\uff08commit image\uff09\uff1b\u5426\u5219\u64a4\u9500\u524d\u9762\u7684\u64cd\u4f5c\u3002\u8fd9\u4e5f\u5c31\u662f\u4fdd\u8bc1\u76f8\u5173\u64cd\u4f5c\u7684\u539f\u5b50\u6027"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["ps \u5173\u4e8e\u6709",(0,r.jsx)(n.code,{children:"if(ph.vaddr + ph.memsz < ph.vaddr) goto bad;"}),"\u7684\u68c0\u67e5\uff0c\u4e66\u4e0a\u8bf4\u4e86\u4e0d\u5c11"]}),"\n",(0,r.jsxs)(n.p,{children:["\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u68c0\u67e5\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a ph.vaddr \u548c ph.memsz\uff0c\u4f7f\u5f97\u5b83\u4eec\u52a0\u8d77\u6765",(0,r.jsx)(n.strong,{children:"\u6ea2\u51fa"}),"\uff0c\u4ece\u800c\u8fbe\u5230 0x1000 \u8fd9\u79cd kernel space\uff1b\u800c\u53c8\u56e0\u4e3a exec \u662f syscall\uff0c\u539f\u6765\u6ca1\u6709\u6743\u9650\u7684\u7528\u6237\u8fdb\u7a0b\u73b0\u5728\u6709\u4e86\u6743\u9650\uff0cexec \u4f1a\u4f7f\u7528 loadseg \u5c06 elf \u6587\u4ef6\u91cc\u9762\u7684\u5185\u5bb9\u5199\u5230\u7279\u5b9a\u7684 kernel space \u4e4b\u4e2d\uff0c\u5c31\u5b8c\u6210\u4e86\u653b\u51fb"]}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u6bb5\u4ee3\u7801\u503c\u5f97\u591a\u770b\uff0c\u5f88\u6f02\u4eae"}),"\n",(0,r.jsx)(n.h4,{id:"39-real-world",children:"3.9 Real world"}),"\n",(0,r.jsx)(n.p,{children:"\u73b0\u5b9e\u4e16\u754c\u7684 OS \u6709\u4ee5\u4e0b xv6 \u6ca1\u6709\u7684\u673a\u5236\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u4f7f\u7528 pagefault \u914d\u5408 paging \u6765\u8fdb\u884c\u6743\u9650\u4fdd\u62a4\uff08xv6 \u53ea\u4f7f\u7528 paging\uff09"}),"\n",(0,r.jsx)(n.li,{children:"kernel \u4f4d\u7f6e\u7684\u968f\u673a\u5316\u6765\u9632\u8303\u653b\u51fb\uff08xv6 \u7684 kernel \u662f direct-map+ 0x80000000 \u7684\u56fa\u5b9a RAM\uff09"}),"\n",(0,r.jsx)(n.li,{children:"RISCV \u63d0\u4f9b\u7684\u7269\u7406\u9875\u7684\u786c\u4ef6\u4fdd\u62a4"}),"\n",(0,r.jsx)(n.li,{children:"\u8d85\u7ea7\u9875\uff08super page\uff09\uff0c\u6765\u63d0\u9ad8\u5927\u5757\u9875\u7684\u9875\u8868\u76f8\u5173\u64cd\u4f5c\u6548\u7387\uff08\u6bd4\u5982\u5185\u6838\uff09"}),"\n",(0,r.jsx)(n.li,{children:"\u66f4\u7cbe\u5de7\u7684\u5185\u5b58\u5206\u914d\u7b56\u7565\uff1a\u4f8b\u5982\u5904\u7406\u4e0d\u540c\u5927\u5c0f\u7684\u5185\u5b58\u8bf7\u6c42\uff0c\u7ed9\u4e0d\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff1b\u800c\u4e0d\u662f xv6 \u59cb\u7ec8\u56fa\u5b9a\u7ed9 PAGESIZE \u7684\u500d\u6570\uff08\u8fd9\u6837\u5bf9\u4e8e\u9891\u7e41\u5c0f\u8bf7\u6c42\u8868\u73b0\u4e0d\u597d\uff09"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"chapter-4-traps-and-system-calls",children:"Chapter 4: Traps and system calls"}),"\n",(0,r.jsx)(n.p,{children:"ps\uff08\u770b\u4ee3\u7801\u65f6\u53ef\u80fd\u6709\u7528\uff09\uff1ahartid \u662f hardware thread id \u7684\u7f29\u5199\uff0c\u5728 xv6 \u4e4b\u4e2d\u662f cpu \u7684 id\uff0ctp \u5bc4\u5b58\u5668\u91cc\u9762\u4f1a\u6709\u5b83\u7684\u503c"}),"\n",(0,r.jsx)(n.p,{children:"\u63a7\u5236\u6d41\u5728\u4e09\u79cd\u60c5\u51b5\u4e0b\u53ef\u80fd\u53d1\u751f\u8f6c\u79fb\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"syscall"}),"\n",(0,r.jsx)(n.li,{children:"exception\uff1asomething illegeal"}),"\n",(0,r.jsx)(n.li,{children:"device interrupt: indicate the device needs attention(like the finish of IO)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u7edf\u79f0\u8fd9\u4e09\u79cd\uff08\u7cfb\u7edf\u8c03\u7528\uff0c\u5f02\u5e38\uff0c\u4e2d\u65ad\uff09\u4e3a trap\uff0c\u5728 xv6 \u4e4b\u4e2d\uff0c\u6240\u6709\u7684 trap \u90fd\u662f kernel \u5904\u7406\u7684"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf",children:"RISCV \u6587\u6863"}),"\u7ed9\u51fa\u7684\u5b9a\u4e49\u89c1\u4e0b\uff1a"]}),"\n",(0,r.jsxs)(n.p,{children:["We use the term ",(0,r.jsx)(n.strong,{children:"exception"})," to refer to ",(0,r.jsx)(n.strong,{children:"an unusual condition occurring at run time"})," associated with an instruction in the current RISC-V thread. We use the term ",(0,r.jsx)(n.strong,{children:"trap"})," to refer to the ",(0,r.jsx)(n.strong,{children:"synchronous transfer of control to a trap handler caused by an exceptional condition occurring"})," within a RISC-V thread. Trap handlers usually execute in a more privileged environment. We use the term ",(0,r.jsx)(n.strong,{children:"interrupt"})," to refer to ",(0,r.jsx)(n.strong,{children:"an external event that occurs asynchronously"})," to the current RISC-V thread. When an interrupt that must be serviced occurs, some instruction is selected to receive an interrupt exception and subsequently experiences a trap."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"trap \u7684\u4e00\u822c\u6d41\u7a0b\u662f\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u8f6c\u79fb\u63a7\u5236\u6743\u5230 kernel"}),"\n",(0,r.jsx)(n.li,{children:"kernel \u4fdd\u5b58\u7528\u6237\u8fdb\u7a0b\u5bc4\u5b58\u5668\u72b6\u6001\u548c\u5176\u5b83\u72b6\u6001\u4ee5\u4fbf\u8fd4\u56de"}),"\n",(0,r.jsx)(n.li,{children:"\u8c03\u7528\u5408\u9002\u7684 handler code"}),"\n",(0,r.jsx)(n.li,{children:"\u8fd4\u56de"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4e0d\u540c\u7684 trap \u6700\u597d\u6709\u4e0d\u540c\u7684 handler code\uff0c\u6bd4\u5982 user space \u7684 trap\uff0c kernel \u7684 trap\uff0ctimer interrupt \u7b49\u7b49"}),"\n",(0,r.jsx)(n.h4,{id:"41-risc-v-trap-machinery",children:"4.1 RISC-V trap machinery"}),"\n",(0,r.jsx)(n.p,{children:"kernel \u600e\u4e48\u77e5\u9053\u5982\u4f55\u5904\u7406 trap \u5462\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"RISCV \u6709\u8bb8\u591a\u7279\u6b8a\u7684\u5bc4\u5b58\u5668\uff08kernel/riscv.h\uff09\u7528\u4e8e\u8bb0\u5f55\u548c trap \u6709\u5173\u7684\u4fe1\u606f\u3001"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["stvec\uff1aThe kernel write ",(0,r.jsx)(n.strong,{children:"the address of its trap handler"})," here"]}),"\n",(0,r.jsxs)(n.li,{children:["sepc: ",(0,r.jsx)(n.strong,{children:"When(pc) a trap occurs"})]}),"\n",(0,r.jsxs)(n.li,{children:["scause: A number describe ",(0,r.jsx)(n.strong,{children:"the reason of trap"})]}),"\n",(0,r.jsx)(n.li,{children:"sscratch: \u7528\u4e8e\u4fdd\u5b58\u4e0a\u4e0b\u6587\u7684\u989d\u5916\u5bc4\u5b58\u5668"}),"\n",(0,r.jsx)(n.li,{children:"sstatus: \u5176\u4e2d\u7684 SIE bit \u6807\u5fd7\u7740\u662f\u5426\u5141\u8bb8\u8bbe\u5907\u4e2d\u65ad\uff0c\u5176\u4e2d\u7684 SPP bit \u6807\u5fd7\u7740\u4e2d\u65ad\u662f\u4ece user mode \u8fd8\u662f super mode \u89e6\u53d1\u7684\uff08\u540c\u65f6\u8fd9\u4e5f\u51b3\u5b9a\u4e86 sret \u4f1a\u56de\u5230\u4ec0\u4e48 mode\uff09"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u5177\u4f53\u7ec6\u8282\uff1a"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"If the trap is a device interrupt and the sstatus SIE bit is clear, don't do any of the following*"}),"\n",(0,r.jsx)(n.li,{children:"Disable interrupts by clearing the SIE bit in sstatus"}),"\n",(0,r.jsx)(n.li,{children:"Copy the pc to sepc"}),"\n",(0,r.jsx)(n.li,{children:"Save the current mode (user or supervisor mode) in SPP bit in sstatus"}),"\n",(0,r.jsx)(n.li,{children:"Set scause to reflect the trap's cause"}),"\n",(0,r.jsx)(n.li,{children:"Set the mode to supervisor"}),"\n",(0,r.jsx)(n.li,{children:"Copy the stvec to the pc"}),"\n",(0,r.jsx)(n.li,{children:"Start executing at new pc"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u6ce8\u610f CPU",(0,r.jsx)(n.strong,{children:"\u6ca1\u505a\u5207\u6362\u5185\u6838\u9875\u8868\uff0c\u6ca1\u505a\u4f7f\u7528\u5185\u6838\u6808\uff0c\u6ca1\u505a\u4fdd\u5b58\u548c\u66f4\u65b0 pc \u4e4b\u5916\u7684\u5bc4\u5b58\u5668"}),"\uff0c\u8fd9\u4e9b\u90fd\u7559\u7ed9 kernel software \u53bb\u5b8c\u6210\uff0c\u7b80\u5316\u8bbe\u8ba1\uff0c\u7559\u4e0b\u7075\u6d3b\u6027"]}),"\n",(0,r.jsx)(n.h4,{id:"42-traps-from-user-space",children:"4.2 Traps from user space"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u6211\u4eec\u4e0d\u60f3\u8ba9\u7528\u6237\u4ee3\u7801\u4ecb\u5165\u5230\u8fd9\u91cc\u7684 user/kernel \u5207\u6362\uff0c\u5426\u5219\u6709\u53ef\u80fd\u4f1a\u7834\u574f\u5b89\u5168\u6027\u3002\u6240\u4ee5\u8fd9\u610f\u5473\u7740\uff0ctrap \u4e2d\u6d89\u53ca\u5230\u7684\u786c\u4ef6\u548c\u5185\u6838\u673a\u5236\u4e0d\u80fd\u4f9d\u8d56\u4efb\u4f55\u6765\u81ea\u7528\u6237\u7a7a\u95f4\u4e1c\u897f\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u4e0d\u80fd\u4f9d\u8d56 32 \u4e2a\u7528\u6237\u5bc4\u5b58\u5668\uff0c\u5b83\u4eec\u53ef\u80fd\u4fdd\u5b58\u7684\u662f\u6076\u610f\u7684\u6570\u636e\uff0c\u6240\u4ee5\uff0cXV6 \u7684 trap \u673a\u5236\u4e0d\u4f1a\u67e5\u770b\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u800c\u53ea\u662f\u5c06\u5b83\u4eec\u4fdd\u5b58\u8d77\u6765\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"trap \u4ee3\u7801\u6267\u884c\u6d41\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"syscall:\u4ee5 write \u4e3a\u4f8b"}),"\n",(0,r.jsx)(n.p,{children:"write->\u67e5\u627e\u8be5\u51fd\u6570->usys.pl \u4ea7\u751f\u7684\u6c47\u7f16(.global write)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-perl",children:'#!/usr/bin/perl -w\n\n# Generate usys.S, the stubs for syscalls.\n\nprint "# generated by usys.pl - do not edit\\n";\n\nprint "#include \\"kernel/syscall.h\\"\\n";\n\nsub entry {\n    my $name = shift;   # shift\u662fperl\u811a\u672c\u4e4b\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u610f\u601d\n    print ".global $name\\n";\n    print "${name}:\\n";\n    print " li a7, SYS_${name}\\n";\n    print " ecall\\n";\n    print " ret\\n";\n}\nentry("write");\n// ......\n'})}),"\n",(0,r.jsx)(n.p,{children:"->ecall->trampoline.S"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Q:\u8fd9\u4e00\u6b65\u662f\u600e\u4e48\u8fc7\u53bb\u7684\uff1f\uff08\u4e0b\u9762\u6574\u4e2a\u6d41\u7a0b\u633a\u957f\u7684\uff09"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u67e5\u8be2\u4e86\u4e00\u4e0b RISC \u7279\u6743\u6307\u4ee4\u6587\u6863"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["The ECALL instruction is used to make a request to the supporting execution environment, which is usually an operating system. ",(0,r.jsx)(n.strong,{children:"The ABI for the system will define how parameters for the environment request are passed"}),", but usually these will be in defined locations in the integer register file."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u6587\u6863\u8bf4\u8ba9 OS \u8bbe\u8ba1\u8005\u81ea\u5df1\u51b3\u5b9a\u600e\u4e48\u4f20\u53c2\u6570"}),"\n",(0,r.jsx)(n.p,{children:"lec4 \u91cc\u9762\u8bf4 ecall \u5e72\u4e86\u4e09\u4ef6\u4e8b\uff08\u8fd9\u662f\u786c\u4ef6\u652f\u6301\u7684\uff09"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5c06\u4ee3\u7801\u4ece user mode \u6539\u5230 supervisor mode"}),"\n",(0,r.jsx)(n.li,{children:"\u5c06 pc \u4fdd\u5b58\u5230 sepc"}),"\n",(0,r.jsx)(n.li,{children:"\u8df3\u8f6c\u5230 stvec \u6307\u5411\u7684\u6307\u4ee4"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u90a3 stvec \u6307\u5411\u54ea\u91cc\u5462\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"\u6839\u636e\u6211\u4eec Chapter 2 \u91cc\u9762\u8bb2\u7684\u90a3\u4e2a\u6d41\u7a0b\u5f80\u4e0b\u627e\uff0centry.S->start()->main->userinit (\u6ce8\u610f ecall \u9700\u8981\u5728 user space \u8c03\u7528)"}),"\n",(0,r.jsx)(n.p,{children:"-> allocproc->proc_pagetable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"// Create a user page table for a given process,\n// with no user memory, but with trampoline pages.\npagetable_t proc_pagetable(struct proc *p) {\n    pagetable_t pagetable;\n\n    // An empty page table.\n    pagetable = uvmcreate();\n    if (pagetable == 0)\n        return 0;\n\n    // map the trampoline code (for system call return)\n    // at the highest user virtual address.\n    // only the supervisor uses it, on the way\n    // to/from user space, so not PTE_U.\n    if (mappages(pagetable, TRAMPOLINE, PGSIZE, (uint64)trampoline,\n                 PTE_R | PTE_X) < 0) {\n        uvmfree(pagetable, 0);\n        return 0;\n    }\n\n    // map the trapframe just below TRAMPOLINE, for trampoline.S.\n    if (mappages(pagetable, TRAPFRAME, PGSIZE, (uint64)(p->trapframe),\n                 PTE_R | PTE_W) < 0) {\n        uvmunmap(pagetable, TRAMPOLINE, 1, 0);\n        uvmfree(pagetable, 0);\n        return 0;\n    }\n\n    return pagetable;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u91cc\u5df2\u7ecf\u53d1\u73b0\u6bcf\u4e2a proc \u90fd\u4f1a\u5728 alloc \u7684\u65f6\u5019\u6709 TRAMPOLINE \u7684 PTE \u4e86\uff0c\u90a3\u5230\u5e95\u662f\u5728\u54ea\u91cc\u6539\u53d8\u4e86 stvec \u5462\uff1f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'void trapinit(void) { initlock(&tickslock, "time"); }\n\n// set up to take exceptions and traps while in the kernel.\nvoid trapinithart(void) { w_stvec((uint64)kernelvec); }\n\n//\n// handle an interrupt, exception, or system call from user space.\n// called from trampoline.S\n//\nvoid usertrap(void) {\n    int which_dev = 0;\n\n    if ((r_sstatus() & SSTATUS_SPP) != 0)\n        panic("usertrap: not from user mode");\n\n    // send interrupts and exceptions to kerneltrap(),\n    // since we\'re now in the kernel.\n    w_stvec((uint64)kernelvec);\n\n    struct proc *p = myproc();\n\n    // save user program counter.\n    p->trapframe->epc = r_sepc();\n\n    if (r_scause() == 8) {\n        // system call\n\n        if (p->killed)\n            exit(-1);\n\n        // sepc points to the ecall instruction,\n        // but we want to return to the next instruction.\n        p->trapframe->epc += 4;\n\n        // an interrupt will change sstatus &c registers,\n        // so don\'t enable until done with those registers.\n        intr_on();\n\n        syscall();\n    } else if ((which_dev = devintr()) != 0) {\n        // ok\n    } else {\n        printf("usertrap(): unexpected scause %p pid=%d\\n", r_scause(), p->pid);\n        printf("            sepc=%p stval=%p\\n", r_sepc(), r_stval());\n        p->killed = 1;\n    }\n\n    if (p->killed)\n        exit(-1);\n\n    // give up the CPU if this is a timer interrupt.\n    if (which_dev == 2)\n        yield();\n\n    usertrapret();\n}\n\n//\n// return to user space\n//\nvoid usertrapret(void) {\n    struct proc *p = myproc();\n\n    // we\'re about to switch the destination of traps from\n    // kerneltrap() to usertrap(), so turn off interrupts until\n    // we\'re back in user space, where usertrap() is correct.\n    intr_off();\n\n    // send syscalls, interrupts, and exceptions to trampoline.S\n    w_stvec(TRAMPOLINE + (uservec - trampoline));\n\n    // set up trapframe values that uservec will need when\n    // the process next re-enters the kernel.\n    p->trapframe->kernel_satp = r_satp();         // kernel page table\n    p->trapframe->kernel_sp = p->kstack + PGSIZE; // process\'s kernel stack\n    p->trapframe->kernel_trap = (uint64)usertrap;\n    p->trapframe->kernel_hartid = r_tp(); // hartid for cpuid()\n\n    // set up the registers that trampoline.S\'s sret will use\n    // to get to user space.\n\n    // set S Previous Privilege mode to User.\n    unsigned long x = r_sstatus();\n    x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode\n    x |= SSTATUS_SPIE; // enable interrupts in user mode\n    w_sstatus(x);\n\n    // set S Exception Program Counter to the saved user pc.\n    w_sepc(p->trapframe->epc);\n\n    // tell trampoline.S the user page table to switch to.\n    uint64 satp = MAKE_SATP(p->pagetable);\n\n    // jump to trampoline.S at the top of memory, which\n    // switches to the user page table, restores user registers,\n    // and switches to user mode with sret.\n    uint64 fn = TRAMPOLINE + (userret - trampoline);\n    ((void (*)(uint64, uint64))fn)(TRAPFRAME, satp);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5f88\u9634\u9669\u554a\uff0c\u8fd9\u4e2a stvec \u662f\u5728 forkret \u8c03\u7528\u7684 userret \u91cc\u9762\u6539\u6389\u7684"}),"\n",(0,r.jsx)(n.p,{children:"userinit \u5e76\u6ca1\u6709\u6539\u6389 stvec"}),"\n",(0,r.jsx)(n.p,{children:"\u5177\u4f53\u5730\u8bf4\uff0c\u56de\u770b init.c \u7684\u4ee3\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'int main(void) {\n    // ...\n    for (;;) {\n        printf("init: starting sh\\n");\n        pid = fork();\n\n        if (pid < 0) {\n            printf("init: fork failed\\n");\n            exit(1);\n        }\n        if (pid == 0) {\n            exec("sh", argv);\n            printf("init: exec sh failed\\n");\n            exit(1);\n        }\n // ...\n'})}),"\n",(0,r.jsx)(n.p,{children:"shell \u5b9e\u9645\u4e0a\u662f init \u8fdb\u7a0b fork \u7684\u5b50\u8fdb\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u6709\u8da3\u7684\u662f\uff0c\u770b syscall.c \u53ef\u4ee5\u53d1\u73b0\uff0ckernel/proc \u91cc\u9762\u7684 fork \u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u201csys_fork\u201d\uff0c\u7528\u6237\u7684 syscall fork \u53ea\u4e0d\u8fc7\u662f\u76f4\u63a5\u518d\u8c03\u7528\u4e00\u6b21 fork \u7f62\u4e86"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"// A fork child's very first scheduling by scheduler()\n// will swtch to forkret.\nvoid forkret(void) {\n    static int first = 1;\n\n    // Still holding p->lock from scheduler.\n    release(&myproc()->lock);\n\n    if (first) {\n        // File system initialization must be run in the context of a\n        // regular process (e.g., because it calls sleep), and thus cannot\n        // be run from main().\n        first = 0;\n        fsinit(ROOTDEV);\n    }\n\n    usertrapret();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e2a forkret \u5728\u53ea\u5728 allocproc \u91cc\u9762\u88ab\u8c03\u7528\uff08fork \u548c uvminit \u8c03\u7528\u4e86 allocproc\uff09"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"    memset(&p->context, 0, sizeof(p->context));\n    p->context.ra = (uint64)forkret;\n    p->context.sp = p->kstack + PGSIZE;\n"})}),"\n",(0,r.jsx)(n.p,{children:"init \u8fdb\u7a0b\u662f\u4e0d\u4f1a\u8fd4\u56de\u7684\uff0c\u4f46\u662f\u5728 scheduler \u91cc\u9762\uff0c\u4f1a\u8c03\u7528 swtch()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"               p->state = RUNNING;\n                c->proc = p;\n                swtch(&c->context, &p->context);\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e swtch \u4f1a\u8c03\u7528\u4e0b\u9762\u7684 swtch.S"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"# Context switch\n#\n#   void swtch(struct context *old, struct context *new);\n#\n# Save current registers in old. Load from new.\n\n\n.globl swtch\n# a0 \u662fc->context\u7684\u5730\u5740\uff0ca1\u662fp->context\u7684\u5730\u5740\nswtch:\n        # \u628a\u5f53\u524dcpu\u7684\u5bc4\u5b58\u5668\u6570\u636e\u5b58\u4e0b\u6765\n        sd ra, 0(a0)\n        sd sp, 8(a0)\n        sd s0, 16(a0)\n        sd s1, 24(a0)\n        sd s2, 32(a0)\n        sd s3, 40(a0)\n        sd s4, 48(a0)\n        sd s5, 56(a0)\n        sd s6, 64(a0)\n        sd s7, 72(a0)\n        sd s8, 80(a0)\n        sd s9, 88(a0)\n        sd s10, 96(a0)\n        sd s11, 104(a0)\n\n        # \u52a0\u8f7d\u8c03\u5ea6\u7684p\u7684\u5bc4\u5b58\u5668\u6570\u636e\n        ld ra, 0(a1)\n        ld sp, 8(a1)\n        ld s0, 16(a1)\n        ld s1, 24(a1)\n        ld s2, 32(a1)\n        ld s3, 40(a1)\n        ld s4, 48(a1)\n        ld s5, 56(a1)\n        ld s6, 64(a1)\n        ld s7, 72(a1)\n        ld s8, 80(a1)\n        ld s9, 88(a1)\n        ld s10, 96(a1)\n        ld s11, 104(a1)\n\n        ret\n        # \u6b64\u65f6\uff0cra\u5df2\u7ecf\u88ab\u6539\u6389\uff01\uff01\uff01\n        # \u56de\u53bb\u7684\u4f4d\u7f6e\u5c31\u662fforkret\u4e86\n"})}),"\n",(0,r.jsx)(n.p,{children:"init \u8c03\u5ea6\u5230 shell \u65f6\uff0cswtch.S ret \u7684\u65f6\u5019\u5c31\u8df3\u8f6c\u5230\u4e86 forkret"}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e forkret->usertrapret->w_stvec"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u6b21\u7684 usertrapret \u662f\u5728 usertrap \u524d\u9762\u6267\u884c\u7684\uff01"})}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\uff0c\u7ed5\u4e86\u8fd9\u4e48\u5927\u4e00\u5708\u56de\u6765"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"lec4 \u91cc\u9762\u8bf4 ecall \u5e72\u4e86\u4e09\u4ef6\u4e8b\uff08\u8fd9\u662f\u786c\u4ef6\u652f\u6301\u7684\uff09"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u5c06\u4ee3\u7801\u4ece user mode \u6539\u5230 supervisor mode"}),"\n",(0,r.jsx)(n.li,{children:"\u5c06 pc \u4fdd\u5b58\u5230 sepc"}),"\n",(0,r.jsx)(n.li,{children:"\u8df3\u8f6c\u5230 stvec \u6307\u5411\u7684\u6307\u4ee4"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u4e0b\u9762\u90a3\u4e2a usertrapret \u4e4b\u4e2d\uff0cstvec \u6539\u4e3a\u6307\u5411 trampoline.S \u7684 uservec\uff0c\u5e76\u4e14\u6307\u5b9a\u4e86 usertrap \u4f4d\u7f6e\u7b49\u4fe1\u606f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"    // send syscalls, interrupts, and exceptions to trampoline.S\n    w_stvec(TRAMPOLINE + (uservec - trampoline));\n\n    // set up trapframe values that uservec will need when\n    // the process next re-enters the kernel.\n    p->trapframe->kernel_satp = r_satp();         // kernel page table\n    p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack\n    p->trapframe->kernel_trap = (uint64)usertrap;\n    p->trapframe->kernel_hartid = r_tp(); // hartid for cpuid()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u6240\u4ee5\u8fd9\u5c31\u662f\u6ce8\u91ca\u4e4b\u4e2d",(0,r.jsx)(n.code,{children:"re-enter"}),"\u7684\u610f\u601d"]}),"\n",(0,r.jsx)(n.p,{children:"\u518d\u540e\u9762\u5c31\u662f lec \u91cc\u9762\u8bf4\u7684\uff0c\u518d\u540e\u9762\u7684 syscall"}),"\n",(0,r.jsx)(n.p,{children:"ecall \u8df3\u8f6c\u5230 stvec\uff08uservec\uff09\uff0ctrampoline.S \u7684\u6700\u540e\u8df3\u8f6c\u5230 TRAMPOLINE + 16"}),"\n",(0,r.jsx)(n.p,{children:"\u53c2\u8003 trapframe"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"struct trapframe {\n    /*   0 */ uint64 kernel_satp;   // kernel page table\n    /*   8 */ uint64 kernel_sp;     // top of process's kernel stack\n    /*  16 */ uint64 kernel_trap;   // usertrap(), \u5c31\u5728\u4e0a\u9762p->trapframe->kernel_trap = (uint64)usertrap;\n    // ...\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5c31\u662f\u8df3\u8f6c\u5230\u4e86 usertrap"}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e usertrap->syscall()->\u6839\u636e a7 \u627e\u5230 sys_write()"}),"\n",(0,r.jsx)(n.p,{children:"\u4e4b\u540e\u518d\u901a\u8fc7 usertrapret->userret->sret \u8fd4\u56de\u7528\u6237\u7a7a\u95f4\uff0c\u7ee7\u7eed\u6267\u884c\u6307\u4ee4"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"sret \u662f\u6211\u4eec\u5728 kernel \u4e2d\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\uff0c\u5f53\u6211\u6267\u884c\u5b8c\u8fd9\u6761\u6307\u4ee4\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u7a0b\u5e8f\u4f1a\u5207\u6362\u56de user mode"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"SEPC \u5bc4\u5b58\u5668\u7684\u6570\u503c\u4f1a\u88ab\u62f7\u8d1d\u5230 PC \u5bc4\u5b58\u5668\uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\uff09"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u91cd\u65b0\u6253\u5f00\u4e2d\u65ad"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"ps1 \u5982\u679c\u5728 kernel space \u91cc\u9762\u8c03\u7528 ecall \u4f1a\u600e\u4e48\u6837\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 lab3 \u4e4b\u4e2d\uff0c\u7ecf\u5e38\u80fd\u770b\u5230\u5728 userinit \u6210\u529f\u542f\u52a8\u4e4b\u524d\uff0c\u5185\u6838\u5c31\u51fa\u9519\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u4f9d\u7136\u80fd\u5f97\u5230\u4e00\u4e9b\u6253\u5370\u4fe1\u606f"}),"\n",(0,r.jsx)(n.p,{children:"\u9996\u5148\u8bf4\u8bf4\u4e3a\u4ec0\u4e48\u80fd\u591f\u6253\u5370\uff0c"}),"\n",(0,r.jsx)(n.p,{children:"\u4ece printf \u4e00\u6b65\u6b65\u5f80\u91cc\u9762\u770b\uff0c\u627e\u5230 console.c \u91cc\u9762\u7684"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"//\n// send one character to the uart.\n// called by printf, and to echo input characters,\n// but not from write().\n//\n// \u6ce8\u610f\u6ca1\u6709\u7528write!!\nvoid\nconsputc(int c)\n{\n  if(c == BACKSPACE){\n    // if the user typed backspace, overwrite with a space.\n    uartputc_sync('\\b'); uartputc_sync(' '); uartputc_sync('\\b');\n  } else {\n    uartputc_sync(c);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4e5f\u5c31\u662f\u8bf4 xv6 \u53ea\u662f\u5c06\u6570\u636e\u53d1\u9001\u5230 UART \u7684 control register\uff08qemu \u6a21\u62df\u4e14\u7ea6\u5b9a\u4f4d\u7f6e\uff09\uff0c\u800c qemu \u8d1f\u8d23\u5c06 UART \u7684\u5730\u5740\u4e0a\u7684\u6570\u636e\u8f93\u51fa\u5230\u7ec8\u7aef"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u5728 xv6 \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6253\u5370\u64cd\u4f5c\u662f\u901a\u8fc7 UART\uff08Universal Asynchronous Receiver/Transmitter\uff0c\u901a\u7528\u5f02\u6b65\u6536\u53d1\u5668\uff09\u7684\u63a7\u5236\u5bc4\u5b58\u5668\u5b9e\u73b0\u7684\u3002\u5f53 xv6 \u9700\u8981\u6253\u5370\u5b57\u7b26\u65f6\uff0c\u5b83\u4f1a\u5c06\u5b57\u7b26\u5199\u5165 UART \u7684\u6570\u636e\u5bc4\u5b58\u5668\u3002UART \u786c\u4ef6\u4f1a\u81ea\u52a8\u5c06\u6570\u636e\u5bc4\u5b58\u5668\u4e2d\u7684\u5b57\u7b26\u53d1\u9001\u51fa\u53bb\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 QEMU \u6a21\u62df\u5668\u4e2d\uff0cUART \u88ab\u6a21\u62df\u4e3a\u4e00\u4e2a\u865a\u62df\u8bbe\u5907\u3002\u5f53 xv6 \u5c06\u5b57\u7b26\u5199\u5165 UART \u6570\u636e\u5bc4\u5b58\u5668\u65f6\uff0cQEMU \u4f1a\u6355\u83b7\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5e76\u5c06\u5b57\u7b26\u8f93\u51fa\u5230\u5bbf\u4e3b\u673a\u7684\u7ec8\u7aef\u6216\u8005\u5176\u4ed6\u8f93\u51fa\u8bbe\u5907\u3002\u8fd9\u6837\uff0c\u867d\u7136 xv6 \u8ba4\u4e3a\u5b83\u662f\u5728\u64cd\u4f5c UART \u786c\u4ef6\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u7684\u8f93\u51fa\u88ab QEMU \u91cd\u5b9a\u5411\u5230\u4e86\u5bbf\u4e3b\u673a\u7684\u7ec8\u7aef"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5728 kernel/main.c \u7684"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"    trapinit();      // trap vectors\n    trapinithart();  // install kernel trap vector\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u91cc\u9762"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'void trapinit(void) { initlock(&tickslock, "time"); }\n\n// set up to take exceptions and traps while in the kernel.\nvoid trapinithart(void) { w_stvec((uint64)kernelvec); } // \u521d\u59cb\u5316stvec\u4e3akernelvec\n'})}),"\n",(0,r.jsx)(n.p,{children:"kernelvec \u91cc\u9762\u53c8\u6709\u5565\u5462\uff1f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-assembly",children:".globl kerneltrap\n.globl kernelvec\n.align 4\nkernelvec:\n        // make room to save registers.\n        addi sp, sp, -256\n\n        // save the registers.\n        sd ra, 0(sp)\n        sd sp, 8(sp)\n        sd gp, 16(sp)\n        sd tp, 24(sp)\n        sd t0, 32(sp)\n        sd t1, 40(sp)\n        sd t2, 48(sp)\n        sd s0, 56(sp)\n        sd s1, 64(sp)\n        sd a0, 72(sp)\n        sd a1, 80(sp)\n        sd a2, 88(sp)\n        sd a3, 96(sp)\n        sd a4, 104(sp)\n        sd a5, 112(sp)\n        sd a6, 120(sp)\n        sd a7, 128(sp)\n        sd s2, 136(sp)\n        sd s3, 144(sp)\n        sd s4, 152(sp)\n        sd s5, 160(sp)\n        sd s6, 168(sp)\n        sd s7, 176(sp)\n        sd s8, 184(sp)\n        sd s9, 192(sp)\n        sd s10, 200(sp)\n        sd s11, 208(sp)\n        sd t3, 216(sp)\n        sd t4, 224(sp)\n        sd t5, 232(sp)\n        sd t6, 240(sp)\n\n\t// call the C trap handler in trap.c\n        call kerneltrap // \u8fd9\u91cccall,ret\u662f\u4f2a\u6307\u4ee4\uff0c\u88ab\u6c47\u7f16\u5668\u8f6c\u6362\u6210jal\u548cjalr\n\n        // restore registers.\n        ld ra, 0(sp)\n        ld sp, 8(sp)\n        ld gp, 16(sp)\n        // not this, in case we moved CPUs: ld tp, 24(sp)\n        ld t0, 32(sp)\n        ld t1, 40(sp)\n        ld t2, 48(sp)\n        ld s0, 56(sp)\n        ld s1, 64(sp)\n        ld a0, 72(sp)\n        ld a1, 80(sp)\n        ld a2, 88(sp)\n        ld a3, 96(sp)\n        ld a4, 104(sp)\n        ld a5, 112(sp)\n        ld a6, 120(sp)\n        ld a7, 128(sp)\n        ld s2, 136(sp)\n        ld s3, 144(sp)\n        ld s4, 152(sp)\n        ld s5, 160(sp)\n        ld s6, 168(sp)\n        ld s7, 176(sp)\n        ld s8, 184(sp)\n        ld s9, 192(sp)\n        ld s10, 200(sp)\n        ld s11, 208(sp)\n        ld t3, 216(sp)\n        ld t4, 224(sp)\n        ld t5, 232(sp)\n        ld t6, 240(sp)\n\n        addi sp, sp, 256\n\n        // return to whatever we were doing in the kernel.\n        sret\n\n        #\n        # machine-mode timer interrupt.\n        #\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5176\u4e2d kerneltrap"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// interrupts and exceptions from kernel code go here via kernelvec,\n// on whatever the current kernel stack is.\nvoid kerneltrap() {\n    int which_dev = 0;\n    uint64 sepc = r_sepc();\n    uint64 sstatus = r_sstatus();\n    uint64 scause = r_scause();\n\n    if ((sstatus & SSTATUS_SPP) == 0)\n        panic("kerneltrap: not from supervisor mode");\n    if (intr_get() != 0)\n        panic("kerneltrap: interrupts enabled");\n\n    if ((which_dev = devintr()) == 0) { // \u8fd9\u91cc\u662f\u6211\u4eec\u5e38\u89c1\u62a5\u9519\u7684\u5730\u65b9\n        printf("scause %p\\n", scause);\n        printf("sepc=%p stval=%p\\n", r_sepc(), r_stval());\n        panic("kerneltrap");\n    }\n\n    // give up the CPU if this is a timer interrupt.\n    if (which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)\n        yield();\n\n    // the yield() may have caused some traps to occur,\n    // so restore trap registers for use by kernelvec.S\'s sepc instruction.\n    w_sepc(sepc);\n    w_sstatus(sstatus);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"devintr,\u7531\u4e8e\u6211\u4eec\u4ee3\u7801\u5199\u9519\u7684 scause \u6bd4\u5982\u9875\u8868\u7684\u9519\u8bef\uff080x000000000000000f\uff09\uff0c\u65e2\u4e0d\u662f 0x8 \u5f00\u5934\u7684\u5916\u90e8\u8bbe\u5907\u4e2d\u65ad\uff0c\u4e5f\u4e0d\u662f\u8ba1\u65f6\u5668\u4e2d\u65ad\uff0c\u5c31\u4f1a\u89e6\u53d1 panic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// check if it\'s an external interrupt or software interrupt,\n// and handle it.\n// returns 2 if timer interrupt,\n// 1 if other device,\n// 0 if not recognized.\nint devintr() {\n    uint64 scause = r_scause();\n\n    if ((scause & 0x8000000000000000L) && (scause & 0xff) == 9) {\n        // this is a supervisor external interrupt, via PLIC.\n\n        // irq indicates which device interrupted.\n        int irq = plic_claim();\n\n        if (irq == UART0_IRQ) {\n            uartintr();\n        } else if (irq == VIRTIO0_IRQ) {\n            virtio_disk_intr();\n        } else if (irq) {\n            printf("unexpected interrupt irq=%d\\n", irq);\n        }\n\n        // the PLIC allows each device to raise at most one\n        // interrupt at a time; tell the PLIC the device is\n        // now allowed to interrupt again.\n        if (irq)\n            plic_complete(irq);\n\n        return 1;\n    } else if (scause == 0x8000000000000001L) {\n        // software interrupt from a machine-mode timer interrupt,\n        // forwarded by timervec in kernelvec.S.\n\n        if (cpuid() == 0) {\n            clockintr();\n        }\n\n        // acknowledge the software interrupt by clearing\n        // the SSIP bit in sip.\n        w_sip(r_sip() & ~2);\n\n        return 2;\n    } else {\n        return 0;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u5982\u679c devintr \u6ca1\u6709\u95ee\u9898\uff0c\u901a\u8fc7 sepc \u518d\u6b21\u6539\u53d8\u4e86\u63a7\u5236\u6d41"}),"\n",(0,r.jsx)(n.p,{children:"\u90a3 sepc \u73b0\u5728\u5728\u54ea\u91cc\u5462\uff1f\u524d\u9762\u4fdd\u5b58\u7684\u539f\u6765\u7684 pc\uff0c\u4e5f\u5c31\u662f\u56de\u5230\u539f\u6765\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u4e86"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"ps2 \uff08ecall \u7684\u65f6\u5019\uff09\u4e3a\u4ec0\u4e48\u662f a7?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["The ECALL instruction is used to make a request to the supporting execution environment, which is usually an operating system. ",(0,r.jsx)(n.strong,{children:"The ABI for the system will define how parameters for the environment request are passed"}),", but usually these will be in defined locations in the integer register file."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u6587\u6863\u8bf4\u8ba9 OS \u8bbe\u8ba1\u8005\u81ea\u5df1\u51b3\u5b9a\u600e\u4e48\u4f20\u53c2\u6570"}),"\n",(0,r.jsx)(n.p,{children:"\u800c riscv-gnu-toolchain \u548c Linux \u7684\u505a\u6cd5\uff08\u8bbe\u8ba1\uff09\u662f"}),"\n",(0,r.jsx)(n.p,{children:"a0~a5 \u53ef\u4ee5\u653e\u53c2\u6570\uff0ca7 \u653e syscall number\uff0c\u6240\u4ee5\u5355\u7eaf\u662f\u4e00\u4e2a\u7ea6\u5b9a\u95ee\u9898"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'static uint64 argraw(int n) {\n    struct proc *p = myproc();\n    switch (n) {\n    case 0:\n        return p->trapframe->a0;\n    case 1:\n        return p->trapframe->a1;\n    case 2:\n        return p->trapframe->a2;\n    case 3:\n        return p->trapframe->a3;\n    case 4:\n        return p->trapframe->a4;\n    case 5:\n        return p->trapframe->a5;\n    }\n    panic("argraw");\n    return -1;\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"\u7531\u4e8e riscv \u6ca1\u6709\u786c\u4ef6\u6307\u4ee4\u4e0a\u5f3a\u5236 ecall \u7684\u65f6\u5019\u66f4\u65b0\u9875\u8868"}),"\n",(0,r.jsx)(n.p,{children:"\u4e5f\u5c31\u662f\u8bf4\u6267\u884c ecall \u524d\u540e\uff0c\u90fd\u8fd8\u662f user pagetable"}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5 stvec \u7684\u5730\u5740\u5fc5\u987b\u5728 user space \u7684\u9875\u8868\u4e0a\u5b58\u5728"}),"\n",(0,r.jsx)(n.p,{children:"\u4f46 trap handler \u9700\u8981\u5728 kernel space \u8fd0\u884c"}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5 stvec \u7684\u5730\u5740\u5fc5\u987b\u5728 kernel space \u4e5f\u5b58\u5728\uff0c\u5e76\u4e14\u4e24\u8005\uff08user space && kernel space\uff09\u7edf\u4e00"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 xv6 \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5728 kernel space \u548c user space \u90fd\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u7684 TRAMPOLINE \u9875"}),"\uff08\u770b Chapter 3 \u7684\u56fe\uff09"]}),"\n",(0,r.jsx)(n.p,{children:"lec6 \u7684\u5b66\u751f\u63d0\u95ee\u5f88\u6709\u610f\u601d"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u5b66\u751f\u63d0\u95ee\uff1a\u8fd9\u4e2a\u95ee\u9898\u6216\u8bb8\u5e76\u4e0d\u5b8c\u5168\u76f8\u5173\uff0cread \u548c write \u7cfb\u7edf\u8c03\u7528\uff0c\u76f8\u6bd4\u5185\u5b58\u7684\u8bfb\u5199\uff0c\u4ed6\u4eec\u7684\u4ee3\u4ef7\u90fd\u9ad8\u7684\u591a\uff0c\u56e0\u4e3a\u5b83\u4eec\u9700\u8981\u5207\u6362\u6a21\u5f0f\uff0c\u5e76\u6765\u56de\u6363\u817e\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u5f53\u4f60\u6267\u884c\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7684\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c \u76f4\u63a5\u5f97\u5230\u4e00\u4e2a page table \u6620\u5c04\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1f\u8fd9\u6837\u53ea\u9700\u8981\u5411\u5bf9\u5e94\u4e8e\u8bbe\u5907\u7684\u7279\u5b9a\u7684\u5730\u5740\u5199\u6570\u636e\uff0c\u7a0b\u5e8f\u5c31\u80fd\u901a\u8fc7 page table \u8bbf\u95ee\u7279\u5b9a\u7684\u8bbe\u5907\u3002\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u597d\u9650\u5236\uff0c\u5c31\u50cf\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ea\u5141\u8bb8\u4fee\u6539\u7279\u5b9a\u6587\u4ef6\u4e00\u6837\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u50cf\u7cfb\u7edf\u8c03\u7528\u4e00\u6837\u5728\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u6765\u56de\u6363\u817e\u4e86\u3002"}),"\n",(0,r.jsx)(n.p,{children:"Robert \u6559\u6388\uff1a\u8fd9\u662f\u4e2a\u5f88\u597d\u7684\u60f3\u6cd5\u3002\u5b9e\u9645\u4e0a\u5f88\u591a\u64cd\u4f5c\u7cfb\u7edf\u90fd\u63d0\u4f9b\u8fd9\u79cd\u53eb\u505a\u5185\u5b58\u6620\u5c04\u6587\u4ef6\uff08Memory-mapped file access\uff09\u7684\u673a\u5236\uff0c\u5728\u8fd9\u4e2a\u673a\u5236\u91cc\u9762\u901a\u8fc7 page table\uff0c\u53ef\u4ee5\u5c06\u7528\u6237\u7a7a\u95f4\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5bf9\u5e94\u5230\u6587\u4ef6\u5185\u5bb9\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u76f4\u63a5\u8bfb\u5199\u6587\u4ef6\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u4eec\u5c06\u5728 mmap \u5b9e\u9a8c\u4e2d\u5b8c\u6210\u8fd9\u4e2a\u673a\u5236\u3002\u5bf9\u4e8e\u8bb8\u591a\u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd9\u4e2a\u673a\u5236\u7684\u786e\u4f1a\u6bd4\u76f4\u63a5\u8c03\u7528 read/write \u7cfb\u7edf\u8c03\u7528\u8981\u5feb\u7684\u591a\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"lec6 \u5728\u8fd9\u91cc\u4e5f\u63d2\u5165\u4e86\u4e00\u6bb5\u8bbe\u8ba1\u76f8\u5173\u7684"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\u4f60\u73b0\u5728\u5c31\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48 ecall \u4e0d\u591a\u505a\u70b9\u5de5\u4f5c\u6765\u5c06\u4ee3\u7801\u6267\u884c\u4ece\u7528\u6237\u7a7a\u95f4\u5207\u6362\u5230\u5185\u6838\u7a7a\u95f4\u5462\uff1f\u4e3a\u4ec0\u4e48 ecall \u4e0d\u4f1a\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\uff0c\u6216\u8005\u5207\u6362 page table \u6307\u9488\u6765\u6307\u5411 kernel page table\uff0c\u6216\u8005\u81ea\u52a8\u7684\u8bbe\u7f6e Stack Pointer \u6307\u5411 kernel stack\uff0c\u6216\u8005\u76f4\u63a5\u8df3\u8f6c\u5230 kernel \u7684 C \u4ee3\u7801\uff0c\u800c\u4e0d\u662f\u5728\u8fd9\u91cc\u8fd0\u884c\u590d\u6742\u7684\u6c47\u7f16\u4ee3\u7801\uff1f"}),"\n",(0,r.jsx)(n.p,{children:"\u5b9e\u9645\u4e0a\uff0c\u6709\u7684\u673a\u5668\u5728\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u4f1a\u5728\u786c\u4ef6\u4e2d\u5b8c\u6210\u6240\u6709\u8fd9\u4e9b\u5de5\u4f5c\u3002\u4f46\u662f RISC-V \u5e76\u4e0d\u4f1a\uff0cRISC-V \u79c9\u6301\u4e86\u8fd9\u6837\u4e00\u4e2a\u89c2\u70b9\uff1aecall \u53ea\u5b8c\u6210\u5c3d\u91cf\u5c11\u5fc5\u987b\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5176\u4ed6\u7684\u5de5\u4f5c\u90fd\u4ea4\u7ed9\u8f6f\u4ef6\u5b8c\u6210\u3002\u8fd9\u91cc\u7684\u539f\u56e0\u662f\uff0cRISC-V \u8bbe\u8ba1\u8005\u60f3\u8981\u4e3a\u8f6f\u4ef6\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u7a0b\u5e8f\u5458\u63d0\u4f9b\u6700\u5927\u7684\u7075\u6d3b\u6027\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u80fd\u6309\u7167\u4ed6\u4eec\u60f3\u8981\u7684\u65b9\u5f0f\u5f00\u53d1\u64cd\u4f5c\u7cfb\u7edf\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u8fd9\u6837\u60f3\uff0c\u5c3d\u7ba1 XV6 \u5e76\u6ca1\u6709\u4f7f\u7528\u8fd9\u91cc\u63d0\u4f9b\u7684\u7075\u6d3b\u6027\uff0c\u4f46\u662f\u4e00\u4e9b\u5176\u4ed6\u7684\u64cd\u4f5c\u7cfb\u7edf\u7528\u5230\u4e86\u3002"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684 ecall \u662f\u5982\u6b64\u7684\u7b80\u5355\uff0c\u6216\u8bb8\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u5728\u4e0d\u5207\u6362 page table \u7684\u524d\u63d0\u4e0b\uff0c\u6267\u884c\u90e8\u5206\u7cfb\u7edf\u8c03\u7528\u3002\u5207\u6362 page table \u7684\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\uff0c\u5982\u679c ecall \u6253\u5305\u5b8c\u6210\u4e86\u8fd9\u90e8\u5206\u5de5\u4f5c\uff0c\u90a3\u5c31\u4e0d\u80fd\u5bf9\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u6539\u8fdb\uff0c\u4f7f\u5176\u4e0d\u7528\u5728\u4e0d\u5fc5\u8981\u7684\u573a\u666f\u5207\u6362 page table\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u540c\u65f6\u5c06 user \u548c kernel \u7684\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u4e00\u4e2a page table \u4e2d\uff0c\u8fd9\u6837\u5728 user \u548c kernel \u4e4b\u95f4\u5207\u6362\u65f6\u6839\u672c\u5c31\u4e0d\u7528\u5207\u6362 page table\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u64cd\u4f5c\u7cfb\u7edf\u6765\u8bf4\uff0c\u5982\u679c ecall \u5207\u6362\u4e86 page table \u90a3\u5c06\u4f1a\u662f\u4e00\u79cd\u6d6a\u8d39\uff0c\u5e76\u4e14\u4e5f\u51cf\u6162\u4e86\u7a0b\u5e8f\u7684\u8fd0\u884c\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u6216\u8bb8\u5728\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e9b\u5bc4\u5b58\u5668\u4e0d\u7528\u4fdd\u5b58\uff0c\u800c\u54ea\u4e9b\u5bc4\u5b58\u5668\u9700\u8981\u4fdd\u5b58\uff0c\u54ea\u4e9b\u4e0d\u9700\u8981\uff0c\u53d6\u51b3\u4e8e\u4e8e\u8f6f\u4ef6\uff0c\u7f16\u7a0b\u8bed\u8a00\uff0c\u548c\u7f16\u8bd1\u5668\u3002\u901a\u8fc7\u4e0d\u4fdd\u5b58\u6240\u6709\u7684 32 \u4e2a\u5bc4\u5b58\u5668\u6216\u8bb8\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u7684\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\uff0c\u6240\u4ee5\u4f60\u4e0d\u4f1a\u60f3\u8981 ecall \u8feb\u4f7f\u4f60\u4fdd\u5b58\u6240\u6709\u7684\u5bc4\u5b58\u5668\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u6700\u540e\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u7b80\u5355\u7684\u7cfb\u7edf\u8c03\u7528\u6216\u8bb8\u6839\u672c\u5c31\u4e0d\u9700\u8981\u4efb\u4f55 stack\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e9b\u975e\u5e38\u5173\u6ce8\u6027\u80fd\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0cecall \u4e0d\u4f1a\u81ea\u52a8\u4e3a\u4f60\u5b8c\u6210 stack \u5207\u6362\u662f\u6781\u597d\u7684\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u6240\u4ee5\uff0cecall \u5c3d\u91cf\u7684\u7b80\u5355\u53ef\u4ee5\u63d0\u5347\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u7075\u6d3b\u6027\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u63a5\u4e0b\u6765\u8be6\u7ec6\u8bb2 trap \u7684\u8fc7\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u901a\u8fc7 ecall \u6211\u4eec\u8fbe\u5230\u4e86 trampoline.S"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u56de\u5230 XV6 \u548c RISC-V\uff0c\u73b0\u5728\u7a0b\u5e8f\u4f4d\u4e8e trampoline page \u7684\u8d77\u59cb\uff0c\u4e5f\u662f uservec \u51fd\u6570\u7684\u8d77\u59cb\u3002\u6211\u4eec\u73b0\u5728\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u5c31\u662f\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u3002\u5728 RISC-V \u4e0a\uff0c\u5982\u679c\u4e0d\u80fd\u4f7f\u7528\u5bc4\u5b58\u5668\uff0c\u57fa\u672c\u4e0a\u4e0d\u80fd\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4fdd\u5b58\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u6709\u4ec0\u4e48\u6837\u7684\u9009\u62e9\u5462\uff1f"}),"\n",(0,r.jsxs)(n.p,{children:["\u5728\u4e00\u4e9b\u5176\u4ed6\u7684\u673a\u5668\u4e2d\uff0c",(0,r.jsx)(n.strong,{children:"\u6211\u4eec\u6216\u8bb8\u76f4\u63a5\u5c31\u5c06 32 \u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9\u5199\u5230\u7269\u7406\u5185\u5b58\u4e2d\u67d0\u4e9b\u5408\u9002\u7684\u4f4d\u7f6e\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u5728 RISC-V \u4e2d\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5728 RISC-V \u4e2d\uff0csupervisor mode \u4e0b\u7684\u4ee3\u7801\u4e0d\u5141\u8bb8\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5185\u5b58"}),"\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u4f7f\u7528 page table \u4e2d\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u4ece\u524d\u9762\u7684\u8f93\u51fa\u6765\u770b\uff0cpage table \u4e2d\u4e5f\u6ca1\u6709\u591a\u5c11\u5185\u5bb9"]}),"\n",(0,r.jsx)(n.p,{children:"\u867d\u7136 XV6 \u5e76\u6ca1\u6709\u4f7f\u7528\uff0c\u4f46\u662f\u53e6\u4e00\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u662f\uff0c\u76f4\u63a5\u5c06 SATP \u5bc4\u5b58\u5668\u6307\u5411 kernel page table\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6240\u6709\u7684 kernel mapping \u6765\u5e2e\u52a9\u6211\u4eec\u5b58\u50a8\u7528\u6237\u5bc4\u5b58\u5668\u3002\u8fd9\u662f\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a supervisor mode \u53ef\u4ee5\u66f4\u6539 SATP \u5bc4\u5b58\u5668\u3002\u4f46\u662f\u5728 trap \u4ee3\u7801\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f trap \u673a\u5236\u7684\u6700\u5f00\u59cb\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 kernel page table \u7684\u5730\u5740\u3002\u5e76\u4e14\u66f4\u6539 SATP \u5bc4\u5b58\u5668\u7684\u6307\u4ee4\uff0c\u8981\u6c42\u5199\u5165 SATP \u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u6765\u81ea\u4e8e\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002\u6240\u4ee5\uff0c\u4e3a\u4e86\u80fd\u6267\u884c\u66f4\u65b0 page table \u7684\u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u7a7a\u95f2\u7684\u5bc4\u5b58\u5668\uff0c\u8fd9\u6837\u6211\u4eec\u624d\u80fd\u5148\u5c06 page table \u7684\u5730\u5740\u5b58\u5728\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u518d\u6267\u884c\u4fee\u6539 SATP \u5bc4\u5b58\u5668\u7684\u6307\u4ee4\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5173\u4e8e\u5bc4\u5b58\u5668\u5728 xv6 \u4e4b\u4e2d\u662f\u600e\u4e48\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\uff0c\u662f\u4f7f\u7528\u4e86 csrrw \u8fd9\u4e2a\u6307\u4ee4\u548c sscratch \u8fd9\u4e2a\u989d\u5916\u5bc4\u5b58\u5668\uff0c\u524d\u9762\u63d0\u8fc7\u4e00\u4e9b\uff0c\u5177\u4f53\u53ef\u4ee5\u770b"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/lec06-isolation-and-system-call-entry-exit-robert/6.5-uservec",children:"\u8fd9\u91cc"})}),"\n",(0,r.jsx)(n.p,{children:"lec6 \u4e4b\u4e2d\u8fd8\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u8ba8\u8bba"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4fdd\u5b58\u5728 trapframe\uff0c\u800c\u4e0d\u662f\u7528\u6237\u4ee3\u7801\u7684\u6808\u4e2d\uff1f\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f\uff0c\u6211\u4eec\u4e0d\u786e\u5b9a\u7528\u6237\u7a0b\u5e8f\u662f\u5426\u6709\u6808\uff0c\u5fc5\u7136\u6709\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u6808\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u7f16\u7a0b\u8bed\u8a00\u7684\u7a0b\u5e8f\uff0cStack Pointer \u4e0d\u6307\u5411\u4efb\u4f55\u5730\u5740\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u6709\u6808\uff0c\u4f46\u662f\u6216\u8bb8\u5b83\u7684\u683c\u5f0f\u5f88\u5947\u602a\uff0c\u5185\u6838\u5e76\u4e0d\u80fd\u7406\u89e3\u3002\u6bd4\u5982\uff0c\u7f16\u7a0b\u8bed\u8a00\u4ee5\u5806\u4e2d\u4ee5\u5c0f\u5757\u6765\u5206\u914d\u6808\uff0c\u7f16\u7a0b\u8bed\u8a00\u7684\u8fd0\u884c\u65f6\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u5c0f\u5757\u7684\u5185\u5b58\u6765\u4f5c\u4e3a\u6808\uff0c\u4f46\u662f\u5185\u6838\u5e76\u4e0d\u77e5\u9053\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u8fd0\u884c\u4efb\u610f\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u7684\u7528\u6237\u7a0b\u5e8f\uff0c\u5185\u6838\u5c31\u4e0d\u80fd\u5047\u8bbe\u7528\u6237\u5185\u5b58\u7684\u54ea\u90e8\u5206\u53ef\u4ee5\u8bbf\u95ee\uff0c\u54ea\u90e8\u5206\u6709\u6548\uff0c\u54ea\u90e8\u5206\u5b58\u5728\u3002\u6240\u4ee5\u5185\u6838\u9700\u8981\u81ea\u5df1\u7ba1\u7406\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u4fdd\u5b58\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5185\u6838\u5c06\u8fd9\u4e9b\u5185\u5bb9\u4fdd\u5b58\u5728\u5c5e\u4e8e\u5185\u6838\u5185\u5b58\u7684 trapframe \u4e2d\uff0c\u800c\u4e0d\u662f\u7528\u6237\u5185\u5b58"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e lec6 \u5728\u8bb2 usertrap \u51fd\u6570\u7684\u65f6\u5019\u6709\u51e0\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u70b9"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u4fdd\u5b58\u7528\u6237\u7a0b\u5e8f\u8ba1\u6570\u5668\uff0c\u5b83\u4ecd\u7136\u4fdd\u5b58\u5728 SEPC \u5bc4\u5b58\u5668\u4e2d\uff0c\u4f46\u662f\u53ef\u80fd\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff1a\u5f53\u7a0b\u5e8f\u8fd8\u5728\u5185\u6838\u4e2d\u6267\u884c\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u8fdb\u5165\u5230\u90a3\u4e2a\u7a0b\u5e8f\u7684\u7528\u6237\u7a7a\u95f4\uff0c\u7136\u540e\u90a3\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u518d\u8c03\u7528\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u8fdb\u800c\u5bfc\u81f4 SEPC \u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u88ab\u8986\u76d6\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u7684 SEPC \u5bc4\u5b58\u5668\u5230\u4e00\u4e2a\u4e0e\u8be5\u8fdb\u7a0b\u5173\u8054\u7684\u5185\u5b58\u4e2d\uff0c\u8fd9\u6837\u8fd9\u4e2a\u6570\u636e\u624d\u4e0d\u4f1a\u88ab\u8986\u76d6\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 trapframe \u6765\u4fdd\u5b58\u8fd9\u4e2a\u7a0b\u5e8f\u8ba1\u6570\u5668\u3002"}),"\n",(0,r.jsx)(n.p,{children:"XV6 \u4f1a\u5728\u5904\u7406\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u80fd\u4e2d\u65ad\uff0c\u8fd9\u6837\u4e2d\u65ad\u53ef\u4ee5\u66f4\u5feb\u7684\u670d\u52a1\uff0c\u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u9700\u8981\u8bb8\u591a\u65f6\u95f4\u5904\u7406\u3002\u4e2d\u65ad\u603b\u662f\u4f1a\u88ab RISC-V \u7684 trap \u786c\u4ef6\u5173\u95ed\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\uff0c\u6211\u4eec\u9700\u8981\u663e\u5f0f\u7684\u6253\u5f00\u4e2d\u65ad\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u6700\u540e\u603b\u7ed3\u4e00\u4e0b\uff0c\u7cfb\u7edf\u8c03\u7528\u88ab\u523b\u610f\u8bbe\u8ba1\u7684\u770b\u8d77\u6765\u50cf\u662f\u51fd\u6570\u8c03\u7528\uff0c\u4f46\u662f\u80cc\u540e\u7684 user/kernel \u8f6c\u6362\u6bd4\u51fd\u6570\u8c03\u7528\u8981\u590d\u6742\u7684\u591a\u3002\u4e4b\u6240\u4ee5\u8fd9\u4e48\u590d\u6742\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\u662f\u8981\u4fdd\u6301 user/kernel \u4e4b\u95f4\u7684\u9694\u79bb\u6027\uff0c\u5185\u6838\u4e0d\u80fd\u4fe1\u4efb\u6765\u81ea\u7528\u6237\u7a7a\u95f4\u7684\u4efb\u4f55\u5185\u5bb9\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u53e6\u4e00\u65b9\u9762\uff0cXV6 \u5b9e\u73b0 trap \u7684\u65b9\u5f0f\u6bd4\u8f83\u7279\u6b8a\uff0cXV6 \u5e76\u4e0d\u5173\u5fc3\u6027\u80fd\u3002\u4f46\u662f\u901a\u5e38\u6765\u8bf4\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4eba\u5458\u548c CPU \u8bbe\u8ba1\u4eba\u5458\u975e\u5e38\u5173\u5fc3\u5982\u4f55\u63d0\u5347 trap \u7684\u6548\u7387\u548c\u901f\u5ea6\u3002\u5fc5\u7136\u8fd8\u6709\u8ddf\u6211\u4eec\u8fd9\u91cc\u4e0d\u4e00\u6837\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0 trap\uff0c\u5f53\u4f60\u5728\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\u51fa\u53d1\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u786c\u4ef6\u548c\u8f6f\u4ef6\u9700\u8981\u534f\u540c\u5de5\u4f5c\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u8bbe\u8ba1 XV6\uff0c\u91cd\u65b0\u8bbe\u8ba1 RISC-V \u6765\u4f7f\u5f97\u8fd9\u91cc\u7684\u5904\u7406\u6d41\u7a0b\u66f4\u52a0\u7b80\u5355\uff0c\u66f4\u52a0\u5feb\u901f\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u53e6\u4e00\u4e2a\u9700\u8981\u65f6\u523b\u8bb0\u4f4f\u7684\u95ee\u9898\u662f\uff0c\u6076\u610f\u8f6f\u4ef6\u662f\u5426\u80fd\u6ee5\u7528\u8fd9\u91cc\u7684\u673a\u5236\u6765\u6253\u7834\u9694\u79bb\u6027\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"43-code-calling-system-calls",children:"4.3 Code: Calling system calls"}),"\n",(0,r.jsx)(n.h4,{id:"44-code-system-call-arguments",children:"4.4 Code: System call arguments"}),"\n",(0,r.jsx)(n.p,{children:"\u7531\u4e0a\u6240\u8ff0\uff0c\u8c03\u7528 syscall \u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u5185\u6838\u4e2d\u771f\u6b63\u6267\u884c\u903b\u8f91\u7684 sys_xxx \u51fd\u6570\u9700\u8981\u4ece trapframe \u800c\u4e0d\u662f\u5bc4\u5b58\u5668\u91cc\u9762\u53d6\u53c2\u6570"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u5bf9\u5e94 syscall.c \u7684 argint, argaddr,argfd \u7b49\u8f85\u52a9\u51fd\u6570"}),"\n",(0,r.jsx)(n.p,{children:"\u5bf9\u4e8e\u522b\u7684\u53c2\u6570\uff0c\u53ea\u662f\u7e41\u7410\u4e0e\u5426\u7684\u95ee\u9898\uff1b\u5bf9\u4e8e\u6307\u9488\u53c2\u6570\uff0c\u6709\u4e24\u4e2a\u6311\u6218\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"kernel pagetable \u548c user pagetable \u4e0d\u540c"}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u4f55\u907f\u514d\u6076\u610f\u6307\u9488\uff08\u4f8b\u5982\uff0c\u6307\u5411\u67d0\u4e2a\u5185\u6838\u7279\u5b9a\u533a\u57df\uff1b\u7a7a\u6307\u9488\uff09"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"fetchstr \u662f\u4e00\u4e2a\u5f88\u597d\u7684\u793a\u8303"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"int fetchstr(uint64 addr, char *buf, int max) {\n    struct proc *p = myproc();\n    int err = copyinstr(p->pagetable, buf, addr, max);\n    // \u8fd9\u91cc\u4f20\u5165p->pagetable\u800c\u4e0d\u662f\u4f7f\u7528kernel->pagetable\n    if (err < 0)\n        return err;\n    return strlen(buf);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u6837\u4ece user space \u91cc\u9762\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u7269\u7406\u5730\u5740 pa"}),"\n",(0,r.jsx)(n.p,{children:"\u53c8\u56e0\u4e3a kernel \u662f direct-mapped \u5e76\u4e14\u5df2\u7ecf\u6620\u5c04\u4e86\u6240\u6709 pa\uff0c\u76f4\u63a5\u5f53\u4f5c kernel \u7684 va \u5c31\u884c"}),"\n",(0,r.jsx)(n.h4,{id:"45-traps-from-kernel-space",children:"4.5 Traps from kernel space"}),"\n",(0,r.jsx)(n.p,{children:"\u5728 kernel \u7684 trap \u6709\u4ee5\u4e0b\u7684\u4f18\u52bf\uff1a"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u6b64\u65f6\u7684\u9875\u8868\u5df2\u7ecf\u662f kernel pagetable\uff0c\u4e0d\u9700\u8981\u5207\u6362"}),"\n",(0,r.jsx)(n.li,{children:"\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u786e\u4fe1\u6709\u4e00\u4e2a kernel stack(\u6b63\u5982\u4e0a\u9762\u8ba8\u8bba\u7684\uff0cuser process \u53ef\u80fd\u6ca1\u6709 stack\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u653e\u5728 trapframe \u8fd9\u4e2a\u5b9e\u9645\u4e0a\u662f kernel \u7684\u5185\u5b58\u91cc\u9762)\uff0c\u90a3\u4e48 trap \u7684\u8fc7\u7a0b\u4e4b\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u5bc4\u5b58\u5668\u5b58\u50a8\u5728\u5185\u6838\u6808\u4e0a"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4e0d\u540c\u7684\u786c\u4ef6\u7ebf\u7a0b\uff08cpu\uff09\u5f53\u7136\u6709\u4e0d\u540c\u7684 kernel stack\uff0c\u8fd9\u4f7f\u5f97 kernel trap \u7684\u8fdb\u7a0b\u8c03\u5ea6\u66f4\u52a0\u65b9\u4fbf"}),"\n",(0,r.jsxs)(n.p,{children:["\u9274\u4e8e kerneltrap \u4e4b\u4e2d yield \u653e\u5f03\u81ea\u5df1\u7684 cpu\uff08\u53d1\u751f\u8fdb\u7a0b\u8c03\u5ea6\uff09\u4e4b\u540e\uff0csepc \u53ef\u80fd\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5728 kerneltrap \u7684 local variable\uff08\u5728\u672c cpu \u7684 kernel stack \u91cc\u9762\uff09\u5b58\u50a8\u4e86",(0,r.jsx)(n.code,{children:"uint sepc;"})," yield()\u7ed3\u675f\u540e\u4f7f\u7528 w_sepc(sepc)\u91cd\u65b0\u52a0\u8f7d\u81ea\u5df1\u7684 trap \u8fd4\u56de\u503c"]}),"\n",(0,r.jsx)(n.p,{children:"\u5728 usertrap \u4e4b\u4e2d\uff0c\u5148\u662f ecall \u8fdb\u5165 trampoline.S \u7684 uservec,\u518d\u8fdb\u5165 usertrap"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'void usertrap(void) {\n    int which_dev = 0;\n\n    if ((r_sstatus() & SSTATUS_SPP) != 0)\n        panic("usertrap: not from user mode");\n\n    // send interrupts and exceptions to kerneltrap(),\n    // since we\'re now in the kernel.\n    w_stvec((uint64)kernelvec);\n\n    struct proc *p = myproc();\n\n    // save user program counter.\n    p->trapframe->epc = r_sepc();\n\n    if (r_scause() == 8) {\n        // system call\n\n        if (p->killed)\n            exit(-1);\n\n        // sepc points to the ecall instruction,\n        // but we want to return to the next instruction.\n        p->trapframe->epc += 4;\n\n        // an interrupt will change sstatus &c registers,\n        // so don\'t enable until done with those registers.\n        intr_on();\n\n        syscall();\n    } else if ((which_dev = devintr()) != 0) {\n        // ok\n    } else {\n        printf("usertrap(): unexpected scause %p pid=%d\\n", r_scause(), p->pid);\n        printf("            sepc=%p stval=%p\\n", r_sepc(), r_stval());\n        p->killed = 1;\n    }\n\n    if (p->killed)\n        exit(-1);\n\n    // give up the CPU if this is a timer interrupt.\n    if (which_dev == 2)\n        yield();\n\n    usertrapret();\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u5728\u8fd9\u91cc\u6539\u6210",(0,r.jsx)(n.code,{children:"w_stvec((uint64)kernelvec);"}),"\u5207\u6362\u6210 kernel \u7684 stvec \u662f\u56e0\u4e3a\u6b64\u65f6\u5728\u5185\u6838\u6001\u4e86\uff0c\u5982\u679c\u5728\u5904\u7406 trap \u7684\u4e2d\u95f4\u518d\u53d1\u751f trap\uff08\u867d\u7136\u8fd9\u91cc\u5173\u95ed\u4e86\u4e2d\u65ad\u4f46\u8fd8\u6709\u5176\u4ed6\u53ef\u80fd\u7684 trap\uff09,\u6b64\u65f6\u5e94\u8be5\u662f kernel trap"]}),"\n",(0,r.jsx)(n.p,{children:"\u7136\u540e\u540e\u9762 ret \u7684\u65f6\u5019\u518d\u6539\u56de uservec\uff0c\u8fd9\u6837\u53cd\u590d\u6a2a\u8df3\uff0c\u8fbe\u6210\u7a33\u5b9a\u7684\u5faa\u73af"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u5373\u4f7f\u5173\u95ed\u4e86\u4e2d\u65ad\uff0c\u5904\u7406\u5668\u4ecd\u7136\u53ef\u4ee5\u54cd\u5e94\u4e00\u4e9b\u7279\u5b9a\u7684 trap\u3002\u4f8b\u5982\uff0c\u5904\u7406\u5668\u53ef\u4ee5\u54cd\u5e94\u540c\u6b65\u5f02\u5e38\uff0c\u5982\u9664\u4ee5\u96f6\u3001\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u5730\u5740\u7b49\u3002\u8fd9\u4e9b\u5f02\u5e38\u662f\u7531\u6267\u884c\u6307\u4ee4\u672c\u8eab\u5f15\u8d77\u7684\uff0c\u4e0e\u662f\u5426\u5f00\u542f\u4e2d\u65ad\u65e0\u5173\u3002\u6b64\u5916\uff0c\u5904\u7406\u5668\u4e5f\u53ef\u4ee5\u54cd\u5e94\u4e00\u4e9b\u975e\u5c4f\u853d\u4e2d\u65ad\uff08non-maskable interrupts\uff09\uff0c\u8fd9\u4e9b\u4e2d\u65ad\u662f\u7531\u4e25\u91cd\u7684\u786c\u4ef6\u9519\u8bef\u5f15\u8d77\u7684\uff0c\u5982\u7535\u6e90\u6545\u969c\u6216\u5185\u5b58\u9519\u8bef\uff0c\u5b83\u4eec\u4e0d\u80fd\u88ab\u666e\u901a\u7684\u4e2d\u65ad\u5173\u95ed\u6307\u4ee4\u963b\u6b62\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u5173\u95ed\u4e2d\u65ad\u662f\u56e0\u4e3a\u6b64\u65f6\u5728 kernel space\uff0c\u518d ecall \u7684\u8bdd\u5c31\u5bc4\u4e86"}),"\n",(0,r.jsx)(n.h4,{id:"46-page-fault-exceptions",children:"4.6 Page-fault exceptions"}),"\n",(0,r.jsx)(n.p,{children:"xv6 \u5bf9 exception \u7684\u5904\u7406\u975e\u5e38\u7684\u7b80\u5355\u7c97\u66b4\uff1a"}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u662f user process \u89e6\u53d1\u7684 exception\uff0ckernel \u5c31\u4f1a\u6740\u6389\u8fd9\u4e2a process"}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u662f kernel \u89e6\u53d1\u7684 exception\uff0c\u5c31\u4f1a\u89e6\u53d1 panic"}),"\n",(0,r.jsx)(n.p,{children:"\u6210\u719f\u7684 OS \u6709 COW\uff08Copy On Write\uff09\u7b49\u673a\u5236\uff0cRISCV \u5b9e\u9645\u4e0a\u80fd\u5206\u8fa8 page fault \u662f\u4ece load\uff0cstore \u8fd8\u662f instruction page fault"}),"\n",(0,r.jsx)(n.p,{children:"\u5b9e\u73b0 COW \u8fd8\u9700\u8981\u6709 book keeping \u673a\u5236\uff0c\u6b64\u65f6\u5224\u65ad\u4e00\u4e2a\u7269\u7406\u9875\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5c31\u9700\u8981\u989d\u5916\u7684\u4e00\u4e9b\u8ba1\u6570\u673a\u5236\uff0c\u4e00\u4e2a\u7269\u7406\u9875\u53ef\u4ee5\u5728\u591a\u4e2a\u9875\u8868\u4e4b\u4e2d\u51fa\u73b0\uff08\u51fa\u73b0\u7684\u6570\u91cf\u4f9d\u8d56\u4e8e fork \u548c page fault,exec \u548c exit\uff09"}),"\n",(0,r.jsx)(n.p,{children:"\u53e6\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u4f18\u5316\u662f COW \u673a\u5236\u4e0b\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a pagetable \u6301\u6709\u5bf9\u67d0\u4e2a\u7269\u7406\u9875\u7684\u5f15\u7528\u7684\u8bdd\uff0c\u5b8c\u5168\u53ef\u4ee5\u4e0d copy \u8fd9\u4e2a\u7269\u7406\u9875\u5230\u8fdb\u7a0b\u7684 user memory"}),"\n",(0,r.jsx)(n.p,{children:"pagetable \u548c pagefault \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u80fd\u6574\u51fa\u4e00\u4e9b\u6709\u8da3\u7684\u673a\u5236\uff0c\u6bd4\u5982 lazy allocation"}),"\n",(0,r.jsx)(n.p,{children:"\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528 sbrk \u53bb\u5c1d\u8bd5\u53d6\u5f97\u66f4\u591a\u7684\u5185\u5b58\u7684\u65f6\u5019\uff0c\u5185\u6838\u53ea\u589e\u957f\u8fdb\u7a0b\u7684 size\uff0c\u4f46\u4e0d\u5b9e\u9645 alloc \u7269\u7406\u9875\uff0c\u4e5f\u4e0d\u66f4\u65b0 PTE"}),"\n",(0,r.jsx)(n.p,{children:"\u5c31\u884c COW \u4e00\u6837\uff0c\u89e6\u53d1 page fault \u7684\u65f6\u5019\u624d\u53bb\u5b9e\u9645 alloc"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e2a feature \u7684\u597d\u5904\u6bd4\u521d\u6b65\u8bbe\u60f3\u7684\u8fd8\u591a\uff1a\u6bd4\u5982\u5bf9\u4e8e\u5927\u7684\u5185\u5b58\u7533\u8bf7\uff0clazy allocation \u80fd\u4f7f\u5f97\u5185\u5b58\u7684\u589e\u957f\u662f\u968f\u65f6\u95f4\u6162\u6162\u589e\u957f\u7684\uff08\u800c\u4e0d\u662f\u4e00\u53e3\u6c14\u5206\u914d\u4e00\u4e2a\u5927\u5185\u5b58\uff09\uff1b\u53c8\u6bd4\u5982\u5bf9\u4e8e\u5927\u5185\u5b58\u7533\u8bf7\uff0cOS \u5b9e\u9645\u53ef\u4ee5\u4e00\u6b21 page fault \u7ed9 a batch of pages\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u4e00\u4e2a page alloc"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd8\u6709\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684 feature \u662f demand paging"}),"\n",(0,r.jsx)(n.p,{children:"xv6 \u662f eagerly \u52a0\u8f7d\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f1a\u4e00\u53e3\u6c14\u52a0\u8f7d\u6574\u4e2a\u5185\u6838\u7684.text \u548c.data \u6bb5\u5230\u5185\u5b58\u4e4b\u4e2d"}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u73b0\u4ee3 OS \u4f7f\u7528 demand paging\uff0c\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u53ea\u662f\u7b80\u5355\u7684\u521b\u5efa pagetable\uff0c\u5e76\u5c06 PTE \u8bbe\u7f6e\u6210 invalid\uff0c\u7136\u540e\u7b49\u5230\u8bbf\u95ee\u4e86\u8fd9\u4e2a PTE\uff0c\u89e6\u53d1 page fault \u7684\u65f6\u5019\u624d\u4f1a\u52a0\u8f7d\u6570\u636e"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd8\u6709\u5c31\u662f paging in disk\uff0c\u53ea\u5728\u5185\u5b58\u91cc\u9762\u653e\u6700\u5e38\u7528\u7684\u6570\u636e\u548c\u4ee3\u7801\u6bb5\uff0c\u5269\u4e0b\u7684\u5b58\u5230 disk \u91cc\u9762\uff08\u79f0\u4e4b\u4e3a page out\uff09\u5e76\u8bbe\u7f6e PTE \u4e3a invalid\uff0c\u7136\u540e\u89e6\u53d1 page fault \u4e4b\u540e\u518d\u4ece disk \u91cc\u9762\u52a0\u8f7d\u56de\u6765\uff08page in\uff09"}),"\n",(0,r.jsx)(n.p,{children:"Linux \u91cc\u9762\u8fd8\u6709\u6bd4\u5982\u5c06\u4e00\u4e2a\u7a00\u758f\u5927\u77e9\u9635\u5168\u90e8\u6620\u5c04\u5230\u51e0\u4e2a page \u7684 page fault trick\uff0c\u591a\u79cd trick \u7efc\u5408\u4f5c\u7528\u4e4b\u4e0b\uff0c\u4f7f\u5f97 Linux \u8fdb\u7a0b\u5360\u7528\u7684 VA \u5927\u5c0f\u53cd\u800c\u4e00\u822c\u8fdc\u8fdc\u5927\u4e8e\u5b9e\u9645\u7269\u7406\u5b9e\u9645\u7a7a\u95f4"}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u4f7f\u7528 demand paging,lazy alloction \u7b49\u7684\u53e6\u4e00\u4e2a\u597d\u5904\u662f\uff1a\u7531\u4e8e\u73b0\u4ee3\u8ba1\u7b97\u673a\u5e94\u7528\u57fa\u672c\u90fd\u4e0d\u662f\u7a7a\u95f4\u53cb\u597d\u7684\uff0c\u90fd\u4f1a\u5c3d\u53ef\u80fd\u53d6\u5f97\u66f4\u591a\u7684\u7b97\u529b\u548c\u7a7a\u95f4\u8d44\u6e90\u6765\u4fdd\u8bc1\u54cd\u5e94\u7b49\u7279\u6027\uff0c\u6240\u4ee5\u518d\u5927\u7684 RAM \u4e5f\u4f1a\u51fa\u73b0\u5185\u5b58\u4e0d\u8db3\uff0c\u9700\u8981\u9891\u7e41 evict \u5185\u5b58\u9875\u7684\u60c5\u51b5\uff0c\u800c evict \u662f\u4e00\u4e2a\u5f00\u9500\u4e0d\u5c0f\u7684\u64cd\u4f5c\uff0calloc \u7684\u66f4\u591a\uff0cevict \u7684\u4e5f\u66f4\u591a\uff0clazy \u800c\u4e0d\u662f eagar \u7684\u7b56\u7565\u4f18\u52bf\u5c31\u8d8a\u660e\u663e"}),"\n",(0,r.jsx)(n.h4,{id:"47-real-world",children:"4.7 Real World"}),"\n",(0,r.jsx)(n.p,{children:"xv6 \u6574\u4e2a trapframe \u548c TRAMPOLINE \u7684\u590d\u6742\u8bbe\u8ba1\u5b9e\u9645\u662f RISCV \u201c\u6307\u4ee4\uff08ecall\uff09\u5c3d\u53ef\u80fd\u505a\u5c11\u7684\u5de5\u4f5c\u201d\u7684\u8bbe\u8ba1\u539f\u5219\u63a8\u52a8\u7684"}),"\n",(0,r.jsx)(n.p,{children:"\u4f46\u5b9e\u9645\u4e0a\uff0c\u4e00\u4e2a\u6700\u7b80\u5355\u6d88\u9664\u8fd9\u4e2a\u590d\u6742\u8f6c\u6362\u7684\u673a\u5236\u5c31\u662f\u628a kernel pagetable \u590d\u5236\u5230\u6bcf\u4e00\u4e2a user pagetable\uff0c\u7136\u540e\u53ea\u662f\u7528\u6743\u9650\u4f4d\u6765\u63a7\u5236\u6743\u9650"}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u6837\u7684\u597d\u5904\u6709\u5f88\u591a\uff0csyscall \u7684\u4ee3\u7801\u5927\u5927\u7b80\u5316\uff0ckernel \u53ef\u4ee5\u76f4\u63a5\u89e3\u5f15\u7528 user pointer\uff0cetc\uff1b\u8bb8\u591a\u751f\u4ea7\u7ea7\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u4e86\u8fd9\u79cd\u8bbe\u8ba1"}),"\n",(0,r.jsx)(n.p,{children:"xv6 \u4e4b\u6240\u4ee5\u8bbe\u8ba1\u6210 trapframe \u8fd9\u6837\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4ee3\u7801\u7684\u5b89\u5168\u6027\u4ee5\u53ca\u907f\u514d\u8003\u8651\u4e0a\u8ff0\u7684 kernel PTE \u548c user PTE \u5982\u4f55\u907f\u514d\u91cd\u53e0\u7684\u95ee\u9898\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u751f\u4ea7\u7ea7\u7684 OS \u4e4b\u4e2d\uff0c\u4e0d\u4ec5\u8981\u6709\u524d\u9762\u7684 COW, demand paging, paging in disk,lazy allocation\uff0c\u8fd8\u8981\u6709 mmap, cache buffer \u7b49\u8bb8\u591a\u673a\u5236\uff0c\u4ee5\u53ca\u7206\u5185\u5b58\u65f6\u5019\u7684\u59a5\u5584\u5904\u7406\u65b9\u6cd5\uff08xv6 \u5982\u679c\u7206\u5185\u5b58\u4e86\u5c31\u76f4\u63a5\u8fd4\u56de error \u6216\u8005 kill \u5e94\u7528\u7a0b\u5e8f\uff09"})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);