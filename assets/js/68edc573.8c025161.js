"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8204],{18595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>d,metadata:()=>i,toc:()=>o});var r=t(74848),a=t(28453);const d={},s="buddy system",i={id:"Chcore\u6e90\u7801\u9605\u8bfb/\u5185\u5b58\u5206\u914d\u5668/buddy-sys",title:"buddy system",description:"Buddy System \u7b80\u4ecb",source:"@site/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u5185\u5b58\u5206\u914d\u5668/1.buddy-sys.md",sourceDirName:"Chcore\u6e90\u7801\u9605\u8bfb/\u5185\u5b58\u5206\u914d\u5668",slug:"/Chcore\u6e90\u7801\u9605\u8bfb/\u5185\u5b58\u5206\u914d\u5668/buddy-sys",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u5185\u5b58\u5206\u914d\u5668/buddy-sys",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"notesSidebar",previous:{title:"\u5b9e\u673a\u4e0e\u6027\u80fd\u4f18\u5316",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/rpc/\u5b9e\u673a\u4e0e\u6027\u80fd\u4f18\u5316"},next:{title:"\u5c0f\u5185\u5b58\u5206\u914d\u4f18\u5316 SLab",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u5185\u5b58\u5206\u914d\u5668/slab"}},l={},o=[{value:"<strong>Buddy System \u7b80\u4ecb</strong>",id:"buddy-system-\u7b80\u4ecb",level:3},{value:"\u5de5\u4f5c\u539f\u7406",id:"\u5de5\u4f5c\u539f\u7406",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"buddy-system",children:"buddy system"}),"\n",(0,r.jsx)(n.h3,{id:"buddy-system-\u7b80\u4ecb",children:(0,r.jsx)(n.strong,{children:"Buddy System \u7b80\u4ecb"})}),"\n",(0,r.jsx)(n.p,{children:"Buddy System \u662f\u4e00\u79cd\u5185\u5b58\u5206\u914d\u7b97\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u5185\u5b58\u7ba1\u7406\u3002\u5b83\u5c06\u5185\u5b58\u5206\u6210\u5927\u5c0f\u4e3a2\u7684\u5e42\u6b21\u65b9\u7684\u5757\uff0c\u5e76\u901a\u8fc7\u5408\u5e76\u548c\u5206\u5272\u8fd9\u4e9b\u5757\u6765\u6ee1\u8db3\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u7684\u9700\u6c42\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"\u539f\u7406\u56fe",src:t(9669).A+"",width:"1232",height:"1015"})}),"\n",(0,r.jsx)(n.h3,{id:"\u5de5\u4f5c\u539f\u7406",children:"\u5de5\u4f5c\u539f\u7406"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u521d\u59cb\u5316"}),"\uff1a\u5185\u5b58\u88ab\u5206\u6210\u5927\u5c0f\u4e3a2\u7684\u5e42\u6b21\u65b9\u7684\u5757\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u5206\u914d"}),"\uff1a\u5f53\u9700\u8981\u5206\u914d\u5185\u5b58\u65f6\uff0c\u627e\u5230\u6700\u5c0f\u7684\u8db3\u591f\u5927\u7684\u5757\u3002\u5982\u679c\u8be5\u5757\u592a\u5927\uff0c\u5219\u5c06\u5176\u5206\u5272\u6210\u4e24\u4e2a\u201c\u4f19\u4f34\u201d\u5757\uff0c\u76f4\u5230\u5757\u7684\u5927\u5c0f\u5408\u9002\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u91ca\u653e"}),"\uff1a\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u68c0\u67e5\u5176\u201c\u4f19\u4f34\u201d\u662f\u5426\u4e5f\u7a7a\u95f2\u3002\u5982\u679c\u662f\uff0c\u5219\u5408\u5e76\u8fd9\u4e24\u4e2a\u5757\uff0c\u5f62\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u5757\uff0c\u7ee7\u7eed\u68c0\u67e5\u5e76\u5408\u5e76\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5408\u5e76\u4e3a\u6b62\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u6e90\u7801\u89e3\u6790:"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u5185\u5b58\u6392\u5e03\u56fe ref: ",(0,r.jsx)(n.a,{href:"https://www.cnblogs.com/kangyupl/p/chcore_lab2.html",children:"https://www.cnblogs.com/kangyupl/p/chcore_lab2.html"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u25c4\u2500 page_end (metadata_end + (npages * PAGE_SIZE))\n\u2502             \u2502\n\u2502    pages    \u2502\n\u2502             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u25c4\u2500 metadata_end (img_end + (npages * sizeof(struct page))\n\u2502page metadata\u2502\n\u2502             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u25c4\u2500 metadata_start (img_end)\n\u2502 KERNEL IMG  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u25c4\u2500 init_end\n\u2502 bootloader  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u25c4\u2500 0x00080000 (img_start, init_start)\n\u2502  reserved   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u25c4\u2500 0x00000000\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5185\u90e8\u8bbe\u8ba1:"}),"\n",(0,r.jsx)(n.p,{children:"get_buddy_chunk"}),"\n",(0,r.jsx)(n.p,{children:"\u6d89\u53ca\u7684\u51e0\u4e2a\u51fd\u6570\u547d\u540d\u90fd\u602a\u602a\u7684"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"struct page"}),"  & ",(0,r.jsx)(n.code,{children:"page"})," \u6307 metadata\u6bb5\u7684page info\u7ed3\u6784\u4f53, \u8bb0\u5f55alloc, pool\u7b49\u4fe1\u606f\uff0c\u4e5f\u4f5c\u4e3afreelist\u94fe\u8868\u8282\u70b9"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"virt"})," \u5b9e\u9645\u7684\u5730\u5740\u548c\u5206\u914d\u7684\u6570\u636e\u6bb5, \u731c\u6d4b\u53eb ",(0,r.jsx)(n.code,{children:"virt"})," \u662f\u56e0\u4e3a\u524d\u9762\u7684direct mapping\uff1f"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Lab1\u4e4b\u4e2d\uff0c\u5185\u6838\u6bb5 ",(0,r.jsx)(n.code,{children:"vaddr"}),"\xa0\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u662f\xa0",(0,r.jsx)(n.code,{children:"vaddr - KERNEL_VADDR"}),"\uff0c\u7528\u6237\u5730\u5740\u7a7a\u95f4va = pa"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u56e0\u6b64\uff0c\u5728\u540e\u9762\u5b8c\u6210\u9875\u8868\u7684\u521d\u59cb\u5316\u548c\u5206\u914d\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u8fd9\u4e2a\u65b0\u7684\u9875\u8868\u6765\u5efa\u7acb\u65b0\u7684\u6620\u5c04"}),"\n",(0,r.jsx)(n.p,{children:"\u7531\u4e8epage\u6307\u9488\u6307\u5411\u7684\u662fmeta data\u7684\u5730\u5740\u6bb5\uff0c\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u5b9e\u9645\u610f\u601d\u662f meta data \u548c actual page\u7684\u8f6c\u6362"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'void *page_to_virt(struct page *page)\n{\n        vaddr_t addr;\n        struct phys_mem_pool *pool = page->pool;\n\n        BUG_ON(pool == NULL);\n\n        /* page_idx * BUDDY_PAGE_SIZE + start_addr */\n        addr = (page - pool->page_metadata) * BUDDY_PAGE_SIZE\n               + pool->pool_start_addr;\n        return (void *)addr;\n}\n\nstruct page *virt_to_page(void *ptr)\n{\n        struct page *page;\n        struct phys_mem_pool *pool = NULL;\n        vaddr_t addr = (vaddr_t)ptr;\n        int i;\n\n        /* Find the corresponding physical memory pool. */\n        for (i = 0; i < physmem_map_num; ++i) {\n                if (addr >= global_mem[i].pool_start_addr\n                    && addr < global_mem[i].pool_start_addr\n                                       + global_mem[i].pool_mem_size) {\n                        pool = &global_mem[i];\n                        break;\n                }\n        }\n\n        if (pool == NULL) {\n                kdebug("invalid pool in %s", __func__);\n                return NULL;\n        }\n\n        page = pool->page_metadata\n               + (((vaddr_t)addr - pool->pool_start_addr) / BUDDY_PAGE_SIZE);\n        return page;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u660e\u767d\u4e86\u8fd9\u4e2a\u4e4b\u540eget_buddy_chunk\u5c31\u7b80\u5355\u4e86\uff0c\u4ece\u4f20\u5165\u7684page metadata pointer\u5f97\u5230\u5b9e\u9645\u7684page\u5730\u5740\uff0c\u518d\u901a\u8fc7\u4e00\u4e2a\u5f02\u6216\u64cd\u4f5c\u5f97\u5230\u67d0\u4e2aorder\u4e0a\u7684buddy page, \u6700\u540e\u8fd4\u56de\u8fd9\u4e2abuddy page\u7684metadata pointer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static struct page *get_buddy_chunk(struct phys_mem_pool *pool,\n                                    struct page *chunk)\n{\n        vaddr_t chunk_addr;\n        vaddr_t buddy_chunk_addr;\n        int order;\n\n        /* Get the address of the chunk. */\n        chunk_addr = (vaddr_t)page_to_virt(chunk);\n        order = chunk->order;\n        /*\n         * Calculate the address of the buddy chunk according to the address\n         * relationship between buddies.\n         */\n        buddy_chunk_addr = chunk_addr\n                           ^ (1UL << (order + BUDDY_PAGE_SIZE_ORDER));\n\n        /* Check whether the buddy_chunk_addr belongs to pool. */\n        if ((buddy_chunk_addr < pool->pool_start_addr)\n            || ((buddy_chunk_addr + (1 << order) * BUDDY_PAGE_SIZE)\n                > (pool->pool_start_addr + pool->pool_mem_size))) {\n                return NULL;\n        }\n\n        return virt_to_page((void *)buddy_chunk_addr);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"split_chunk"}),"\n",(0,r.jsx)(n.p,{children:"\u6bd4\u8f83\u6709\u8da3\u7684\u662f\u5b83\u7684api\u8bbe\u8ba1\uff0c\u4f20\u5165\u7684order\u662f\u8868\u793a\u6700\u540e\u9700\u8981\u201c\u5f97\u5230\u201d\u8fd9\u4e2aorder\u7684chunk\uff0c\u5982\u679c\u5f97\u4e0d\u5230\u5c31\u9012\u5f52\u5206\u88c2\uff0c\u5e76\u628a\u4e2d\u95f4\u5206\u88c2\u51fa\u6765\u7684\u7a7a\u5757\u653e\u5165\u5bf9\u5e94order\u7684free_list"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'static struct page *split_chunk(struct phys_mem_pool *pool, int order,\n                                struct page *chunk)\n{\n        struct page *buddy_chunk;\n        struct list_head *free_list;\n\n        /*\n         * If the @chunk\'s order equals to the required order,\n         * return this chunk.\n         */\n        if (chunk->order == order)\n                return chunk;\n\n        /*\n         * If the current order is larger than the required order,\n         * split the memory chunck into two halves.\n         */\n        chunk->order -= 1;\n\n        buddy_chunk = get_buddy_chunk(pool, chunk);\n        /* The buddy_chunk must exist since we are spliting a large chunk. */\n        if (buddy_chunk == NULL) {\n                BUG("buddy_chunk must exist");\n                return NULL;\n        }\n\n        /* Set the metadata of the remaining buddy_chunk. */\n        buddy_chunk->order = chunk->order;\n        buddy_chunk->allocated = 0;\n\n        /* Put the remaining buddy_chunk into its correspondint free list. */\n        free_list = &(pool->free_lists[buddy_chunk->order].free_list);\n        list_add(&buddy_chunk->node, free_list);\n        pool->free_lists[buddy_chunk->order].nr_free += 1;\n\n        /* Continue to split current chunk (@chunk). */\n        return split_chunk(pool, order, chunk);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"merge_chunk"}),"\n",(0,r.jsx)(n.p,{children:"\u540c\u7406\uff0c\u627e\u5230buddy chunk, \u4e4b\u540e\u67e5\u770b\u4ed6"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u662f\u5426\u7a7a\u95f2"}),"\n",(0,r.jsx)(n.li,{children:"\u662f\u5426\u540c\u9636"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u662f\u5c31\u5408\u5e76\uff0c\u5e76\u4ecefree_list\u4e4b\u4e2d\u5220\u4e86\u5b83"}),"\n",(0,r.jsx)(n.p,{children:"\u4f46\u8fd9\u4e2a\u5220\u9664\u6bd4\u8f83\u6709\u610f\u601d\uff0c\u662f\u4e00\u4e2aO(1)\u7684\u5220\u9664\uff0c\u8fd9\u5c31\u4f53\u73b0meta data\u6bb5\u7684\u5a01\u529b\u4e86\uff0c\u4ecepage meta\u2192 page data \u2192 buddy data\u2192buddy meta\u2192buddy node pointer, \u4e4b\u540e\u5c31\u662f\u53cc\u5411\u94fe\u8868\u7684\u64cd\u4f5c"}),"\n",(0,r.jsx)(n.p,{children:"\u8be6\u7ec6\u6765\u8bf4"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["page meta \u2192 page data\uff1a ",(0,r.jsx)(n.code,{children:"page_to_virt"})]}),"\n",(0,r.jsxs)(n.li,{children:["page_data \u2192 buddy data\uff1a xor\uff0c ",(0,r.jsx)(n.code,{children:"get_buddy_chunk"})]}),"\n",(0,r.jsxs)(n.li,{children:["buddy_data \u2192 buddy meta: ",(0,r.jsx)(n.code,{children:"virt_to_page"})]}),"\n",(0,r.jsx)(n.li,{children:"meta \u2192 alloc\u4fe1\u606f\u66f4\u65b0\uff0cfree list\u66f4\u65b0\u7b49"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"list_del(&(buddy_chunk->node));\n\nstatic inline void list_del(struct list_head *node)\n{\n\tnode->prev->next = node->next;\n\tnode->next->prev = node->prev;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"init_buddy"}),"\n",(0,r.jsx)(n.p,{children:"\u521d\u59cb\u5316\u7269\u7406\u5185\u5b58\u6c60\u7684\u51e0\u4e2a\u5c5e\u6027"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u521d\u59cb\u5316free_list"}),"\n",(0,r.jsx)(n.li,{children:"\u6e05\u7406\u5e76\u521d\u59cb\u5316meta_data area"}),"\n",(0,r.jsx)(n.li,{children:"\u901a\u8fc7free\u628a\u7269\u7406\u5185\u5b58\u9875\u653e\u5230free_list\u4e4b\u4e2d"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void init_buddy(struct phys_mem_pool *pool, struct page *start_page,\n                vaddr_t start_addr, unsigned long page_num)\n{\n        int order;\n        int page_idx;\n        struct page *page;\n\n        BUG_ON(lock_init(&pool->buddy_lock) != 0);\n\n        /* Init the physical memory pool. */\n        pool->pool_start_addr = start_addr;\n        pool->page_metadata = start_page;\n        pool->pool_mem_size = page_num * BUDDY_PAGE_SIZE;\n        /* This field is for unit test only. */\n        pool->pool_phys_page_num = page_num;\n\n        /* Init the free lists */\n        for (order = 0; order < BUDDY_MAX_ORDER; ++order) {\n                pool->free_lists[order].nr_free = 0;\n                init_list_head(&(pool->free_lists[order].free_list));\n        }\n\n        /* Clear the page_metadata area. */\n        memset((char *)start_page, 0, page_num * sizeof(struct page));\n\n        /* Init the page_metadata area. */\n        for (page_idx = 0; page_idx < page_num; ++page_idx) {\n                page = start_page + page_idx;\n                page->allocated = 1;\n                page->order = 0;\n                page->pool = pool;\n        }\n\n        /* Put each physical memory page into the free lists. */\n        for (page_idx = 0; page_idx < page_num; ++page_idx) {\n                page = start_page + page_idx;\n                buddy_free_pages(pool, page);\n        }\n}\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5916\u90e8\u63a5\u53e3:"}),"\n",(0,r.jsx)(n.p,{children:"buddy_get_pages"}),"\n",(0,r.jsx)(n.p,{children:"\u6709\u4e86\u4e0a\u9762\u7684\u8f85\u52a9\u51fd\u6570\u4e4b\u540e\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u601d\u8def\u5c31\u5f88\u6e05\u6670\u4e86"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u62ff\u9501"}),"\n",(0,r.jsx)(n.li,{children:"\u627e\u5230\u4e00\u4e2a\u8db3\u591f\u5927\u4e14free\u7684chunk\uff08\u5b9e\u9645\u4e0aorder\u4ece\u5c0f\u5230\u5927\u770bfree list\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u884c\uff09"}),"\n",(0,r.jsx)(n.li,{children:"\u5982\u679c\u8fd9\u4e2achunk\u6bd4\u9700\u8981\u7684\u5927\uff0csplit_chunk\u4e4b\u540e\u8fd4\u56de\u7ed9\u8c03\u7528\u8005"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u4ee3\u7801\u5982\u4e0b\uff0c\u4e2d\u95f4\u6bd4\u8f83hack\u7684\u5c31\u662f\u8fd9\u4e2a\u4ecefree_list\u5f97\u5230\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684page metadata\u7684\u64cd\u4f5c"}),"\n",(0,r.jsx)(n.p,{children:"\u6ce8\u610ffree_list\u4e4b\u4e2d\u4e3a\u4e86\u52a0\u901f\u5b58\u50a8\u7684\u4e0d\u662fpage metadata\u7684\u6307\u9488page\uff0c\u800c\u662f\u76f4\u63a5\u6307\u5411\u5b9e\u9645data\u5185\u5b58\u5730\u5740\u7684\u6307\u9488node"}),"\n",(0,r.jsx)(n.p,{children:"\u800c\u4ecenode\u83b7\u53d6page\u5c31\u7528\u4e86\u4e0b\u9762\u7684list_entry\u5b8f\u8fd9\u6837\u4e00\u4e2a\u5c0f\u5c0f\u7684hack, \u5177\u4f53\u89e3\u6790\u89c1\u4e0b\u6587\uff0c\u4e3a\u4e86\u8282\u7701\u8fd9\u4e00\u6b21\u7684\u6307\u9488\u8df3\u8dc3\u771f\u662f\u62fc\u554a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"        /* Search a chunk (with just enough size) in the free lists. */\n        for (cur_order = order; cur_order < BUDDY_MAX_ORDER; ++cur_order) {\n                free_list = &(pool->free_lists[cur_order].free_list);\n                if (!list_empty(free_list)) {\n                        /* Get a free memory chunck from the free list */\n                        page = list_entry(free_list->next, struct page, node);\n                        list_del(&page->node);\n                        pool->free_lists[cur_order].nr_free -= 1;\n                        page->allocated = 1;\n                        break;\n                }\n        }\n"})}),"\n",(0,r.jsx)(n.p,{children:"buddy_free_pages"}),"\n",(0,r.jsx)(n.p,{children:"\u540c\u7406\uff0c\u62ff\u9501\uff0c\u4fee\u6539meta data\u7684\u5c5e\u6027\uff0cmerge\u4e4b\u540e\uff0c\u5728freelist\u91cc\u9762\u6dfb\u52a0\uff0c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void buddy_free_pages(struct phys_mem_pool *pool, struct page *page)\n{\n        int order;\n        struct list_head *free_list;\n\n        lock(&pool->buddy_lock);\n\n        BUG_ON(page->allocated == 0);\n        /* Mark the chunk @page as free. */\n        page->allocated = 0;\n        /* Merge the freed chunk. */\n        page = merge_chunk(pool, page);\n\n        /* Put the merged chunk into the its corresponding free list. */\n        order = page->order;\n        free_list = &(pool->free_lists[order].free_list);\n        list_add(&page->node, free_list);\n        pool->free_lists[order].nr_free += 1;\n\n        unlock(&pool->buddy_lock);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5e76\u53d1\u5b89\u5168\u6027: \u5728init\u65f6\u521d\u59cb\u5316\u9501\uff0c\u4ec5\u5728\u5916\u90e8\u63a5\u53e3get,free\u65f6\u62ff\u5927\u9501, \u7b80\u5355\u7684\u5e76\u53d1\u5b89\u5168\u6027\u4fdd\u8bc1"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u6570\u636e\u7ed3\u6784\u8bbe\u8ba1: physmem_map, page, free_list, phys_mem_pool, page_metadata"})}),"\n",(0,r.jsx)(n.p,{children:"\u7ecf\u5178Liunx\u5b8f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"#define container_of(ptr, type, field) \\\n    ((type *)((void *)(ptr) - (void *)(&(((type *)(0))->field))))\n\n#define list_entry(ptr, type, field) \\\n    container_of(ptr, type, field)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"(((type *)(0))->field)"}),"  \u5f97\u5230\u4e86field\u7684offset, \u5c06null\u5f3a\u5236\u8f6c\u6362\u6210 ",(0,r.jsx)(n.code,{children:"type"})," \u7684\u6307\u9488\u540e",(0,r.jsx)(n.code,{children:"->field"}),"  \u5c31\u7684\u5730\u5740\u5c31\u4f1a\u662foffset\uff0c\u4ece\u800c\u53ef\u4ee5\u8ba9ptr - offset\u5f97\u5230\u539f\u59cb\u7684\u5730\u5740"]}),"\n",(0,r.jsxs)(n.p,{children:["\u8fd9\u5176\u5b9e\u88ab\u8a89\u4e3a\u662f\u201cLinux\u7b2c\u4e00\u5b8f\u201d\uff0c\u4f9d\u8d56\u4e8e\u7ed3\u6784\u4f53\u7684\u53d8\u91cf\u5728\u5185\u5b58\u5730\u5740\u4e4b\u4e2d\u662f\u5927\u4e8e\u7ed3\u6784\u4f53\u7684\u5730\u5740\uff08\u5411\u4e0a\u589e\u957f\uff09\uff0c\u800cgnu manual\u7684\u539f\u6587\u5176\u5b9e\u662f ",(0,r.jsx)(n.a,{href:"https://www.gnu.org/software/c-intro-and-ref/manual/html_node/Structure-Layout.html",children:"https://www.gnu.org/software/c-intro-and-ref/manual/html_node/Structure-Layout.html"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["The precise layout of a\xa0",(0,r.jsx)(n.code,{children:"struct"}),"\xa0type is crucial when using it to overlay hardware registers, to access data structures in shared memory, or to assemble and disassemble packets for network communication. It is also important for avoiding memory waste when the program makes many objects of that type. However, the layout depends on the target platform. Each platform has conventions for structure layout, which compilers need to follow."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here are the conventions used on most platforms."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The structure\u2019s fields appear in the structure layout in the order they are declared. When possible, consecutive fields occupy consecutive bytes within the structure."})," However, if a field\u2019s type demands more alignment than it would get that way, C gives it the alignment it requires by leaving a gap after the previous field."]}),"\n",(0,r.jsx)(n.p,{children:"Once all the fields have been laid out, it is possible to determine the structure\u2019s alignment and size. The structure\u2019s alignment is the maximum alignment of any of the fields in it. Then the structure\u2019s size is rounded up to a multiple of its alignment. That may require leaving a gap at the end of the structure."}),"\n",(0,r.jsx)(n.blockquote,{children:"\n"}),"\n",(0,r.jsx)(n.p,{children:"\u53ea\u8bf4\u4e86\u201c\u6309\u7167\u58f0\u660e\u987a\u5e8f\u5728\u5185\u5b58\u5e03\u5c40\u201d\uff0c\u5fae\u5999\u5730\u6ca1\u6709\u6307\u5b9a\u65b9\u5411\uff08\u5b9e\u9645\u4e0a\u5728\u201c\u6807\u51c6c/cpp\u201d\u4e4b\u4e2d\uff0c\u8fd9\u4e2a\u5b8f\u662f\u4e2aUB\uff09"}),"\n",(0,r.jsx)(n.p,{children:"\u4e5f\u5c31\u662f\u6709\u5f88\u5fae\u5999\u7684\u70b9\u5728\u4e8e\uff0c\u5047\u5982\u8fd9\u4e2a\u7ed3\u6784\u4f53\u662f\u5728\u6808\u4e0a\u7684\uff0c\u4e14\u6808\u5411\u4e0b\u589e\u957f\uff08\u6ce8\u610fc\u6807\u51c6\u751a\u81f3\u6ca1\u6709\u201c\u5806\u201d\u548c\u201c\u6808\u201d\uff01\uff09\uff0c\u90a3\u4e48\u6808\u4e0a\u7684\u7ed3\u6784\u4f53\u7684\u5143\u7d20\u6392\u5e03\u4e5f\u9700\u8981\u4fdd\u6301\u8fd9\u4e2a\u5411\u4e0a\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u4e3e\u4e2a\u4f8b\u5b50"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include <iostream>\n#include <string>\n\nusing namespace std;\n\n#define container_of(ptr, type, field)                                         \\\n    ((type *)((char *)(ptr) - (char *)(&(((type *)(0))->field))))\nstruct A {\n    int x;\n    int y;\n};\nvoid print_A(A *a, bool is_stack) {\n    string type = is_stack ? "Stack" : "Heap";\n    cout << type << "A: " << a->x << ", " << a->y << endl;\n};\n\nint main() {\n\n    A stackA = {1, 2};\n    A *heapA = new A{3, 4};\n    A stackA2 = {5, 6};\n    A *heapA2 = new A{7, 8};\n    int *stack_y_ptr = &stackA.y;\n    int *heap_y_ptr = &heapA->y;\n    cout << "stackA: " << &stackA << ", address of y: " << stack_y_ptr << endl;\n    cout << "stackA2: " << &stackA2 << ", address of y: " << &stackA2.y << endl;\n    cout << "heapA: " << heapA << ", address of y: " << &heapA->y << endl;\n    cout << "heapA2: " << heapA2 << ", address of y: " << &heapA2->y << endl;\n    A *stack_A_ptr = container_of(stack_y_ptr, struct A, y);\n    A *heap_A_ptr = container_of(heap_y_ptr, struct A, y);\n    print_A(stack_A_ptr, true);\n    print_A(heap_A_ptr, false);\n\n    delete heapA;\n    return 0;\n}\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u5f97\u5230\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"stackA: 0x7ffe77f0b6c4, address of y: 0x7ffe77f0b6c8 // addr y > addr stackA\nstackA2: 0x7ffe77f0b6b0, address of y: 0x7ffe77f0b6b4 // addr A in stack high to low\nheapA: 0x5593be7242b0, address of y: 0x5593be7242b4 // addr y > addr heapA\nheapA2: 0x5593be7242d0, address of y: 0x5593be7242d4 //addr A in heap low to high\nStackA: 1, 2\nHeapA: 3, 4\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4f5c\u7528\u4e3a\u4ece\u4e00\u4e2a\u7ed3\u6784\u4f53\u6210\u5458\u7684\u6307\u9488\u5f97\u5230\u7ed3\u6784\u4f53\u5bb9\u5668\uff08wrapper\uff09\u7684\u6307\u9488"}),"\n",(0,r.jsx)(n.p,{children:"\u4ece\u800c\u8fbe\u6210\u7c7b\u4f3c\u53cd\u5c04\u7684\u6548\u679c"}),"\n",(0,r.jsx)(n.p,{children:"\u5728buddy_get_pages\u91cc\u9762\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u5b9e\u4f8b"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"        /* Search a chunk (with just enough size) in the free lists. */\n        for (cur_order = order; cur_order < BUDDY_MAX_ORDER; ++cur_order) {\n                free_list = &(pool->free_lists[cur_order].free_list);\n                if (!list_empty(free_list)) {\n                        /* Get a free memory chunck from the free list */\n                        page = list_entry(free_list->next, struct page, node);\n                        list_del(&page->node);\n                        pool->free_lists[cur_order].nr_free -= 1;\n                        page->allocated = 1;\n                        break;\n                }\n        }\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5728chcore\u4e2d\u66f4\u91cd\u8981\u7684\u662f\u89e3\u51b3\u4e86free_list\u548cpage\u7684\u5d4c\u5957\u5173\u7cfb"}),"\n",(0,r.jsx)(n.p,{children:"\u601d\u8003: \u5047\u8bbe\u6ca1\u6709\u8fd9\u4e2a\u5b8f\u9b54\u6cd5\uff0c\u5e94\u8be5\u600e\u4e48\u8bbe\u8ba1struct page(page metadata)\u548cstruct free_list\u7684\u5305\u542b\u7ed3\u6784\uff1f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'/*\n * The layout of each physmem:\n * | metadata (npages * sizeof(struct page)) | start_vaddr ... (npages *\n * PAGE_SIZE) |\n */\n static void init_buddy_for_one_physmem_map(int physmem_map_idx)\n{\n        paddr_t free_mem_start = 0;\n        paddr_t free_mem_end = 0;\n        struct page *page_meta_start = NULL;\n        unsigned long npages = 0;\n        unsigned long npages1 = 0;\n        paddr_t free_page_start = 0;\n\n        free_mem_start = physmem_map[physmem_map_idx][0];\n        free_mem_end = physmem_map[physmem_map_idx][1];\n        kdebug("mem pool %d, free_mem_start: 0x%lx, free_mem_end: 0x%lx\\n",\n               physmem_map_idx,\n               free_mem_start,\n               free_mem_end);\n#ifdef KSTACK_BASE\n        /* KSTACK_BASE should not locate in free_mem_start ~ free_mem_end */\n        BUG_ON(KSTACK_BASE >= phys_to_virt(free_mem_start) && KSTACK_BASE < phys_to_virt(free_mem_end));\n#endif\n        npages = (free_mem_end - free_mem_start)\n                 / (PAGE_SIZE + sizeof(struct page));\n        free_page_start = ROUND_UP(\n                free_mem_start + npages * sizeof(struct page), PAGE_SIZE);\n\n        /* Recalculate npages after alignment. */\n        npages1 = (free_mem_end - free_page_start) / PAGE_SIZE;\n        npages = npages < npages1 ? npages : npages1;\n\n        page_meta_start = (struct page *)phys_to_virt(free_mem_start);\n        kdebug("page_meta_start: 0x%lx, npages: 0x%lx, meta_size: 0x%lx, free_page_start: 0x%lx\\n",\n               page_meta_start,\n               npages,\n               sizeof(struct page),\n               free_page_start);\n\n        /* Initialize the buddy allocator based on this free memory region. */\n        init_buddy(&global_mem[physmem_map_idx],\n                   page_meta_start,\n                   phys_to_virt(free_page_start),\n                   npages);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4ece\u8fd9\u4e2amm_init\u5c31\u53ef\u4ee5\u770b\u5230\u6574\u4e00\u4e2a\u7684\u6d41\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u9996\u5148\u662f\u5728\u5168\u5c40\u53d8\u91cf\u7684global_mem\u548cphysmem_map, \u8fd9\u90e8\u5206\u4f1a\u6839\u636e\u786c\u4ef6\u6765\u5212\u5206\u51e0\u6bb5\u53ef\u4ee5\u5206\u914d\u7684\u7269\u7406\u5730\u5740\u6bb5\uff0c\u5e76\u4fdd\u7559\u5176\u8d77\u59cb\u5730\u5740\u548c\u7ed3\u675f\u5730\u5740\uff0c\u6811\u8393\u6d3e\u662f\u4e09\u6bb5\u6240\u4ee5\u662f"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"paddr_t physmem_map[N_PHYS_MEM_POOLS][2]; // N_PHYS_MEM_POOLS = 3\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u4e4b\u540echcore\u4e3a\u6bcf\u4e00\u6bb5\u7a7a\u95f4\u521d\u59cb\u5316\u4e00\u4e2abuddy allocator\uff0c\u5373"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"static void init_buddy_for_one_physmem_map(int physmem_map_idx)\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u8fd9\u91cc\u6839\u636e"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"\n/*\n * The layout of each physmem:\n * | metadata (npages * sizeof(struct page)) | start_vaddr ... (npages *\n * PAGE_SIZE) |\n */\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u6837\u7684layout \u8ba1\u7b97\u51fameta data\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\uff0c\u5b9e\u9645\u5206\u914d\u6bb5\u7684start_vaddr\u548c\u957f\u5ea6\uff0c\u548c\u6587\u4ef6\u7cfb\u7edf\u4e4b\u4e2d\u7684meta data + block data\u662f\u7c7b\u4f3c\u7684\u903b\u8f91"}),"\n",(0,r.jsx)(n.p,{children:"\u4e4b\u540e\u5bf9\u6bcf\u4e00\u6bb5\u7684\u521d\u59cb\u5316\u903b\u8f91\u90fd\u662f:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\u521d\u59cb\u5316meta\u6bb5\u6570\u636e","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"phys_mem_pool\u7684start_vaddr\u548cpage_metadata(metadata\u8d77\u59cb\u5730\u5740), page_num"}),"\n",(0,r.jsx)(n.li,{children:"\u5bf9\u6bcf\u4e00\u4e2apage\u8bbe\u7f6eallocate\u4f4d\uff0c0 order \u548c\u4fdd\u7559pool\u7684\u6307\u9488"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\u8fdb\u884cbuddy sys\u7684\u5408\u5e76","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u5e76\u6ca1\u6709\u5047\u5b9a\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u662f2^N\u8fd9\u6837, \u6240\u4ee5\u5e76\u4e0d\u662f\u76f4\u63a5\u5f97\u5230\u4e00\u4e2a\u5927\u5757\uff0c\u800c\u662f\u8fed\u4ee3\u6bcf\u4e00\u4e2apage\u8fdb\u884cmerge\uff0c\u5e26\u6765\u4e86\u66f4\u591a\u7684\u7075\u6d3b\u6027\uff0c\u4f7f\u5f97buddy sys\u4e5f\u652f\u6301\u50cf\u662f1.5G\u6216\u8005 2G - 10M(\u4f8b\u598210M\u662f\u9884\u7559\u6570\u636e)\u8fd9\u6837\u7684\u7a7a\u95f4\uff0c\u63d0\u9ad8\u4e86\u7075\u6d3b\u6027"}),"\n",(0,r.jsx)(n.li,{children:"merge\u4e4b\u540e\uff0c\u5c06\u5f97\u5230\u7684chunk\u653e\u5230\u5bf9\u5e94order\u7684free_list\u4e4b\u4e2d"}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},9669:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/image-a88dd668534901d7102bccf2a6dfbc58.png"},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(96540);const a={},d=r.createContext(a);function s(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);