"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8130],{77735:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/local-llm","metadata":{"permalink":"/blog/local-llm","source":"@site/blog/local-llm.md","title":"\u6765\u672c\u5730\u90e8\u7f72\u5927\u6a21\u578b!","description":"\u524d\u8a00","date":"2025-01-19T08:04:51.305Z","tags":[{"inline":true,"label":"ai","permalink":"/blog/tags/ai"},{"inline":true,"label":"llm","permalink":"/blog/tags/llm"},{"inline":true,"label":"deploy","permalink":"/blog/tags/deploy"}],"readingTime":3.105,"hasTruncateMarker":false,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"\u6765\u672c\u5730\u90e8\u7f72\u5927\u6a21\u578b!","author":"ayanami","tags":["ai","llm","deploy"],"keywords":["ai","llm","deploy"]},"unlisted":false,"nextItem":{"title":"NJU\u64cd\u4f5c\u7cfb\u7edf(jyy OS)\u8bfe\u7a0b\u7b14\u8bb0-\u865a\u62df\u5316\u90e8\u5206","permalink":"/blog/jyy-os-\u865a\u62df\u5316"}},"content":"## \u524d\u8a00\\n\u8fd9\u4ef6\u4e8b\u60c5\u7684\u8d77\u56e0\u662f\u8fd9\u6837\u7684, \u5728\u5f00\u5377\u4e0a\u673a\u8003\u60f3\u8981\u90e8\u7f72\u4e00\u4e2a\u672c\u673a\u5927\u6a21\u578b\u53c2\u8003\u4e00\u4e0b, \u540c\u65f6\u6709\u540c\u5b66\u548c\u6211\u8bb2qwen2.5-coder-7B\u975e\u5e38\u7684nice, \u4e8e\u662f\u5c31\u6709\u4e86\u4e0b\u9762\u8fd9\u7bc7\u6587\u7ae0, \u7528ollama + docker\u90e8\u7f72\u7684local LLM...\\n\\n\u672c\u5730\u73af\u5883: Ubuntu24.04\\n\\n\u4ee5\u4e0b\u662f\u6b65\u9aa4\\n#### \u4e0b\u8f7dnvidia docker runtime\\n\\n\u53c2\u8003 https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html#installing-with-apt\\n\\napt\\n\\n```shell\\ncurl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\\\\n  && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\\\\\n    sed \'s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g\' | \\\\\\n    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\\n```\\n\\n```shell\\nsudo apt-get update\\nsudo apt-get install -y nvidia-container-toolkit\\n```\\n\\n\\n\\n\u8bbe\u7f6e /etc/docker/daemon.json\\n\\n```json\\n{\\n    \\"default-runtime\\": \\"nvidia\\",\\n    \\"registry-mirrors\\": [\\n        \\"https://1nj0zren.mirror.aliyuncs.com\\",\\n        \\"https://docker.mirrors.ustc.edu.cn\\",\\n        \\"http://f1361db2.m.daocloud.io\\",\\n        \\"https://registry.docker-cn.com\\"\\n    ],\\n    \\"runtimes\\": {\\n        \\"nvidia\\": {\\n            \\"args\\": [],\\n            \\"path\\": \\"nvidia-container-runtime\\"\\n        }\\n    },\\n}\\n```\\n\\n\u5982\u679c\u4f60\u9700\u8981\u4ee3\u7406, \u53c2\u8003\u914d\u7f6e\u52a0\u4e0a\\n\\n```json\\n   \\"proxies\\": {\\n    \\"http-proxy\\": \\"http://127.0.0.1:7890\\",\\n    \\"https-proxy\\": \\"http://127.0.0.1:7890\\",\\n    \\"no-proxy\\": \\"\\"\\n  }\\n```\\n\\n\u7136\u540e\u91cd\u542fdocker\u670d\u52a1\\n\\n```shell\\nsudo systemctl daemon-reload    \\nsudo systemctl restart docker\\n```\\n\\n\\n\\n\u51fa\u73b0\u627e\u4e0d\u5230\\"nvidia\\" runtime\u9519\u8bef\u7684, \u68c0\u67e5\u6709\u6ca1\u6709\u4e0b\u8f7d\u8fc7docker desktop\\n\\n**\u4e0b\u8f7d\u8fc7docker desktop\u7684:**\\n\\n```shell\\ndocker context ls\\ndocker context use default\\n```\\n\\n\u5207\u6362\u56dedefault, \u7136\u540e\u91cd\u542fdocker\u670d\u52a1\\n\\n\\n\\n#### \u4e0b\u8f7dollama\u955c\u50cf\\n\\n```shell\\nmkdir -p /data/containers/ollama/data\\nvi /data/containers/ollama/docker-compose.yml\\n```\\n\\n\\n\\n docker-compose.yml\\n\\n```yaml\\nname: \'ollama\'\\nservices:\\n  ollama:\\n    restart: always\\n    image: ollama/ollama\\n    container_name: ollama\\n    runtime: nvidia\\n    environment:\\n      - TZ=Asia/Shanghai\\n      - NVIDIA_VISIBLE_DEVICES=all\\n    networks:\\n      - ai-tier\\n    ports:\\n      - \\"11434:11434\\"\\n    volumes:\\n      - ./data:/root/.ollama\\nnetworks:\\n  ai-tier:\\n    name: ai-tier\\n    driver: bridge\\n    ipam:\\n      config:\\n        - subnet: 172.22.1.0/24\\n```\\n\\n\\n\\n\u542f\u52a8\\n\\n```shell\\ncd /data/containers/ollama\\ndocker compose up -d\\n```\\n\\n\\n\\n\u4e4b\u540e\u4f1a\u62c9ollama (2G)\\n\\n\u9a8c\u8bc1\u6210\u529f\\n\\n```shell\\ndocker compose ps\\n# \u5f97\u5230\u7ed3\u679c\u5e94\u8be5\u5982\u4e0b\\nNAME      IMAGE           COMMAND               SERVICE   CREATED              STATUS              PORTS\\nollama    ollama/ollama   \\"/bin/ollama serve\\"   ollama    About a minute ago   Up About a minute   0.0.0.0:11434->11434/tcp, :::11434->11434/tcp\\n```\\n\\n\\n\\n#### \u4e0b\u8f7d\u6a21\u578b\\n\\n `qwen2.5:7b`\u5efa\u8bae\u6362\u6210\u5176\u4ed6\u7684\u4ee3\u7801\u4e13\u7528\u6a21\u578b, \u6839\u636e\u81ea\u5df1\u7684\u7535\u8111\u663e\u5361\u914d\u7f6e\u51b3\u5b9a\u53c2\u6570\u91cf\\n\\n\u7a7a\u95f4\u5360\u7528 7b:5G, 3b: 2G, 1B:1G\\n\\n```bash\\ndocker exec -it ollama ollama pull qwen2.5:7b\\n```\\n\\n\\n\\n\u6210\u529f\u7ed3\u679c\u8fd9\u6837\\n\\n```shell\\npulling manifest\\npulling 00e1317cbf74... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  4.7 GB\\npulling 4fa551d4f938... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   12 KB\\npulling 8ab4849b038c... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   254 B\\npulling 577073ffcc6c... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   110 B\\npulling ad1518640c43... 100% \u2595\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   483 B \\nverifying sha256 digest\\nwriting manifest\\nremoving any unused layers\\nsuccess\\n```\\n\\n\\n\\n\u9a8c\u8bc1\\n\\n```bash\\n\u276f docker exec -it ollama ollama list\\nNAME          ID              SIZE      MODIFIED    \\nqwen2.5:7b    845dbda0ea48    4.7 GB    2 hours ago    \\n\\nWhat\'s next:\\n    Try Docker Debug for seamless, persistent debugging tools in any container or image \u2192 docker debug ollama\\n    Learn more at https://docs.docker.com/go/debug-cli/\\n```\\n\\n\\n\\n#### \u5f00\u59cb\u670d\u52a1\\n\\n```bash\\ndocker compose up -d\\n```\\n\\n\u4f1a\u5728`localhost:11434`\u8d77\u4e00\u4e2a\u670d\u52a1, \u6d4f\u89c8\u5668\u8f93\u5165\u540e\u6b63\u5e38\u4f1a\u6709`Ollama is running`\\n\\n\\n\\n#### \u524d\u7aef\u5957\u58f3\\n\\n##### ChatBox\\n\\n\u76f4\u63a5\u53bb\u5b98\u7f51\u4e0b\u8f7d\\n\\nhttps://chatboxai.app/zh/install\\n\\n\\n\\n\u8bbe\u7f6e\u91cc\u9762\u6307\u5b9a\u4e00\u4e0b\u6a21\u578b\\n\\n![image-20241121211509468](https://s2.loli.net/2024/11/21/5gEJheUDilNtBS3.png)\\n\\n#### \\n\\n##### aider\u7248\u672c\\n\\n\u53c2\u8003`https://aider.chat/docs/config/dotenv.html`\u8bbe\u7f6e\u4e00\u4e0bOLLAMA_BASE_API\u7684\u73af\u5883\u53d8\u91cf\\n\\n\u4e4b\u540e`aider --model ollama/qwen2.5:7b `\u5373\u53ef\\n\\n\u4e0b\u8f7d\u81ea\u5df1\u770b\u5b98\u7f51(`pip install aider-chat`)\\n\\n\\n**ok, \u5927\u529f\u544a\u6210\uff01**\\n\\n#### [\u53ef\u9009] IDE\u63d2\u4ef6\\n\\n\u4e00\u4e2a\u4f8b\u5b50\u662fContinue\u63d2\u4ef6https://www.continue.dev/\\n\\n\u53c2\u8003\u5b98\u7f51, \u636e\u8bf4vsc\u652f\u6301\u8fd8\u884c, jet bug\u4e0d\u5c11"},{"id":"/jyy-os-\u865a\u62df\u5316","metadata":{"permalink":"/blog/jyy-os-\u865a\u62df\u5316","source":"@site/blog/jyy-os-\u865a\u62df\u5316.md","title":"NJU\u64cd\u4f5c\u7cfb\u7edf(jyy OS)\u8bfe\u7a0b\u7b14\u8bb0-\u865a\u62df\u5316\u90e8\u5206","description":"lec14 \u64cd\u4f5c\u7cfb\u7edf\u4e0a\u7684\u8fdb\u7a0b","date":"2025-01-19T06:48:39.789Z","tags":[{"inline":true,"label":"os","permalink":"/blog/tags/os"},{"inline":true,"label":"system","permalink":"/blog/tags/system"},{"inline":true,"label":"virtualize","permalink":"/blog/tags/virtualize"}],"readingTime":17.275,"hasTruncateMarker":false,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"NJU\u64cd\u4f5c\u7cfb\u7edf(jyy OS)\u8bfe\u7a0b\u7b14\u8bb0-\u865a\u62df\u5316\u90e8\u5206","author":"ayanami","tags":["os","system","virtualize"],"keywords":["os","jyy"]},"unlisted":false,"prevItem":{"title":"\u6765\u672c\u5730\u90e8\u7f72\u5927\u6a21\u578b!","permalink":"/blog/local-llm"},"nextItem":{"title":"ucb cs186 \u8bfe\u7a0b\u7b14\u8bb0(\u66f4\u65b0\u4e2d)","permalink":"/blog/cs186-database-WIP"}},"content":"### lec14 \u64cd\u4f5c\u7cfb\u7edf\u4e0a\u7684\u8fdb\u7a0b\\n\\ncpu\u6709\u521d\u59cbpc\u5730\u5740`->`\u653e\u7f6e\u56fa\u4ef6\u4e0a\u7684\u521d\u59cb\u7a0b\u5e8f(\u56fa\u4ef6\u72b6\u6001\u673a)`->`\u542f\u52a8OS(os\u72b6\u6001\u673a)`->`load init\u7a0b\u5e8f(\u7a0b\u5e8f\u72b6\u6001\u673a), \u4e4b\u540eOS\u5b8c\u5168\u628a\u884c\u4e3a\u8f6c\u4ea4\u7ed9init(\u8fdb\u7a0b\u6811\u7684root)\\n\\nllm `\u77e5\u9053\u5b58\u5728`\u4e0e`\u77e5\u9053`\u7684\u754c\u9650\u6b63\u5728\u6a21\u7cca: \u77e5\u9053\u5b58\u5728\u4e14\u5408\u7406 \u9010\u6e10\u8d8b\u540c\u4e8e \u80fd\u505a\\n\\n\u4f8b\u5982 qemu \u76f8\u5173\u7684\u4e00\u4e9b\u4e1c\u897f\\n\\n\u95eellm\u53d1\u6563\u51fa\u7684\u6982\u5ff5`->`\u77e5\u8bc6\u4f53\u7cfb\u7684\u5feb\u901f\u5efa\u7acb\\n\\n\\n\\nfork? \u4ee5\u72b6\u6001\u673a\u7684\u89c6\u89d2\u7406\u89e3\\n\\n\u7ecf\u5178\u7684for fork + printf\\n\\n\u5199\u4e86\u4e2a\u793a\u4f8b\\n\\n```cpp\\n#include <cstddef>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <stdio.h>\\n#include <unistd.h>\\n#include <vector>\\n#include <mutex>\\n#include <sys/wait.h>\\n#include <map>\\n#include <string>\\nusing namespace std;\\nconst size_t buf_size = 1024;\\nconst std::map<int, std::string> mode_map = {\\n    {_IONBF, \\"no buffer\\"},\\n    {_IOLBF, \\"line buffer\\"},\\n    {_IOFBF, \\"full buffer\\"},\\n};\\nvoid test(int __modes) {\\n    printf(\\"test in mode %s\\\\n\\", mode_map.at(__modes).c_str());\\n    fflush(stdout);\\n    vector<int> childs;\\n    std::mutex mtx;\\n    setvbuf(stdout, nullptr, __modes, 0);\\n    for (int i = 0; i < 2; ++i) {\\n        int pid = fork();\\n        printf(\\"hello from pid %d\\\\n\\", pid);\\n        if (pid > 0) {\\n            std::lock_guard<mutex> lock(mtx);\\n            childs.push_back(pid);\\n        }\\n    }\\n}\\n\\nint main() {\\n    // _IOLBF, _IOFBF, _IONBF\\n    test(_IOFBF);\\n    printf(\\"\\\\n\\");\\n    fflush(stdout);\\n    return 0;\\n}\\n```\\n\\n\u5728`_IOLBF`\u548c`_IONBF`\u7684\u60c5\u51b5\u4e0b\u4f1a\u51fa\u67656\u4e2ahello\\n\\n\u6bcf\u6b21printf\u90fd\u76f4\u63a5\u5237\u65b0/\u68c0\u6d4b\u5230\u6362\u884c\u7b26\u5237\u65b0\u7f13\u51b2, fork\u7684\u65f6\u5019\u6ca1\u6709IO\u72b6\u6001\\n\u800c`_IOFBF`\u4f1a\u67098\u4e2ahello, \u5728fork\u7b2c\u4e8c\u6b21\u7684\u65f6\u5019\u4f1a\u5e26\u7740\u7f13\u51b2\u533a(\u5c31\u662f\u4e00\u6bb5\u5185\u5b58\u7a7a\u95f4)\u8fdb\u884cfork,\u6240\u4ee5\u6700\u540e\u76844\u4e2a\u8fdb\u7a0b\u6bcf\u4e2a\u90fd\u5e26\u77402\u4e2ahello\\n\\n**\u7cfb\u7edf\u91cc\u9762\u6ca1\u6709\u9b54\u6cd5**\\n\\nfork: \u628a\u6240\u6709\u7684\u77e5\u9053\u7684\u4e0d\u77e5\u9053\u7684\u90fd\u590d\u5236\u4e86\\n\\n\u201c\u662f\u4e0d\u662f\u8fd9\u6837?\u201d `->` \u4e0d\u77e5\u9053\u7684\u5e95\u5c42\u72b6\u6001\u88ab\u590d\u5236\u4e86\\n\\n`execve`: **\u91cd\u7f6e\u72b6\u6001\u673a** `argc, argv, envp -> main()`\\n\\nexecve\u662f\u552f\u4e00\u4e00\u4e2a\u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a\u72b6\u6001\u673a\u7684\u7cfb\u7edf\u8c03\u7528\\n\\n\\n\\n`exit`?\\n\\n- main return\\n- `exit` libc\u63d0\u4f9b\u7684\\n- `_exit` \u7cfb\u7edf\u8c03\u7528\u9000\u51fa\uff08`== asm volatile(\\"mov ..., %rax; syscall\\")`\uff09\\n- \u76f4\u63a5`SYSCALL`\\n\\n\u524d\u4e24\u4e2a\u5728c\u8bed\u8a00\u7684\u7a7a\u95f4, \u662f\u201cnormal exit\u201d\\n\\n\u540e\u4e24\u4e2a\u4e0d\u662fnormal\u7684, `_exit` `exit_group` , `__exit` exit self\\n\\n\u884c\u4e3a\u533a\u522b? `strace`\\n\\n\\n\\n### lec15 \u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\\n\\npmap\\n\\n`/proc/[pid]/maps`\\n\\nvvar(r), vdso(rx), vsyscall\\n\\nos\u5185\u53ea\u8bfb\u7684syscall `->` \u53ef\u4ee5\u4ee5\u5185\u5b58\u7684\u5f62\u5f0f\u5171\u4eab\\n\\n\u5176\u5b9e\u53ea\u9700\u8981\u8fdb\u7a0b\u80fd\u548cOS\u4ea4\u4e92\u4e00\u4e9b\u6570\u636e\u5c31\u884c \u2014\u2014 why not\u8fdb\u7a0b\u5199page, OS\u8f6e\u8be2?\\n\\n- \u5728\u6781\u7aef\u7684\u65f6\u5019\u80fd\u63d0\u9ad8\u4e00\u4e9b\u9ad8\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u7684\u6027\u80fd, \u67d0\u7bc7OSDI\\n\\n\u5730\u5740\u7a7a\u95f4\u5e94\u8be5\u662f\u5728\u8fd0\u884c\u65f6\u53ef\u53d8\u7684\\n\\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e0d\u5b58\u5728\u4e8ec\u4e16\u754c\u7684\u64cd\u4f5c(syscall)\u53bb\u64cd\u4f5c\u5730\u5740\u7a7a\u95f4 `->` mmap, munmap\\n\\n\\n\\n\u5165\u4fb5\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4: gdb, perf\\n\\nGame Genie \u7269\u7406\u5165\u4fb5\u5730\u5740\u7a7a\u95f4\\n\\n- \u5916\u63a5\u7535\u8def: \u5f53cpu\u8bfb\u5730\u5740a\u7684\u65f6\u5019\u8bfb\u5230x, \u5219\u66ff\u6362\u4e3ay\\n\\njyy\u73b0\u573a\u6f14\u793amini CE(\u96fe)\\n\\ngdb attach\u5230\u865a\u62df\u673a,\u67e5\u627e\u6ee1\u8db3\u67d0\u4e2a\u6a21\u5f0f\u7684\u5185\u5b58\u503c, \u4fee\u6539\u4e4b\\n\\n`/proc/[pid]/mem` \u4fee\u6539\u5668 = \u8c03\u8bd5\u5668\\n\\nxdotool: cmd X11 automation tool\\n\\nydotool: better xdotool `->` \u6309\u952e\u7cbe\u7075\\n\\nevdev \u6309\u952e\u663e\u793a\u811a\u672c\\n\\nxdotool\u6d4b\u8bd5vsc\u63d2\u4ef6, crazy\\n\\n\u6216\u8bb8\u4e0d\u9700\u8981\u90a3\u4e48\u591a\u7684\u201c\u9b54\u6cd5\u5de5\u5177\u201d\\n\\nOS: \u89e3\u653e\u7f16\u7a0b\u80fd\u529b, \u4ec0\u4e48\u4e8b\u60c5\u5728OS\u4e0a\u53ef\u4ee5\u505a\\n\\n\u53d8\u901f\u9f7f\u8f6e: syscall\u662f\u611f\u77e5\u65f6\u95f4\u7684\u552f\u4e00\u65b9\u6cd5\\n\\ngdb \u811a\u672c\u4e4b\u4e2d, \u5728gettimeofday\u6253\u65ad\u70b9, \u7136\u540e\u4fee\u6539\u5bc4\u5b58\u5668, amazing!!!\\n\\nhook\\n\\npatching: \u6574\u6d3b, kpatch, \u4e0d\u505c\u673a\u66f4\u65b0(\u8f6f\u4ef6\u52a8\u6001\u94fe\u63a5)\\n\\n`old func, rx -> \u4fee\u6539\u4e3arwx -> \u4fee\u6539old func\u4e3a, jmp\u5230new func`\\n\\n\\n\\n\u5728chcore\u91cc\u9762\u770b\u770b? \u6216\u8bb8\u6709\u5fc5\u8981\u7814\u7a76\u4e00\u4e0bgdb(attach with qemu) \\n\\n### lec16 syscall & unix shell\\n\\neverything is a file\\n\\nthing: \u64cd\u4f5c\u7cfb\u7edf\u91cc\u9762\u7684\u5bf9\u8c61\\n\\ngpt\u65f6\u4ee3\u7684\u201c\u7f16\u7a0b\u201d\u2014\u2014\u81ea\u7136\u8bed\u8a00?\\n\\n```c\\n//OS: API:\\n//\\tget_object_by_name(\\n//\\t\\t\\"the address space file of pid=1234\\"\\n//\\t)\\n```\\n\\n**\u6587\u4ef6\u63cf\u8ff0\u7b26: \u6307\u5411OS\u5bf9\u8c61\u7684\u201c\u6307\u9488\u201d**\\n\\nwindows: handle(\u53e5\u67c4)\\n\\nIPC endpoints: \u4f8b\u5b50, \u7ba1\u9053\\n\\n\u7ba1\u9053\u662f\u540c\u6b65\u7684\\n\\n\\n\\nfork + pipe? \u672c\u8d28\u662f\\"\u6307\u9488\\"\u7684\u62f7\u8d1d\\n\\n\u73b0\u5728\u4e24\u4e2a\u8fdb\u7a0b\u90fd\u6709\u8bfb\u53e3\u548c\u5199\u53e3\u5566\\n\\n\\n\\nshell, kernel \u7684\u5916\u58f3\\n\\ncli: \u9ad8\u6548\u7b80\u6d01\u7684\u7f16\u7a0b\u8bed\u8a00\\n\\n\u7b97\u529b\u7684\u63d0\u5347: `cli -> gui -> \u81ea\u7136\u8bed\u8a00`\\n\\nshell as pl: **\u57fa\u4e8e\u6587\u672c\u66ff\u6362\u7684\u5feb\u901f\u5de5\u4f5c\u6d41\u642d\u5efa**\\n\\njob control: \u7c7b\u6bd4\u7a97\u53e3\u7ba1\u7406\u5668\u7684\\"x\\", \u6700\u5c0f\u5316\\n\\n\\n\\n\u6216\u8bb8\u4e0d\u9700\u8981tmux, shell\u5c31\u662f\u6700\u7b80\u5355\u7684tmux\\n\\n\u624b\u518c: complete ref\\n\\nAI\u662f\u201c\u88ab\u52a8\u7684\u201d, \u8bfb\u4e00\u8bfbshell manual\\n\\n\u590d\u523bunix shell\\n\\n\u201c\u629b\u5f00\u7cfb\u7edf\u5e93\u201d\\n\\n`-ffreestanding -nostdlib -static`\\n\\n\\n\\ngdb init\u5df2\u7ecf\u5f88\u5e38\u89c1\u4e86, \u4f46gdb init\u5230python\u518d\u5728python\u91cc\u9762\u8f6c\u56de`/proc/[pid]/fd`\u6253\u5370, \u6700\u540e\u7ed3\u5408gdb\u7684\u5185\u7f6ehook,\u5728stop\u65f6\u5019\u6253\u5370, fancy!\\n\\n\u8fd9\u6253\u5370\u7684\u4e0d\u662f\u6211\u4eecgo\u7684channel\u8bed\u6cd5\u5417, \u66f4\u6709\u8da3\u4e86\\n\\nsh manual\\n\\n\\n\\n### lec 17 syscall\u7684\u5c01\u88c5: libc\\n\\npipe write\u5982\u679c\u5c0f\u4e8ePIPE_BUF, \u662f\u539f\u5b50\u7684\\n\\npipe 7\\n\\n\u8bfb\u8005\u5173\u95ed: Broken pipe\\n\\nlibc \u6807\u51c6\u5316, \u7a33\u5b9a\u53ef\u9760, \u79fb\u690d\u6027\u6781\u597d\\n\\nC runtime library: -Wl, --verbose\u770b\u5230\u94fe\u63a5\u5217\u8868\\n\\n\\n\\n\u8c03\u8bd5glibc? \u5386\u53f2\u5305\u88b1\u91cd, \u5927\u91cf\u5185\u8054\u6c47\u7f16, musl\\n\\n\u53ea\u8981\u5b9e\u73b0\u4e86C ABI\u6307\u5b9a\u7684\u5806\u6808\u6392\u5e03\u7684\u7cfb\u7edf\u8c03\u7528, \u5c31\u53ef\u4ee5\u8f7b\u677e\u79fb\u690dmusl\u7b49\u5230\u81ea\u5df1\u7684OS\u4e0a, \u5e95\u5c42\u7684\u8ba1\u7b97\u7531\u786c\u4ef6\u6307\u4ee4\u96c6\u7ed9\u51fa\\n\\nSystem V ABI\\n\\n\u8131\u5f00workload \u505a\u4f18\u5316\u5c31\u662f\u800d\u6d41\u6c13\\n\\n- \u5728\u5f00\u59cb\u8003\u8651\u6027\u80fd\u4e4b\u524d, \u7406\u89e3\u9700\u8981\u8003\u8651\u4ec0\u4e48\u6837\u7684\u6027\u80fd\\n\\n**workload\u54ea\u91cc\u627e? \u5f53\u7136\u662fpaper\u4e86(\u987a\u4fbf\u767d\u5f97\u65b9\u6848)**\\n\\n- \u770bwkld\u8c03\u6027\u80fd\\n\\n\\n\\nmm alloctor: \u6839\u57fa\\n\\n- \u5927\u5bf9\u8c61\u5e94\u8be5\u6709\u957f\u751f\u5b58\u671f, \u5426\u5219\u662fperformance bug\\n- \u8d8a\u5c0f\u7684\u5bf9\u8c61\u521b\u5efa/\u5206\u914d\u8d8a\u9891\u7e41\\n- \u5c0f\u5bf9\u8c61, \u4e2d\u5bf9\u8c61, \u5927\u5bf9\u8c61\\n\\n\u74f6\u9888\u51e0\u4e4e\u662f\u5c0f\u5bf9\u8c61\\n\\n\u94fe\u8868/\u533a\u95f4\u6811\u4e0d\u662f\u4e00\u4e2a\u597d\u60f3\u6cd5: \u4e0a\u9501, \u4e0d\u80fd\u5f88\u597d\u7684\u5e76\u884c\u5316\\n\\n\u8bbe\u7f6e\u4e24\u5957\u7cfb\u7edf\uff1a\\n\\n- Fast path \u6027\u80fd\u6781\u597d\uff0c\u5e76\u884c\u5ea6\u6781\u9ad8\uff0c\u8986\u76d6\u5927\u90e8\u5206\u60c5\u51b5\\n- Slow path \u4e0d\u5728\u4e4e\u901f\u5ea6\uff0c\u4f46\u628a\u56f0\u96be\u7684\u4e8b\u60c5\u505a\u597d\\n- \u4f8b\u5982cache\\n\\n\\n\\ninit ram fs\\n\\nISA -> OS \u5bf9\u8c61/syscall -> libc -> \u7cfb\u7edf\u5de5\u5177 coreutils, busybox -> \u5e94\u7528\u7a0b\u5e8f\\n\\n\\n\\ninitramfs \\n\\n- \u52a0\u8f7d\u5269\u4f59\u5fc5\u8981\u7684\u9a71\u52a8\u7a0b\u5e8f, \u4f8b\u5982\u78c1\u76d8/\u7f51\u5361\\n\\n- \u6302\u8f7d\u5fc5\u8981\u7684fs\\n- **\u5c06\u6839\u6587\u4ef6\u7cfb\u7edf\u548c\u63a7\u5236\u6743\u79fb\u4ea4\u7ed9\u53e6\u4e00\u4e2a\u7a0b\u5e8f, \u4f8b\u5982systemd**\\n\\ninitramfs\u4f5c\u4e3a\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u542f\u52a8fs, \u518d\u628a\u78c1\u76d8\u8fd9\u4e2aOS Object mount\u8fdb\u6765, \u6700\u540eswitch root\u628a\u63a7\u5236\u6743\u7ed9\u5230\u78c1\u76d8\u7684\u7684\u6839\u7cfb\u7edf\\n\\n\\n\\n\u542f\u52a8\u7684\u7b2c\u4e8c\u7ea7\u9636\u6bb5 /sbin/init\\n\\n\\n\\n\u75af\u72c2\u7684\u4e8b\u60c5\u4e0d\u65ad\u6709\u4eba\u5728\u505a, \u4f46\u75af\u72c2\u7684\u4e8b\u60c5\u7684\u8d77\u70b9\u5176\u5b9e\u7ecf\u5e38\u5f88\u5c0f\\n\\n### lec 19 \u53ef\u6267\u884c\u6587\u4ef6\\n\\nelf\u4e0d\u662f\u4e00\u4e2a\u4eba\u7c7b\u53cb\u597d\u7684\u201c\u72b6\u6001\u673a\u6570\u636e\u7ed3\u6784\u63cf\u8ff0\u201d\\n\\n\u4e3a\u4e86\u6027\u80fd, \u5f7b\u5e95\u8fdd\u80cc\u4e86\u53ef\u8bfb(\u201c\u4fe1\u606f\u5c40\u90e8\u6027\u201d)\u539f\u5219\\n\\n\u53ef\u6267\u884c\u6587\u4ef6=OS\u7684**\u6570\u636e\u7ed3\u6784**(core.dump), \u63cf\u8ff0\u4e86\u7a0b\u5e8f\u5e94\u8be5\u7684\u521d\u59cb\u72b6\u6001\\n\\n\u652f\u6301\u7684\u7279\u6027\u8d8a\u591a, \u4eba\u7c7b\u8d8a\u4e0d\u80fd\u7406\u89e3\\n\\n\u4eba\u7c7b\u53cb\u597d: **\u5e73\u5766\u7684**\\n\\n\u56de\u5f52\u8fde\u63a5\u548c\u52a0\u8f7d\u7684\u6838\u5fc3\u6982\u5ff5: \u4ee3\u7801\u3001\u7b26\u53f7\u3001\u91cd\u5b9a\u4f4d\\n\\n\\n\\nmy_execve\\n\\nelf file -> parse as struct\\n\\n-> \u5c06\u5404\u4e2asection load\u5230\u6307\u5b9a\u7684\u5730\u5740(mmap)->asm volatile\u5e03\u7f6e\u597dABI\u8c03\u7528\u6808(\u6839\u636e\u624b\u518c)->jmp!\\n\\n\\n\\n\u5982\u4f55\u91ca\u653e\u65e7\u8fdb\u7a0b\u7684\u5185\u5b58\u8d44\u6e90\uff1fproc\u91cc\u9762\u9700\u8981\u6709\u8bb0\u5f55\\n\\n\\n\\n### lec 21 syscall & ctx switch\\n\\ndynamic linker\\n\\nse\u7ed9\u7684os\u57fa\u7840\u8fd8\u662f\u5f88\u624e\u5b9e\u7684\\n\u5f88\u96be\u60f3\u8c61ics2\u91cc\u9762\u8bb2\u4e86GOT\u548cPLT\\n\\nSEE ALSO\u662f\u4e00\u4e2a\u5b9d\u85cf man ld.so\\n\\nhacking: `LD_PRELOAD`\u4e0d\u9700\u8981\u4fee\u6539libc, \u52a8\u6001\u52a0\u8f7d\u7684\u5168\u5c40\u7b26\u53f7, **\u5148\u5230\u5148\u5f97**\\n\\n**\u52ab\u6301\u5927\u6cd5**\uff01\\n\\n\\n\\nkernel memory mapping\\n\\n\u4f4e\u914d\u7248Linux 1.X \u5206\u6bb5, \u5185\u6838\u5728\u4f4e\u4f4d, \u53ea\u662f\u5206\u4e2a\u6bb5\\n\\n\u4f4e\u914d\u7248Linux 2.X \u5185\u6838\u8fd8\u662f\u5728\u7269\u7406\u4f4e\u4f4d, \u4f46\u7a0b\u5e8f\u770b\u5230\u865a\u62df\u5730\u5740\u5df2\u7ecf\u662f\u9ad8\u4f4d\u4e86\\n\\ntoday: complete memory map\\n\\n\\n\\nqemu is a state machine simulator: \u8c03\u8bd5syscall(gdb\u5e76\u4e0d\u80fdsi\u4ece\u7528\u6237\u6001\u8fdbkernel)\\n\\n\\n\\n\u53e6\u4e00\u79cd\u7406\u89e3\u4e2d\u65ad\u7684\u65b9\u5f0f\uff1a\\"\u88ab\\"\u63d2\u5165\u4e00\u6761syscall\\n\\n\u4e2d\u65ad, \u628a\u72b6\u6001\u673a\u7684\u6574\u4e2a\u5bc4\u5b58\u5668\u72b6\u6001\u5b58\u5230\u5185\u5b58\u91cc\u9762\\n\\n\u5728\u6c47\u7f16\u4e4b\u4e2d\u5c0f\u5fc3\u6392\u5e03\u5185\u5b58\u548c\u642c\u8fd0\u5bc4\u5b58\u5668, \u8fd4\u56de\u5230c\u4e4b\u4e2d\u5c31\u662f\u7ed3\u6784\u4f53\u7684context\\n\\nschedule\u7684\u6838\u5fc3: \u8c03\u7528\u4e00\u4e2a\u201c\u4e0d\u4f1a\u8fd4\u56de\u7684\u51fd\u6570\u201d\\n\\n\u8fd9\u4e2a(\u6c47\u7f16)\u51fd\u6570\u4ee5context\u4e3a\u53c2\u6570, \u5e76\u4e14\u6839\u636econtext, \u8fd4\u56de\u5230\u53e6\u4e00\u5904\u63a7\u5236\u6d41...\\n\\n`->` coroutine \u4e5f\u662f\u5982\u6b64! OS\u4f5c\u4e3a\u4e00\u4e2a\u201c\u72b6\u6001\u673a\u7ba1\u7406\u5668\u201d\u5c31\u5728\u505a\u4e00\u4e2a\\"coroutine event handler\\"\u7684\u4f5c\u7528 \\n\\n\\n\\n### lec 22 process\\n\\n\u8fdb\u7a0b: \u201c\u6234\u4e0aVR\u201d\u7684thread\\n\\n\u6709\u81ea\u5df1\u7684\u5730\u5740\u8f6c\u6362, \u5bf9\u4e00\u5207\u7684load/store\u4f1a\u5e94\u7528\u4e00\u4e2af\uff0c\u4f5c\u7528\u5728addr\u4e0a\\n\\n\u786c\u4ef6\u63d0\u4f9b\u4e86\u201c\u6234\u4e0aVR\u201d\u7684\u6307\u4ee4\\n\\n\u8fd9\u4e2af\u4eceds\u7684\u89c6\u89d2\u6765\u8bf4\u5c31\u662f`int->int`\u7684\u6620\u5c04\\n\\n\u67e5\u9875\u8868(`int->int`\u7684\u6620\u5c04)\u8fd9\u4ef6\u4e8b, \u5982\u4f55\u52a0\u901f? --\u81ea\u7136\u60f3\u5230radix tree\\n\\n\u666e\u901a\u5b9e\u73b0\u662fradix tree(x86, riscv, ...\u6536\u655b\u5230\u7684\u6700\u7ec8\u65b9\u6848)\\n\\n\u6bcf\u4e00\u6b21\u8bbf\u5b58\u90fd\u8981\u67e5\u8fd9\u4e48\u51e0\u6b21\u7684\u8bdd\u4e0d\u53ef\u63a5\u53d7\\n\\n\u56e0\u6b64\u6709\u4e86TLB, \u4f46\u7acb\u523b\u5e26\u6765\u7684\u4e00\u4e2a\u8bbe\u8ba1\u95ee\u9898\u662f, \u8c01\u6765\u7ba1TLB(\u4ee5\u53ca\u5bf9\u5e94\u7684miss\u5904\u7406\uff1f)\\n\\nx86\u9009\u62e9\u653e\u5230\u786c\u4ef6, \u4f46\u4e27\u5931\u7075\u6d3b\u6027\u7684\u540e\u679c\u662f\u5373\u4f7f\u6709\u4e9b\u8fdb\u7a0b\u53ea\u60f3\u8981f(x)=x, \u4e5f\u5fc5\u987b\u8981\u8001\u5b9e\u67e5\u8868, TLB\u5728\u548ccpu cache\u62a2\u5e26\u5bbd\\n\\nMIPS\u9009\u62e9\u653e\u5230\u8f6f\u4ef6, miss\u4e86\u76f4\u63a5\u4e22\u51fa\u6765\u5f02\u5e38, \u8ba9\u8f6f\u4ef6\u6765\u51b3\u5b9a\u600e\u4e48\u5904\u7406TLB\\n\\n\u75af\u72c2\u7684\u60f3\u6cd5: inverted page table\\n\\n\u628akey\u4eceVPN\u6362\u6210 (VPN, pid), \u7136\u540e\u4ece\u4e00\u4e00\u6620\u5c04\u6539\u6210hashtable, \u652f\u6301\u6bcf\u4e2a\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684\u9875\u8868\\n\\n\u7f3a\u70b9\u5728\u4f8b\u5982hashtable\u5e26\u6765\u7684\u51b2\u7a81\u65f6(TLB miss, etc)\u65f6\u95f4\u4e0d\u53ef\u63a7(O(1) ~ O(n))\\n\\n\\n\\n\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u201cVR\u773c\u955c\u201d\u8fd9\u4ef6\u4e8b\u60c5\u8fd8\u5e26\u6765\u4e86\u66f4\u591a\u7684\u4f18\u5316\u7a7a\u95f4, \u4f8b\u5982\u591a\u4e2a\u8fdb\u7a0b, \u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\u5757\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u7269\u7406\u5730\u5740, \u4ee5\u53cacow\\n\\nKSM(kernel samepage merging/mermory deduplication), demand paging\\n\\nfork: \u8fdb\u7a0b\u5feb\u7167, redis\\n\\ncow fork\u7684\u7f3a\u70b9: \u8ba9\u7cfb\u7edf\u5b9e\u73b0\u53d8\u590d\u6742\\n\\n\u6539\u9769: \u780d\u6389\u6240\u6709\u7684\u5185\u6838\u90e8\u5206, \u5269\u4e0b\u7684\u5168\u90e8\u4ea4\u7ed9xv6\\n\\n### lec 23 \u5904\u7406\u5668\u8c03\u5ea6\\n\\ntrampoline code\\n\\n\u8df3\u677f\u4ee3\u7801, \u4f8b\u5b50\\n\\n- call printf -> call *GOT(printf)\\n- JIT\u7f16\u8bd1\u5668\\n- \u8f6f\u4ef6\u70ed\u66f4\u65b0(patch \u51fd\u6570\u5934)\\n\\n\u8d44\u6e90\u8c03\u5ea6(\u5206\u914d)\u662f\u4e00\u4e2a\u975e\u5e38\u590d\u6742\u7684\u95ee\u9898\\n\\n\u5efa\u6a21, \u9884\u6d4b, \u51b3\u7b56 `->` \u8c03\u5ea6\u7b56\u7565\u7684\u8bbe\u8ba1\u7a7a\u95f4\\n\\n\u8c03\u5ea6\u7b56\u7565\\n\\n\u518d\u52a0\u4e00\u5c42\u673a\u5236 \\"niceness\\", \u7ba1\u7406\u5458\u63a7\u5236nice, \u8d8anice\u8d8a\u80fd\u5f97\u5230cpu\\n\\n10 nice ~ 10\u500d\u6027\u80fd\u5dee\u5f02\\n\\ntaskset \u7ed1\u5b9a\u4e00\u4e2aprocess\u5230\u4e00\u4e2acpu\u4e0a\\n\\nround-robin\u65f6\u4ee3: MLFQ, \u52a8\u6001\u4f18\u5148\u7ea7\\n\\n- \u8ba9\u51faCPU(I/O) -> \u201c\u597d\u201d\\n\\n- \u7528\u5b8c\u65f6\u95f4\u7247 -> \u201c\u574f\u201d!\\n\\n1960s: breakthrough!\\n\\n2020s: \u5bf9\u5f88\u591a\u8d1f\u8f7d\u90fd\u6b20\u8003\u8651\\n\\n\u4eca\u5929\u7684\u8c03\u5ea6: CFS(complete fair scheduling)\\n\\n\u4f46\u6709vruntime, \\"\u597d\u4eba\\"\u7684\u949f\u5feb\u4e00\u4e9b\\n\\n\u771f\u5b9e\u7684\u5904\u7406\u5668\u8c03\u5ea6: \u4e0d\u8981\u9ad8\u5174\u5f97\u592a\u65e9...\\n\\n- **\u4f4e\u4f18\u5148\u7ea7\u7684\u5728\u6301\u6709mutex\u7684\u65f6\u5019\u88ab\u4e2d\u95f4\u4f18\u5148\u7ea7\u7684\u8d76\u4e0b\u5904\u7406\u5668**, \u53ef\u4ee5**\u5bfc\u81f4\u9ad8\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u7b49\u5f85mutex\u9000\u5316\u5230\u4f4e\u4f18\u5148\u7ea7** `->` \u706b\u661f\u8f66\\n\\n**Linux: \u6ca1\u6cd5\u89e3\u51b3, CFS\u51d1\u5408\u7528**\\n\\n\u5b9e\u65f6\u7cfb\u7edf: \u706b\u661f\u8f66\u5728CPU Reset, \u4e0d\u80fd\u6446\u70c2\\n\\n- \u4f18\u5148\u7ea7\u7ee7\u627f, \u6761\u4ef6\u53d8\u91cf\u5524\u9192?\\n\\n- lockdep\u9884\u8b66\\n- ...\\n\\n**\u7136\u800c\u4e0d\u6b62\u6709\u9501, \u8fd8\u6709\u591a\u5904\u7406\u5668...**\\n\\n**\u4eca\u5929\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf: SMP**\\n\\n**\u591a\u5904\u7406\u5668\u7684\u77db\u76fe\u56f0\u5883**\\n\\n- **\u7ed1\u5b9a\u4e00\u4e2a\u7ebf\u7a0b:\\"\u4e00\u6838\u6709\u96be, \u516b\u65b9\u56f4\u89c2\\"**\\n- **\u8c01\u7a7a\u4e22\u7ed9\u8c01: cache, TLB\u767d\u5e72**\\n\\n\\n\\n**\u66f4\u591a\u7684\u5b9e\u9645\u60c5\u51b5: NUMA, \u5f02\u6784, \u591a\u7528\u6237**\\n\\n- **numa: \u8fdc\u8fd1cpu\u6027\u80fd\u5dee\u8fbe\u5230\u6570\u500d**\\n- **\u591a\u7528\u6237\u7684cpu\u5171\u4eab? namespaces, cgroups, \u4f8b\u5982\u4e00\u4e2a\u7a0b\u5e8f\u5f00\u5e76\u884c, \u53e6\u4e00\u4e2a\u7a0b\u5e8f\u662f\u4e32\u884c\u7684, \u662f\u5426\u9700\u8981\u7ed9\u4e32\u884c\u7684\u4fdd\u7559\u4e00\u4e2a\u6838, \u800c\u4e0d\u662f\u5f00\u5f97\u8d8a\u591a\u62a2\u5f97\u8d8a\u591a**\\n- **\u5f02\u6784, \u5927\u5c0f\u6838\u8d85\u5c0f\u6838, GPUNPU, \u6bcf\u4e2a\u6838\u7684\u72ec\u6709\u7f13\u5b58\u548c\u5171\u4eab\u7f13\u5b58...**\\n\\n- **\u66f4\u5c11\u7684\u5904\u7406\u5668\u53ef\u80fd\u66f4\u5feb...(\u53cd\u76f4\u89c9, \u540c\u6b65cacheline\u5e26\u6765\u7684\u5f00\u9500)**\\n\\n\u590d\u6742\u7684\u7cfb\u7edf\u65e0\u4eba\u638c\u63a7\\n\\nghOSt: Fast & Flexible User-Space Delegation of Linux\\n\\n\u5f00\u59cb\u4e0b\u653e\u7ed9\u5e94\u7528\u7a0b\u5e8f\u505a\u8c03\u5ea6\\n\\n\\n\\n### Others\\n\\n\u65e9\u671f\u4f18\u96c5\u7684\u8bbe\u8ba1\u53ef\u80fd\u4f1a\u6210\u4e3a\u540e\u7eed\u53d1\u5c55\u7684\u5305\u88b1: fork+exec\u5e26\u6765\u7684\u81a8\u80c0, **\u6240\u6709\u6d89\u53ca\u5230OS\u5185\u90e8\u72b6\u6001\u7684api\u90fd\u9700\u8981\u8003\u8651fork\u884c\u4e3a**, \u4f8b\u5982\u6587\u4ef6\u504f\u79fb\u91cf...\\n\\n\u603b\u7ebf, \u4e2d\u65ad\u63a7\u5236\u5668, DMA\\n\\n\u603b\u7ebf: \u63d0\u4f9b\u8bbe\u5907\u7684\u201c\u865a\u62df\u5316\u201d, \u6ce8\u518c\u548c\u8f6c\u53d1, \u628a\u6536\u5230\u7684\u5730\u5740(\u603b\u7ebf\u5730\u5740)\u548c\u6570\u636e\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u8bbe\u5907\u4e0a\\n\\n**\u8fd9\u6837cpu\u53ea\u9700\u8981\u76f4\u8fde\u4e00\u6839\u603b\u7ebf\u5c31\u884c\u4e86!**\\n\\nPCI\u603b\u7ebf\\n\\n- \u603b\u7ebf\u53ef\u4ee5\u6865\u63a5\u5176\u4ed6\u603b\u7ebf, \u4f8b\u5982`pci -> usb`\\n\\n`lspci -tv`\u53ef\u89c6\u5316\\n\\n\\"\u5373\u63d2\u5373\u7528\\"\u7684\u5b9e\u73b0\u2014\u2014\u975e\u5e38\u590d\u6742!\\n\\ncpu: \u53ea\u6709\u4e00\u6839\u4e2d\u65ad\u7ebf\\n\\n\u542f\u52a8\u591a\u4e2acpu: cpu\u7ed9\u5176\u4ed6cpu\u53d1\u4e2d\u65ad!\\n\\n\u4e2d\u65ad\u4ef2\u88c1: \u6536\u96c6\u5404\u4e2a\u8bbe\u5907\u4e2d\u65ad, \u9009\u4e00\u4e2a\u53d1\u7ed9cpu\\n\\nAPIC(Advanced PIC):\\n\\n- local APIC: \u4e2d\u65ad\u5411\u91cf\u8868, IPI, \u65f6\u949f, ...\\n- IO APIC: IO\u8bbe\u5907\\n\\nDMA: \u5f88\u65e9\u671f\u5c31\u6709\u4e86, \u89e3\u653ecpu, \u8bbe\u8ba1\u4e13\u7528\u7684\u7535\u8def\u53ea\u505amemcpy\\n\\n\u4eca\u5929: PCI\u603b\u7ebf\u76f4\u63a5\u652f\u6301\\n\\n**\u6587\u4ef6 = \u5b9e\u73b0\u4e86\u6587\u4ef6\u64cd\u4f5c\u7684\u201cAnything\u201d**\\n\\n**\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f: \u4e00\u4e2a struct file_operations\u7684\u5b9e\u73b0, \u5c31\u662f\u4e00\u6bb5\u666e\u901a\u7684\u5185\u6838, \u201c\u7ffb\u8bd1\u201dread/write\u7b49\u7cfb\u7edf\u8c03\u7528**\\n\\n`/dev/null`\u7684\u9a71\u52a8: read\u6c38\u8fdc\u4ec0\u4e48\u90fd\u4e0d\u505a\u8fd4\u56de0, write\u6c38\u8fdc\u4ec0\u4e48\u90fd\u4e0d\u505a\u8fd4\u56decount\\n\\n\u4e00\u79cd\\"duck type\\"\\n\\n\u8bbe\u5907\u4e0d\u4ec5\u4ec5\u662f\u6570\u636e, \u8fd8\u6709\u914d\u7f6e\\n\\n\u914d\u7f6e\u8bbe\u5907:\\n\\n- \u63a7\u5236\u4f5c\u4e3a\u6570\u636e\u6d41\u7684\u4e00\u90e8\u5206(\u81ea\u5b9a\u4e49\u4e00\u5957write\u7684\u6307\u4ee4\u7f16\u7801)\\n- \u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684\u63a5\u53e3\\n\\nioctl: \u975e\u6570\u636e\u7684\u8bbe\u5907\u529f\u80fd\u51e0\u4e4e\u5b8c\u5168\u4f9d\u8d56ioctl, \u5b8c\u5168\u7531\u9a71\u52a8\u51b3\u5b9a\\n\\n\u6570\u91cf\u6700\u5e9e\u5927,\u8d28\u91cf\u6700\u4f4e\u7684shit\\n\\nunix\u7684\u8d1f\u62c5: \u590d\u6742\u7684hidden spec\\n\\n/dev/kvm \u786c\u4ef6\u865a\u62df\u5316, \u652f\u6491\u4e86\u51e0\u4e4e\u6240\u6709\u7684\u4e91\u4ea7\u5546\u865a\u62df\u5316\u65b9\u6848\\n\\n\\n\\nunix\u7684\u8bbe\u8ba1: \u76ee\u5f55\u6811\u7684\u62fc\u63a5\\n\\n\u5c06\u4e00\u68f5\u76ee\u5f55\u6811\u62fc\u5230\u53e6\u4e00\u68f5\u4e0a\\n\\n\u56de\u60f3\u6700\u5c0flinux\u7cfb\u7edf, \u53ea\u6709/dev/console\u548c\u51e0\u4e2a\u6587\u4ef6\\n\\n/proc, /sys, /tmp\u90fd\u662fmount\u7cfb\u7edf\u8c03\u7528\u521b\u5efa\u7684\\n\\n\\"\u770b\u5230\u7684fs!=\u78c1\u76d8\u7684fs\\", is just a **view**\\n\\n\u50cf\u662fprocfs\u8fd9\u79cd\u5e76\u975e\u5b9e\u9645\u7684fs\u66f4\u662f, \u53ef\u4ee5\u6302\u8f7d\u5230\u4efb\u610f\u7684\u5730\u65b9, \u4ee5\u4efb\u610f\u7684\u6570\u91cf(\u56e0\u4e3a\u4ed6\u53ea\u662ffake\u4e86read/write\u7684\u201cfile Object\u201d)\\n\\n\u6839\u672c\u8bbe\u8ba1\u54f2\u5b66: \u7075\u6d3b\\n\\n\u7075\u6d3b\u6027\u5e26\u6765\u7684\\n\\n- `/`, `/home`, `/var`\u90fd\u53ef\u4ee5\u662f\u72ec\u7acb\u7684\u8bbe\u5907, \u628a\u6709\u4e9b\u5feb\u7684\u653e\u5728\u4e00\u4e2a\u76ee\u5f55\u5b58\u53ef\u6267\u884c\u6587\u4ef6, \u53e6\u4e00\u4e9b\u5b58\u6570\u636e...\\n\\nmount\u4e00\u4e2a\u6587\u4ef6? loopback device\\n\\n\u8bbe\u5907\u9a71\u52a8\u628a\u8bbe\u5907\u7684read/write\u7ffb\u8bd1\u6210\u6587\u4ef6\u7684rw\\n\\nFHS: Filesystem Hierarchy Standard\\n\\nln -s \u56fe\u7ed3\u6784 as \u72b6\u6001\u673a\\n\\nfs: \u4e00\u4e2a\u201d\u6570\u636e\u7ed3\u6784\u9898\u201c, \u4f46\u8bfb\u5199\u7684\u5355\u5143\u662f\u4e00\u4e2ablock\\n\\nFAT: \u96c6\u4e2d\u4fdd\u5b58\u6240\u6709\\"next\\"\u6307\u9488, \u53ef\u9760\u6027? \u5b58n\u4efd! \\n\\nfat manual\\n\\nfat \u5c0f\u6587\u4ef6ok, \u5927\u6587\u4ef6\u4e0d\u884c"},{"id":"/cs186-database-WIP","metadata":{"permalink":"/blog/cs186-database-WIP","source":"@site/blog/cs186-database-WIP.md","title":"ucb cs186 \u8bfe\u7a0b\u7b14\u8bb0(\u66f4\u65b0\u4e2d)","description":"lec2","date":"2025-01-19T06:44:01.658Z","tags":[{"inline":true,"label":"database","permalink":"/blog/tags/database"},{"inline":true,"label":"system","permalink":"/blog/tags/system"}],"readingTime":7.47,"hasTruncateMarker":false,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"ucb cs186 \u8bfe\u7a0b\u7b14\u8bb0(\u66f4\u65b0\u4e2d)","author":"ayanami","tags":["database","system"],"keywords":["cs186","database"]},"unlisted":false,"prevItem":{"title":"NJU\u64cd\u4f5c\u7cfb\u7edf(jyy OS)\u8bfe\u7a0b\u7b14\u8bb0-\u865a\u62df\u5316\u90e8\u5206","permalink":"/blog/jyy-os-\u865a\u62df\u5316"},"nextItem":{"title":"system-design-interview\u7b14\u8bb0","permalink":"/blog/\u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\u7b14\u8bb0"}},"content":"## lec2\\n\\njoin: inner join, natural join, outer join\\n\\nsql  \u5b9e\u9645\u6267\u884c\u6a21\u578b \u5199\u8d77\u6765\u662f SELECT - FROM - GROUP BY - HAVING - WHERE - DISTINCT - ORDER BY\\n\\n\u5b9e\u9645\u662f FROM(table\u8fc7\u6ee4) - GRUOP BY(\u884c\u5206\u7ec4) - HAVING(\u7ec4\u8fc7\u6ee4) - WHERE(\u884c\u8fc7\u6ee4) - DISTINCT(\u884c\u53bb\u91cd) - SELECT(\u884c\u5185\u5217\u8fc7\u6ee4)\\n\\ninner join:\u53c9\u79ef\uff0c\u5bf9AB\u6240\u6709\u884c\u7ec4\u5408\\n\\n```sql\\nSELECT * FROM TABLE1 t1, TABLE2 t2 \\n\\tWHERE t1.id = t2.id\\n\\tAND ...\\n-- \u7b49\u6548\u4e8e\\nSELECT * FROM \\n\\tTABLE1 t1 INNER JOIN TABLE2 t2\\n    ON t1.id = t2.id\\n    WHERE ...\\n-- \u4e0b\u9762\u8fd9\u79cd\u66f4\u52a0\u6e05\u6670\u4e00\u70b9\\n-- \u7b49\u6548\u4e8e\\nSELECT * FROM \\n\\tTABLE1 t1 NATURAL JOIN TABLE2 t2\\n    WHERE ...\\n-- natural join\u5c31\u662f\u5728\u7ec4\u5408\u7684\u57fa\u7840\u4e0a\u81ea\u52a8\u7528\u4e86\u4e00\u4e2a\u8fc7\u6ee4\uff0c\u8981\u6c42table\u6240\u6709\u76f8\u540c\u540d\u5b57\u7684\u5217\u7684\u503c\u90fd\u76f8\u540c\\n```\\n\\n\\n\\nouter join: \\n\\nLeft Outer join:\\n\\n`A LEFT OUTER JOIN B ON cond` \u5982\u679ccond\u6ee1\u8db3\u7684\u8bdd\uff0c\u5f97\u5230\u7684\u662fAB\u7684\u7ec4\u5408\uff08\u4e00\u884c\u6709A\u7684\u5217+B\u7684\u5217\uff09;\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5f97\u5230A\u7684\u5217+\u7a7a\\n\\nRight Outer Join \u540c\u7406\\n\\nFull Outer Join \u540c\u7406 \u4f8b\u5982`ON A.id = B.id`\\n\\n\u5982\u679c\u6709A\u6ca1\u6709\u5bf9\u5e94\u7684B, \u90a3\u5c31\u662f\u662f A + \u7a7a\\n\\n\u5982\u679c\u6709B\u6ca1\u6709\u5bf9\u5e94\u7684A, \u90a3\u5c31\u662f \u7a7a + B\\n\\n\\n\\n\u975e\u5e38\u597d\u7684\u56fe\\n\\n![db-join](image.png)\\n\\nalias \\n\\n\u7b80\u5316 + \u770b\u8d77\u6765\u66f4\u6e05\u695a\uff08\u5c24\u5176\u662fself-join\uff09\\n\\n`FROM TABLE1 AS x, TABLE1 AS y`\\n\\n\\n\\nString Comp\\n\\n`LIKE`\u6216\u8005\u6b63\u5219`S.name ~ \'^B.*\'` (\u7b49\u6548\u4e8e`S.name LIKE \'B_%\'`)\\n\\n\\n\\n`AND` `OR` \u505a\u6761\u4ef6\u4ea4\u5e76\\n\\n`EXCEPT` `UNION (ALL)` `INTERSECT`\u505a\u5b50\u67e5\u8be2\u7ed3\u679c\u96c6\u5408\u7684\u4ea4\u5e76\u5dee\\n\\n\\n\\n`IN` `EXISTS`\u7528\u4e8e\u5b50\u67e5\u8be2 (`NOT IN`, `NOT EXIST`) EXISTS\u662f\u5224\u7a7a\\n\\n```SQL\\nSELECT S.sname FROM Sailors S WHERE S.sid IN \\n\\t(SELECT R.sid FROM Reserves R WHERE R.bid=102)\\n```\\n\\n\u8fd8\u6709`ANY` `ALL`\\n\\n\\n\\nARGMAX?\\n\\n```SQL\\nSELECT * FROM Sailors S WHERE\\n\\tS.rating >= ALL\\n\\t\\t(SELECT S2.rating FROM Sailors S2)\\n```\\n\\nView: Named Queries\\n\\n```sql\\nCREATE VIEW xxx\\n  AS ...\\n\\nSELECT * FROM xxx;\\n```\\n\\ncache and reuse\\n\\n\u6216\u8005\\n\\n`WITH [viewname] AS [statement]`\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6view\\n\\nNULL \u53c2\u4e0e\u7684\u8fd0\u7b97\u5927\u591a\u662fNULL, \u9664\u4e86IS NULL\uff0cFalse AND NULL\u8fd9\u79cd\\n\\n\\n\\n## lec3\\n\\nDisk & Buffer\\n\\n\u6574\u4f53\u67b6\u6784\\n\\nSQL client-> Query Parsing & Optimization->Relational Operators-> Files and Index Management->Buffer Management->Disk Space Management\\n\\nConcurrency Control & Recovery\\n\\n\\n\\n\u78c1\u76d8\u592a\u6162\uff0c\u9700\u8981\u5c3d\u91cf\u51cf\u5c11\u8bfb\u5199\uff0c\u4e14\u5bfb\u9053\u548c\u65cb\u8f6c\u65f6\u95f4\u662f\u5927\u5934\\n\\n\\"block\\" && \\"page\\": \u4e00\u4e2a\u610f\u601d\uff0c\u78c1\u76d8\u4e0a\u7684\u5757\u72b6\u8bfb\u5199\u6700\u5c0f\u5355\u5143 \u4e00\u822c64KB-128KB\\n\\n\\n\\n\u4e3a\u4e86\u91cd\u7528\u786c\u4ef6\u9a71\u52a8\uff0c\u7ecf\u5e38\u4f1a\u5c06\u78c1\u76d8\u7a7a\u95f4\u7ba1\u7406\u5668\u5efa\u7acb\u5728\u6587\u4ef6\u7cfb\u7edfAPI\u4e0a\uff0c\u4f46\u5e26\u6765\u4e86\u4e00\u4e9b\u5927\u6570\u636e\u5e93\u591a\u6587\u4ef6\u7cfb\u7edf\u7684\u95ee\u9898\uff0c\u4e5f\u6709\u76f4\u63a5\u5efa\u7acb\u5728\u8bbe\u5907\u4e0a\u7684\uff0c\u66f4\u5feb\u4f46\u662f\u79fb\u690d\u6027\u95ee\u9898\\n\\n\u7ed9\u4e0a\u5c42\u7684\u62bd\u8c61\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u6587\u4ef6\\n\\n\\n\\nDB file: page\u7684\u96c6\u5408\uff0c\u6bcf\u4e2apage\u53c8\u5305\u542b\u4e86\u8bb8\u591arecords\\n\\n\u7ed9\u4e0a\u5c42\u63d0\u4f9b\uff1aCRUD on records\\n\\nrecord\u89e3\u6784\u6210\u4e00\u4e2a\\"\u6307\u9488\\" `{pageID, location on page}`\\n\\nstructures \\n\\n- Unordered Heap Files(\u548c\u6570\u636e\u7ed3\u6784heap\u6ca1\u5565\u5173\u7cfb\uff0c\u65e0\u5e8frecords)\\n- Clustered Heap Files\\n- Sorted Files\\n- Index Files\\n\\n\u5982\u4f55\u7ec4\u7ec7page\u5462\uff1f\\n\\n\u94fe\u8868\uff1f \u60f3\u60f3\u5c31\u77e5\u9053\u6548\u7387\u5f88\u5dee\\n\\n\u7c7b\u4f3c\u76ee\u5f55\u7684\u5f62\u5f0f\uff1f \u90e8\u5206page\u53ea\u5b58\u5230\u5176\u4ed6page\u7684\u6307\u9488\uff0c\u5e76\u4e14\u59cb\u7ec8\u653e\u5728\u7f13\u5b58\u4e4b\u4e2d\\n\\n\\n\\npage\u89e3\u6784\\n\\nPage Header:\\n\\n- Number of records\\n- Free space\\n- Mayba a last/next pointer\\n- Bitmaps, slot table\\n\\nrecord \u4e2d\u95f4\u7559\u4e0d\u7559\u7a7a\uff1f\\n\\n\u4e0d\u7559\u7a7a\uff1aFixed Length Records, Packed\\n\\nheader\u540e\u9762\u8ddf\u7d27\u5bc6\u5b9a\u957frecords, \u56e0\u6b64\u53ef\u4ee5\u6709 record id = `{pageId, record number in page}`\uff0c \u7b80\u5355\u8fd0\u7b97\u5f97\u5230location\\n\\n\u52a0\u5f88\u7b80\u5355\uff0c\u76f4\u63a5append\\n\\n\u5220\uff0c\u5168\u79fb\u4e00\u904d\uff1f->O(N),\u81ea\u7136\u60f3\u5230\u80fd\u4e0d\u80fdlazy delete\u6216\u8005soft delete\\n\\n\u65b9\u6cd5\u662f\u5728header\u91cc\u9762\u653e\u4e00\u4e2adelete bit\u7684bitmap\\n\\n\\n\\n\u53d8\u957f\uff1f\\n\\nslotted page\\n\\n\u5c06\u4fe1\u606f\u5b58\u5728footer\uff08\u79f0\u4e3aslot directory\uff09, record\u4ece\u5934\u90e8\u5f00\u59cb\u5b58\\n\\n\u7531record id\u5f97\u5230dir\u4e2d\u4f4d\u7f6e\uff0c\u4f4d\u7f6e\u91cc\u9762\u662fpointer + length\uff0c\\n\\n\u5220\uff0c\u5c06slot dir\u4e2d\u7684\u9879\u7f6e\u7a7a\\n\\n\u63d2\u5165\uff0c\u63d2\u5728\u7a7a\u4f4d\u4e0a\uff0c\u66f4\u65b0slot dir\\n\\n\\n\\nfragmentation?\\n\\n\u4ec0\u4e48\u65f6\u5019reorganize?->\u8bbe\u8ba1\u53d6\u820d\uff0c\u5927\u90e8\u5206\u65f6\u5019\u6ca1\u6709\u90a3\u4e48\u591a\u5220\u9664\uff08\u4e50\uff09\\n\\nslot\u4e0d\u591f->\u4ecepage\u5c3e\u90e8\u5411\u524d\u589e\u957f\\n\\n\\n\\n## lec4\\n\\ncost model for ayalysis\\n\\nB, D, R\\n\\n- the number of data blocks\\n- the number of records per clock\\n- avg time to r/w disk block\\n- opt: index\\n\\n\\n\\nindexes: \\n\\n\u5927\u5e45\u5ea6\u964d\u4f4erange\u64cd\u4f5c\u8017\u65f6\\n\\nAn index is data structure that enables fast lookup and modification of data entries by search key\\n\\n\u533a\u95f4\u67e5\u627e & \u5b50\u96c6\u641c\u7d22, \u53ef\u4ee5\u590d\u5408, \u4e0d\u9700\u8981\u552f\u4e00\\n\\n2-d box 2-d circle n-d indexes\u90fd\u6709\\n\\nkd\u6811\u554aR\u6811\u554a\\n\\npostgres \u7684 GiST index\\n\\n\\n\\nleft key opt: \u6700\u5c0f\u7684key\u662f\u4e0d\u9700\u8981\u7684,\u76f4\u63a5\u62ff\\\\-inf\u5f53\u4e0b\u754c\u5c31\u884c\\n\\n\u5904\u7406\u76f8\u7b49:`>=` \u5411\u53f3\u8d70\u5c31\u884c\\n\\n\\n\\nB+\u6811   \\n\\n- \u53f6\u5b50\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684-\u52a8\u6001\u5206\u914d,\u6307\u9488\u8fde\u63a5\u4ee5\u652f\u6301range scan\\n- \u9636\u6570d, fan-out 2d+1 \u5178\u578b\u7684fan-out \u4e3a2144()\\n\\n- \u5220\u9664, \u7406\u8bba\u4e0a\u6765\u8bf4, \u53ef\u80fd\u6d89\u53ca\u5230\u91cd\u65b0\u5e73\u8861\u7b49\u64cd\u4f5c \u4f46\u5b9e\u9645\u7684\u64cd\u4f5c\u4e4b\u4e2d, \u53ea\u9700\u8981\u5220\u9664\u5373\u53ef, \u539f\u56e0\u662f\u5e73\u8861\u592a\u6162\u4e86,\u5e76\u4e14\u5220\u4e86\u4e5f\u80fd\u518d\u63d2\\n\\n\\n\\n\u53f6\u5b50\u653e\u4ec0\u4e48?\\n\\n1. \u6570\u636e\\n\\npros:\\n\\n- \u5feb\\n\\ncons:\\n\\n- \u60f3\u8981\u5728\u53e6\u4e00\u5217\u6784\u5efa\u7d22\u5f15\u53ea\u80fd\u91cd\u65b0\u590d\u5236\u6587\u4ef6(\u6587\u4ef6\u53ea\u80fd\u6309\u7167\u4e00\u79cd\u65b9\u5f0f\u5b9e\u9645\u6392\u5e8f\u5b58\u50a8)\\n- \u5373\u4f7f\u771f\u590d\u5236\u4e86,\u540c\u6b65\u95ee\u9898\u4e5f\u5f88\u5bc4\\n\\n\\n\\n2. \u6307\u5411\u6570\u636e\u7684\u6307\u9488 (key, page id+list of record id)\\n\\n\u5728b+\u6811\u91cc\u9762\u6709\u91cd\u590d\u9879\\n\\n3. \u6307\u5411\u540c\u4e00\u4e2a\u952e\u7684\u6240\u6709records (key, list of (page id + list of record id))\\n\\n\u51cf\u5c11\u5197\u4f59,\u589e\u52a0\u590d\u6742\u6027\\n\\n\\n\\nclustered: index\u6307\u5411\u7684\u6570\u636e\u5757\u5728\u78c1\u76d8\u4e0a\u662f\u6309\u7167\u8fd9\u4e2aindex\u6392\u5e8f\u6216\u8005\u8fd1\u4f3c\u6392\u5e8f\u7684\\n\\n\u975e\u5e38\u5927\u5f71\u54cd\u6027\u80fd \u987a\u5e8f\u6bd4\u968f\u673a\u5feb100\u500d\\n\\n\u5bf9\u4e8e\u4e00\u4e2a\u6709\u53d8\u5316\u7684\u6570\u636e,\u4f8b\u5982\u63d2\u5165\u6216\u8005\u5220\u9664,\u9700\u8981\u4e00\u4e9b\u6210\u672c\u8fdb\u884c\u78c1\u76d8\u6570\u636e\u7684\u91cd\u65b0\u6392\u5e8f\u6765\u7ef4\u6301clustered \\n\\n\\n\\nB+\u6811\u7684\u5e73\u8861\u6027:\\n\\n\u4f7f\u7528\u5b57\u8282\u6570\u534a\u6ee1(\u5360\u9875\u9762\u5bb9\u91cf)\u5c31\u884c, \u751a\u81f3\u5b9e\u9645\u4e0a\u66f4\u4f4e, \u6309\u7167\u5b9e\u9645\u6027\u80fd\u6765\u51b3\u5b9a,\u4e0d\u4e25\u683c\\n\\n\\n\\n\u53d8\u957fkey: \u524d\u7f00\u538b\u7f29 trie\\n\\n\u6027\u80fd\u7684\u5e38\u6570:\\n\\n\u7531\u4e8e\u987a\u5e8f\u8bfb\u5199\u6bd4\u968f\u673a\u8bfb\u5199\u5feb100\u500d\\n\\nB+\u6811\u6bd4\u5168\u8868\u626b\u63cf\u5dee\u4e0d\u591a\u4e5f\u662f\u6d89\u53ca\u52301%\u4ee5\u4e0b\u7684\u8868\u624d\u6709\u663e\u8457\u4f18\u52bf\\n\\n\u6240\u4ee5\u4f8b\u5982\u5bf9\u4e00\u4e2a\u975e\u805a\u7c07\u7d22\u5f15\u8fdb\u884c\u4e00\u4e2a\u8de8\u8d8a\u534a\u4e2a\u8868\u7684range\u7684\u626b\u63cf, \u90a3\u8fd8\u4e0d\u5982\u76f4\u63a5\u628a\u5168\u8868\u53d6\u51fa\u6765\\n\\n\\n\\n\u4f18\u5316\\n\\n\u7531\u4e8eB+\u6811\u6548\u7387\u771f\u7684\u5f88\u4f4e,\u6240\u4ee5\u6709\u5f88\u591a\u4f18\u5316\u7b56\u7565\\n\\n- bulk loading \u6279\u91cf\u88c5\u8f7d\\n\\n1. Sort the data by a key.\\n2. Fill leaf pages up to size f (the **fill factor**).\\n3. If the leaf page overflows, then use the insertion split algorithm from a normal B+ tree.\\n4. Adjust pointers to reflect new nodes if needed."},{"id":"/\u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\u7b14\u8bb0","metadata":{"permalink":"/blog/\u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\u7b14\u8bb0","source":"@site/blog/\u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\u7b14\u8bb0.md","title":"system-design-interview\u7b14\u8bb0","description":"\u9650\u6d41\u5668","date":"2025-01-19T06:37:33.783Z","tags":[{"inline":true,"label":"\u67b6\u6784\u8bbe\u8ba1","permalink":"/blog/tags/\u67b6\u6784\u8bbe\u8ba1"}],"readingTime":26.61,"hasTruncateMarker":false,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"system-design-interview\u7b14\u8bb0","author":"ayanami","tags":["\u67b6\u6784\u8bbe\u8ba1"],"keywords":["\u7cfb\u7edf\u67b6\u6784","\u67b6\u6784\u8bbe\u8ba1"]},"unlisted":false,"prevItem":{"title":"ucb cs186 \u8bfe\u7a0b\u7b14\u8bb0(\u66f4\u65b0\u4e2d)","permalink":"/blog/cs186-database-WIP"},"nextItem":{"title":"ostep\u9605\u8bfb\u7b14\u8bb0\uff1a\u5355\u673afs\u7684\u5d29\u6e83\u4e00\u81f4\u6027(chapter42-44)","permalink":"/blog/ostep-chapter42-44"}},"content":"### \u9650\u6d41\u5668\\n\\n- \u653e\u5728\u54ea\u91cc? \\n\\n  - \u5ba2\u6237\u7aef, \u5bb9\u6613\u88ab\u4f2a\u9020\u7ed5\u8fc7\\n  - \u670d\u52a1\u7aef\u5e94\u7528\u4ee3\u7801, \u7075\u6d3b\u6027\u9ad8, \u4f46\u5360\u636e\u5de5\u7a0b\u8d44\u6e90\\n  - \u4e91\u4e0a\u5fae\u670d\u52a1, api\u7f51\u5173\u7b49, \u7075\u6d3b\u6027\u4f4e\\n\\n- \u7ecf\u5178\u7b97\u6cd5:\\n\\n  - \u4ee4\u724c\u6876: \u56fa\u5b9a\u901f\u7387\u4ea7\u751f\u4ee4\u724c, \u6bcf\u4e2a\u8bf7\u6c42\u6d88\u8017\u4ee4\u724c\\n\\n    - pros: \u5bb9\u6613\u5b9e\u73b0, \u5185\u5b58\u5360\u7528\u5c11, \u5141\u8bb8\u7a81\u53d1\u6d41\u91cf\\n    - cons: \u8c03\u53c2\u56f0\u96be, \u53ef\u80fd\u9700\u8981\u4e0d\u65ad\u586b\u5145\u6876\\n\\n  - \u6f0f\u6876: \u8bf7\u6c42\u8fdb\u5165\u4e00\u4e2a\u5b9a\u957fFIFO\u961f\u5217, server\u7ed9\u5b9a\u901f\u5ea6\u4ece\u961f\u5217\u53d6\u6570\u636e\u5904\u7406\\n\\n    - pros: \u5bb9\u6613\u5b9e\u73b0, \u5185\u5b58\u5360\u7528\u5c11, \u8bf7\u6c42\u4ee5\u56fa\u5b9a\u901f\u7387\u5904\u7406\\n    - cons: \u7a81\u53d1\u8bf7\u6c42\u5360\u636e\u961f\u5217\u4f7f\u5f97\u65b0\u8bf7\u6c42\u5f97\u4e0d\u5230\u5904\u7406, \u8c03\u53c2\u56f0\u96be,\u53ef\u80fd\u9700\u8981\u4e0d\u65ad\u586b\u5145\u6876\\n\\n  - \u56fa\u5b9a\u7a97\u53e3\u8ba1\u6570\u5668: \u6bcf\u4e00\u4e2a\u7ed9\u5b9a\u65f6\u95f4\u7a97\u53e3\u8fdb\u884c\u8ba1\u6570,\u4f8b\u5982\u6bcf\u5206\u949f100\u4e2a\u8bf7\u6c42\\n\\n    - pros: \u5bb9\u6613\u5b9e\u73b0, \u5185\u5b58\u5360\u7528\u5c11\\n    - cons: \u7a81\u53d1\u8bf7\u6c42\u53ef\u4ee5\u8fbe\u5230\u4e24\u500d\u9650\u5236\u7684QPS(\u5728\u7a97\u53e3\u8fb9\u7f18\u6709\u7a81\u523a)\\n\\n  - \u6ed1\u52a8\u7a97\u53e3\u65e5\u5fd7: \u8bb0\u5f55\u8bf7\u6c42\u65f6\u95f4\u6233, \u6570\u636e\u4fdd\u5b58\u5728redis\u7b49\u7f13\u5b58,\u6bcf\u5f53\u65b0\u8bf7\u6c42\u8fdb\u6765\u7684\u65f6\u5019\u628a\u8fc7\u65f6\u65f6\u95f4\u6233\u5220\u9664, \u5982\u679c\u8bf7\u6c42\u65f6\u95f4\u6233\u6bd4\u65f6\u95f4\u7a97\u53e3\u7684\u6700\u4f4e\u503c\u8fd8\u4f4e, \u62d2\u7edd\u8bf7\u6c42\\n\\n    - pros: \u901f\u7387\u9650\u5236\u51c6\u786e\\n    - cons: \u5185\u5b58\u5f00\u9500\u5927, \u9700\u8981\u5b58\u50a8\u591a\u4e2a\u65f6\u95f4\u6233\\n\\n  - \u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u5668: \u67d0\u65f6\u523b\u9650\u5236\u8bf7\u6c42\u6570 = \u7a97\u53e3\u4e0a\u9650 - \u4e0a\u4e00\u4e2a\u7a97\u53e3\u8bf7\u6c42\u6570 * \u8fd9\u4e00\u4e2a\u7a97\u53e3\u7684\u548c\u4e0a\u4e00\u4e2a\u7a97\u53e3\u7684\u91cd\u53e0\u767e\u5206\u6bd4\u3002\u4f8b\u5982, \u7a97\u53e3\u4e3a\u6bcf\u5206\u949f1000, \u4e0a\u4e00\u5206\u949f800, \u5728\u8fd9\u4e00\u5206\u949f\u768430\u79d2\u65f6, \u9650\u5236\u8fd9\u4e00\u5206\u949f\u7a97\u53e3\u7684\u8bf7\u6c42\u6570\u6700\u591a\u4e3a 1000 - 30 / 60 * 800 = 600\\n\\n    - \u76f8\u5f53\u4e8e\u5047\u8bbe\u4e0a\u4e00\u4e2a\u7a97\u53e3\u7684\u5e73\u5747\u901f\u7387\\n\\n    - pros: \u5e73\u6ed1\u4e86\u6d41\u91cf\u5cf0\u503c, \u5185\u5b58\u9ad8\u6548(\u53ea\u9700\u8981\u8ba1\u6570)\\n\\n    - cons: \u4e0d\u592a\u4e25\u683c, \u7136\u800c\u5176\u5b9e\u53ef\u4ee5\\n\\n      > \u7136\u800c\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5e76\u4e0d\u50cf\u5b83\u770b\u8d77\u6765\u90a3\u4e48\u7cdf\u7cd5\u3002 \u6839\u636eCloudflare[10]\u6240\u505a\u7684\u5b9e\u9a8c\uff0c\u57284\u4ebf\u4e2a\u8bf7\u6c42\u4e2d\uff0c\u53ea\u67090.003%\u7684\u8bf7\u6c42\u88ab\u9519\u8bef\u5730\u5141\u8bb8\u6216\u9650\u5236\u901f\u7387\\n\\n> **\u8d85\u8fc7\u901f\u7387\u9650\u5236**\\n>\\n> \u5982\u679c\u4e00\u4e2a\u8bf7\u6c42\u88ab\u9650\u5236\u4e86\u901f\u7387\uff0cAPI\u4f1a\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u4e00\u4e2aHTTP\u54cd\u5e94\u4ee3\u7801429\uff08\u8bf7\u6c42\u592a\u591a\uff09\u3002\u6839\u636e\u4e0d\u540c\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5c06\u901f\u7387\u53d7\u9650\u7684\u8bf7\u6c42\u6392\u961f\u7b49\u5019\u4ee5\u540e\u5904\u7406\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e9b\u8ba2\u5355\u7531\u4e8e\u7cfb\u7edf\u8fc7\u8f7d\u800c\u53d7\u5230\u901f\u7387\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u7559\u8fd9\u4e9b\u8ba2\u5355\u4ee5\u4fbf\u4ee5\u540e\u5904\u7406\u3002\\n>\\n> **\u9650\u6d41\u5668\u8bf7\u6c42\u5934**\\n>\\n> \u4e00\u4e2a\u5ba2\u6237\u5982\u4f55\u77e5\u9053\u5b83\u662f\u5426\u88ab\u8282\u6d41\uff1f\u5ba2\u6237\u7aef\u5982\u4f55\u77e5\u9053\u5728\u88ab\u8282\u6d41\u4e4b\u524d\u5141\u8bb8\u7684\u5269\u4f59\u8bf7\u6c42\u7684\u6570\u91cf\uff1f\u7b54\u6848\u5c31\u5728HTTP\u54cd\u5e94\u5934\u4e2d\u3002\u9650\u6d41\u5668\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u4ee5\u4e0b HTTP \u6807\u5934\uff1a\\n>\\n> - X-Ratelimit-Remaining\uff1a\u7a97\u53e3\u5185\u5141\u8bb8\u8bf7\u6c42\u7684\u5269\u4f59\u6570\u91cf\\n> - X-Ratelimit-limit\uff1a\u5b83\u8868\u793a\u5ba2\u6237\u7aef\u5728\u6bcf\u4e2a\u65f6\u95f4\u7a97\u53e3\u53ef\u4ee5\u8fdb\u884c\u591a\u5c11\u6b21\u8c03\u7528\\n> - X-Ratelimit-Retry-After\uff1a\u7b49\u5f85\u7684\u79d2\u6570\uff0c\u76f4\u5230\u4f60\u53ef\u4ee5\u518d\u6b21\u63d0\u51fa\u8bf7\u6c42\u800c\u4e0d\u88ab\u8282\u6d41\u3002\\n>\\n> \u5f53\u7528\u6237\u53d1\u9001\u8fc7\u591a\u8bf7\u6c42\u65f6\uff0c\u5c06\u5411\u5ba2\u6237\u7aef\u8fd4\u56de 429 too many requests \u9519\u8bef\u548c X-Ratelimit-Retry-After \u6807\u5934\u3002\\n\\n\\n\\n- \u89c4\u5219\u88ab\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u3002\u5de5\u4f5c\u8005\u7ecf\u5e38\u4ece\u78c1\u76d8\u4e2d\u63d0\u53d6\u89c4\u5219\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u9ad8\u901f\u7f13\u5b58\u4e2d\u3002\\n- \u5f53\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u65f6\uff0c\u8be5\u8bf7\u6c42\u9996\u5148\u88ab\u53d1\u9001\u5230\u9650\u6d41\u4e2d\u95f4\u4ef6\u3002\\n- \u9650\u6d41\u4e2d\u95f4\u4ef6\u4ece\u7f13\u5b58\u4e2d\u52a0\u8f7d\u89c4\u5219\u3002\u5b83\u4eceRedis\u7f13\u5b58\u4e2d\u83b7\u53d6\u8ba1\u6570\u5668\u548c\u6700\u540e\u4e00\u6b21\u8bf7\u6c42\u7684\u65f6\u95f4\u6233\u3002\u6839\u636e\u54cd\u5e94\uff0c\u9650\u6d41\u5668\u51b3\u5b9a\uff1a\\n  - \u5982\u679c\u8bf7\u6c42\u6ca1\u6709\u901f\u7387\u9650\u5236\uff0c\u5b83\u5c06\u88ab\u8f6c\u53d1\u5230API\u670d\u52a1\u5668\u3002\\n  - \u5982\u679c\u8bf7\u6c42\u53d7\u5230\u901f\u7387\u9650\u5236\uff0c\u9650\u6d41\u5668\u4f1a\u5411\u5ba2\u6237\u7aef\u8fd4\u56de 429 too many requests \u9519\u8bef\u3002 \u540c\u65f6\uff0c\u8bf7\u6c42\u88ab\u4e22\u5f03\u6216\u8f6c\u53d1\u5230\u961f\u5217\u3002\\n\\n\\n\\n\u5206\u5e03\u5f0f\u9650\u6d41\\n\\nredis:\\n\\n- lua\u811a\u672c\\n- sorted set\u6bcf\u4e2a\u7528\u6237\u6709\u4e00\u4e2a\u81ea\u5df1\u7684set,\u8bd5\u56fe\u6267\u884c\u52a8\u4f5c\u65f6,\u4f7f\u7528MULTI\u539f\u5b50\u5730\u6267\u884c\u4e0b\u5217\u64cd\u4f5c: `ZREMRANGEBYSCORE` \u5220\u9664\u7ed9\u5b9a\u65f6\u95f4\u95f4\u9694\u524d\u7684\u5143\u7d20, ZADD \u6dfb\u52a0\u5f53\u524d\u65f6\u95f4\u6233, ttl\u8bbe\u7f6e\u4e3arate limit,\u8ba1\u7b97sorted set\u7684\u6570\u91cf,\u5982\u679c\u8d85\u8fc7\u9650\u989d,\u5c31\u5931\u8d25 (\u6ed1\u52a8\u7a97\u53e3\u65e5\u5fd7)(\u6709\u4e00\u8bf4\u4e00\u6211\u89c9\u5f97\u8fd9\u4e2a\u5982\u679c\u6ca1\u6709\u7cbe\u786e\u7684\u9700\u6c42\u4e0d\u5982\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u5668, \u5f00\u9500\u611f\u89c9\u6709\u70b9\u5927)\\n\\n\\n\\n\u591a\u9650\u6d41\u5668\u540c\u6b65: \u7528\u6237hash redis\u96c6\u7fa4\u5206\u914d\u4e4b\u7c7b, \u5c3d\u91cf\u522b\u505a\u8fd9\u79cd\u4e8b\u60c5\\n\\n\u5176\u4ed6\u5c42\u7ea7\u7684\u9650\u6d41:\\n\\n- iptables\\n- ...\\n\\n\\n\\n### \u4e00\u81f4\u6027hash\\n\\n\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\uff1a\\n\\n1. \u4f7f\u7528\u5747\u5300\u5206\u5e03\u7684\u54c8\u5e0c\u51fd\u6570\u5c06\u670d\u52a1\u5668\u548c\u952e\u6620\u5c04\u5230\u73af\u4e0a\u3002\\n2. \u8981\u60f3\u77e5\u9053\u4e00\u4e2a\u952e\u88ab\u6620\u5c04\u5230\u54ea\u4e2a\u670d\u52a1\u5668\uff0c\u4ece\u952e\u7684\u4f4d\u7f6e\u987a\u65f6\u9488\u67e5\u627e\uff0c\u76f4\u5230\u627e\u5230\u73af\u4e0a\u7684\u7b2c\u4e00\u4e2a\u670d\u52a1\u5668\u3002\\n\\n\u6b65\u9aa4\u662f\u5f88\u7b80\u5355\u7684, \u9ebb\u70e6\u7684\u662f\u95ee\u9898\\n\\n\u73af\u4e0a\u670d\u52a1\u5668\u5206\u533a\u5927\u5c0f\u96be\u4ee5\u4fdd\u8bc1\u76f8\u540c(\u6dfb\u52a0\u5220\u9664\u670d\u52a1\u5668)\\n\\n\\n\\n\u89e3\u51b3\u65b9\u6cd5: \u865a\u62df\u8282\u70b9(\u5206\u6210\u66f4\u5c0f\u7684\u5757)\\n\\n\u6bcf\u4e2a\u670d\u52a1\u5668\u52a8\u6001\u5730\u5206\u914d\u5c0f\u5757(\u865a\u62df\u8282\u70b9), \u8fd9\u6837\u8fd8\u53ef\u4ee5\u8003\u8651\u670d\u52a1\u5668\u5bb9\u91cf\u81ea\u52a8\u7f29\u653e\u95ee\u9898\\n\\n\\n\\n### \u4e00\u81f4\u6027\u6a21\u578b\\n\\n> N = \u526f\u672c\u6570\\n>\\n> W = \u5927\u5c0f\u4e3a W \u7684\u89c4\u5b9a\u5199\u5165\u3002\u8981\u5c06\u5199\u5165\u64cd\u4f5c\u89c6\u4e3a\u6210\u529f\uff0c\u5fc5\u987b\u4ece W \u4e2a\u526f\u672c\u786e\u8ba4\u5199\u5165\u64cd\u4f5c\u3002\\n>\\n> R = \u5927\u5c0f\u4e3a R \u7684\u8bfb\u53d6\u89c4\u5b9a\u4eba\u6570\u3002\u4e3a\u4e86\u4f7f\u8bfb\u53d6\u64cd\u4f5c\u88ab\u8ba4\u4e3a\u662f\u6210\u529f\u7684\uff0c\u8bfb\u53d6\u64cd\u4f5c\u5fc5\u987b\u7b49\u5f85\u81f3\u5c11R\u4e2a\u526f\u672c\u7684\u54cd\u5e94\u3002\\n>\\n> \u5982\u4f55\u914d\u7f6eN\u3001W\u548cR\u4ee5\u9002\u5e94\u6211\u4eec\u7684\u4f7f\u7528\u60c5\u51b5\uff1f\\n>\\n> \u4e0b\u9762\u662f\u4e00\u4e9b\u53ef\u80fd\u7684\u8bbe\u7f6e\uff1a\\n>\\n> - \u5982\u679c`R=1\uff0cW=N`\uff0c\u7cfb\u7edf\u88ab\u4f18\u5316\u4e3a\u5feb\u901f\u8bfb\u53d6\\n> - \u5982\u679c`W=1\uff0cR=N`\uff0c\u7cfb\u7edf\u88ab\u4f18\u5316\u4e3a\u5feb\u901f\u5199\u5165\\n> - \u5982\u679c`W+R>N`\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5f3a\u4e00\u81f4\u6027\uff08\u901a\u5e38`N=3\uff0cW=R=2`\uff09\u3002\\n> - \u5982\u679c`W+R<=N`\uff0c\u5219\u4e0d\u80fd\u4fdd\u8bc1\u5f3a\u4e00\u81f4\u6027\\n\\n\\n\\n\u590d\u5236`->`\u9ad8\u53ef\u7528`->`\u4e0d\u4e00\u81f4\\n\\n\u53d1\u73b0\u5e76\u89e3\u51b3\u51b2\u7a81: \u5e38\u7528\u662f\u5411\u91cf\u65f6\u949f vector clock, \u4f46\u6709\u51e0\u4e2a\u95ee\u9898\\n\\n- \u5904\u7406\u51b2\u7a81\u903b\u8f91\u590d\u6742\\n- \u52a8\u6001\u589e\u52a0\u5220\u9664\u670d\u52a1\u5668\u903b\u8f91\u590d\u6742\\n\\n\u53c2\u8003:\\n\\n- https://juejin.cn/post/7205101745936203837\\n- https://houbb.github.io/2018/08/31/lock-vector-clock-01\\n\\n\\n\\n\u5b9e\u9645\u4e1a\u754c\u7684\u7528\u4f8b\u53c2\u8003Dynamo\\n\\n\u7b97\u6cd5\u7b80\u4ecb:\u5728\u6bcf\u4e2a\u670d\u52a1\u5668\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a\u6240\u6709\u670d\u52a1\u5668\u7684vector\\n\\n- \u5f53\u81ea\u5df1\u53d1\u751f\u4e8b\u4ef6\u65f6,\u589e\u52a0`vector[self]`, \u5e76\u544a\u8bc9\u9700\u8981\u544a\u8bc9\u7684\u670d\u52a1\u5668(**\u6838\u5fc3\u5c31\u5728\u4e8e\u4e0d\u5e7f\u64ad, \u6ca1\u6709\u5168\u5c40\u65f6\u95f4!\u5f53\u7136\u4e5f\u56e0\u6b64\u4e0d\u4fdd\u8bc1\u89e3\u51b3\u51b2\u7a81**) \\n- \u5f53\u81ea\u5df1\u6536\u5230A server\u7684\u4e8b\u4ef6\u65f6, `vector[A] += d`\\n\\n\u6700\u540e\u60f3\u8981\u89c9\u5f97\u4e00\u4e2a\u4e8b\u4ef6\u7684\u5168\u5c40\u987a\u5e8f\u7684\u65f6\u5019, \u67e5\u770b\u6240\u6709\u7684server\u7684vec\\n\\n\u5982\u679c\u6709\u4e00\u4e2aserver\u7684vec\u662f\u6700\u5927\u7684,\u90a3\u4e48\u4e25\u683c\u6709\u56e0\u679c\u5173\u7cfb,\u53d6\u5b83\u7684\u503c\u5c31\u884c\\n\\n\u4f46\u5982\u679c\u6ca1\u6709\u6700\u5927\u7684vec, \u5c31\u9700\u8981\u89e3\u51b3\u51b2\u7a81\u7684\u7b56\u7565\\n\\n\u7b56\u7565\\n\\n1. \u4ea4\u7ed9\u5ba2\u6237\u7aef, \u5982dynamo\\n2. \u52a0\u4e0a\u65f6\u95f4\u6233, `vec\' = [...servers, timestamp]`\u51b2\u7a81\u53d6ts\u6700\u5927\u7684\\n3. \u968f\u673a\u53d6\u4e00\u4e2a\\n\\n> \u6240\u4ee5\u5411\u91cf\u65f6\u949f\u7b97\u6cd5\u7684\u5b9e\u8d28\u662f\uff1a\\n>\\n> \uff081\uff09\u5c06\u903b\u8f91\u4e0a\u53ef\u4ee5\u5408\u5e76\u7684\u51b2\u7a81\u6210\u529f\u5408\u5e76\uff1b\\n>\\n> \uff082\uff09\u903b\u8f91\u4e0a\u65e0\u6cd5\u5408\u5e76\u7684\u51b2\u7a81\u4f9d\u65e7\u51b2\u7a81\uff1b\\n\\n\\n\\n\u62d3\u5c55: \u5411\u91cf\u65f6\u949f\u7684\u526a\u679d, riak, \u727a\u7272\u7edd\u5bf9\u7684\u6b63\u786e\u6027(false merge)\u6765\u6362\u53d6\u5bf9\u592a\u957f\u7684vec clock\u7684\u526a\u679d\\n\\ngossip \u534f\u8bae quorom\\n\\n\\n\\n### \u552f\u4e00ID\u751f\u6210\u5668\\n\\n- \u591a\u4e3b\u590d\u5236: \u4e0b\u4e00\u4e2aid += k, k\u662f\u670d\u52a1\u5668\u6570\u91cf,\u62d3\u5c55\u6027\u5dee\\n\\n- uuid \\n\\n  - \u5f15\u81ea\u7ef4\u57fa\u767e\u79d1\uff0c\\"\u5728\u6bcf\u79d2\u4ea7\u751f10\u4ebf\u4e2aUUIDs\uff0c\u5927\u7ea6100\u5e74\u540e\uff0c\u521b\u9020\u4e00\u4e2a\u91cd\u590d\u7684\u6982\u7387\u4f1a\u8fbe\u523050%\\"\u3002\\n\\n  - \u4f18\u70b9\uff1a\\n\\n    - \u751f\u6210 UUID \u5f88\u7b80\u5355\u3002\u670d\u52a1\u5668\u4e4b\u95f4\u4e0d\u9700\u8981\u534f\u8c03\uff0c\u56e0\u6b64\u4e0d\u4f1a\u6709\u4efb\u4f55\u540c\u6b65\u95ee\u9898\u3002\\n\\n    - \u8be5\u7cfb\u7edf\u6613\u4e8e\u6269\u5c55\uff0c\u56e0\u4e3a\u6bcf\u4e2a Web \u670d\u52a1\u5668\u8d1f\u8d23\u751f\u6210\u5b83\u4eec\u4f7f\u7528\u7684 ID\u3002 ID \u751f\u6210\u5668\u53ef\u4ee5\u8f7b\u677e\u5730\u4e0e Web \u670d\u52a1\u5668\u4e00\u8d77\u6269\u5c55\u3002\\n\\n  - **\u7f3a\u70b9\uff1a**\\n\\n    - ID \u662f 128 \u4f4d\u957f, \u7a7a\u95f4\u5f00\u9500\u3002\\n    - ID \u4e0d\u4f1a\u968f\u65f6\u95f4\u4e0a\u5347\\n    - ID \u53ef\u4ee5\u662f\u975e\u6570\u5b57\u7684\\n\\n- ticket\u670d\u52a1\u5668, \u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e4b\u4e2d\u7ef4\u6301\u4e00\u4e2a\u552f\u4e00\u7684ticket server\u7528\u4e8e\u7b7e\u53d1id\\n\\n  - **\u4f18\u70b9\uff1a**\u6570\u5b57 ID\uff0c\u6613\u4e8e\u5b9e\u65bd\uff0c\u9002\u7528\u4e8e\u4e2d\u5c0f\u578b\u5e94\u7528\u7a0b\u5e8f\\n\\n  - **\u7f3a\u70b9\uff1a**\u5355\u70b9\u6545\u969c\\n\\n- twitter\u96ea\u82b1\u7b97\u6cd5\\n  - **\u7b26\u53f7\u4f4d**\uff1a1 \u4f4d\uff0c\u5b83\u5c06\u59cb\u7ec8\u4e3a 0\u3002\u8fd9\u662f\u4e3a\u5c06\u6765\u4f7f\u7528\u4fdd\u7559\u7684\u3002\u5b83\u53ef\u4ee5\u6f5c\u5728\u5730\u7528\u4e8e\u533a\u5206\u6709\u7b26\u53f7\u6570\u548c\u65e0\u7b26\u53f7\u6570\u3002\\n  - **\u65f6\u95f4\u6233**\uff1a41 \u4f4d\u3002\u81ea\u7eaa\u5143\u6216\u81ea\u5b9a\u4e49\u7eaa\u5143\u4ee5\u6765\u7684\u6beb\u79d2\u6570\u3002\u6211\u4eec\u4f7f\u7528 Twitter \u96ea\u82b1\u9ed8\u8ba4\u7eaa\u5143 1288834974657\uff0c\u76f8\u5f53\u4e8e 2010 \u5e74 11 \u6708 4 \u65e5 01:42:54 UTC\u3002\\n  - **\u6570\u636e\u4e2d\u5fc3 ID**\uff1a5 \u4f4d\uff0c\u8fd9\u7ed9\u4e86\u6211\u4eec 25=3225=32 \u4e2a\u6570\u636e\u4e2d\u5fc3\u3002\\n  - **\u673a\u5668 ID**\uff1a5 \u4f4d\uff0c\u6bcf\u4e2a\u6570\u636e\u4e2d\u5fc3\u6709 25=3225=32 \u53f0\u673a\u5668\\n  - **\u5e8f\u5217\u53f7\uff1a12 \u4f4d**\u3002**\u5bf9\u4e8e\u5728\u8be5\u673a\u5668/\u8fdb\u7a0b\u4e0a\u751f\u6210\u7684\u6bcf\u4e2a ID\uff0c\u5e8f\u5217\u53f7\u90fd\u4f1a\u9012\u589e 1\u3002\u8be5\u6570\u5b57\u6bcf\u6beb\u79d2\u91cd\u7f6e\u4e3a 0\u3002**\\n\\n\u4e5f\u5c31\u662f\u8bf4\u96ea\u82b1\u5728\u4e00\u53f0\u673a\u5668\u4e0a1\u6beb\u79d2\u53ef\u4ee5\u652f\u63014096\u4e2a\u65b0id\\n\\n\\n\\n\u989d\u5916\u8981\u70b9:\\n\\n- \u65f6\u949f\u540c\u6b65\u3002\u5728\u6211\u4eec\u7684\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe ID \u751f\u6210\u670d\u52a1\u5668\u5177\u6709\u76f8\u540c\u7684\u65f6\u949f\u3002\u5f53\u670d\u52a1\u5668\u5728\u591a\u4e2a\u5185\u6838\u4e0a\u8fd0\u884c\u65f6\uff0c\u6b64\u5047\u8bbe\u53ef\u80fd\u4e0d\u6210\u7acb\u3002\u540c\u6837\u7684\u6311\u6218\u5b58\u5728\u4e8e\u591a\u673a\u573a\u666f\u4e2d\u3002\u65f6\u949f\u540c\u6b65\u7684\u89e3\u51b3\u65b9\u6848\u8d85\u51fa\u4e86\u672c\u4e66\u7684\u8303\u56f4\uff1b\u4f46\u662f\uff0c\u4e86\u89e3\u95ee\u9898\u7684\u5b58\u5728\u5f88\u91cd\u8981\u3002**\u7f51\u7edc\u65f6\u95f4\u534f\u8bae\u662f\u8fd9\u4e2a\u95ee\u9898\u6700\u6d41\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002**\\n- \u8282\u6bb5\u957f\u5ea6\u8c03\u6574\u3002\u4f8b\u5982\uff0c\u8f83\u5c11\u7684\u5e8f\u5217\u53f7\u4f46\u8f83\u591a\u7684\u65f6\u95f4\u6233\u4f4d\u5bf9\u4f4e\u5e76\u53d1\u6027\u548c\u957f\u671f\u5e94\u7528\u662f\u6709\u6548\u7684\u3002\\n- \u9ad8\u53ef\u7528\u6027\u3002\u7531\u4e8e ID \u751f\u6210\u5668\u662f\u5173\u952e\u4efb\u52a1\u7cfb\u7edf\uff0c\u56e0\u6b64\u5b83\u5fc5\u987b\u5177\u6709\u9ad8\u53ef\u7528\u6027\\n\\n\u62d3\u5c55\u9605\u8bfb: \u7f51\u7edc\u65f6\u95f4\u534f\u8bae\\n\\n\\n\\n\\n\\n### \u77edURL\\n\\n\u70b9\u51fb\u8f83\u77ed\u7684\u522b\u540d\u91cd\u5b9a\u5411\u5230\u539f\u59cburl\\n\\n- URL\u7f29\u77ed\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u7684URL => \u8fd4\u56de\u4e00\u4e2a\u77ed\u5f97\u591a\u7684URL\\n\\n- URL\u91cd\u5b9a\u5411\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u77ed\u7684URL => \u91cd\u5b9a\u5411\u5230\u539f\u6765\u7684URL\\n\\n- \u9ad8\u53ef\u7528\u6027\u3001\u53ef\u6269\u5c55\u6027\u548c\u5bb9\u9519\u8003\u8651\\n\\n> \u503c\u5f97\u5728\u8fd9\u91cc\u8ba8\u8bba\u7684\u4e00\u4ef6\u4e8b\u662f 301 \u91cd\u5b9a\u5411\u4e0e 302 \u91cd\u5b9a\u5411\u3002\\n>\\n> - **301\u91cd\u5b9a\u5411**\u3002301\u91cd\u5b9a\u5411\u8868\u660e\uff0c\u8bf7\u6c42\u7684URL\u88ab \\"\u6c38\u4e45 \\"\u5730\u79fb\u5230\u4e86\u957fURL\u4e0a\u3002\u7531\u4e8e\u662f\u6c38\u4e45\u91cd\u5b9a\u5411\uff0c**\u6d4f\u89c8\u5668\u4f1a\u7f13\u5b58\u54cd\u5e94\uff0c\u5bf9\u540c\u4e00URL\u7684\u540e\u7eed\u8bf7\u6c42\u5c06\u4e0d\u4f1a\u88ab\u53d1\u9001\u5230URL\u7f29\u77ed\u670d\u52a1\u4e0a**\u3002\u76f8\u53cd\uff0c\u8bf7\u6c42\u5c06\u76f4\u63a5\u88ab\u91cd\u5b9a\u5411\u5230\u957f\u7f51\u5740\u670d\u52a1\u5668\u3002\\n>\\n> - **302\u91cd\u5b9a\u5411**\u3002302\u91cd\u5b9a\u5411\u610f\u5473\u7740URL\u88ab \\"\u6682\u65f6 \\"\u79fb\u5230\u957fURL\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u540c\u4e00URL\u7684\u540e\u7eed\u8bf7\u6c42\u5c06\u9996\u5148\u88ab\u53d1\u9001\u5230URL\u7f29\u77ed\u670d\u52a1\u4e0a\u3002\u7136\u540e\uff0c\u5b83\u4eec\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230\u957f\u7f51\u5740\u670d\u52a1\u5668\u3002\\n>\\n> \u6bcf\u79cd\u91cd\u5b9a\u5411\u65b9\u6cd5\u90fd\u6709\u5176\u4f18\u70b9\u548c\u7f3a\u70b9\u3002\u5982\u679c\u4f18\u5148\u8003\u8651**\u51cf\u5c11\u670d\u52a1\u5668\u8d1f\u8f7d**\uff0c\u4f7f\u7528301\u91cd\u5b9a\u5411\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u53ea\u6709\u540c\u4e00URL\u7684\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u88ab\u53d1\u9001\u5230URL\u7f29\u77ed\u670d\u52a1\u5668\u3002\u7136\u800c\uff0c\u5982\u679c\u5206\u6790\u662f\u91cd\u8981\u7684\uff0c302\u91cd\u5b9a\u5411\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730**\u8ddf\u8e2a\u70b9\u51fb\u7387\u548c\u70b9\u51fb\u7684\u6765\u6e90\u3002**\\n\\n\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848 `<shortURL, LongURL>`\u7684rdbms\\n\\n\u5047\u8bbe\u7cfb\u7edf\u652f\u63013650\u4ebf\u4e2aurl=10\u5e74 * \u6bcf\u59291\u4ebf\\n\\n\u53ef\u4ee5\u4f7f\u7528`0-9a-zA-Z`62\u4e2a\u5b57\u7b26\uff0c `62^n > 3650 \u4ebf` n = 7\\n\\n\\n\\n\u65b9\u6cd51: hash+\u78b0\u649e\u89e3\u51b3\\n\\n```\\nlongURL -> hash -> short -> exist on db?(opt bloomfilter + query) -> save/return/collision\\n\\ncollision \u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662f longURL -> longURL + predefined string\\n```\\n\\n\\n\\n\u65b9\u6cd52: base62\u8f6c\u6362\\n\\n\u7ed9\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u7684\u957furl\u5206\u914d\u4e00\u4e2a\u6570\u5b57\u7c7b\u578b\u7684\u552f\u4e00id, \u518d\u5bf9\u552f\u4e00id\u505abase62\u8f6c\u6362\\n\\n\u574f\u5904\u662f\u53ef\u80fd\u51fa\u73b0\u5b89\u5168\u95ee\u9898\\n\\n```\\nlongURL -> in DB ? -> yes,return short\\n            |\\n            -> no, generate new ID -> id to base62 -> save id, longurl, shorturl in db \\n```\\n\\n\u8bfb\u591a\u4e8e\u5199, \u52a0\u7f13\u5b58\\n\\n\\n\\n### \u722c\u866b\u7cfb\u7edf\\n\\n\u7b97\u6cd5\u4fa7: \u4eceurl seed\u5f00\u59cb, \u5c06link\u89c6\u4e3a\u8fb9, \u7528BFS\u53bb\u722c\u53d6\u4e0d\u540c\u7684\u7f51\u9875\\n\\n\u67b6\u6784\u4fa7:\\n\\n`seed url -> url frontier -> html downloader(DNS resolver) -> content parser -> content seen(\u91cd\u590d\u68c0\u6d4b\u5668, \u4f8b\u5982 hash, BF) + \u5b58\u50a8-> link extractor -> url filter -> url seen -> url storage`\\n\\n\u4f18\u5148\u7ea7: \u7b80\u5355\u7684\u505a\u6cd5\u662f\u6839\u636eUrl\u5185\u5bb9\u53d8\u5316\u7684\u901f\u5ea6(\u53ef\u4ee5\u57fa\u4e8e\u5386\u53f2\u6293\u53d6\u8bb0\u5f55)\u548c\u672c\u8eab\u7684\u4ef7\u503c\uff08\u4f8b\u5982\u662f\u4e2a\u4eba\u535a\u5ba2\u8fd8\u662f\u5b98\u65b9\u7f51\u7ad9\uff09\u8bbe\u8ba1\u4e00\u4e2a\u4f18\u5148\u7ea7\u4f30\u4ef7\u51fd\u6570, \u6839\u636eurl\u533a\u5206k\u4e2a\u5de5\u4f5c\u961f\u5217, \u4fdd\u8bc1\u4e00\u4e2a\u961f\u5217\u5185\u53ea\u6709\u4e00\u4e2aurl\uff08\u7684\u591a\u4e2a\u8bf7\u6c42\uff09, \u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4f18\u5148\u7ea7\\n\\n\\n\\n\u722c\u866b\u9700\u8981\u8003\u8651\u793c\u8c8c\u6027, DDoS\\n\\n\u505a\u6cd5\u662f\u6bcf\u4e2aurl\u4f5c\u4e3a\u4e00\u4e2a\u540e\u7aef\u961f\u5217, \u5728\u4f18\u5148\u7ea7\u7684selector\u51fa\u6765\u4e4b\u540e, \u7ef4\u62a4\u4e00\u5f20(url,back queue)\u7684\u8868, \u5c06url\u653e\u5230back queue\u91cc\u9762\u53bb\\n\\n\u5bf9\u6bcf\u4e00\u4e2aurl(backqueue), \u7ef4\u62a4\u4e00\u4e2a\u65f6\u95f4t, \u662f\u4e0b\u4e00\u6b21\u6293\u53d6\u7684\u6700\u65e9\u65f6\u95f4(\u4f8b\u5982\u5f53\u524d\u65f6\u95f4+10\u500d\u524d\u4e00\u6b21\u83b7\u53d6\u65f6\u95f4)\\n\\n\u800c\u722c\u866b\u7ebf\u7a0b\u6bcf\u6b21\u4ece\u65f6\u95f4\u7684\u6700\u5c0f\u5806\u4e4b\u4e2d\u53d6\u51fa\u5143\u7d20, (\u5982\u9700\u8981, \u7b49\u5f85\u5230t), \u7136\u540e\u722c\u53d6\\n\\nhtml\u4e0b\u8f7d\u5668: Robots \u6392\u9664\u534f\u8bae, \u5206\u5e03\u5f0f\u6293\u53d6, \u8d85\u65f6\\n\\n\\n\\n\u5176\u4ed6\u95ee\u9898: \u5197\u4f59\u5185\u5bb9, \u8718\u86db\u9677\u9631, \u5783\u573e\u6570\u636e, js-\u9700\u8981\u52a8\u6001\u6e32\u67d3\u5f97\u5230\u94fe\u63a5\u548c\u5176\u4ed6\u6570\u636e\\n\\n\\n\\n\\n\\n### \u901a\u77e5\u7cfb\u7edf\\n\\n\u5220\u91cd, \u8ddf\u8e2a, \u9650\u901f, \u7528\u6237\u8bbe\u7f6e(\u63a5\u53d7\u54ea\u4e9b\u901a\u77e5), \u5931\u8d25\u65f6\u7684\u91cd\u8bd5\u673a\u5236, \u5b89\u5168\u6027(\u5ba2\u6237\u9a8c\u8bc1)\\n\\n\\n\\n\u63a8\u9001\u6d41\uff1a\\n\\n\u6838\u5fc3\u5728fan out\u7cfb\u7edf, \u8bfb\u6247\u51fa(\u62c9\u6a21\u5f0f)\u8fd8\u662f\u5199\u6247\u51fa(\u63a8\u6a21\u5f0f), \u70ed\u952e\u95ee\u9898\u548c\u901f\u7387\u95ee\u9898\\n\\n\u6df7\u5408: \u5bf9\u5927\u591a\u6570\u7528\u6237\u4f7f\u7528\u63a8\u9001\u6a21\u5f0f\u3002\u5bf9\u4e8e\u540d\u4eba\u6216\u6709\u5f88\u591a\u670b\u53cb/\u7c89\u4e1d\u7684\u7528\u6237\uff0c\u6211\u4eec\u8ba9\u7c89\u4e1d\u6309\u9700\u63d0\u53d6\u4fe1\u606f\u5185\u5bb9\u4ee5\u907f\u514d\u7cfb\u7edf\u8fc7\u8f7d\\n\\nget friend IDs: graph DB\\n\\nfanout service\u5148\u4ecegraph DB\u62ff\u5230friend ids, \u518d\u4ece\u7528\u6237\u7f13\u5b58(\u7528\u6237db)\u5f97\u5230\u670b\u53cb\u76f8\u5173\u4fe1\u606f:\\n\\n> \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u628a\u67d0\u4eba\u8c03\u6210\u9759\u97f3\uff0c\u5979\u7684\u5e16\u5b50\u5c06\u4e0d\u4f1a\u663e\u793a\u5728\u4f60\u7684\u4fe1\u606f\u6d41\u4e2d\uff0c\u5c3d\u7ba1\u4f60\u4eec\u4ecd\u7136\u662f\u670b\u53cb\u3002\u5e16\u5b50\u53ef\u80fd\u4e0d\u663e\u793a\u7684\u53e6\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u7528\u6237\u53ef\u4ee5\u6709\u9009\u62e9\u5730\u4e0e\u7279\u5b9a\u7684\u670b\u53cb\u5206\u4eab\u4fe1\u606f\u6216\u5bf9\u5176\u4ed6\u4eba\u9690\u85cf\u4fe1\u606f\u3002\\n\\n\u628a\u66f4\u65b0\u7684\u9700\u6c42\u5305\u6210\u4efb\u52a1(\u4f8b\u5982`<post_id, user_id>`)\u4e22\u5230mq\\n\\nmq\u5165\u5e93, \u5199\u7f13\u5b58\\n\\n\\n\\n\u7f13\u5b58\u5c42\u7ea7:\\n\\n- News Feed\uff1a\u5b83\u5b58\u50a8\u4e86\u4fe1\u606f\u7684ID\u3002\\n\\n- Content\uff1a\u5b83\u5b58\u50a8\u6bcf\u4e2a\u5e16\u5b50\u7684\u6570\u636e\u3002\u53d7\u6b22\u8fce\u7684\u5185\u5bb9\u88ab\u5b58\u50a8\u5728\u70ed\u7f13\u5b58\u4e2d\u3002\\n- Social Graph\uff1a\u5b83\u5b58\u50a8\u7528\u6237\u5173\u7cfb\u6570\u636e\u3002\\n- Action\uff1a\u5b83\u5b58\u50a8\u6709\u5173\u7528\u6237\u662f\u5426\u559c\u6b22\u5e16\u5b50\u3001\u56de\u590d\u5e16\u5b50\u6216\u5bf9\u5e16\u5b50\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u7684\u4fe1\u606f\u3002\\n- Counters\uff1a\u5b83\u5b58\u50a8\u70b9\u8d5e\u3001\u56de\u590d\u3001\u5173\u6ce8\u8005\u3001\u5173\u6ce8\u7b49\u7684\u8ba1\u6570\u5668\u3002\\n\\n\\n\\n### \u804a\u5929\u7cfb\u7edf\\n\\n\u65e0\u72b6\u6001\u6709\u72b6\u6001\u5206\u79bb\\n\\n- \u65e0\u72b6\u6001\u7684\u670d\u52a1 http\\n\\n  \u65e0\u72b6\u6001\u670d\u52a1\u662f\u4f20\u7edf\u7684\u9762\u5411\u516c\u4f17\u7684\u8bf7\u6c42/\u54cd\u5e94\u670d\u52a1\uff0c\u7528\u4e8e\u7ba1\u7406\u767b\u5f55\u3001\u6ce8\u518c\u3001\u7528\u6237\u8d44\u6599\u7b49\u3002\u8fd9\u4e9b\u662f\u8bb8\u591a\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5e38\u89c1\u529f\u80fd\u3002\\n\\n  \u65e0\u72b6\u6001\u670d\u52a1\u4f4d\u4e8e\u8d1f\u8f7d\u5747\u8861\u5668\u540e\u9762\uff0c\u5176\u5de5\u4f5c\u662f\u6839\u636e\u8bf7\u6c42\u8def\u5f84\u5c06\u8bf7\u6c42\u8def\u7531\u5230\u6b63\u786e\u7684\u670d\u52a1\u3002\u8fd9\u4e9b\u670d\u52a1\u53ef\u4ee5\u662f\u5355\u4f53\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u5355\u72ec\u7684\u5fae\u670d\u52a1\u3002\u6211\u4eec\u4e0d\u9700\u8981\u81ea\u5df1\u5efa\u7acb\u8bb8\u591a\u8fd9\u6837\u7684\u65e0\u72b6\u6001\u670d\u52a1\uff0c\u56e0\u4e3a\u5e02\u573a\u4e0a\u6709\u4e00\u4e9b\u670d\u52a1\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u88ab\u96c6\u6210\u3002\\n\\n  \u6211\u4eec\u5c06\u6df1\u5165\u8ba8\u8bba\u7684\u4e00\u4e2a\u670d\u52a1\u662f\u670d\u52a1\u53d1\u73b0\u3002\u5b83\u7684\u4e3b\u8981\u5de5\u4f5c\u662f\u7ed9\u5ba2\u6237\u63d0\u4f9b\u4e00\u4e2a\u5ba2\u6237\u53ef\u4ee5\u8fde\u63a5\u5230\u7684\u804a\u5929\u670d\u52a1\u5668\u7684DNS\u4e3b\u673a\u540d\u5217\u8868\u3002\\n\\n- \u6709\u72b6\u6001\u7684\u670d\u52a1 websocket\\n\\n  \u552f\u4e00\u6709\u72b6\u6001\u7684\u670d\u52a1\u662f\u804a\u5929\u670d\u52a1\u3002\u8be5\u670d\u52a1\u662f\u6709\u72b6\u6001\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u90fd\u4e0e\u4e00\u4e2a\u804a\u5929\u670d\u52a1\u5668\u4fdd\u6301\u6301\u4e45\u7684\u7f51\u7edc\u8fde\u63a5\u3002\u5728\u8fd9\u4e2a\u670d\u52a1\u4e2d\uff0c\u53ea\u8981\u670d\u52a1\u5668\u4ecd\u7136\u53ef\u7528\uff0c\u5ba2\u6237\u901a\u5e38\u4e0d\u4f1a\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u804a\u5929\u670d\u52a1\u5668\u3002\u670d\u52a1\u53d1\u73b0\u4e0e\u804a\u5929\u670d\u52a1\u5bc6\u5207\u534f\u8c03\uff0c\u4ee5\u907f\u514d\u670d\u52a1\u5668\u8fc7\u8f7d\u3002\u6211\u4eec\u5c06\u5728\u6df1\u5165\u7814\u7a76\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u3002\\n\\n\\n\\n\u670d\u52a1\u5668\u7684\u5207\u5206:\\n\\n- chat server \u7ba1\u7406\u4fe1\u606f\u7684\u6536\u53d1\\n- presence server \u7ba1\u7406\u5728\u7ebf/\u79bb\u7ebf\u72b6\u6001\\n- api server \u5904\u7406\u65e0\u72b6\u6001\u670d\u52a1\\n- notification server \u63a8\u9001\u901a\u77e5\\n\\n\\n\\nDB\u9009\u62e9: KV\u6570\u636e\u5e93\\n\\n\u4e3a\u4ec0\u4e48\uff1f**\u804a\u5929\u6570\u636e\u7684\u8bfb\u5199\u6a21\u5f0f**\\n\\n- \u6570\u636e\u91cf\u5de8\u5927 \u9700\u8981\u6c34\u5e73\u62d3\u5c55\\n- \u53ea\u6709\u6700\u8fd1\u7684\u804a\u5929\u8bb0\u5f55\u624d\u4f1a\u88ab\u9891\u7e41\u8bbf\u95ee\\n- \u4f46\u201c\u6700\u8fd1\u201d\u91cc\u9762\u4e5f\u4e0d\u5b8c\u5168\u662f\u987a\u5e8f\u7684, \u5f15\u7528, \u8df3\u8f6c, \u63d0\u53ca\u7b49\\n- \u8bfb\u5199\u6bd4\u7ea6\u4e3a1:1, \u8bfb\u5e76\u4e0d\u8fdc\u8fdc\u9ad8\u4e8e\u5199\\n\\n\u8fd9\u6837\u7684wkld\u4e0bkv\u6bd4\u5173\u7cfb\u578b\u7684\u4f18\u52bf:\\n\\n- \u6c34\u5e73\u62d3\u5c55\u8f7b\u677e\\n- \u5206\u5c42\u67b6\u6784\u5bf9\u70ed\u6570\u636e\u5bb9\u6613\u4f18\u5316\\n- \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684index\u5728\u6570\u636e\u91cf\u53d8\u5927\u65f6\u6602\u8d35\\n\\n\\n\\n\u6d88\u606fID\u8bbe\u8ba1:\\n\\n\u4e00\u5bf9\u4e00\u804a\u5929: \u4e3b\u952emessage id\\n\\n\u7fa4\u804a: \u590d\u5408\u4e3b\u952e `{channel_id, message_id}`\\n\\n\u95ee\u9898: id\u7528\u4ec0\u4e48?\\n\\n\u8981\u6c42: \u552f\u4e00\u6027 + \u53ef\u4ee5\u6309\u7167\u65f6\u95f4\u6392\u5e8f\\n\\n- \u81ea\u589e: \u5206\u5e03\u5f0f\u5b9e\u73b0\u56f0\u96be\\n- \u5168\u5c40\u5e8f\u5217\u53f7\u53d1\u751f\u5668: \u5c06\u65f6\u95f4\u9879\u63d0\u524d\u5c31\u53ef\u4ee5\u6309\u7167\u65f6\u95f4\u6392\u5e8f\\n- \u672c\u5730\u5e8f\u5217\u53f7\u751f\u6210\u5668: \u53ea\u4fdd\u8bc1\u6d88\u606f\u5728\u4e00\u4e2a\u7ec4\u5185(channel\u5185)\u552f\u4e00, \u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\\n\\n\\n\\n\u53d1\u9001\u4fe1\u606f\u7684\u6d41\u7a0b\\n\\n1. \u7528\u6237A\u5411\u804a\u5929\u670d\u52a1\u56681\u53d1\u9001\u4e86\u4e00\u6761\u804a\u5929\u4fe1\u606f\u3002\\n2. \u804a\u5929\u670d\u52a1\u56681\u4eceID\u751f\u6210\u5668\u83b7\u5f97\u4e00\u4e2a\u4fe1\u606fID\u3002\\n3. \u804a\u5929\u670d\u52a1\u56681\u5c06\u6d88\u606f\u53d1\u9001\u81f3\u6d88\u606f\u540c\u6b65\u961f\u5217\u3002\\n4. \u6d88\u606f\u88ab\u50a8\u5b58\u5728\u4e00\u4e2a\u952e\u503c\u5b58\u50a8\u4e2d\u3002\\n5. a. \u5982\u679c\u7528\u6237B\u5728\u7ebf\uff0c\u4fe1\u606f\u88ab\u8f6c\u53d1\u5230\u7528\u6237B\u6240\u8fde\u63a5\u7684\u804a\u5929\u670d\u52a1\u56682\u3002\\n6. b. \u5982\u679c\u7528\u6237B\u5904\u4e8e\u79bb\u7ebf\u72b6\u6001\uff0c\u5219\u4ece\u63a8\u9001\u901a\u77e5\uff08PN\uff09\u670d\u52a1\u5668\u53d1\u9001\u63a8\u9001\u901a\u77e5\u3002\\n7. \u804a\u5929\u670d\u52a1\u56682\u5c06\u6d88\u606f\u8f6c\u53d1\u7ed9\u7528\u6237B\uff0c\u7528\u6237B\u548c\u804a\u5929\u670d\u52a1\u56682\u4e4b\u95f4\u6709\u4e00\u4e2a\u6301\u4e45\u7684WebSocket\u8fde\u63a5\u3002\\n\\n\\n\\n\u7fa4\u7ec4\u804a\u5929:\\n\\n\u7b2c\u4e00\u79cd\u65b9\u6cd5: A\u53d1\u6d88\u606f, \u5728\u6bcf\u4e00\u4e2a\u6210\u5458\u7684\u6536\u4ef6\u7bb1\u91cc\u9762\u590d\u5236\u4e00\u4e2a\u526f\u672c, \u9002\u7528\u4e8e\u7fa4\u7ec4\u4eba\u6570\u8f83\u5c11\u7684\u65f6\u5019(\u4f8b\u5982\u5fae\u4fe1\u7684500\u4eba\u7ea6\u675f); \u6bcf\u4e2a\u6536\u4ef6\u4eba\u6709\u81ea\u5df1\u7684\u6536\u4ef6\u7bb1(\u6d88\u606f\u540c\u6b65\u961f\u5217), \u6240\u4ee5\u5e76\u4e0d\u4fdd\u8bc1\u4e00\u81f4\u6027\\n\\n\u5728\u7ebf\u72b6\u6001\u6307\u793a\u5668:\\n\\n- naive\u7684\u505a\u6cd5: \u5efa\u7acb\u8fde\u63a5\u5c31\u5728\u7ebf, \u65ad\u5f00\u5c31\u79bb\u7ebf\u3002\u95ee\u9898\u5728\u7f51\u7edc\u6ce2\u52a8\u65f6\u5019, \u53d8\u5316\u592a\u5feb\\n- \u66f4\u4f18\u96c5\u7684\u505a\u6cd5, \u5fc3\u8df3\\n- \u63a8\u9001, \u7c7b\u4f3c\u5fae\u4fe1\u8fd9\u79cd\u5c0f\u7fa4(500\u4eba\u9650\u5236)\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\u5b9e\u65f6\u7684ws\u8fde\u63a5\u3002\u5927\u7fa4\u9700\u8981\u61d2\u52a0\u8f7d\\n\\n\\n\u6269\u5c55\u804a\u5929\u5e94\u7528\u7a0b\u5e8f\u4ee5\u652f\u6301\u5a92\u4f53\u6587\u4ef6\uff0c\u5982\u7167\u7247\u548c\u89c6\u9891\u3002\u5a92\u4f53\u6587\u4ef6\u7684\u5927\u5c0f\u660e\u663e\u5927\u4e8e\u6587\u672c\u3002\u538b\u7f29\u3001\u4e91\u5b58\u50a8\u548c\u7f29\u7565\u56fe\u662f\u503c\u5f97\u8ba8\u8bba\u7684\u8bdd\u9898\u3002\\n\\n- \u7aef\u5230\u7aef\u52a0\u5bc6\u3002Whatsapp\u652f\u6301\u4fe1\u606f\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u3002\u53ea\u6709\u53d1\u4ef6\u4eba\u548c\u6536\u4ef6\u4eba\u53ef\u4ee5\u9605\u8bfb\u4fe1\u606f\u3002\u6709\u5174\u8da3\u7684\u8bfb\u8005\u8bf7\u53c2\u8003\u53c2\u8003\u8d44\u6599\u4e2d\u7684\u6587\u7ae0[9]\u3002\\n- \u5728\u5ba2\u6237\u7aef\u7f13\u5b58\u4fe1\u606f\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u51cf\u5c11\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u3002\\n- \u63d0\u9ad8\u52a0\u8f7d\u65f6\u95f4\u3002Slack\u5efa\u7acb\u4e86\u4e00\u4e2a\u5730\u7406\u5206\u5e03\u7684\u7f51\u7edc\u6765\u7f13\u5b58\u7528\u6237\u7684\u6570\u636e\u3001\u9891\u9053\u7b49\uff0c\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u52a0\u8f7d\u65f6\u95f4[10]\u3002\\n- \u6545\u969c\u5904\u7406\u3002\\n  - \u804a\u5929\u670d\u52a1\u5668\u9519\u8bef\u3002\u53ef\u80fd\u6709\u6570\u5341\u4e07\uff0c\u751a\u81f3\u66f4\u591a\u7684\uff0c\u575a\u6301\u4e0d\u61c8\u7684\u8fde\u63a5\u5230\u4e00\u4e2a\u804a\u5929\u670d\u52a1\u5668\u3002\u5982\u679c\u4e00\u4e2a\u804a\u5929\u670d\u52a1\u5668\u79bb\u7ebf\uff0c\u670d\u52a1\u53d1\u73b0\uff08Zookeeper\uff09\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u65b0\u7684\u804a\u5929\u670d\u52a1\u5668\uff0c\u8ba9\u5ba2\u6237\u5efa\u7acb\u65b0\u7684\u8fde\u63a5\u3002\\n  - \u6d88\u606f\u91cd\u53d1\u673a\u5236\u3002\u91cd\u8bd5\u548c\u6392\u961f\u662f\u91cd\u53d1\u6d88\u606f\u7684\u5e38\u7528\u6280\u672f\u3002\\n\\n\\n\\n\u591a\u5a92\u4f53\u652f\u6301\u7684\u5927\u4f53\u6d41\u7a0b\\n\\n- client \u901a\u8fc7 rest \u5c06\u591a\u5a92\u4f53\u8d44\u6e90\u53d1\u9001\u5230\u670d\u52a1\u5668\\n- \u670d\u52a1\u5668\u8f6c\u6362\u5a92\u4f53\u6587\u4ef6(\u4f8b\u5982\u56fe\u7247\u751f\u6210\u7f29\u7565\u56fe, \u538b\u7f29)\\n- \u670d\u52a1\u5668\u5b58\u5230s3\\n- \u670d\u52a1\u5668\u901a\u8fc7s3\u94fe\u63a5\u54cd\u5e94client\\n- \u5ba2\u6237\u7aef\u518d\u5c06s3\u94fe\u63a5\u901a\u8fc7ws\u53d1\u9001(\u5e7f\u64ad)\u7ed9\u804a\u5929\u7684\u5176\u4ed6\u7528\u6237\\n- \u5176\u4ed6client \u6536\u5230s3\u8fde\u63a5, \u6839\u636e\u5b9a\u4e49\u7684\u6d88\u606f\u7c7b\u578b\u8fdb\u884c\u6e32\u67d3\\n\\n\\n\\n### \u7b80\u5355\u7684\u641c\u7d22\u652f\u6301: trie\\n\\ntopK: \u5148\u627e\u5230\u524d\u7f00, \u518d\u904d\u5386\u5b50\u6811\\n\\n\u95ee\u9898: \u592a\u6162\\n\\n\u89e3\u51b3\u65b9\u6cd5: \\n\\n- \u5728\u6bcf\u4e2a\u8282\u70b9\u7f13\u5b58\u5e38\u7528\u7684\u524dk\u4e2a\u67e5\u8be2\\n- \u63a7\u5236\u524d\u7f00\u7684\u6700\u5927\u957f\u5ea6\\n\\n\u66f4\u65b0trie: \u6570\u636e\u641c\u96c6, \u5bf9\u4e8e\u5b9e\u65f6\u5e94\u7528\u670d\u52a1, \u77ed\u65f6\u95f4\u95f4\u9694; \u5bf9\u4e8e\u975e\u5b9e\u65f6\u7684, \u53ef\u4ee5\u4f8b\u5982\u4e00\u5468\u5b9a\u65f6\u66f4\u65b0\u4e00\u6b21\\n\\n\u5408\u6cd5\u6027: \u81ea\u52a8\u5b8c\u6210\u53ef\u4ee5\u6839\u636ehash\u7b49\u8fc7\u4e00\u4e2afilter, \u907f\u514d\u8865\u51fa\u7981\u6b62\u7684\u7f51\u7ad9\u7b49\\n\\n\u591a\u8bed\u8a00\uff1aunicode trie\\n\\n\u5206\u7247: \u53ef\u4ee5\u57fa\u4e8e\u5b57\u6bcd, \u4f46\u662f\u8981\u8003\u8651\u5230\u9891\u7387\u95ee\u9898\\n\\n\u5b9e\u65f6(\u8d8b\u52bf)\u641c\u7d22: \u6d41\u5f0f, \u9886\u57df\u7279\u5b9a, AI\\n\\n\\n\\n\u89c6\u9891\u6d41\\n\\n\u6838\u5fc3\u662f\u5206\u6210\u51e0\u4e2a\u90e8\u5206, \u4e00\u90e8\u5206\u7c7b\u4f3c\u4f20\u7edf\u7684server, \u63d0\u4f9b\u89c6\u9891metadata\\n\\n\u53e6\u4e00\u90e8\u5206\u4f9d\u6258\u4e91\u670d\u52a1\u548cCDN, \u505a\u597d\u89c6\u9891\u4f20\u8f93\u548c\u89e3\u7801\u7f16\u7801\\n\\n\u5176\u4e2d\u7279\u5b9a\u90e8\u5206\u7684\u903b\u8f91\u590d\u6742, \u4f8b\u5982\u89e3\u7f16\u7801\u7684\u6a21\u5757\u5316\u548c\u5f15\u64ce\u5316, CDN\u8d35\u6240\u4ee5\u89c6\u9891\u57fa\u4e8e\u5386\u53f2\u6570\u636e\u505a\u51b7\u70ed\u5206\u79bb, \u51b7\u89c6\u9891\u8d70\u81ea\u5efa\u800c\u4e0d\u662fCDN\\n\\n\u8fd8\u6709\u6bd4\u5982\u9519\u8bef\u5904\u7406, \u6570\u5b57\u7248\u6743\u4e4b\u7c7b\\n\\n[\u5177\u4f53\u597d\u591a\u7ec6\u8282](https://learning-guide.gitbook.io/system-design-interview/xi-tong-she-ji-mian-shi-nei-mu-zhi-nan-di-yi-juan/chapter-14-design-youtube)\\n\\n\\n\\n### \u4e34\u8fd1\u670d\u52a1\\n\\n\u7531\u4e8e\u662f\u8bfb\u8fdc\u591a\u4e8e\u5199\u7684\u60c5\u51b5, \u6240\u4ee5\u5e38\u89c1\u7528\u5173\u7cfb\u578bdb\\n\\n\u5173\u7cfb\u578b\u7684\u95ee\u9898\u662f, \u5982\u679c\u662f\u7ecf\u7eac\u5ea6, \u4e8c\u7ef4\u6570\u636eindex\u5229\u7528\u7387\u4f4e\\n\\n\u89e3\u51b3\u65b9\u6cd5\u662f\u4e8c\u7ef4\u8f6c\u4e00\u7ef4\u518dindex\u641c\u7d22, \u4f8b\u5982geohash, R tree, \u56db\u53c9\u6811, google s2 \\n\\ngeohash: \u7ecf\u7eac\u5ea6\u7f51\u683c\u7f16\u7801\u518d\u8f6cbase32, \u5171\u4eab\u524d\u7f00\u8d8a\u957f, \u8d8a\u63a5\u8fd1\\n\\n\u8fb9\u754c\u95ee\u9898: \u53cd\u8fc7\u6765\u4e0d\u6210\u7acb, \u63a5\u8fd1\u7684\u4e24\u4e2a\u5730\u5757\u53ef\u80fd\u5171\u4eab\u524d\u7f00\u5e76\u4e0d\u957f(\u5728\u5b50\u5348\u7ebf/\u8d64\u9053\u7b49\u5927\u683c\u5b50\u8fb9\u754c), \u6240\u4ee5`geohash LIKE \'sth%\'`\u68c0\u7d22\u51fa\u6765\u7ed3\u679c\u4e0d\u5168\\n\\n\u65b9\u6cd5\u662f\u4e0d\u4ec5\u68c0\u7d22\u81ea\u5df1\u683c\u5b50\u7684geohash, \u4e5f\u628a\u90bb\u5c45\u683c\u5b50\u7684\u4e00\u8d77\u68c0\u7d22\\n\\n\u4e1a\u52a1\u95ee\u9898\uff1a\u8303\u56f4\u5185\u90e8\u5546\u5bb6\u4e0d\u591f, \u89e3\u51b3\u65b9\u6cd5\u662f\u653e\u5927\u683c\u5b50\u7ee7\u7eed\u68c0\u7d22\\n\\ngoogle s2: \u57fa\u4e8e\u5e0c\u5c14\u4f2f\u7279\u66f2\u7ebf\u7684`\u7403\u9762->1d`\u7b97\u6cd5, \u4fdd\u8bc12d\u4e0a\u63a5\u8fd1\u57281d\u4e0a\u4e5f\u63a5\u8fd1"},{"id":"/ostep-chapter42-44","metadata":{"permalink":"/blog/ostep-chapter42-44","source":"@site/blog/ostep-chapter42-44.md","title":"ostep\u9605\u8bfb\u7b14\u8bb0\uff1a\u5355\u673afs\u7684\u5d29\u6e83\u4e00\u81f4\u6027(chapter42-44)","description":"chapter 42 \u5d29\u6e83\u4e00\u81f4\u6027","date":"2025-01-19T06:12:55.344Z","tags":[{"inline":true,"label":"filesystem","permalink":"/blog/tags/filesystem"},{"inline":true,"label":"\u5d29\u6e83\u4e00\u81f4\u6027","permalink":"/blog/tags/\u5d29\u6e83\u4e00\u81f4\u6027"},{"inline":true,"label":"system","permalink":"/blog/tags/system"}],"readingTime":9.66,"hasTruncateMarker":false,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"ostep\u9605\u8bfb\u7b14\u8bb0\uff1a\u5355\u673afs\u7684\u5d29\u6e83\u4e00\u81f4\u6027(chapter42-44)","author":"ayanami","tags":["filesystem","\u5d29\u6e83\u4e00\u81f4\u6027","system"],"keywords":["ostep","filesystem","\u5d29\u6e83\u4e00\u81f4\u6027"]},"unlisted":false,"prevItem":{"title":"system-design-interview\u7b14\u8bb0","permalink":"/blog/\u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\u7b14\u8bb0"},"nextItem":{"title":"JUC","permalink":"/blog/JUC"}},"content":"### chapter 42 \u5d29\u6e83\u4e00\u81f4\u6027\\n\\n\u4ee5\u4e00\u4e2a\u4f20\u7edf\u7684\u7ed3\u6784(linux ext2)\u4e3a\u4f8b\u5b50\\n\\n\u4e00\u4e2a\u78c1\u76d8group\\n```\\ninode bitmap | data bitmap | inode block | data block\\n```\\n\u78c1\u76d8\u6620\u50cf\\n```\\nsuper | group0 | group1 | \u2026\\n```\\n\u60f3\u8981\u7ed9\u4e00\u4e2a\u6587\u4ef6\u8ffd\u52a0\u4e00\u4e2ablock\uff0c\u9700\u8981\u6539`inode block`, `data bitmap` \u548c `data block` 3\u5904\\n\\n\u8bbe\u60f3\u4e2d\u9014\u65ad\u7535\uff0c**\u786c\u4ef6\u539f\u5b50\u6027\u5728\u78c1\u76d8\u4e0a\u662f\u4e0d\u597d\u505a\u7684**\uff0c\u6240\u4ee5\u53ef\u80fd\u5728\u4e09\u4e2a\u5199\u5165\u4e4b\u4e2d\u53d1\u751f\u4efb\u610f\u4e2a\u5199\u5165\u843d\u76d8\u7684\u60c5\u51b5\\n\\n\u65ad\u7535\u65f6\u5df2\u7ecf\u4fee\u6539\u7684\u6570\u636e\u548c\u540e\u679c\u7684\u5bf9\u5e94:\\n- inode block\uff0c \u5143\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u6307\u5411\u5783\u573e\u6570\u636e\\n- data bitmap\uff0c\u5143\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u7a7a\u95f4\u6cc4\u9732\\n- data block\uff0c \u6ca1\u5173\u7cfb\\n- inode block + data bitmap\uff0c \u6587\u4ef6\u662f\u4e71\u7801\uff0c\u95ee\u9898\u4e0d\u5927\\n- inode block + data block\uff0c\u5143\u6570\u636e\u4e0d\u4e00\u81f4\\n- data bitmap + data block\uff0c \u5143\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u7a7a\u95f4\u6cc4\u9732\\n\\n**\u65e9\u671f\u6587\u4ef6\u7cfb\u7edf\uff1afsck\uff0c\u8ba9\u4e0d\u4e00\u81f4\u53d1\u751f\uff0c\u91cd\u542f\u65f6\u4fee\u590d\uff0c\u53ea\u786e\u4fdd\u5143\u6570\u636e\u4e00\u81f4**\\n\\n- \u68c0\u67e5super block\uff08\u53d1\u73b0\u7cfb\u7edf\u5927\u5c0f\u5c0f\u4e8e\u5206\u914d\u5757\u6570\u7b49\u4e0d\u5065\u5168\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u8003\u8651\u542f\u7528super block\u7684\u5907\u7528\u526f\u672c\u6765\u9632\u6b62super block\u81ea\u8eab\u635f\u574f\uff09\\n- \u7a7a\u95f2\u5757\uff1ainode, \u95f4\u63a5\u5757\uff0c**\u4ee5inode\u4e3a\u53c2\u8003\uff0c \u4fee\u6539inode bitmap\u8fbe\u5230\u4e00\u81f4, \u6240\u6709\u770b\u8d77\u6765\u5728\u7528\u7684inode\u90fd\u4f1a\u6709bitmap\u6807\u8bb0**\\n- inode\u72b6\u6001\uff1a\u5982\u679cinode\u7684\u5b57\u6bb5\u4e0d\u5408\u6cd5\uff0c\u8ba4\u4e3a\u4e0d\u6613\u4fee\u590d\uff0c\u5220\u6389\u8fd9\u4e2ainode\\n- inode\u94fe\u63a5\uff1a\u626b\u63cf\u6574\u4e2a\u76ee\u5f55\u6811\uff0c\u91cd\u65b0\u8ba1\u7b97\u5f15\u7528\u8ba1\u6570\uff0c\u5982\u679c\u627e\u5230\u5df2\u7ecf\u5206\u914d\u7684inode\u4f46\u6ca1\u6709\u76ee\u5f55\u5f15\u7528\uff0c\u653e\u5230**lost+found**\\n- \u91cd\u590d\u548c\u574f\u5757\uff0c\u6e05\u9664\u4e0d\u6b63\u786e\u7684\u6307\u9488\\n- \u76ee\u5f55\u68c0\u67e5\uff1a\u786e\u4fdd\u65e0\u73af\uff0c\u76ee\u5f55\u4e2d\u6bcf\u4e2ainode\u5df2\u5206\u914d\u7b49\\n\\n**\u78c1\u76d8\u6e05\u7406\u5de5\u5177\uff1a\u91cd\u6392inode\u7684data block\u6765\u51cf\u5c11\u788e\u7247**\\n\\nfsck \u5b58\u5728\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u5f88\u590d\u6742\\n\\n**fsck \u6700\u5173\u952e\u7684\u95ee\u9898\uff1a\u592a\u6162\u4e86\uff01**\\n\\n**\u53e6\u5916\u7684\u65b9\u6cd5\uff1aWAL**\\n\\nLinux ext34, Windows NTFS \u91c7\u7528\u7684\u65b9\u6cd5: \u52a0\u4e0ajournal block\\n```\\nsuper | **journal** | group0 | group1 | \u2026\\n```\\njournal\u4e2d\u6761\u76ee\u7684\u5f62\u5f0f\uff1a\\n\\n**TxB | inode | bitmap | data | TxE (\u7269\u7406\u65e5\u5fd7\uff0c\u4e5f\u6709\u903b\u8f91\u65e5\u5fd7\u7684\u505a\u6cd5\uff0c\u53ef\u80fd\u63d0\u9ad8\u6027\u80fd\uff0c\u8282\u7701\u7a7a\u95f4)**\\n\\ncheckpoint\uff1a \u6210\u529f\u5199\u5165journal\u4e4b\u540e\uff0c\u5c31\u662f\u4e00\u4e2acheckpoint\\n\\n\u5148\u5199WAL, \u518d\u5199\u6587\u4ef6\u7cfb\u7edf\u5143\u6570\u636e\uff0c\u6700\u540e\u843d\u76d8data\\n\\n\u95ee\u9898\uff1a\u5199\u65e5\u5fd7\u7684\u65f6\u5019\u5d29\u6e83\uff1f\\n\\n\u95ee\u9898\u53d1\u751f\u5728\uff0c**\u4e00\u6761\u65e5\u5fd7\uff08\u4ee5\u7269\u7406\u4e3a\u4f8b\uff09\u53ef\u80fd\u592a\u5927\uff0c\u4ee5\u81f3\u4e8e\u4e0d\u80fd\u88ab\u539f\u5b50\u5199\u5165\uff08\u5e38\u6001\uff09**\\n\\n- \u65e5\u5fd7\u5185\u7684\u6570\u636e**\u53ef\u4ee5\u88ab\u78c1\u76d8\u8c03\u5ea6\u4e3a\u5c0f\u5757\u4e71\u5e8f**\u5199\u5165\\n- \u5199\u5165\u7684\u90e8\u5206\u9519\u8bef\u96be\u4ee5\u68c0\u67e5\uff0c\u4f8b\u5982\u5728\u5199\u5165data\u6bb5\u7684\u65f6\u5019\u51fa\u9519\uff0c\u4f46\u5176\u4ed6\u90e8\u5206\u6b63\u786e\uff08\u4f46\u4e5f\u53ef\u4ee5checksum? \u8fd9\u5c31\u662fext4\u7684\u4e00\u9879\u91cd\u8981\u66f4\u65b0\uff0c\u901a\u8fc7\u5728TxB\u548cTxE\u4e4b\u4e2d\u5305\u542b**checksum**\u6765\u52a0\u5feb\u5199\u5165\u901f\u5ea6\uff09\\n- \u78c1\u76d8\u7684**\u5199\u7f13\u51b2**\uff0c\u65e9\u671fOS\u5f3a\u5236\u5199\u5165\u987a\u5e8f\u5c31\u662f\u901a\u8fc7\u5173\u4e2d\u65ad\u5b9e\u73b0\u7684: \u5199A\uff0c\u5173\u4e2d\u65ad\uff0c\u5199B\uff1b\u6709\u7f13\u51b2\u7684\u72b6\u6001\u4e0b\uff0c\u5199\u5165\u7f13\u51b2\u5c31\u4f1a\u8fd4\u56de\u3002\u8fd8\u8981\u4fdd\u8bc1\u987a\u5e8f\u7684\u8bdd\uff0c\u4e00\u79cd\u662f\u7981\u7528\u5199\u7f13\u51b2\uff0c\u66f4\u73b0\u4ee3\u7684\u65b9\u6cd5\u662f**\u5199\u5c4f\u969c**\uff08\u6709\u8da3\u7684\u662f\u4e00\u4e9b\u78c1\u76d8\u4ea7\u5546\u5ffd\u7565\u4e86\u5199\u5c4f\u969c\uff0c\u5373\u4f7f\u5b58\u5728\u9519\u8bef\u7684\u98ce\u9669\uff0c**\u201c\u5feb\u901f\u51e0\u4e4e\u603b\u662f\u6253\u8d25\u6162\u901f\uff0c\u5373\u4f7f\u5feb\u901f\u662f\u9519\u7684\u201d**\uff09\\n- \u6240\u4ee5\u65e9\u671f\u7684\u65b9\u6848\u662f\u8fd9\u6837\u7684\uff0c\u5148\u5199\u9664\u4e86TxE\u4e4b\u5916\u7684\u6240\u6709\u5757\uff0c\u8fd9\u90e8\u5206\u51fa\u9519\u8fd9\u4e2a\u4e8b\u52a1\u5c31\u662f\u672a\u63d0\u4ea4\u7684\uff0c\u4f1a\u88ab\u91cd\u7f6e\uff1b\u7136\u540e**\u7b2c\u4e8c\u6b65\u518d\u5199TxE, \u78c1\u76d8\u4fdd\u8bc1\u5199512\u5b57\u8282\u7684block\u7684\u539f\u5b50\u6027\uff0c\u56e0\u800cTxE\u662f\u539f\u5b50\u7684**\u3002\u6d41\u7a0b\u79f0\u4e3a\u65e5\u5fd7\u5199\u5165\uff0c\u65e5\u5fd7\u63d0\u4ea4\uff0c\u52a0\u68c0\u67e5\u70b9\\n\\n\u6b64\u65f6\uff0c\u6062\u590d\u4ec5\u4ec5\u662f\u91cd\u653e\uff08replay\uff09\\n\\n**\u6279\u5904\u7406\uff1a**\\n\\n**\u548cTLB\u7f13\u5b58\u5f88\u50cf\uff0cfs\u53ef\u4ee5\u4e3a\u4e86\u6027\u80fd\u5c06\u78c1\u76d8\u5199\u5165\u5408\u5e76\u6279\u5904\u7406\uff0c\u5728\u5185\u5b58\u4e4b\u4e2d\u6807\u8bb0dirty**\\n\\n\u65e5\u5fd7\u957f\u5ea6\u6709\u9650\uff1a\u5faa\u73af\uff0ccheckpoint\u4e4b\u540e\u524d\u9762\u7684\u65e5\u5fd7\u53ef\u4ee5\u91ca\u653e\u6389\u518d\u91cd\u65b0\u5199\u5165\\n\\n\u7269\u7406\u65e5\u5fd7\u4e25\u91cd\u7684\u5199\u653e\u5927\uff1a\u5143\u6570\u636e\u65e5\u5fd7\uff08linux ext3\u7684\u53e6\u4e00\u4e2amode, windows NTFS\uff09\uff0cWAL\u4e4b\u4e2d\u4e0d\u4fdd\u5b58data\u6bb5\uff0c\u53ea\u4fdd\u5b58inode, inode bitmap\uff0cblock bitmap\u7b49\u5143\u6570\u636e\u4fee\u6539\u3002\u6b64\u65f6\u9700\u8981**\u5148\u5199data, \u6765\u907f\u514d\u6307\u5411\u5783\u573e\u6570\u636e**\\n\\n- **\u8fd9\u6837\u7684\u201c\u5f3a\u5236\u5148\u5199\u5165\u88ab\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u518d\u5199\u5165\u6307\u9488\u201d\u662f\u5d29\u6e83\u4e00\u81f4\u6027\u7684\u6838\u5fc3**\\n\\n\u68d8\u624b\u7684\u95ee\u9898\uff1a\u5757\u590d\u7528\uff0c\u611f\u89c9\u6709\u70b9\u7ed5\uff0c\u603b\u4e4b\u662f\u5220\u9664+\u6587\u4ef6\u5939\u8fd9\u79cd\u9012\u5f52\u7ed3\u6784+\u53ea\u8bb0\u5f55\u5143\u6570\u636e+\u91cd\u7528\u5f97\u5230\u4e86\u4e00\u4e9b\u4e0d\u597d\u7684\u7ed3\u679c\uff0clinux ext3\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u5220\u9664\u4e5f\u6709revoke\u65e5\u5fd7\\n\\n\u5176\u4ed6\u5d29\u6e83\u4e00\u81f4\u6027\u7684\u89e3\u6cd5\uff1a\\n\\n- **COW**\\n- **\u53cd\u5411\u6307\u9488\uff0c\u5728\u88ab\u5f15\u7528\u5757\u91cc\u9762\u6dfb\u52a0\u5f15\u7528\u5757\u7684\u5f15\u7528\uff08\u60f0\u6027\u5d29\u6e83\u4e00\u81f4\u6027\uff09**\\n- **\u8f6f\u66f4\u65b0\uff0c\u6392\u5e8f\u6240\u6709\u5199\u5165\uff0c\u590d\u6742**\\n- **\u4e50\u89c2\u5d29\u6e83\u4e00\u81f4\uff0c\u4f8b\u5982\u6821\u9a8c\u548c\u7684\u65b9\u6848**\\n\\n**ZFS\u4f7f\u7528COW\u548c\u65e5\u5fd7**\\n\\n### chapter43 LFS \u65e5\u5fd7\u6587\u4ef6\u7cfb\u7edf\\n\\n\u5f88\u50cfLSM\uff0c\u540c\u6837\u662f\u4e3a\u4e86\u5229\u7528\u78c1\u76d8\u7684\u987a\u5e8f\u5199\uff0c\u540c\u65f6**\u53ea\u505a\u987a\u5e8f\u5199\uff0c\u8bfb\u65f6\u8bfb\u6700\u65b0\u7248\u672c\uff0cGC\u56de\u6536\u65e7\u7248\u672c\u6570\u636e**\\n\\nLFS\u5c06\u6bcf\u6b21\u6587\u4ef6\u7cfb\u7edf\u7684\u66f4\u65b0\u90fd\u987a\u5e8f\u5199\u5165\uff08data, inode\uff09\uff0c\u5e76\u4ee5\u5199\u7f13\u51b2\u5b9e\u73b0\u6279\u91cf\u5199\u7684\u6027\u80fd\u63d0\u9ad8\uff0c\u5e26\u6765\u4e00\u4e2a\u95ee\u9898\u662f\u4e0d\u77e5\u9053inode\u5728\u54ea\u91cc\u4e86\\n\\n\u56e0\u800c\u5f15\u5165\u4e86\u4e00\u4e2a**\u4e2d\u95f4\u5c42imap**\uff0c\u8bb0\u5f55inode, addr\u7684\u5bf9\uff0cimap\u9700\u8981\u4fdd\u8bc1\u6301\u4e45\uff0c\u6bcf\u6b21\u5199\u5165inode\u65f6,imap\u8fdb\u884c\u66f4\u65b0\\n\\nimap\u653e\u5728\u54ea\u91cc\uff1f**\u5982\u679c\u5728\u56fa\u5b9a\u6bb5\uff0c\u7531\u4e8e\u5b83\u66f4\u65b0\u7684\u9891\u7e41\u6027\uff0c\u6240\u4ee5\u9700\u8981\u975e\u5e38\u591a\u7684\u78c1\u76d8\u5bfb\u9053\uff0c\u4e0d\u53ef\u63a5\u53d7**\\n\\n\u6240\u4ee5\u628aimap\u548cinode\u4e00\u8d77\uff0c\u5199\u5230\u66f4\u65b0\u540e\u9762\\n\\n\u90a3\u53bb\u54ea\u91cc\u627eimap\u5462\uff1f\uff08\u6709\u70b9\u50cf \u4e00\u7ea7\u4e00\u7ea7\u7684\u7d22\u5f15\uff0c\u73b0\u5728\u8981\u627e\u7d22\u5f15\u5165\u53e3\uff09\\n\\n**\u5728\u78c1\u76d8\u7684\u56fa\u5b9a\u5904\u7ef4\u62a4\u68c0\u67e5\u70b9\u533a\u57dfCR, CR\u6307\u5411\u6700\u65b0imap\uff0c\u800cCR\u7684\u6027\u80fd\u53ef\u4ee5\u901a\u8fc7\u964d\u4f4e\u66f4\u65b0\u9891\u7387\uff0c\u4f8b\u5982\u6bcf30s\u5b9a\u65f6\u66f4\u65b0\u6765\u89e3\u51b3\uff0cinode\u7684\u66f4\u65b0\u5168\u653e\u5230imap\u4e86**\\n\\nimap\u8fd8\u89e3\u51b3\u4e86\u9012\u5f52\u66f4\u65b0\u7684\u95ee\u9898\\n\\n\u8bfb\u53d6\u7684\u65f6\u5019\u6709\u5185\u5b58\u7f13\u5b58\uff0c\u76f4\u63a5\u8bfb\u91cc\u9762\u7684imap\u5c31\u884c\\n\\n**\u600e\u4e48\u505aGC? \u5728data block\u7684\u5f00\u5934\u6709\u5bf9inode\u5757\u7684\u53cd\u5411\u5f15\u7528+\u81ea\u8eab\u5728inode\u4e2d\u504f\u79fb\u91cfT\uff0c\u79f0\u4e3asegment summary block**\\n\\n**\u6240\u4ee5`data \u2192 segment \u2192 \u67e5\u6700\u65b0\u7684imap\u5f97\u5230inode addr \u2192 inode[T] == data ?  alive : dead`**\\n\\n**\u66f4\u7b80\u5355\u7684\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u65b9\u6cd5\uff0c\u5728imap\u91cc\u9762\u8bb0\u5f55\u7248\u672c\u53f7\uff0c\u5728segment\u91cc\u9762\u4e5f\u8bb0\u5f55\u7248\u672c\u53f7**\\n\\n\u6e05\u7406\u54ea\u4e9b\u6bb5\uff1f\u4e00\u79cd\u7c97\u7565\u7684\u65b9\u6cd5\u662f**\u51b7\u70ed\u5206\u79bb**\\n\\n**\u7ecf\u5e38\u8986\u76d6\u5185\u5bb9\u7684\u6bb5\u662f\u70ed\u6bb5**\uff0c\u5c3d\u53ef\u80fd\u4fdd\u7559\uff1b\u53cd\u4e4b\u51b7\u6bb5\u53ef\u4ee5\u65e9\u6e05\\n\\n**\u5d29\u6e83\u6062\u590d**\\n\\n- **\u5199CR\u5d29\u6e83\uff1a1. \u7ed9cr\u505a\u4e00\u4e2a\u526f\u672c 2.\u66f4\u65b0cr\u65f6\uff0c\u901a\u8fc7 \u65f6\u95f4\u6233 + CR + \u65f6\u95f4\u6233\u7684\u65b9\u5f0f\uff0c\u68c0\u6d4b\u66f4\u65b0\u7684\u4e00\u81f4\u6027\uff0c\u65f6\u95f4\u6233\u662f\u539f\u5b50\u7684**\\n- **\u5176\u4ed6\u5d29\u6e83\uff1aCR\u540e\u7684\u6570\u636e\u4e22\u4e86\uff0c\u5047\u8bbeCR\u662f30s, \u90a3\u4e0d\u8d85\u8fc730s, \u5f53\u7136\u53ef\u4ee5\u5728CR\u91cc\u9762\u5305\u542b\u66f4\u591a\u4fe1\u606f\uff0c\u4ece\u800c\u5728\u6700\u540e\u4e00\u4e2a\u68c0\u67e5\u70b9\u4e4b\u540e\uff0c\u5c3d\u91cf\u627e\u5230\u65e5\u5fd7\u7684\u7ed3\u5c3e\uff0c\u5e76\u5c3d\u53ef\u80fd\u6062\u590d\u6709\u6548\u7684\u6bb5\uff0c\u79f0\u4e3a\u524d\u6eda roll forward**\\n\\nLFS\u7684\u601d\u60f3\u5728ZFS, Linux btrfs\u7b49\u6709\u6240\u4f53\u73b0\uff0c\u901a\u8fc7\u5feb\u7167\u6765\u5f97\u5230fs\u7684\u7248\u672c\u5316\\n\\n### chapter 44 \u68c0\u6d4b\u9519\u8bef\\n\\n**\u78c1\u76d8\u9519\u8bef\uff1a\u201c\u6709\u58f0\u7684\u201d \u548c\u201c\u65e0\u58f0\u7684\u201d**\\n\\n- **\u524d\u8005\u4f8b\u5982\u610f\u5916\u7684\u4e0d\u53ef\u8bfb\uff0c\u6570\u636e\u4f4d\u53cd\u8f6c\uff0c\u53ef\u4ee5\u88abECC\u4fee\u590d\u6216\u68c0\u9519\u7684\uff0c\u603b\u4e4b\u4f1a\u88ab\u78c1\u76d8\u53d1\u73b0**\\n- **\u540e\u8005\u5982\u5199\u6b6a\u4e86**\\n\\n**\u524d\u8005\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u5404\u79cd\u65b9\u5f0f\u7684RAID**\\n\\n**\u540e\u8005\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u6821\u9a8c\u548c**\uff0cxor, add, fletcher, crc\\n\\n\u50cf\u201c\u5199\u6b6a\u4e86\u201d\uff08addr x\u5199\u5230y\uff0c \u78c1\u76d8A\u5199\u5230B\uff09\u8fd9\u79cd\u5982\u4f55\u68c0\u6d4b\uff1f\u5728\u6821\u9a8c\u548c\u4e4b\u4e2d\u52a0\u5165\u5757\u7684\u78c1\u76d8\u548c\u6247\u533a\u53f7\u8fd9\u6837\u7684\u7269\u7406\u6807\u8bc6\u7b26\\n\\n\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u60c5\u51b5\u662f\u5199\u5165\u4e22\u5931\uff0c\u89e3\u51b3\u65b9\u6cd5\u6709\u5199\u5165\u540e\u68c0\u9a8c\uff0c\u6216\u8005\u5728inode\u4e0a\u52a0\u6821\u9a8c\u548c\uff08\u8fd9\u6837inode + data block\u5168\u5199\u4e22\u4e86\u624d\u4f1a\u53d1\u73b0\u4e0d\u4e86\uff09\\n\\n\u4f55\u65f6\u68c0\u6d4b\uff1a\u5b9a\u65f6\uff0c\u78c1\u76d8\u7684\u4f4d\u662f\u4f1a\u8870\u9000\u7684"},{"id":"/JUC","metadata":{"permalink":"/blog/JUC","source":"@site/blog/JUC.md","title":"JUC","description":"\u81ea\u65cb\u9501->\u81ea\u65cbN\u6b21(N\u81ea\u9002\u5e94, \u53d6\u51b3\u4e8e\u5148\u524d\u5386\u53f2,\u5f53\u524d\u8d1f\u8f7d\u7b49)->\u5347\u7ea7\u4e3a\u91cd\u91cf\u7ea7\u9501","date":"2024-11-01T18:57:09.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"concurrency","permalink":"/blog/tags/concurrency"}],"readingTime":10.51,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"JUC","author":"ayanami","tags":["java","concurrency"]},"unlisted":false,"prevItem":{"title":"ostep\u9605\u8bfb\u7b14\u8bb0\uff1a\u5355\u673afs\u7684\u5d29\u6e83\u4e00\u81f4\u6027(chapter42-44)","permalink":"/blog/ostep-chapter42-44"},"nextItem":{"title":"cs144 labs(Winter 2024)","permalink":"/blog/cs144 labs"}},"content":"\u81ea\u65cb\u9501`->`\u81ea\u65cbN\u6b21(N\u81ea\u9002\u5e94, \u53d6\u51b3\u4e8e\u5148\u524d\u5386\u53f2,\u5f53\u524d\u8d1f\u8f7d\u7b49)`->`\u5347\u7ea7\u4e3a\u91cd\u91cf\u7ea7\u9501\\n\\n\u91cd\u91cf\u7ea7, mutex \u672c\u8d28\u4e0a\u7684syscall, \u8f7b\u91cf\u7ea7, CAS\u53bb\u5c1d\u8bd5\u62ff\u5230\u5bf9\u8c61\u5934\u4e2d\u7684\u9501\u6807\u8bc6\u5b57\u8282MarkWord\\n\\n\u66f4\u65b0\u6210\u529f\u8bf4\u660e\u6ca1\u4eba\u62a2\\n\\n\u504f\u5411\u9501: \u5f53\u67d0\u4e2a\u7ebf\u7a0b\u7b2c\u4e00\u6b21\u83b7\u53d6\u9501\u65f6, \u63a5\u4e0b\u6765\u90fd\u6ca1\u6709\u5176\u4ed6\u7ebf\u7a0b\u62ff, \u90a3\u8fd9\u4e2a\u7ebf\u7a0b\u540e\u7eed\u62ff\u9501\u5c31\u8fdeCAS\u4e5f\u4e0d\u9700\u8981\\n\\n\u65e0\u9501`->`\u504f\u5411\u9501`->`\u81ea\u65cb\u9501`->`\u91cd\u91cf\u7ea7\u9501\\n\\n\\n\\nJMM\\n\\n\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7ade\u4e89\u7684\u53d8\u91cf(\u6210\u5458, \u9759\u6001\u7b49)\u5747\u5728\u4e3b\u5185\u5b58\\n\\n\u5c40\u90e8\u53d8\u91cf\u7ebf\u7a0b\u79c1\u6709, \u5de5\u4f5c\u5185\u5b58\u76f8\u4e92\u9694\u79bb, \u53ea\u80fd\u901a\u8fc7\u4e3b\u5185\u5b58\u540c\u6b65\\n\\n\\n\\nvolatile\\n\\n\u9700\u8981\u7acb\u5373\u770b\u5230\u4fee\u6539\u7684\u503c, \u6bcf\u4e00\u6b21\u8bfb\u53d6\u90fd\u4ece\u4e3b\u7ebf\u7a0b\u8bfb, \u6bcf\u4e00\u6b21\u5199\u90fd\u628a\u5de5\u4f5c\u5185\u5b58\u7684\u503c\u5237\u65b0\u5230\u4e3b\u7ebf\u7a0b\\n\x3c!--truncate--\x3e\\n\u52a0\u5165\u5185\u5b58\u5c4f\u969c\u7981\u6b62\u6307\u4ee4\u91cd\u6392\\n\\n\u53ea\u4fdd\u8bc1\u53ef\u89c1\u6027, \u4e0d\u4fdd\u8bc1\u539f\u5b50\u6027\\n\\n\\n\\n\u8f7b\u5230\u91cd, volatie`->`\u539f\u5b50\u7c7b`->`\u9501\\n\\n\u53ef\u91cd\u5165\u9501, \u591a\u6b21\u52a0\u9501\u9700\u8981\u591a\u6b21\u89e3\u9501\\n\\n(\u4fe1\u53f7\u91cfPV, bushi)\\n\\n`getHoldCount()`\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u52a0\u9501\u6b21\u6570\\n\\n\\n\\n\u9501\u516c\u5e73\u6027?\\n\\n\u53ef\u91cd\u5165\u9501\u9ed8\u8ba4\u662f\u975e\u516c\u5e73\u7684(\u4e0d\u63d0\u4f9b\u516c\u5e73\u6027\u4fdd\u8bc1)\\n\\n\u5426\u5219\u6309\u7167\u62ff\u9501\u987a\u5e8f\u6392\u961f `ReentrantLock(boolean fair=false)`\\n\\n\\n\\n\u8bfb\u5199\u9501\\n\\n\u4e00\u79cd\u8bfb\u5199\u53cc\u4fe1\u53f7\u91cf\u7684\u9ad8\u7ea7\u62bd\u8c61(\u9003)\\n\\nhttps://stackoverflow.com/questions/17683575/binary-semaphore-vs-a-reentrantlock\\n\\n\u4ece\u5e94\u7528\u5c42\u4e0a\u503c\u5f97\u6ce8\u610f\u7684\u5c31\u662f\u53ef\u91cd\u5165\u9501\u8fdb\u884c\u8fdb\u4e00\u6b65\u5c01\u88c5\u4e4b\u540e, \u4fdd\u8bc1\u4e86\\n\\n1. \u5f3a\u5236\u8981\u6c42\u62ff\u9501\u7684\u7ebf\u7a0b\u653e\u9501,\u727a\u7272\u4e86\u4e00\u4e9b\u81ea\u7531\u5ea6\u6362\u53d6\u7f16\u7a0b\u5b89\u5168\u6027\\n\\n> **Binary semaphores provide a non-ownership release mechanism**. Therefore, any thread can release the permit for a deadlock recovery of a binary semaphore.\\n> **\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u63d0\u4f9b\u4e86\u975e\u6240\u6709\u6743\u91ca\u653e\u673a\u5236**\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u7ebf\u7a0b\u90fd\u53ef\u4ee5\u91ca\u653e\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u6b7b\u9501\u6062\u590d\u7684\u8bb8\u53ef\u3002\\n>\\n> On the contrary, deadlock recovery is difficult to achieve in the case of a reentrant lock. For instance, if the owner thread of a reentrant lock goes into sleep or infinite wait, it won\u2019t be possible to release the resource, and a deadlock situation will result.\\n> \u76f8\u53cd\uff0c\u5728\u53ef\u91cd\u5165\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u6b7b\u9501\u6062\u590d\u662f\u5f88\u96be\u5b9e\u73b0\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u53ef\u91cd\u5165\u9501\u7684\u6240\u6709\u8005\u7ebf\u7a0b\u8fdb\u5165\u7761\u7720\u6216\u65e0\u9650\u7b49\u5f85\uff0c\u5219\u65e0\u6cd5\u91ca\u653e\u8d44\u6e90\uff0c\u4ece\u800c\u5bfc\u81f4\u6b7b\u9501\u60c5\u51b5\u3002\\n\\n\u8bfb\u9501: \u5199\u9501\u6ca1\u5360, \u591a\u4e2a\u7ebf\u7a0b\u53ef\u52a0\u8bfb\u9501\\n\\n\u5199\u9501: \u6ca1\u6709\u8bfb\u9501\u7684\u60c5\u51b5\u4e0b, \u624d\u53ef\u4ee5\u52a0\u5199\u9501(\u770b\u8d77\u6765\u662f\u8bfb\u8005\u4f18\u5148\u7684\u5b9e\u73b0)\\n\\n```java\\npublic interface ReadWriteLock {\\n    Lock readLock();\\n    Lock writeLock();\\n}\\n```\\n\\n\u5e76\u4e14\u8bfb\u5199\u9501\u4fdd\u7559\u4e86\u53ef\u91cd\u5165\\n\u5b9e\u9645\u4e0aCLHLock, \u5c06\u4e00\u4e2a\u5de5\u4f5c\u7ebf\u7a0b\u62bd\u8c61\u6210\u4e00\u4e2a\u8282\u70b9, \u961f\u5217\u672c\u8eab\u4f7f\u7528\u65e0\u9501CAS\u7ef4\u62a4, \u901a\u8fc7CAS\u66f4\u65b0\u8282\u70b9state\u6765\u6807\u8bc6\u72b6\u6001\u5b9e\u73b0\u7ebf\u7a0b\u5185\u7684\u53ef\u91cd\u5165\\n\\n\u516c\u5e73\u6027\u548c\u975e\u516c\u5e73\u6027\u7684\u5b9e\u73b0\\n\\n\u516c\u5e73\u9501\\n\\n```java\\n// java.util.concurrent.locks.ReentrantLock.FairSync#tryAcquire\\n\\nif (c == 0) {\\n\\tif (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) {\\n\\t\\tsetExclusiveOwnerThread(current);\\n\\t\\treturn true;\\n\\t}\\n}\\nelse if (current == getExclusiveOwnerThread()) {\\n\\tint nextc = c + acquires;\\n\\tif (nextc < 0)\\n\\t\\tthrow new Error(\\"Maximum lock count exceeded\\");\\n\\tsetState(nextc);\\n\\treturn true;\\n}\\n```\\n\\n\u975e\u516c\u5e73\u9501\\n\\n```java\\n// java.util.concurrent.locks.ReentrantLock.Sync#nonfairTryAcquire\\n// \u8fd9\u91cc\u5bf9\u6392\u961f\u4e0d\u505a\u5224\u65ad, \u76f4\u63a5\u62ff\u8d70\\nif (c == 0) {\\n\\tif (compareAndSetState(0, acquires)){\\n\\t\\tsetExclusiveOwnerThread(current);\\n\\t\\treturn true;\\n\\t}\\n}\\nelse if (current == getExclusiveOwnerThread()) {\\n\\tint nextc = c + acquires;\\n\\tif (nextc < 0) // overflow\\n\\t\\tthrow new Error(\\"Maximum lock count exceeded\\");\\n\\tsetState(nextc);\\n\\treturn true;\\n}\\n```\\n\\n\\n\\n\\n\\n\\n\\n\u4e00\u4e2a\u94fe\u8868, \u901a\u8fc7\u6bcf\u6b21\u62ff\u9501\u539f\u5b50\u6027\u52a0(AtomicRefence.getAndSet, \u5b9e\u9645\u5c31\u662fCAS)\u8282\u70b9\u5728\u5c3e\u90e8, \u89e3\u9501\u9700\u8981\u7b49\u5f85\u524d\u4e00\u4e2a\u8282\u70b9\u89e3\u9501\u6765\u5f97\u5230fairness\\n\\n\\n\\n\u6838\u5fc3CAS, \u7528currentThread()\u521b\u5efa\u4e00\u4e2a\u65b0\u8282\u70b9node, \u4e4b\u540e\u8bbe\u7f6enode.prev\u4e3atail, **CAS\u5c1d\u8bd5\u8bbe\u7f6etail\u4e3anode**\\n\\n\u5982\u679c\u6210\u529f, acquire\u6210\u529f; \u5982\u679c\u5931\u8d25, \u81ea\u65cb\u91cd\u590d\\n\\n\\n\\n\u5b98\u65b9\u793a\u4f8b\\n\\n```java\\nclass RWDictionary {\\n    private final Map<String, Data> m = new TreeMap<>();\\n    private final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\\n    private final Lock r = rwl.readLock();\\n    private final Lock w = rwl.writeLock();\\n\\n    public Data get(String key) {\\n        r.lock();\\n        try {\\n            return m.get(key);\\n        } finally {\\n            r.unlock();\\n        }\\n    }\\n\\n    public List<String> allKeys() {\\n        r.lock();\\n        try {\\n            return new ArrayList<>(m.keySet());\\n        } finally {\\n            r.unlock();\\n        }\\n    }\\n\\n    public Data put(String key, Data value) {\\n        w.lock();\\n        try {\\n            return m.put(key, value);\\n        } finally {\\n            w.unlock();\\n        }\\n    }\\n\\n    public void clear() {\\n        w.lock();\\n        try {\\n            m.clear();\\n        } finally {\\n            w.unlock();\\n        }\\n    }\\n}\\n}\\n```\\n\\n\u652f\u6301\u9501\u964d\u7ea7: \u5148\u62ff\u5199\u9501\u518d\u62ff\u8bfb\u9501\\n\\n\u4e0d\u652f\u6301\u9501\u5347\u7ea7: \u5e9f\u8bdd, \u4e0d\u80fd\u5148\u62ff\u8bfb\u9501\u518d\u62ff\u5199\u9501, \u54ce\u540d\u8bcd\u53d1\u660e\u5bb6\\n\\n\\n\\njava\u539f\u5b50\u7c7b\\n\\nAtomicXXX\\n\\n\u9664\u4e86\u57fa\u672c\u7c7b\u4ee5\u5916\u8fd8\u6709AtomicIntergerArray, AtomicLongArray, AtomicReferenceArray\\n\\n\u5c31\u662f\u4e2a\u69fd, \u5b9e\u9645\u4e0a\u4e0d\u662f\u4ec0\u4e48\u65b0\u9c9c\u7684\u4e1c\u897f, \u5bf9\u7ed9\u5b9a\u5185\u5b58\u5730\u5740CAS\u800c\u5df2, \u7531\u4e8ejava\u4e0d\u80fd\u76f4\u63a5\u975eUnsafe\u64cd\u4f5c\u6307\u9488\u5bfc\u81f4\u7684\\n\\n\u8fd8\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u662fLongAdder\u7c7b\\n\\n\u50cf\u662fostep\u91cc\u9762\u7684lazy\u65f6\u949f, \u62a2\u4e0d\u5230\u539f\u5b50\u52a0\u7684\u65f6\u5019\u5148\u52a0\u672c\u5730, \u6700\u540e\u540c\u6b65\\n\\n\u6ce8\u610f\u5f15\u7528\u4ea4\u6362\u7684\u5b9e\u7528\u6027: \u4f8b\u5982Object\u7684CAS\\n\\n\\n\\n\u751a\u81f3\u53ef\u4ee5\u539f\u5b50\u66f4\u65b0\u5b57\u6bb5, AtomicIntegerUpdater\\n\\n\\n\\n\u907f\u514dABA\u95ee\u9898, \u7ed9\u4e86\u4e2a\u5de5\u5177\u7c7bAtomicStampedReference\\n\\n\u6838\u5fc3\u601d\u8def\u662f\u5728CAS\u6210\u529f\u6362\u5230\u503c\u7684\u65f6\u5019\u4e5f\u6362\u4e00\u4e2astamp\u8fc7\u53bb, \u5c31\u53ef\u4ee5\u5728\u8bfb\u53d6\u7684\u65f6\u5019\u6839\u636estamp\u6765\u5224\u65ad\u662f\u4e0d\u662f\u60f3\u8981\u7684\u503c(\u6709\u6ca1\u6709\u88ab\u5176\u4ed6\u7ebf\u7a0b\u4fee\u6539\u8fc7)\u4e86\\n\\n\\n\\n\u5e38\u7528\u5e76\u53d1\u5bb9\u5668\\n\\nArrayList `->` CopyOnWriteArrayList\\n\\n```java\\n    public boolean add(E e) {\\n        synchronized (lock) {\\n            Object[] es = getArray();\\n            int len = es.length;\\n            es = Arrays.copyOf(es, len + 1);\\n            es[len] = e;\\n            setArray(es); // array = es\\n            return true;\\n        }\\n    }\\n```\\n\\n> This is ordinarily too costly, but may be more efficient than alternatives when traversal operations vastly outnumber mutations, and is useful when you cannot or don\'t want to synchronize traversals, yet need to preclude interference among concurrent threads\\n\\n\u5f00\u9500\u5f88\u5927, \u4f46\u786e\u4fdd\u4e86\u4e0d\u4f1a\u51fa\u73b0\u8fed\u4ee3\u5668\u5931\u6548, \u9002\u7528\u4e8e\u8bfb\u591a\u5199\u5c11\u7684\u60c5\u51b5\\n\\n(\u8fed\u4ee3\u5668\u8bfb\u662f\u4e0d\u5835\u585e\u7684)\\n\\n\u5982\u679c\u4f7f\u7528\u52a0\u5927\u9501\u9700\u8981\u81ea\u5df1\u540c\u6b65\u8fed\u4ee3\u5668\\n\\n```java\\n    List list = Collections.synchronizedList(new ArrayList());\\\\\\n    // \u8fd9\u73a9\u610f\u5c31\u662f\u6240\u6709\u64cd\u4f5c\u90fd\u52a0synchronized(mutex), \u9664\u4e86iterator()\\n    ...\\n    synchronized (list) {\\n        Iterator i = list.iterator(); // Must be in synchronized block\\n        while (i.hasNext())\\n            foo(i.next());\\n    }\\n```\\n\\nConcurrentLinkedQueue \u7ecf\u5178\u5e76\u53d1\u961f\u5217\\n\\nConcurrentSkipListMap \u5e76\u53d1\u8df3\u8868\\n\\nConCurrentHashMap\\n\\n\u9501\u94fe\u8868\u5934(\u7ea2\u9ed1\u6811\u6839, \u957f\u5ea6\u5927\u4e8e8\u5347\u7ea7)\\n\\n\\n\\n\u963b\u585e\u961f\u5217 BlockingQueue\\n\\n- ArrayBlockingQueue  `<->` chan(int)\\n- SynchronousQueue `<->` chan(0)\\n- LinkedBlockingQueue `<->` chan(inf)\\n\\n\u7ecf\u5178\u751f\u4ea7\u6d88\u8d39\u8005()\\n\\nchan\u65b9\u4fbf\u7406\u89e3, \u4f46\u548cchan\u8fd8\u662f\u6709\u70b9\u4e0d\u4e00\u6837, \u53ef\u4ee5\u591a\u6d88\u8d39\u8005\\n\\n\\n\\nPriorityBlockingQueue \u4f18\u5148\u7ea7\u963b\u585e\u961f\u5217\\n\\nDelayQueue \u5ef6\u65f6\u961f\u5217, \u5728\u8fbe\u5230\u5ef6\u65f6\u4e4b\u524d\u51fa\u4e0d\u4e86\u961f\\n\\n\u7528\u4e8e\u9650\u6d41?\\n\\n\\n\\n\u7ebf\u7a0b\u6c60\\n\\nThreadPoolExecutor\\n\\n```java\\n    public ThreadPoolExecutor(int corePoolSize,//\u7ebf\u7a0b\u6c60\u7684\u6838\u5fc3\u7ebf\u7a0b\u6570\u91cf\\n                              int maximumPoolSize,//\u7ebf\u7a0b\u6c60\u7684\u6700\u5927\u7ebf\u7a0b\u6570\\n                              long keepAliveTime,//\u5f53\u7ebf\u7a0b\u6570\u5927\u4e8e\u6838\u5fc3\u7ebf\u7a0b\u6570\u65f6\uff0c\u591a\u4f59\u7684\u7a7a\u95f2\u7ebf\u7a0b\u5b58\u6d3b\u7684\u6700\u957f\u65f6\u95f4\\n                              TimeUnit unit,//\u65f6\u95f4\u5355\u4f4d\\n                              BlockingQueue<Runnable> workQueue,//\u4efb\u52a1\u961f\u5217\uff0c\u7528\u6765\u50a8\u5b58\u7b49\u5f85\u6267\u884c\u4efb\u52a1\u7684\u961f\u5217\\n                              ThreadFactory threadFactory,//\u7ebf\u7a0b\u5de5\u5382\uff0c\u7528\u6765\u521b\u5efa\u7ebf\u7a0b\uff0c\u4e00\u822c\u9ed8\u8ba4\u5373\u53ef\\n                              RejectedExecutionHandler handler//\u62d2\u7edd\u7b56\u7565\uff0c\u5f53\u63d0\u4ea4\u7684\u4efb\u52a1\u8fc7\u591a\u800c\u4e0d\u80fd\u53ca\u65f6\u5904\u7406\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u5236\u7b56\u7565\u6765\u5904\u7406\u4efb\u52a1\\n                               )\\n```\\n\\n\\n\\n> `FixedThreadPool`\uff1a\u56fa\u5b9a\u7ebf\u7a0b\u6570\u91cf\u7684\u7ebf\u7a0b\u6c60\u3002\u8be5\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u91cf\u59cb\u7ec8\u4e0d\u53d8\u3002\u5f53\u6709\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1\u63d0\u4ea4\u65f6\uff0c\u7ebf\u7a0b\u6c60\u4e2d\u82e5\u6709\u7a7a\u95f2\u7ebf\u7a0b\uff0c\u5219\u7acb\u5373\u6267\u884c\u3002\u82e5\u6ca1\u6709\uff0c\u5219\u65b0\u7684\u4efb\u52a1\u4f1a\u88ab\u6682\u5b58\u5728\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\u4e2d\uff0c\u5f85\u6709\u7ebf\u7a0b\u7a7a\u95f2\u65f6\uff0c\u4fbf\u5904\u7406\u5728\u4efb\u52a1\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u3002\\n>\\n> `SingleThreadExecutor`\uff1a \u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u6c60\u3002\u82e5\u591a\u4f59\u4e00\u4e2a\u4efb\u52a1\u88ab\u63d0\u4ea4\u5230\u8be5\u7ebf\u7a0b\u6c60\uff0c\u4efb\u52a1\u4f1a\u88ab\u4fdd\u5b58\u5728\u4e00\u4e2a\u4efb\u52a1\u961f\u5217\u4e2d\uff0c\u5f85\u7ebf\u7a0b\u7a7a\u95f2\uff0c\u6309\u5148\u5165\u5148\u51fa\u7684\u987a\u5e8f\u6267\u884c\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u3002\\n>\\n> `CachedThreadPool`\uff1a \u53ef\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8c03\u6574\u7ebf\u7a0b\u6570\u91cf\u7684\u7ebf\u7a0b\u6c60\u3002\u7ebf\u7a0b\u6c60\u7684\u7ebf\u7a0b\u6570\u91cf\u4e0d\u786e\u5b9a\uff0c\u4f46\u82e5\u6709\u7a7a\u95f2\u7ebf\u7a0b\u53ef\u4ee5\u590d\u7528\uff0c\u5219\u4f1a\u4f18\u5148\u4f7f\u7528\u53ef\u590d\u7528\u7684\u7ebf\u7a0b\u3002\u82e5\u6240\u6709\u7ebf\u7a0b\u5747\u5728\u5de5\u4f5c\uff0c\u53c8\u6709\u65b0\u7684\u4efb\u52a1\u63d0\u4ea4\uff0c\u5219\u4f1a\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u5904\u7406\u4efb\u52a1\u3002\u6240\u6709\u7ebf\u7a0b\u5728\u5f53\u524d\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5c06\u8fd4\u56de\u7ebf\u7a0b\u6c60\u8fdb\u884c\u590d\u7528\u3002\\n>\\n> `ScheduledThreadPool`\uff1a\u7ed9\u5b9a\u7684\u5ef6\u8fdf\u540e\u8fd0\u884c\u4efb\u52a1\u6216\u8005\u5b9a\u671f\u6267\u884c\u4efb\u52a1\u7684\u7ebf\u7a0b\u6c60\\n\\n\\n\\nexecute() \u6267\u884c\\n\\nsubmit() \u9700\u8981\u8fd4\u56de\u503c, \u5f97\u5230Future\\n\\n\\n\\nCompletableFuture\\n\\n```java\\nCompletableFuture<Void> task1 =\\n  CompletableFuture.supplyAsync(()->{\\n    //\u81ea\u5b9a\u4e49\u4e1a\u52a1\u64cd\u4f5c\\n  });\\n......\\nCompletableFuture<Void> task6 =\\n  CompletableFuture.supplyAsync(()->{\\n    //\u81ea\u5b9a\u4e49\u4e1a\u52a1\u64cd\u4f5c\\n  });\\n......\\n CompletableFuture<Void> headerFuture=CompletableFuture.allOf(task1,.....,task6);\\n\\n  try {\\n    headerFuture.join();\\n  } catch (Exception ex) {\\n    ......\\n  }\\nSystem.out.println(\\"all done. \\");\\n```\\n\\n> `CompletableFuture` \u9ed8\u8ba4\u4f7f\u7528\u5168\u5c40\u5171\u4eab\u7684 `ForkJoinPool.commonPool()` \u4f5c\u4e3a\u6267\u884c\u5668\uff0c\u6240\u6709\u672a\u6307\u5b9a\u6267\u884c\u5668\u7684\u5f02\u6b65\u4efb\u52a1\u90fd\u4f1a\u4f7f\u7528\u8be5\u7ebf\u7a0b\u6c60\u3002\u8fd9\u610f\u5473\u7740\u5e94\u7528\u7a0b\u5e8f\u3001\u591a\u4e2a\u5e93\u6216\u6846\u67b6\uff08\u5982 Spring\u3001\u7b2c\u4e09\u65b9\u5e93\uff09\u82e5\u90fd\u4f9d\u8d56 `CompletableFuture`\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4eec\u90fd\u4f1a\u5171\u4eab\u540c\u4e00\u4e2a\u7ebf\u7a0b\u6c60\\n\\n\u81ea\u5b9a\u4e49\u7ebf\u7a0b\u6c60\u5c31\u662fRunAsync\u52a0\u4e00\u4e2a\u53c2\u6570ThreadPoolExecutor\\n\\n\\n\\n> \u6b63\u786e\u4f7f\u7528 `thenCompose()` \u3001 `thenCombine()` \u3001`acceptEither()`\u3001`allOf()`\u3001`anyOf()`\u7b49\u65b9\u6cd5\u6765\u7ec4\u5408\u591a\u4e2a\u5f02\u6b65\u4efb\u52a1\uff0c\u4ee5\u6ee1\u8db3\u5b9e\u9645\u4e1a\u52a1\u7684\u9700\u6c42\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u6267\u884c\u6548\u7387\\n\\n\u8fd8\u6709 \\n\\n- `thenApply()`\\n- `thenAccept()`\\n- `thenRun()`\\n- `whenComplete()`\\n\\n\\n\\n\u5e76\u53d1\u5de5\u5177\u7c7b\\n\\n\\n\\nCountDownLatch\\n\\nCyclicBarrier\\n\\nSemaphore\\n\\nFork/Join\u6846\u67b6"},{"id":"/cs144 labs","metadata":{"permalink":"/blog/cs144 labs","source":"@site/blog/cs144 labs.md","title":"cs144 labs(Winter 2024)","description":"Lab0","date":"2024-11-01T18:57:09.000Z","tags":[{"inline":true,"label":"cs144","permalink":"/blog/tags/cs-144"},{"inline":true,"label":"network","permalink":"/blog/tags/network"},{"inline":true,"label":"labs","permalink":"/blog/tags/labs"}],"readingTime":30.18,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"cs144 labs(Winter 2024)","author":"ayanami","tags":["cs144","network","labs"],"keywords":["cs144","computer networks","labs"],"summary":"labs-for-cs144(2024-winter)"},"unlisted":false,"prevItem":{"title":"JUC","permalink":"/blog/JUC"},"nextItem":{"title":"NJU\u64cd\u4f5c\u7cfb\u7edf(jyy OS)\u8bfe\u7a0b\u7b14\u8bb0-\u5e76\u53d1\u90e8\u5206","permalink":"/blog/jyy-os\uff1a\u5e76\u53d1"}},"content":"### Lab0\\n\\n\u8fd9\u4e2alab\u7eaf\u7eaf\u7684\u70ed\u8eablab, part1\u662f\u7528webget\u7b80\u5355\u8fdb\u884c\u4e2a\u8bf7\u6c42, \u7c7b\u4f3ccsapp\u7684\u7f51\u7edclab part1\\n\\npart2\u5b57\u7b26\u4e32\u64cd\u4f5c, \u6076\u5fc3\u4e00\u70b9\u7684\u5c31\u662fstring_view\u7684peek\u548c\u4e00\u4e2aring buffer\u4e0d\u592a\u80fd\u517c\u5bb9, \u603b\u4e4b\u6211\u7684\u4ee3\u7801\u6548\u7387\u4e5f\u633a\u4f4e\u7684\u5c31\u4e0d\u62ff\u51fa\u6765\u732e\u4e11\u4e86()\\n\\n### Lab1\\n\\n\u8fd9\u4e2alab\u8981\u6c42\u5b9e\u73b0tcp\u5b57\u8282\u6d41\u62bd\u8c61\u7684\u91cd\u7ec4\u90e8\u5206Reassembler\\n\\n\u8c03\u7684\u65f6\u5019\u8fd8\u662f\u5f88\u6076\u5fc3\u7684, \u975e\u5e38\u591a\u7684edge case, \u5efa\u8bae\u597d\u597d\u770b\u6d4b\u8bd5\u662f\u600e\u4e48\u6784\u9020\u7684\\n\\n\u5199\u7684\u65f6\u95f4\u6700\u4e45\u7684\u4e00\u4e2alab, \u4f46\u8fd9\u91cc\u7b14\u8bb0\u6ca1\u6709\u591a\u5c11, \u56e0\u4e3aLab1\u7ed3\u675f\u5230Lab2\u5f00\u59cb\u7684\u4e24\u4e2a\u661f\u671f\u5e72\u522b\u7684\u53bb\u8bb0\u4e0d\u6e05\u5f53\u65f6\u7684\u611f\u53d7\u4e86()\\n\\n\u8fd8\u662f\u653e\u4e2a\u6e90\u4ee3\u7801\\n\\n```cpp\\n#include \\"reassembler.hh\\"\\n\x3c!--truncate--\x3e#include <algorithm>\\n#include <cassert>\\n#include <cstdint>\\n#include <iostream>\\nusing namespace std;\\n\\nvoid Reassembler::insert( uint64_t first_index, string data, bool is_last_substring )\\n{\\n  // Your code here.\\n  (void)first_index;\\n  (void)data;\\n  (void)is_last_substring;\\n\\n  // NOTE: every byte pushed is valid sequence.\\n  // NOTE: cur index to be pushed might be partially pushed before, so need to check\\n  // NOTE: \\"That is, you can assume that there is a unique underlying byte-stream, and all\\n  // NOTE: substrings are (accurate) slices of it\\" ----  package may be lost but not corrupted\\n  // NOTE: buffer: start marker next_index, len is available_capacity\\n  std::cerr << \\"first_index: \\" << first_index << \\" data: \\" << data << \\" is_last_substring: \\" << is_last_substring\\n            << std::endl;\\n\\n  if ( output_.writer().available_capacity() > buffer.size() ) {\\n    // buffer = string( output_.writer().available_capacity() - buffer.size(), \'x\' ) + buffer;\\n    buffer.resize( output_.writer().available_capacity() );\\n  }\\n  // duplicate one, drop\\n  if ( first_index + data.size() < next_index ) {\\n    return;\\n  }\\n  if ( first_index + data.size() == next_index ) {\\n    if ( is_last_substring ) {\\n      output_.writer().close();\\n      clear_buffer();\\n    }\\n    return;\\n  }\\n  // overlap\\n  if ( first_index < next_index ) {\\n    assert( first_index + data.size() > next_index );\\n    data = data.substr( next_index - first_index, output_.writer().available_capacity() );\\n    // add\\n    if ( !data.empty() ) {\\n      // has some space to contain data\\n      write_in_space( data, is_last_substring );\\n    }\\n    return;\\n  }\\n  // gap, exceed capacity\\n  if ( first_index >= next_index + buffer.size() ) {\\n    cerr << \\"gap: drop package\\" << endl;\\n    return;\\n  }\\n  // gap, (partially) in capacity, store in buffer\\n  if ( first_index > next_index ) {\\n    if ( first_index + data.size() > next_index + buffer.size() ) {\\n      auto input_size = buffer.size() - ( first_index - next_index );\\n      // NOTE: partial overlap cannot be the last\\n      find_replace_buffer_item( data.substr( 0, input_size ), first_index, false );\\n    } else {\\n      find_replace_buffer_item( data, first_index, is_last_substring );\\n    }\\n    return;\\n  }\\n\\n  // exactly equal, write\\n  assert( first_index == next_index );\\n  // when data.size() < buffer.size(), substr return data\\n  // NOTE: partial overlap cannot be the last\\n  if ( data.size() > buffer.size() ) {\\n    data = data.substr( 0, buffer.size() );\\n    write_in_space( data, false );\\n  } else {\\n    write_in_space( data, is_last_substring );\\n  }\\n}\\n\\nuint64_t Reassembler::bytes_pending() const\\n{\\n  // Your code here.\\n  return bytes_pending_;\\n}\\n\\n```\\n\\n\\n\\n```cpp\\n#pragma once\\n#include \\"byte_stream.hh\\"\\n#include <algorithm>\\n#include <cassert>\\n#include <cstdint>\\n#include <iterator>\\n#include <set>\\n#include <vector>\\nclass Reassembler\\n{\\nprivate:\\n  /**\\n   * @brief cut all items start before index\\n   */\\n  void rebuild_buffer_items( uint64_t index )\\n  {\\n    int cnt = 0;\\n    for ( const auto& item : buffered_items ) {\\n      if ( item.index + item.size <= index ) {\\n        // NOTE:can be partially overlapped\\n        bytes_pending_ -= item.size;\\n        cnt++;\\n      } else {\\n        break;\\n      }\\n    }\\n    if ( cnt > 0 ) {\\n      buffered_items.erase( buffered_items.begin(), std::next( buffered_items.begin(), cnt ) );\\n    }\\n  }\\n  void clear_buffer()\\n  {\\n    buffered_items.clear();\\n    buffer.resize( 0 );\\n    bytes_pending_ = 0;\\n    next_index = 0;\\n  }\\n  /**\\n   * @brief DO buffer opeartions and capacity check OUTSIDE!!!\\n   * @param  data\\n   * @param  start\\n   * @param  is_last_substring\\n   */\\n  void find_replace_buffer_item( const std::string& data, uint64_t start, bool is_last_substring )\\n  {\\n    // auto it = find_if( buffered_items.begin(), buffered_items.end(), [start, size]( const auto& item ) {\\n    //   return ( item.index <= start && start <= item.size + item.index )\\n    //          || ( start <= item.index && item.index <= start + size );\\n    // } );\\n    assert( start > next_index );\\n    auto size = data.size();\\n    buffer.replace( start - next_index, size, data );\\n    buffered_items.emplace( start, size, is_last_substring );\\n    // combine the next item\\n    // NOTE: now the set has been sorted\\n    std::set<SubStringTuple> new_buffer;\\n    uint64_t seg_start = start;\\n    uint64_t seg_end = start + size;\\n    bool seg_is_last = is_last_substring;\\n    for ( const auto& item : buffered_items ) {\\n      if ( item.index + item.size >= seg_start && item.index <= seg_start ) {\\n        seg_start = item.index;\\n      }\\n      if ( item.index <= seg_end && item.size + item.index >= seg_end ) {\\n        seg_end = item.index + item.size;\\n        seg_is_last = item.is_last_substring;\\n      }\\n    }\\n    bytes_pending_ = 0;\\n    for ( const auto& item : buffered_items ) {\\n      if ( item.index + item.size < seg_start || item.index > seg_end ) {\\n        new_buffer.insert( item );\\n        bytes_pending_ += item.size;\\n      }\\n    }\\n    new_buffer.emplace( seg_start, seg_end - seg_start, seg_is_last );\\n    bytes_pending_ += seg_end - seg_start;\\n    buffered_items.clear();\\n    buffered_items = new_buffer;\\n  }\\n  /**\\n   * @brief there has enough space(from next_index) to write data in buffer\\n   * @param  data\\n   */\\n  void write_in_space( const std::string& data, bool is_last_substring )\\n  {\\n    output_.writer().push( data );\\n    buffer = buffer.substr( data.size() );\\n    next_index += data.size();\\n    rebuild_buffer_items( next_index );\\n    bool end = is_last_substring;\\n    while ( !end ) {\\n      auto it = std::find_if( buffered_items.begin(), buffered_items.end(), [this]( const auto& item ) {\\n        return item.index <= next_index && item.index + item.size > next_index;\\n      } );\\n      if ( it == buffered_items.end() ) {\\n        break;\\n      }\\n      assert( it->size > ( next_index - it->index ) );\\n      auto append_len = it->size - ( next_index - it->index );\\n      output_.writer().push( buffer.substr( 0, append_len ) );\\n      buffer = buffer.substr( append_len );\\n      next_index += append_len;\\n      end = it->is_last_substring;\\n      rebuild_buffer_items( next_index );\\n    }\\n    if ( end ) {\\n      clear_buffer();\\n      output_.writer().close();\\n    }\\n  }\\n\\npublic:\\n  // Construct Reassembler to write into given ByteStream.\\n  explicit Reassembler( ByteStream&& output )\\n    : output_( std::move( output ) )\\n    , bytes_pending_( 0 )\\n    , buffered_items()\\n    , buffer( output.writer().available_capacity(), \'\\\\0\' )\\n    , next_index( 0 )\\n  {}\\n\\n  /*\\n   * Insert a new substring to be reassembled into a ByteStream.\\n   *   `first_index`: the index of the first byte of the substring\\n   *   `data`: the substring itself\\n   *   `is_last_substring`: this substring represents the end of the stream\\n   *   `output`: a mutable reference to the Writer\\n   *\\n   * The Reassembler\'s job is to reassemble the indexed substrings (possibly out-of-order\\n   * and possibly overlapping) back into the original ByteStream. As soon as the Reassembler\\n   * learns the next byte in the stream, it should write it to the output.\\n   *\\n   * If the Reassembler learns about bytes that fit within the stream\'s available capacity\\n   * but can\'t yet be written (because earlier bytes remain unknown), it should store them\\n   * internally until the gaps are filled in.\\n   *\\n   * The Reassembler should discard any bytes that lie beyond the stream\'s available capacity\\n   * (i.e., bytes that couldn\'t be written even if earlier gaps get filled in).\\n   *\\n   * The Reassembler should close the stream after writing the last byte.\\n   */\\n  void insert( uint64_t first_index, std::string data, bool is_last_substring );\\n\\n  // How many bytes are stored in the Reassembler itself?\\n  uint64_t bytes_pending() const;\\n\\n  // Access output stream reader\\n  Reader& reader() { return output_.reader(); }\\n  const Reader& reader() const { return output_.reader(); }\\n\\n  // Access output stream writer, but const-only (can\'t write from outside)\\n  const Writer& writer() const { return output_.writer(); }\\n  struct SubStringTuple\\n  {\\n    uint64_t index;\\n    uint64_t size;\\n    bool is_last_substring;\\n    bool operator<( const SubStringTuple& rhs ) const\\n    {\\n      return index < rhs.index || ( index == rhs.index && size < rhs.size );\\n    }\\n    void setIndex( uint64_t i ) { this->index = i; }\\n    void setSize( uint64_t s ) { this->size = s; }\\n    void setLast( bool l ) { this->is_last_substring = l; }\\n  };\\n  uint64_t get_next_index() const { return next_index; }\\n  // auto get_remain_capacity() const { return buffer.size(); };\\n\\nprivate:\\n  ByteStream output_;      // the Reassembler writes to this ByteStream\\n  uint64_t bytes_pending_; // number of bytes stored in the Reassembler itself\\n  std::set<SubStringTuple> buffered_items;\\n  std::string buffer;\\n  uint64_t next_index;\\n};\\n\\n```\\n\\n\\n\\n### Lab2\\n\\n\u8fd9\u4e2alab\u8981\u6c42\u5b9e\u73b0\u4e00\u4e2aTCP receiver, \u5e76\u548cLab1\u4e4b\u4e2d\u7684Reassembler\u5bf9\u63a5, \u5c06\u53d1\u8fc7\u6765\u7684\u4e00\u7cfb\u5217tcp\u5305\u89e3\u5f00\u5e76\u5904\u7406\u5b57\u8282\u6d41\\n\\n\u9762\u5411\u6d4b\u8bd5\u7f16\u7a0b\u6700\u723d\u7684\u4e00\u96c6\\n\\n\u4e0d\u5982\u8bf4\u8fd9\u4e2alab\u5c31\u662f\u5728\u5c55\u793a\u4e00\u4e2a\u4e30\u5bcc\u7684\u6d4b\u8bd5\u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u7684(15\u884c\u4ee3\u7801\u4e0a\u5343\u884c\u6d4b\u8bd5(\u96fe))\\n\\n\u4ee3\u7801\u903b\u8f91\u5f88\u7b80\u5355,\u4f46\u6d4b\u8bd5\u4e4b\u4e30\u5bcc\u8ba9\u4f60\u5fc5\u987b\u8003\u8651\u6240\u6709\u7684edge case\\n\\npart1 \u662f\u5904\u7406TCP\u534f\u8bae\u4e4b\u4e2d, SeqNo\u662f\u752832\u4f4d\u6574\u6570\u5b58, \u5177\u67094G\u7684\u4e0a\u9650(\u5e76\u4e14\u8fd8\u8981\u8003\u8651\u5230\u968f\u673a\u521d\u59cb\u7684ISN\u6765\u9632\u6b62\u653b\u51fb, \u5b9e\u9645\u53ef\u7528\u8fd8\u4e0d\u52304G),\u4f46\u6211\u4eec\u7684\u7f51\u7edc\u80af\u5b9a\u4e0d\u80fd\u53ea\u80fd\u6700\u591a\u4f204G\u6570\u636e,\u6240\u4ee5\u6211\u4eec\u7684\u5e95\u5c42\u7528\u7684\u662f`uint64_t`, \u5c31\u5e26\u6765\u4e86\u4ece32\u4f4d\u7684SeqNo\u548c\u521d\u59cb\u768432\u4f4dISN\u8f6c\u523064\u4f4d\u7684,\u7528\u4e8ereassamble\u768464\u4f4d\u7edd\u5bf9seqNo, \u91c7\u7528\u7684\u662f\u4e00\u4e2a\\"\u96f6\u70b9+\u6e38\u6807\\"\u7684\u65b9\u6cd5, ISN\u5c31\u662f\u96f6\u70b9,\u800c\u4f7f\u7528\u5df2\u6709\u7684\u4e0b\u4e00\u4e2a\u7edd\u5bf9SeqNo\u4f5c\u4e3a\u53c2\u8003\u7684\u6e38\u6807\u4ee5\u907f\u514d\u591a\u503c\u6027, \u4eceSeqNo\u548cISN\u7684\\"\u5dee\u503c\\"\u53ef\u4ee5\u5f97\u5230\u5b9e\u9645\u4e0a64\u4f4d\u7684\u7edd\u5bf9index\u7684\u4f4e32\u4f4d, \u800c\u9ad8\u4f4d\u662f\u8fdb\u4f4d\u8fd8\u662f\u9000\u4f4d\u8fd8\u662f\u4e0d\u53d8\u5219\u6839\u636e\u6e38\u6807\u51b3\u5b9a.\\n\\n\u6211\u7684\u4ee3\u7801\u5982\u4e0b, \u611f\u89c9\u5176\u5b9e\u662f\u5199\u590d\u6742\u4e86, \u4f46\u601d\u8def\u8fd8\u662f\u6e05\u6670\u7684\\n\\n```cpp\\nWrap32 Wrap32::wrap( uint64_t n, Wrap32 zero_point )\\n{\\n  // Your code here.\\n  (void)n;\\n  (void)zero_point;\\n  return zero_point + static_cast<uint32_t>( n );\\n}\\n\\nuint64_t Wrap32::unwrap( Wrap32 zero_point, uint64_t checkpoint ) const\\n{\\n  // Your code here.\\n  (void)zero_point;\\n  (void)checkpoint;\\n  uint32_t mask = 0xFFFFFFFF;\\n  uint32_t cp_low = checkpoint & mask;\\n  uint32_t diff = 0;\\n  if ( this->raw_value_ > zero_point.raw_value_ ) {\\n    diff = this->raw_value_ - zero_point.raw_value_;\\n  } else {\\n    uint32_t gap = zero_point.raw_value_ - this->raw_value_;\\n    diff = 0xFFFFFFFF - gap + 1;\\n  }\\n  // std::cout << \\"cp_low:\\" << cp_low << \\" ,diff:\\" << diff << \\",checkpoint:\\" << checkpoint << std::endl;\\n  if ( diff > cp_low ) {\\n    if ( diff - cp_low < 0x80000000 ) {\\n      return checkpoint - cp_low + diff;\\n    } else {\\n      uint64_t a = static_cast<uint64_t>( 0x80000000 ) << 1;\\n      // HINT: a \\"less than 0\\" abs seqNo means nothing\\n      return checkpoint - cp_low + diff > a ? checkpoint - cp_low + diff - a : checkpoint - cp_low + diff;\\n    }\\n  } else {\\n\\n    if ( cp_low - diff < 0x80000000 ) {\\n      return checkpoint - cp_low + diff;\\n    } else {\\n      return checkpoint - cp_low + diff + ( static_cast<uint64_t>( 0x80000000 ) << 1 );\\n    }\\n  }\\n}\\n```\\n\\n\\n\\n\u5728part2\u4e4b\u4e2d, TCP receiver\u9700\u8981\u4f20\u7ed9lab1\u4e4b\u4e2d\u5199\u597d\u7684reassembler index\u6570\u636e\\n\\n\u8fd9\u91cc\u7684index\u53c8\u662f\u5b57\u8282\u6d41\u7684index, \u548c\u6211\u4eecabs SeqNo\u53c8\u6709\u5dee\u522b: \\n\\n- SYN, FIN\u8fd9\u79cd\u5305\u662f\u53ef\u4ee5\u5e26\u4e00\u4e2a\u7a7adata\u7684, \u5e76\u4e14\u8fd9\u4e9b\u5360\u636e\u4e86SeqNo\u7684\u5305\u53ef\u4ee5\u5199\u5165\u6570\u636e\u6d41(\u5982\u679c\u4e0d\u5e26data)\\n- SYN, FIN\u8fd9\u79cd\u6807\u5fd7\u4f4d\u662f\u53ef\u4ee5\u5171\u5b58\u7684, \u867d\u7136\u8fd9\u4e0d\u662f\u4e00\u4e2a\u6807\u51c6TCP\u884c\u4e3a, \u4f46\u53ef\u4ee5\u662f\u5bf9\u65b9\u7684bug, \u4e5f\u53ef\u4ee5\u662f\u9b54\u6539\u534f\u8bae, \u786c\u4ef6\u4e0a\u5e76\u6ca1\u6709\u5bf9\u5171\u5b58\u6027\u505a\u6821\u9a8c, \u672c\u673a\u9700\u8981\u80fd\u5904\u7406, \u5178\u578b\u7684\u5982 SYN+data+FIN\\n- RST\u7684\u5904\u7406\u662f\u7b80\u5316\u7684, \u6587\u6863\u5bf9RST\u7684\u8bf4\u660e\u5e76\u4e0d\u8be6\u7ec6, \u6d4b\u8bd5\u4e2d\u5c31\u662f\u7b80\u5355\u7684`RST bit <-> Stream Error`, \u67e5\u8be2\u4e86\u4e00\u4e0b\u8d44\u6599, \u4ee5\u4e0b\u60c5\u51b5\u90fd\u53ef\u4ee5\u4ea7\u751fRST\\n  - \u76ee\u7684\u5730\u4e3a\u67d0\u7aef\u53e3\u7684`SYN`\u5230\u8fbe\uff0c\u7136\u800c\u5728\u8be5\u7aef\u53e3\u4e0a\u5e76\u6ca1\u6709\u6b63\u5728\u76d1\u542c\u7684\u670d\u52a1\u5668\uff1b\\n  - TCP\u60f3\u53d6\u6d88\u4e00\u4e2a\u5df2\u6709\u8fde\u63a5\uff1b(\u5f02\u5e38\u4e2d\u6b62\u7b49, \u6b64\u65f6\u4f1a\u4e22\u5f03\u5df2\u6709\u7684\u4e00\u4e9b\u4fe1\u606f, \u5982\u7f13\u51b2\u533a\u6570\u636e, \u53c8\u6bd4\u5982TCP\u4fdd\u6d3b\u673a\u5236+\u68c0\u6d4b\u5230\u5bf9\u65b9\u4e0d\u53ef\u8fbe)\\n  - TCP\u63a5\u6536\u5230\u4e00\u4e2a\u6839\u672c\u4e0d\u5b58\u5728\u7684\u8fde\u63a5\u4e0a\u7684\u5206\u8282\u3002(\u4f8b\u5982\u5df2\u7ecf\u5173\u95ed\u53c8\u6536\u5230)\\n\\n\u9664\u4e86index\u548cabs SeqNo\u8f6c\u6362,\u8fd8\u6709\u5c31\u662fwindow size\u7684\u8bbe\u7f6e(\u4f9d\u8d56\u4e8e\u53ef\u7528\u7a7a\u95f4\u7684\u68c0\u6d4b)\u548cISN\u7684\u8bbe\u7f6e, RST\u7684\u5904\u7406, \u6700\u540e\u7684\u4ee3\u7801\u5982\u4e0b\\n\\n```cpp\\n#include \\"tcp_receiver.hh\\"\\n#include \\"tcp_sender_message.hh\\"\\n#include \\"wrapping_integers.hh\\"\\n#include <cstdint>\\n\\nusing namespace std;\\n\\nvoid TCPReceiver::receive( TCPSenderMessage message )\\n{\\n  // Your code here.\\n  (void)message;\\n  if ( message.SYN ) {\\n    isn_ = Wrap32( message.seqno );\\n  }\\n  if ( message.RST ) {\\n    reassembler_.reader().set_error();\\n  }\\n  if ( !isn_ ) {\\n    return;\\n  }\\n  uint64_t checkpoint = reassembler_.get_next_index();\\n  // 1: SYN\\n  uint64_t data_index = message.seqno.unwrap( isn_.value(), checkpoint ) + message.SYN - 1;\\n  reassembler_.insert( data_index, message.payload, message.FIN );\\n}\\n\\nTCPReceiverMessage TCPReceiver::send() const\\n{\\n  // Your code here.\\n  // return {};\\n  TCPReceiverMessage msg;\\n  msg.window_size = reassembler_.writer().available_capacity() > UINT16_MAX\\n                      ? UINT16_MAX\\n                      : reassembler_.writer().available_capacity();\\n  // +1: SYN seqNo\\n  if ( reassembler_.writer().has_error() ) {\\n    msg.RST = true;\\n  }\\n  if ( !isn_.has_value() ) {\\n    return msg;\\n  }\\n\\n  msg.ackno\\n    = Wrap32::wrap( reassembler_.writer().bytes_pushed() + 1 + reassembler_.writer().is_closed(), isn_.value() );\\n  return msg;\\n}\\n\\n```\\n\\n\\n\\n### Lab3\\n\\n\u8fd9\u4e2alab\u8981\u6c42\u5b9e\u73b0\u53d1\u9001\u7aefTCP Sender, \u4e3b\u8981\u662f\u5bf9\u6839\u636ewindow size\u7b49\u8fdb\u884c\u5206\u5305\u88c5\u5305\u5e76\u53d1\u9001\\n\\n\u6709\u4e00\u8bf4\u4e00, \u6587\u6863\u867d\u7136\u633a\u8be6\u7ec6\u4e86, \u4f46\u6709\u5730\u65b9\u8fd8\u662f\u4e0d\u662f\u5f88\u6e05\u695a\\n\\n\u57fa\u672c\u4e0a\u51e0\u4e2a\u51fd\u6570\u91cc\u9762\u600e\u4e48\u5199\u6587\u6863\u91cc\u90fd\u8bb2\u4e86\\n\\n\u653e\u4e2a\u4e2a\u4eba\u5b9e\u73b0\u5427\\n\\n\\n\\n\u53ef\u80fd\u9700\u8981\u6ce8\u610f\u7684\u662f\u51e0\u4e2a\u5730\u65b9:\\n\\n- `TCPConfig::MAX_PAYLOAD_SIZE`\u53ea\u8ba1\u7b97data\u7684payload, SYN,FIN\u4e0d\u8ba1\u7b97\u5728\u91cc\u9762\\n- \u5982\u679c\u6709\u521a\u597d\u653e\u4e0d\u4e0bFIN\u7684, \u6309\u7167\u6d4b\u8bd5\u7684\u60f3\u6cd5\u662f\u9700\u8981\u5728\u4e0b\u4e00\u6b21push\u4f20, \u4e0d\u80fd\u7b49\u5f85tick\u91cd\u4f20\u7b49\\n- \u548c\u4e0a\u9762\\"\u521a\u597d\u653e\u4e0d\u4e0b\\"\u5bf9\u5e94, receive\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u4e0d\u53d8\u7684seqNo, \u4f46window size\u6539\u53d8, \u9700\u8981\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\u5e76\u5904\u7406\\n- \u540c\u65f6, \u6839\u636e\u6d4b\u8bd5\u5f97, receive\u5bf9\u4f20\u5165\u7684seqno\u505a\u6821\u9a8c, \u4f46\u4e0d\u5bf9window size\u505a\u6821\u9a8c, \u4e5f\u5c31\u662f\u6539\u53d8window size\u548cseqNo\u600e\u4e48\u6837\u6ca1\u6709\u5173\u7cfb, \u5176\u5b9e\u7ec6\u60f3\u4e5f\u662f\u5408\u7406\u7684, \u6d4b\u8bd5\u7ed9\u4e86\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u5728\u8fde\u63a5\u5f00\u59cb\u65f6receive\u4e86\u4e00\u4e2aseqNo\u4e3a\u7a7a, \u4f46\u6539\u53d8window size\\n- \u4e0d\u7528\u62c5\u5fc3RST, \u8fd9\u91cc\u57fa\u672c\u6ca1\u6709\u5bf9\u5b83\u8fdb\u884c\u4e25\u683c\u6d4b\u8bd5\\n- \u6ce8\u610f\u6587\u6863\u91cc\u9762\u5199\u7684 window size\u4e3a0 \u7684\u7279\u6b8a\u60c5\u51b5\u4ec5\u5728push\u4e2d\u6210\u7acb, \u5e76\u4e14\u7279\u6b8a\u60c5\u51b5\u4e5f\u53ea\u662f\u6539\u53d8window size\u800c\u4e0d\u662f\u59cb\u7ec8\u67091\u7684\u5bb9\u91cf\u53d1(\u4e2d\u95f4\u5360\u4e86\u5c31\u4e0d\u884c)\\n- `make_empty_message()`\u53ea\u662f\u6d4b\u8bd5\u7528\u7684, \u8bbe\u7f6e\u597dseqno\u5c31\u884c\\n- \u591a\u6ce8\u610f\u6d4b\u8bd5\u4e2d\u4ec0\u4e48\u65f6\u5019push\u548cclose\u7ba1\u9053\u4e86\\n\\n\\n\\n```cpp\\n#include \\"tcp_sender.hh\\"\\n#include \\"byte_stream.hh\\"\\n#include \\"tcp_config.hh\\"\\n#include \\"tcp_sender_message.hh\\"\\n#include \\"wrapping_integers.hh\\"\\n#include <algorithm>\\n#include <cassert>\\n#include <iostream>\\nusing namespace std;\\n\\nuint64_t TCPSender::sequence_numbers_in_flight() const\\n{\\n  // Your code here.\\n  return next_send_segno - received_max_ackno;\\n}\\n\\nuint64_t TCPSender::consecutive_retransmissions() const\\n{\\n  // Your code here.\\n  return timer.get_consecutive_retransmissions();\\n}\\n\\nvoid TCPSender::push( const TransmitFunction& transmit )\\n{\\n  // Your code here.\\n\\n  uint64_t has_pushed = 0;\\n  bool finished = false;\\n  std::cerr << \\"--- Push Start\\" << std::endl;\\n  if ( finish_send ) {\\n    return;\\n  }\\n\\n  if ( input_.reader().is_finished() && !finish_send && sequence_numbers_in_flight() < cur_window_size ) {\\n    // HINT: extra fin not send\\n    cerr << \\"extra fin\\" << endl;\\n    auto msg = make_empty_message();\\n    msg.FIN = true;\\n    if ( next_send_segno == 0 ) {\\n      msg.SYN = true;\\n    }\\n    outstanding_segs.push( { next_send_segno, msg } );\\n    next_send_segno += msg.sequence_length();\\n    finish_send = true;\\n    transmit( msg );\\n    return;\\n  }\\n\\n  if ( !timer.is_active() ) {\\n    timer.start();\\n  }\\n  // HINT: window size == 0 \'s push special case\\n  auto fake_window_size = cur_window_size == 0 ? 1 : cur_window_size;\\n  auto cur_space\\n    = fake_window_size > sequence_numbers_in_flight() ? fake_window_size - sequence_numbers_in_flight() : 0;\\n\\n  while ( has_pushed < cur_space && !finished ) {\\n    TCPSenderMessage msg;\\n    if ( next_send_segno == 0 ) {\\n      msg.SYN = true;\\n    }\\n    if ( input_.has_error() ) {\\n      msg.RST = true;\\n    }\\n    if ( cur_space - has_pushed > TCPConfig::MAX_PAYLOAD_SIZE + msg.SYN ) {\\n      // NOTE: window space > payload\\n      uint16_t pkg_sz = TCPConfig::MAX_PAYLOAD_SIZE;\\n      read( input_.reader(), pkg_sz, msg.payload );\\n      if ( input_.reader().is_finished() ) {\\n        msg.FIN = true;\\n      }\\n    } else {\\n      // NOTE: window limit seqno gap instead of actual payload bytes\\n      uint16_t pkg_sz = cur_space - has_pushed - msg.SYN;\\n      if ( input_.reader().bytes_buffered() < pkg_sz ) {\\n        read( input_.reader(), input_.reader().bytes_buffered(), msg.payload );\\n        msg.FIN = input_.reader().is_finished();\\n      } else {\\n        // HINT:for == case, FIN can\'t be send during this push. The **test points** that it should be pushed in\\n        // next call of push() if window has enough space (instead of placing it in outstanding segments or other\\n        // solutions)\\n        read( input_.reader(), pkg_sz, msg.payload );\\n      }\\n    }\\n    if ( msg.FIN ) {\\n      finished = true;\\n      finish_send = true;\\n    }\\n\\n    msg.seqno = Wrap32( isn_ + next_send_segno );\\n\\n    if ( msg.sequence_length() == 0 ) {\\n      // nothing to send\\n      break;\\n    }\\n    // update outstanding\\n    outstanding_segs.push( { next_send_segno, msg } );\\n\\n    // update next_send\\n    next_send_segno += msg.sequence_length();\\n\\n    std::cerr << \\"Send: \\" << msg << std::endl;\\n    // send msg\\n    transmit( msg );\\n    has_pushed += msg.sequence_length();\\n  }\\n  std::cerr << \\"--- Push End\\" << std::endl;\\n}\\n\\nTCPSenderMessage TCPSender::make_empty_message() const\\n{\\n  // Your code here.\\n  TCPSenderMessage msg;\\n  msg.seqno = Wrap32( isn_ + next_send_segno );\\n  msg.RST = input_.has_error();\\n  return msg;\\n}\\n\\nvoid TCPSender::receive( const TCPReceiverMessage& msg )\\n{\\n  // Your code here.\\n  (void)msg;\\n  if ( msg.RST ) {\\n    this->writer().set_error();\\n    timer.reset_all();\\n    while ( !outstanding_segs.empty() )\\n      outstanding_segs.pop();\\n  }\\n  if ( msg.ackno.has_value() ) {\\n    uint64_t abs_seq = msg.ackno->unwrap( this->isn_, writer().bytes_pushed() );\\n    // HINT: check if valid\\n    if ( abs_seq > received_max_ackno && abs_seq <= next_send_segno ) {\\n      // fully received, remove it\\n      while ( !outstanding_segs.empty()\\n              && outstanding_segs.top().abs_seq + outstanding_segs.top().msg.sequence_length() <= abs_seq ) {\\n        std::cerr << \\"Receive: \\" << outstanding_segs.top().msg << std::endl;\\n        outstanding_segs.pop();\\n      }\\n      received_max_ackno = abs_seq;\\n      timer.reset_all();\\n      timer.start();\\n    }\\n  }\\n  // HINT: not validate the window size change\\n  cerr << \\"change window size to: \\" << msg.window_size << endl;\\n  cur_window_size = msg.window_size;\\n}\\n\\nvoid TCPSender::tick( uint64_t ms_since_last_tick, const TransmitFunction& transmit )\\n{\\n  // Your code here.\\n  (void)ms_since_last_tick;\\n  (void)transmit;\\n  bool expired = timer.update( ms_since_last_tick );\\n  if ( !expired ) {\\n    // cerr << \\"Not expired\\" << endl;\\n    return;\\n  }\\n  // retransmit earliest seg\\n  if ( !outstanding_segs.empty() ) {\\n    auto [_, msg] = outstanding_segs.top();\\n    transmit( msg );\\n    std::cerr << \\"Retransmit: \\" << msg << std::endl;\\n    if ( cur_window_size != 0 ) {\\n      // i. keep track of retransmission\\n      timer.add_consecutive_retransmissions();\\n      // ii. double the RTO and restart the timer\\n      timer.set_rto( 2 * timer.get_rto() );\\n      cerr << \\"Doubled RTO with window size \\" << cur_window_size << endl;\\n    }\\n    // reset the time and start\\n    timer.clear_timer();\\n    timer.start();\\n  }\\n}\\n\\n```\\n\\n\\n\\n```cpp\\n#pragma once\\n\\n#include \\"byte_stream.hh\\"\\n#include \\"retransmit_timer.hh\\"\\n#include \\"tcp_receiver_message.hh\\"\\n#include \\"tcp_sender_message.hh\\"\\n#include \\"wrapping_integers.hh\\"\\n\\n#include <cstdint>\\n#include <functional>\\n#include <list>\\n#include <memory>\\n#include <optional>\\n#include <ostream>\\n#include <queue>\\n\\nclass TCPSender\\n{\\npublic:\\n  /* Construct TCP sender with given default Retransmission Timeout and possible ISN */\\n  TCPSender( ByteStream&& input, Wrap32 isn, uint64_t initial_RTO_ms )\\n    : input_( std::move( input ) )\\n    , isn_( isn )\\n    , outstanding_segs()\\n    , received_max_ackno( 0 )\\n    , next_send_segno( 0 )\\n    , cur_window_size( 1 )\\n    , timer( initial_RTO_ms )\\n    , finish_send( false )\\n  {}\\n\\n  /* Generate an empty TCPSenderMessage */\\n  TCPSenderMessage make_empty_message() const;\\n\\n  /* Receive and process a TCPReceiverMessage from the peer\'s receiver */\\n  void receive( const TCPReceiverMessage& msg );\\n\\n  /* Type of the `transmit` function that the push and tick methods can use to send messages */\\n  using TransmitFunction = std::function<void( const TCPSenderMessage& )>;\\n\\n  /* Push bytes from the outbound stream */\\n  void push( const TransmitFunction& transmit );\\n\\n  /* Time has passed by the given # of milliseconds since the last time the tick() method was called */\\n  void tick( uint64_t ms_since_last_tick, const TransmitFunction& transmit );\\n\\n  // Accessors\\n  uint64_t sequence_numbers_in_flight() const;  // How many sequence numbers are outstanding?\\n  uint64_t consecutive_retransmissions() const; // How many consecutive *re*transmissions have happened?\\n  Writer& writer() { return input_.writer(); }\\n  const Writer& writer() const { return input_.writer(); }\\n\\n  // Access input stream reader, but const-only (can\'t read from outside)\\n  const Reader& reader() const { return input_.reader(); }\\n\\nprivate:\\n  // Variables initialized in constructor\\n  ByteStream input_;\\n  Wrap32 isn_;\\n  struct outstanding_pair\\n  {\\n    uint64_t abs_seq;\\n    TCPSenderMessage msg;\\n    // priority less, abs_seq greater\\n    bool operator<( const outstanding_pair& rhs ) const { return abs_seq > rhs.abs_seq; }\\n  };\\n  std::priority_queue<outstanding_pair> outstanding_segs;\\n  uint64_t received_max_ackno;\\n  uint64_t next_send_segno;\\n  uint64_t cur_window_size;\\n  RetransmitTimer timer;\\n  bool finish_send;\\n};\\n\\n```\\n\\n```cpp\\n#pragma once\\n#include <stdexcept>\\n#include <stdint.h>\\nclass RetransmitTimer\\n{\\n  uint64_t cur_timer_ms_;\\n  uint64_t consecutive_retransmissions;\\n  const uint64_t initial_RTO_ms_;\\n  uint64_t cur_RTO_ms_;\\n  bool active;\\n\\npublic:\\n  RetransmitTimer( uint64_t initial_RTO_ms )\\n    : cur_timer_ms_( 0 )\\n    , consecutive_retransmissions( 0 )\\n    , initial_RTO_ms_( initial_RTO_ms )\\n    , cur_RTO_ms_( initial_RTO_ms )\\n    , active( false )\\n  {}\\n  uint64_t get_time_ms_() const { return cur_timer_ms_; }\\n\\n  // return if expired\\n  bool update( uint64_t ms_since_last_tick )\\n  {\\n    if ( !active ) {\\n      throw std::runtime_error( \\"try to update when timer is not active\\" );\\n    }\\n    cur_timer_ms_ += ms_since_last_tick;\\n    return cur_timer_ms_ >= cur_RTO_ms_;\\n  }\\n  void start() { active = true; }\\n  void stop() { active = false; }\\n  // getter & setter\\n  uint64_t get_rto() { return cur_RTO_ms_; }\\n  uint64_t get_init_rto() const { return initial_RTO_ms_; }\\n  uint64_t get_consecutive_retransmissions() const { return consecutive_retransmissions; }\\n  void set_rto( uint64_t rto ) { cur_RTO_ms_ = rto; }\\n  void clear_timer()\\n  {\\n    cur_timer_ms_ = 0;\\n    active = false;\\n  }\\n  void set_consecutive_retransmissions( uint64_t num ) { consecutive_retransmissions = num; }\\n  void add_consecutive_retransmissions() { consecutive_retransmissions++; }\\n  void reset_rto() { cur_RTO_ms_ = initial_RTO_ms_; }\\n  void reset_all()\\n  {\\n    cur_RTO_ms_ = initial_RTO_ms_;\\n    consecutive_retransmissions = 0;\\n    cur_timer_ms_ = 0;\\n    active = false;\\n  }\\n  bool is_active() const { return active; }\\n};\\n\\n```\\n\\n\\n\\n\\n\\n### Lab4\\n\\n\u8fd9\u4e2alab\u8981\u6c42\u628a\u524d\u9762\u7684\u7ec4\u5408\u8d77\u6765, \u6d4b\u8bd5\u4e00\u4e0bLab1-3\u6784\u5efa\u7684tcp stack\u80fd\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c, \u66ff\u6362Lab0\u4e2d\u7684TCPStack\u4e3a\u81ea\u5df1\u7684native\u7248\u672c\\n\\ncheckpoint4\u597d\u50cf\u6d4b\u4e0d\u4e86\\n\\n\u4e00\u65b9\u9762\u4e0d\u662f\u5f88\u786e\u5b9a\u5b83\u8fd9\u4e2atun\u811a\u672c\u5728\u6211\u7684\u7535\u8111\u4e0a\u7684\u517c\u5bb9\u6027, \u53e6\u4e00\u65b9\u9762webget\u4ed6\u7684\u7f51\u7ad9\u662f\u5899\u7684( , \u8dd1\u6d4b\u8bd5\u5168\u662f\u91cd\u4f20\u91cd\u4f20\\n\\n\u770b\u6587\u6863\u4e0b\u9762\u53ef\u4ee5\u6709`./build/tcp_ipv4`\u548c`./build/tcp_native`\u53ef\u4ee5\u88c5\u6a21\u4f5c\u6837\u7684\u81ea\u5df1\u8fde\u81ea\u5df1, \u6211\u53cd\u6b63\u80fd\u8fde\u901a\u5c31\u5f53\u662f\u8dd1\u901a\u4e86(\u4e50)\\n\\n\\n\\n\u5173\u4e8e\u4ed6\u7684TUN\u6e90\u7801\u9605\u8bfb: TODO\\n\\n\\n\\n### Lab5\\n\\n\u8fd9\u4e2alab\u8981\u6c42\u5b9e\u73b0IP\u5c42\u4e4b\u4e2d\u7684ARP(Address Resolution Protocol)\u7684\u7b80\u5316\u7248\u672c, \u5305\u62ec\u6536\u53d1\u6d88\u606f\u548c\u8d85\u65f6\u5220\u9664\u7b49, \u4f46\u5bf9\u4e8e\u4e00\u4e9b\u73b0\u5b9e\u4e4b\u4e2d\u7684\u5176\u4ed6\u673a\u5236(\u4f8b\u5982\u8d85\u65f6\u91cd\u53d1\u548cICMP\u56de\u4fe1\u6ca1\u6709\u8981\u6c42)\\n\\n\u770b\u61c2\u4e86\u4ed6\u7684\u4ee3\u7801\u4e4b\u540e\u8fd9\u4e2alab\u5c31\u5f88\u7b80\u5355\u4e86, \u4e3b\u8981\u4ed6\u5df2\u7ecf\u628a\u8f85\u52a9\u51fd\u6570\u90fd\u5199\u5b8c\u4e86(\u8fd9\u4e2a`parse`\u548c`serialize`\u7684\u5b9e\u73b0\u786e\u5b9e\u5f88\u6f02\u4eae, \u4e5f\u7b97\u662f\u5c55\u793a\u4e86cpp\u4e4b\u4e2d\u7684Duck Type\u600e\u4e48\u505a), \u518d\u52a0\u4e0a\u975e\u5e38\u8be6\u7ec6\u7684\u6587\u6863\u548c\u6ce8\u91ca\u8fd8\u6709\u53ef\u4ee5\u4f5c\u4e3a\u6ce8\u91ca\u76f4\u63a5\u8bfb\u7684\u6e90\u4ee3\u7801\\n\\n\u4e5f\u6ca1\u4ec0\u4e48\u8981\u6ce8\u610f\u7684\u5730\u65b9, \u552f\u4e00\u53ef\u4ee5\u6ce8\u610f\u4e0b\u7684\u662f\u5728`recv_frame` \u4e4b\u4e2d, \u53ea\u66f4\u65b0sender\u7684`ip, ethernet_addr`\u5bf9, \u4e0d\u7ba1target\u7684\\n\\n\\n\\n\u8d34\u4e2a\u4ee3\u7801\\n\\n```cpp\\n//......\\n\\nprivate:\\n  // ......\\n  std::vector<std::pair<InternetDatagram, Address>> datagrams_to_send_ {};\\n  std::map<Address, std::pair<EthernetAddress, uint64_t>> arp_table_;\\n  std::map<Address, std::optional<uint64_t>> arp_time_table_;\\n  uint64_t now_;\\n};\\n\\n```\\n\\n```cpp\\n#include <iostream>\\n#include <optional>\\n#include <stdexcept>\\n#include <utility>\\n\\n#include \\"address.hh\\"\\n#include \\"arp_message.hh\\"\\n#include \\"ethernet_frame.hh\\"\\n#include \\"ethernet_header.hh\\"\\n#include \\"exception.hh\\"\\n#include \\"ipv4_datagram.hh\\"\\n#include \\"network_interface.hh\\"\\n#include \\"parser.hh\\"\\n\\nusing namespace std;\\n\\n//! \\\\param[in] ethernet_address Ethernet (what ARP calls \\"hardware\\") address of the interface\\n//! \\\\param[in] ip_address IP (what ARP calls \\"protocol\\") address of the interface\\nNetworkInterface::NetworkInterface( string_view name,\\n                                    shared_ptr<OutputPort> port,\\n                                    const EthernetAddress& ethernet_address,\\n                                    const Address& ip_address )\\n  : name_( name )\\n  , port_( notnull( \\"OutputPort\\", move( port ) ) )\\n  , ethernet_address_( ethernet_address )\\n  , ip_address_( ip_address )\\n  , arp_table_()\\n  , arp_time_table_()\\n  , now_( 0 )\\n{\\n  cerr << \\"DEBUG: Network interface has Ethernet address \\" << to_string( ethernet_address ) << \\" and IP address \\"\\n       << ip_address.ip() << \\"\\\\n\\";\\n}\\n\\n//! \\\\param[in] dgram the IPv4 datagram to be sent\\n//! \\\\param[in] next_hop the IP address of the interface to send it to (typically a router or default gateway, but\\n//! may also be another host if directly connected to the same network as the destination) Note: the Address type\\n//! can be converted to a uint32_t (raw 32-bit IP address) by using the Address::ipv4_numeric() method.\\nvoid NetworkInterface::send_datagram( const InternetDatagram& dgram, const Address& next_hop )\\n{\\n  // Your code here.\\n  (void)dgram;\\n  (void)next_hop;\\n\\n  if ( next_hop != ip_address_ && !arp_table_.contains( next_hop ) ) {\\n    cout << \\"Wait \\" << next_hop.to_string() << \\" for arp response\\" << endl;\\n    // ARP broadcast\\n    if ( !arp_time_table_.contains( next_hop ) ) {\\n      arp_time_table_[next_hop] = std::nullopt;\\n    }\\n    if ( arp_time_table_[next_hop].has_value() && now_ - arp_time_table_[next_hop].value() < 5000 ) {\\n      // < 5s from last arp broadcast\\n      datagrams_to_send_.push_back( { dgram, next_hop } ); // wait for arp table update and send.\\n      return;\\n    }\\n    // arp broadcast\\n    arp_time_table_[next_hop] = now_;\\n    EthernetHeader header { .dst = ETHERNET_BROADCAST, .src = ethernet_address_, .type = EthernetHeader::TYPE_ARP };\\n    ARPMessage msg { .opcode = ARPMessage::OPCODE_REQUEST,\\n                     .sender_ethernet_address = ethernet_address_,\\n                     .sender_ip_address = ip_address_.ipv4_numeric(),\\n                     .target_ip_address = next_hop.ipv4_numeric() };\\n    auto payload = serialize<ARPMessage>( msg );\\n    EthernetFrame frame { .header = header, .payload = payload };\\n    datagrams_to_send_.push_back( { dgram, next_hop } ); // wait for arp table update and send.\\n    output().transmit( *this, frame );\\n\\n    return;\\n  }\\n\\n  EthernetAddress dst_ethernet_addr;\\n  if ( next_hop == ip_address_ ) {\\n    dst_ethernet_addr = ethernet_address_;\\n  } else {\\n    dst_ethernet_addr = arp_table_.at( next_hop ).first;\\n  }\\n  // cout << \\"send datagram to \\" << next_hop.to_string() << \\" with ethernet address \\" << to_string(\\n  // dst_ethernet_addr )\\n  //      << endl;\\n  EthernetHeader header { .dst = dst_ethernet_addr, .src = ethernet_address_, .type = EthernetHeader::TYPE_IPv4 };\\n\\n  auto payload = serialize<InternetDatagram>( dgram );\\n  EthernetFrame frame { .header = header, .payload = payload };\\n  output().transmit( *this, frame );\\n}\\n\\n//! \\\\param[in] frame the incoming Ethernet frame\\nvoid NetworkInterface::recv_frame( const EthernetFrame& frame )\\n{\\n  // Your code here.\\n  (void)frame;\\n  if ( frame.header.dst != ethernet_address_ && frame.header.dst != ETHERNET_BROADCAST ) {\\n    return;\\n  }\\n  // cout << \\"recv frame\\" << endl;\\n  bool ok = false;\\n  if ( frame.header.type == EthernetHeader::TYPE_IPv4 ) {\\n    InternetDatagram received_ipv4;\\n    ok = parse<InternetDatagram>( received_ipv4, frame.payload );\\n    if ( ok ) {\\n      datagrams_received_.push( received_ipv4 );\\n    }\\n  } else if ( frame.header.type == EthernetHeader::TYPE_ARP ) {\\n    ARPMessage received_arp;\\n    ok = parse<ARPMessage>( received_arp, frame.payload );\\n    if ( !ok ) {\\n      std::cerr << \\"Incorrect arp message\\" << std::endl;\\n    }\\n    Address sender_ip = Address::from_ipv4_numeric( received_arp.sender_ip_address );\\n    arp_table_.insert( std::make_pair( sender_ip, std::make_pair( received_arp.sender_ethernet_address, now_ ) ) );\\n    arp_time_table_.insert( { sender_ip, now_ } );\\n\\n    // cout << \\"update \\" << ip_address_.ip() << \\"\'s table from arp response: \\" << sender_ip.ip() << \\" -> \\"\\n    //      << to_string( received_arp.sender_ethernet_address ) << endl;\\n    // cout << \\"Waiting datagrams: \\" << datagrams_to_send_.size() << endl;\\n    for ( auto it = datagrams_to_send_.begin(); it != datagrams_to_send_.end(); ) {\\n      // cout << \\"check \\" << ip.to_string() << endl;\\n      auto [d, ip] = *it;\\n      if ( sender_ip == ip ) {\\n        // std::cerr << \\"send \\" << ip.ipv4_numeric() << std::endl;\\n        send_datagram( d, ip );\\n        it = datagrams_to_send_.erase( it );\\n      } else {\\n        it++;\\n      }\\n    }\\n    if ( received_arp.opcode == ARPMessage::OPCODE_REQUEST\\n         && received_arp.target_ip_address == ip_address_.ipv4_numeric() ) {\\n      ARPMessage respond;\\n      respond.target_ethernet_address = received_arp.sender_ethernet_address;\\n      respond.target_ip_address = received_arp.sender_ip_address;\\n      respond.sender_ip_address = ip_address_.ipv4_numeric();\\n      respond.sender_ethernet_address = ethernet_address_;\\n      respond.opcode = ARPMessage::OPCODE_REPLY;\\n      EthernetHeader respond_header {\\n        .dst = respond.target_ethernet_address, .src = ethernet_address_, .type = EthernetHeader::TYPE_ARP };\\n      EthernetFrame respond_frame { .header = respond_header, .payload = serialize<ARPMessage>( respond ) };\\n      output().transmit( *this, respond_frame );\\n    }\\n  } else {\\n    throw std::runtime_error( \\"Not Implemented\\" );\\n  }\\n}\\n\\n//! \\\\param[in] ms_since_last_tick the number of milliseconds since the last call to this method\\nvoid NetworkInterface::tick( const size_t ms_since_last_tick )\\n{\\n  // Your code here.\\n  (void)ms_since_last_tick;\\n  now_ += ms_since_last_tick;\\n  cout << \\"tick \\" << ms_since_last_tick << endl;\\n  for ( auto it = arp_table_.begin(); it != arp_table_.end(); ) {\\n    if ( now_ - it->second.second >= 30000 ) {\\n      // expired\\n\\n      for ( auto to_send_it = datagrams_to_send_.begin(); to_send_it != datagrams_to_send_.end(); ) {\\n        if ( to_send_it->second == it->first ) {\\n          to_send_it = datagrams_to_send_.erase( to_send_it );\\n        } else {\\n          to_send_it++;\\n        }\\n      }\\n      it = arp_table_.erase( it );\\n\\n    } else {\\n      it++;\\n    }\\n  }\\n}\\n\\n```\\n\\n\\n\\n### Lab6\\n\\n\u8fd9\u4e2alab\u8981\u5728lab5\u7684\u57fa\u7840\u4e0a\u5199\u4e2arouter(\u4e0d\u5305\u62ec\u5efa\u8868\u7b97\u6cd5, \u5047\u8bbe\u8868\u5df2\u7ecf\u5efa\u597d, \u5199follow\u8868\u7684\u90e8\u5206)\\n\\n\u6709\u4e00\u4e2a\u5927\u5751\\n\\n\u8fd9\u4e2atransmit\u4e4b\u540e\u505a\u68c0\u67e5\u5728\u6a21\u62df\u7f51\u7edc\u91cc\u9762\u662f\u7acb\u5373\u53d1\u751f\u7684\u4e8b\u60c5\u800c\u4e0d\u662f\u4e00\u4e2a\\"\u5f02\u6b65\u64cd\u4f5c\\", \u6240\u4ee5\u5982\u679c\u5148transmit, \u518d\u4fee\u6539\u672c\u5730, \u6bd4\u5982\u8fd9\u6837\\n\\n```cpp\\n    output().transmit( *this, frame );\\n    datagrams_to_send_.push_back( { dgram, next_hop } ); // wait for arp table update and send.\\n```\\n\\n\u5728checkpoint5\u4e4b\u4e2d\u6ca1\u6709\u4efb\u4f55\u95ee\u9898, \u4f46\u5728checkpoint6\u4e4b\u4e2d\u5c31\u4f1a\u4e00\u76f4\u5224\u65ad`datagrams_to_send_`\u662f\u7a7a, \u4ece\u800c\u4e00\u76f4\u62a5`not received`\\n\\n(\u4e5f\u5c31\u662ftransmit\u4e86arp req, \u518d\u8fd4\u56de\u4e86 arp res, \u6b64\u65f6\u7b49\u5f85\u7684datagrams\u8fd8\u6ca1\u6709\u88ab\u66f4\u65b0)\\n\\n\\n\\n\u8fd8\u6709\u51e0\u4e2a\u6211\u6389\u8fdb\u53bb\u7684\u5751\u70b9\\n\\n\u4e00\u4e2a\u662f` datagrams_received()`\u8fd4\u56de\u7684\u5f15\u7528\u5982\u679c\u76f4\u63a5\u7528`auto`\u63a5, auto\u63a5\u5f15\u7528\u4f1a\u8f6c\u6362\u6210\u526f\u672c, \u540e\u9762\u5c31\u4f1a\u51fa\u9519, \u5e76\u4e14\u6781\u5176\u96bede\\n\\n\u53e6\u4e00\u4e2a\u662f\u4e00\u4e2ainterface\u4e0b\u53ef\u4ee5\u6709\u591a\u4e2ahost, \u6240\u4ee5\u5728\u5b58\u7684\u65f6\u5019\u9700\u8981\u628a\u540c\u4e00\u4e2arule\u4e0b\u7684\u4e0d\u540c\u7684next_hop\u5b58\u597d,\u800c\u4e0d\u662f\u76f4\u63a5insert\\n\\n\\n\\n\u5176\u5b9e\u5f00\u59cb\u7684\u65f6\u5019\u6211\u4e00\u76f4\u6ca1\u641e\u6e05\u695a\u4e3a\u5565\u6446\u4e86\u4e00\u4e2a`void route(void)` , \u6211\u7684\u60f3\u6cd5\u603b\u662f`void route(const InternetDatagram& dgram)`\\n\\n\u540e\u6765\u624d\u60f3\u660e\u767d\u4ed6\u662f\u8981\u5bf9receive\u7684\u6570\u636e\u5305\u505a\u5904\u7406, \u6bcf\u4e00\u4e2aNetworkInterface\u5c31\u7b49\u6548\u4e8erouter\u7684\u4e00\u4e2a\u51fa\u5165\u53e3, \u800c\u4e0d\u662f\u67d0\u79cd\u7ec8\u7aef, \u6240\u4ee5\u6536\u5305\u4e4b\u540e\u9700\u8981\u8fc7\u8def\u7531\\n\\n> There\u2019s a beauty (or at least a successful abstraction) in the Internet\u2019s design here: the router never thinks about TCP, about ARP, or about Ethernet frames. The router doesn\u2019t even know what the link layer looks like. The router only thinks about Internet datagrams, and only interacts with the link layer through the NetworkInterface\\n> abstraction. When it comes to questions like, \u201cHow are link-layer addresses resolved?\u201d or \u201cDoes the link layer even have its own addressing scheme distinct from IP?\u201d or \u201cWhat\u2019s the format of the link-layer frames?\u201d or \u201cWhat\u2019s the meaning of the datagram\u2019s payload?\u201d, **the router just doesn\u2019t care.**\\n\\n\u8fd9\u91cc\u76f8\u5f53\u4e8e\u8f6f\u4ef6\u4e0a\u8f6e\u8be2\u6bcf\u4e2a\u63a5\u53e3\u6a21\u62df\u4e00\u4e2a\u786c\u4ef6\u4e0a\u7684\u6536\u5305\\n\\n\u4ee3\u7801\u5012\u662f\u5f88\u7b80\u5355, \u6bd5\u7adf\u6ca1\u8981\u6c42\u524d\u7f00\u6811\u4e4b\u7c7b, \u5c31\u76f4\u63a5\u7b80\u5355\u5316\u4e86\\n\\n```cpp\\n#include \\"router.hh\\"\\n#include \\"address.hh\\"\\n#include \\"ipv4_datagram.hh\\"\\n\\n#include <algorithm>\\n#include <iostream>\\n#include <optional>\\n#include <stdexcept>\\n\\nusing namespace std;\\n\\nbool Router::match( uint32_t address, const RuleKey& r ) const\\n{\\n  if ( r.len > 32 ) {\\n    throw std::runtime_error( \\"Invalid len\\" );\\n  }\\n  uint32_t mask = 0xFFFFFFFF;\\n  for ( int i = 0; i < 32 - r.len; ++i ) {\\n    mask <<= 1;\\n  }\\n  // cout << \\"DEBUG: mask: \\" << mask << \\"Rule: \\" << r.rule << endl;\\n\\n  return ( address & mask ) == ( r.rule & mask );\\n}\\n\\n// route_prefix: The \\"up-to-32-bit\\" IPv4 address prefix to match the datagram\'s destination address against\\n// prefix_length: For this route to be applicable, how many high-order (most-significant) bits of\\n//    the route_prefix will need to match the corresponding bits of the datagram\'s destination address?\\n// next_hop: The IP address of the next hop. Will be empty if the network is directly attached to the router (in\\n//    which case, the next hop address should be the datagram\'s final destination).\\n// interface_num: The index of the interface to send the datagram out on.\\nvoid Router::add_route( const uint32_t route_prefix,\\n                        const uint8_t prefix_length,\\n                        const optional<Address> next_hop,\\n                        const size_t interface_num )\\n{\\n  cerr << \\"DEBUG: adding route \\" << Address::from_ipv4_numeric( route_prefix ).ip() << \\"/\\"\\n       << static_cast<int>( prefix_length ) << \\" => \\" << ( next_hop.has_value() ? next_hop->ip() : \\"(direct)\\" )\\n       << \\" on interface \\" << interface_num << \\"\\\\n\\";\\n\\n  // Your code here.\\n  _rules[{ route_prefix, prefix_length }].interface_num = interface_num;\\n  _rules[{ route_prefix, prefix_length }].next_hop.push_back( next_hop );\\n}\\n\\n// Go through all the interfaces, and route every incoming datagram to its proper outgoing interface.\\nvoid Router::route()\\n{\\n  // Your code here.\\n  // cout << \\"DEBUG: routing from \\" << _rules.size() << \\"rules and \\" << _interfaces.size() << \\" interfaces\\" << endl;\\n  for ( auto interface : _interfaces ) {\\n    // NOTE: & is important\\n    auto& queue = interface->datagrams_received();\\n    while ( !queue.empty() ) {\\n      auto datagram = queue.front();\\n\\n      cout << interface->name() << \\" received datagram \\" << datagram.header.to_string() << endl;\\n      cout << endl << endl;\\n      queue.pop();\\n      if ( datagram.header.ttl <= 1 ) {\\n\\n        continue;\\n      }\\n      // decrease ttl and re-calculate the checksum\\n      datagram.header.ttl--;\\n      datagram.header.compute_checksum();\\n      // route: find the interface to send next\\n      RuleKey target_key = {};\\n      RuleValue target_value = {};\\n      target_key.len = 0;\\n      bool found = false;\\n      // for ( const auto& r : _rules ) {\\n      //   cout << r.to_string() << endl;\\n      // }\\n\\n      for ( const auto& r : _rules ) {\\n        // NOTE: =, len = 0, 0.0.0.0/0\\n        if ( match( datagram.header.dst, r.first ) && r.first.len >= target_key.len ) {\\n          target_key = r.first;\\n          target_value = r.second;\\n          found = true;\\n        }\\n      } // \u8fd9\u91cc\u663e\u7136\u4e0d\u9700\u8981\u8fd9\u4e2a\u5faa\u73af, \u4f46for simply first\\n      if ( !found ) {\\n        continue;\\n      }\\n      cout << Address::from_ipv4_numeric( datagram.header.dst ).ip()\\n           << \\" matched ip: \\" << Address::from_ipv4_numeric( target_key.rule ).ip() << endl;\\n      // cout << \\"found\\" << endl;\\n      auto send_interface = this->interface( target_value.interface_num );\\n      auto next_hops = target_value.next_hop;\\n      for ( const auto& hop : next_hops ) {\\n        if ( !hop.has_value() ) {\\n          send_interface->send_datagram( datagram, Address::from_ipv4_numeric( datagram.header.dst ) );\\n          break;\\n        }\\n        send_interface->send_datagram( datagram, hop.value() );\\n      }\\n    }\\n  }\\n}\\n\\n```\\n\\n\\n\\n### Lab7\\n\\n\u6ca1\u6709\u961f\u53cb, \u4e5f\u4e0d\u80fd\u7528144\u7684\u670d\u52a1\u5668, \u6d4b\u4e0d\u4e86, \u8fc7"},{"id":"/jyy-os\uff1a\u5e76\u53d1","metadata":{"permalink":"/blog/jyy-os\uff1a\u5e76\u53d1","source":"@site/blog/jyy-os\uff1a\u5e76\u53d1.md","title":"NJU\u64cd\u4f5c\u7cfb\u7edf(jyy OS)\u8bfe\u7a0b\u7b14\u8bb0-\u5e76\u53d1\u90e8\u5206","description":"lec5 \u591a\u5904\u7406\u5668\u7f16\u7a0b\uff1a","date":"2024-11-01T18:57:09.000Z","tags":[{"inline":true,"label":"os","permalink":"/blog/tags/os"},{"inline":true,"label":"concurrency","permalink":"/blog/tags/concurrency"},{"inline":true,"label":"system","permalink":"/blog/tags/system"}],"readingTime":16.46,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"author":"ayanami","title":"NJU\u64cd\u4f5c\u7cfb\u7edf(jyy OS)\u8bfe\u7a0b\u7b14\u8bb0-\u5e76\u53d1\u90e8\u5206","tags":["os","concurrency","system"],"keywords":["jyy os"]},"unlisted":false,"prevItem":{"title":"cs144 labs(Winter 2024)","permalink":"/blog/cs144 labs"},"nextItem":{"title":"nginx\u57fa\u7840","permalink":"/blog/nginx"}},"content":"### lec5 \u591a\u5904\u7406\u5668\u7f16\u7a0b\uff1a\\n\\n\u7406\u89e3\u7a0b\u5e8f\uff1a\u72b6\u6001\u673a\u6a21\u578b\uff0c\u6211\u4eec\u628a\u4e00\u4e2a\u7a0b\u5e8f\u770b\u6210\u4e00\u4e2a\u72b6\u6001\u673a\uff0c\u7a0b\u5e8f\u7684\u72b6\u6001\u662f\\\\{\u5bc4\u5b58\u5668\uff0c\u5185\u5b58\\\\}\uff0c\u800c\u6bcf\u6b21\u53d6\u51fa\u4e00\u6761\u6307\u4ee4\u3001\u518d\u6267\u884c\u7684\u8fc7\u7a0b\u7684\u5c31\u662f\u72b6\u6001\u8fc1\u79fb\u5230\u8fc7\u7a0b\u3002\\n\\n\u7531\u8fd9\u4e2a\u72b6\u6001\u673a\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u975e\u5e38\u591a\u7684 trick\uff0c\u4f8b\u5982 debug \u5355\u6b65\u6267\u884c\uff0c\u4f8b\u5982\u6a21\u62df\u5668\uff0c\u4f8b\u5982\u5982\u679c\u67d0\u4e9b\u6307\u4ee4\u662f\u201c\u53ef\u9006\u201d\u7684\uff0c\u5c31\u53ef\u4ee5\u5728 debug \u7684\u65f6\u5019\u53cd\u5411\u6267\u884c\uff0c\u201c\u65f6\u95f4\u5012\u6d41\u201d\uff08gdb \u4e5f\u63d0\u4f9b\u4e86\u8fd9\u4e00\u6a21\u5f0f\uff09\u2026\u2026\\n\\n**\u5bf9\u4e8e\u5e76\u53d1\u7a0b\u5e8f\uff0c\u591a\u5904\u7406\u5668\u6a21\u578b\uff0c\u6211\u4eec\u7684\u76f4\u89c9\u544a\u8bc9\u6211\u4eec\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u7a0b\u5e8f\u770b\u6210\u662f\u591a\u4e2a\u72b6\u6001\u673a\uff0c\u5e76\u53d1\u7684\u8fc7\u7a0b\u5c31\u662f\u6bcf\u6b21\u53d6\u51fa\u4e00\u4e2a\u72b6\u6001\u673a\uff0c\u6267\u884c\u4e00\u6b65\uff0c\u800c\u6240\u6709\u7684\u72b6\u6001\u673a\u6709\u5171\u4eab\u7684\u5185\u5b58\uff08\u7ebf\u7a0b\u6a21\u578b\uff09\u2026\u2026 \u8fd9\u6837\u7684\u6a21\u578b\u5df2\u7ecf\u8db3\u591f\u590d\u6742\uff0c\u72b6\u6001\u6570\u662f\u6307\u6570\u589e\u957f\u7684\uff0c\u89e3\u51b3\u9700\u8981\u8003\u8651\u6240\u6709\u72b6\u6001\u7684\u95ee\u9898\u662f NP \u5b8c\u5168\u7684\u3002**\\n\\n:::danger\\n\u4f46\u66f4\u91cd\u91cf\u7ea7\u7684\u662f\uff0c\u8fd9\u6837\u7684\u6a21\u578b\u662f\u9519\u7684\uff01\\n:::\\n\\n\u5e76\u53d1\u7f16\u7a0b\u7684\u95ee\u9898\uff1a\\n\\n1. load/store \u7684\u975e\u539f\u5b50\u6027\\n2. \u7f16\u8bd1\u5668\u7684\u4f18\u5316\\n\x3c!--truncate--\x3e   :::info\\n   \u7f16\u8bd1\u5668\u672c\u8eab\u4e5f\u662f\u91c7\u7528\u201c\u5355\u5904\u7406\u5668\u5047\u8bbe\u201d\uff0c\u5426\u5219\u51e0\u4e4e\u65e0\u6cd5\u5b8c\u6210\u4efb\u4f55\u6d89\u53ca\u5230\u5171\u4eab\u5185\u5b58\u7684\u4f18\u5316\u3002\u6c42\u548c\u95ee\u9898\u7684\u7ed3\u679c\uff1aO0 \u4f18\u5316\u662f\u4e00\u4e2a[N\uff0c2N]\u4e4b\u95f4\u7684\u503c,O1 \u4f18\u5316\u662f N,O2 \u4f18\u5316\u662f 2N\uff1a\u67e5\u770b\u6c47\u7f16\u53d1\u73b0 O1 \u662f load\uff0d\u5faa\u73af\uff0dstore, O2 \u53ea\u6709\u4e00\u4e2a add\u3002\u89e3\u51b3\u65b9\u6cd5\u8981\u4e48\u662f\u901a\u8fc7\u5185\u8054\u6c47\u7f16\u548c volatile \u7b49\u63a7\u5236\u7f16\u8bd1\u5668\u884c\u4e3a\uff0c\u8981\u4e48\u662f\u52a0\u9501\u3002\u8fd8\u6709\u4e00\u4e2a\u6709\u610f\u601d\u7684\u4f8b\u5b50\u662f while(!flag)\uff1b\uff0c\u5982\u679c flag \u4e0d\u662f volatile \u7684\uff0c\u5f00\u7f16\u8bd1\u4f18\u5316\u4f1a\u53ea\u8bfb\u4e00\u6b21 flag\uff0c\u5931\u53bb\u5e76\u53d1\u63a7\u5236\u7684\u6548\u679c\u3002\\n   :::\\n3. \u5e95\u5c42\u786c\u4ef6\u4e5f\u662f\u201c\u7f16\u8bd1\u5668\u201d\\n   :::info\\n   \u8d85\u6807\u91cf\uff0c\u591a\u6307\u4ee4\u91cd\u6392\u3002t1 \u7ebf\u7a0b load(x), y++\uff0cprint t2 \u7ebf\u7a0b load(y), x++,print \u5728 x,y \u521d\u59cb\u4e3a 0 \u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u51fa\u73b0 00,01,10,11 \u56db\u79cd\u60c5\u51b5\u2014\u2014load(a)\u548c b++\u56e0\u4e3a\u4e0d\u662f\u76f8\u540c\u7684\u5730\u5740\u662f\u53ef\u80fd\u88ab\u91cd\u6392\u7684\uff08\u67d0\u79cd\u610f\u4e49\u4e0a\u7684\u201c\u76f8\u5bf9\u8bba\u6548\u5e94\u201d\uff0c\u4e0d\u540c\u7ebf\u7a0b\u770b\u5230\u4e24\u4e2a\u4e0d\u4e92\u4e3a\u56e0\u679c\u7684\u4e8b\u4ef6\u6267\u884c\u987a\u5e8f\u4e0d\u540c\uff09\uff01**\u5b9e\u9645\u7684\u72b6\u6001\u673a\u4e0d\u662f\u4e00\u6b65\u4e00\u6b65\u8d70\u7684\uff0c\u800c\u662f\u4e00\u6b21\u53d6\u82e5\u5e72\u6b65\uff0c\u8fdb\u884c\u7ec4\u5408\u6392\u5e8f\u4e4b\u540e\u518d\u6267\u884c\u3002**\u8fd9\u4e2a\u95ee\u9898\u7684\u6838\u5fc3\u5728\u4e8e load(x), y++\u8fd9\u4e24\u6761\u6307\u4ee4\u4e4b\u4e2d\uff0c\u5982\u679c load(x)\u53d1\u751f\u4e86 cache miss\uff0c\u8981\u4e0d\u8981\u7b49\u5f85 cache hit \u4e4b\u540e\u518d\u6267\u884c y++? \u5982\u679c\u4f60\u5141\u8bb8\u8fd9\u6837\u7684\u91cd\u6392\uff0c\u90a3\u5c31\u653e\u5f03\u4e86\u4eba\u7c7b\u53cb\u597d\u7684\u5047\u8bbe\uff0c\u5982\u679c\u4e0d\u5141\u8bb8\u8fd9\u6837\u7684\u91cd\u6392\uff0c\u6027\u80fd\u5c31\u5927\u5927\u4e0b\u964d\u3002\\n   :::\\n4. \u5185\u5b58\u6a21\u578b\u7684\u95ee\u9898, \u6211\u4eec\u8ba4\u4e3a\u7684\u5185\u5b58\u6a21\u578b\u662f\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u64cd\u4f5c\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\uff0c\u7136\u800c\u5b9e\u9645\u7684\u5b58\u50a8\u6a21\u578b\u662f\uff0c\u5728\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4e4b\u95f4\u8fd8\u6709\u7f13\u5b58\uff0c\u800c\u7f13\u5b58\u662f\u6bcf\u4e2a cpu \u72ec\u6709\u7684\u2014\u2014\u7f13\u5b58\u548c\u5185\u5b58\u53c8\u5982\u4f55\u540c\u6b65\u5462\uff1f\\n   :::info\\n   x86 \u662f\u5e02\u9762\u4e0a\u6700\u5f3a\u4e00\u81f4\u6027\u7684\u6a21\u578b\uff0c\u5b83\u51e0\u4e4e\u548c\u6211\u4eec\u60f3\u8c61\u4e4b\u4e2d\u7684\u65e0\u7f13\u5b58\u6a21\u578b\u76f8\u540c\uff0c\u5404\u4e2a cpu \u7684\u7f13\u5b58\u548c\u5168\u5c40\u7684\u5185\u5b58\u4e4b\u95f4\u901a\u8fc7\u4e00\u4e2a\u5199\u7f13\u51b2\u540c\u6b65\uff0c\u5199\u6307\u4ee4\u6309\u987a\u5e8f\u8fdb\u5165\u5199\u7f13\u51b2\uff0c\u5e76\u4e14\u4f1a\u5728\u5199\u7f13\u51b2\u548c\u5185\u5b58\u5404\u81ea\u8bfb\u53d6\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u987a\u5e8f\uff0c\u5e76\u4e14\u53ea\u6709\u4e00\u4e2a\u5168\u5c40\u5185\u5b58\u3002\u800c ARM \u7b49\u5176\u4ed6\u6a21\u578b\uff0c\u5982\u679c\u91c7\u7528\u4e86\u5176\u4ed6\u7f13\u5b58\u548c\u5185\u5b58\u540c\u6b65\u65b9\u6cd5\uff0c\u60f3\u8981\u901a\u8fc7\u5141\u8bb8\u6682\u65f6\u7684\u4e0d\u540c\u6b65\u6765\u5f97\u5230\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u987a\u5e8f\u4e00\u81f4\u6027\u5c31\u88ab\u6253\u7834\u4e86\uff0c\u5e76\u53d1\u7684\u7a0b\u5e8f\u5728\u67d0\u4e2a\u77ac\u65f6\u5b9e\u9645\u4e0a\u5404\u81ea\u6709\u5404\u81ea\u7684\u5185\u5b58\u89c6\u56fe\uff0c\u4eba\u7c7b\u7f16\u5199\u4ee3\u7801\u5c31\u66f4\u4e0d\u53cb\u597d\u3002\u4e5f\u56e0\u4e3a\u8fd9\u4e2a\u5e95\u5c42\u786c\u4ef6\u7684\u5904\u7406\u4e0d\u540c\uff0c\u5728 ARM \u4e0a\u6a21\u62df x86 \u662f\u4e00\u4e2a\u4e16\u754c\u6027\u7684\u96be\u9898\u3002\\n   :::\\n\\n** \u5bf9\u4e8e\u5e76\u53d1\uff0c\u8bb2\u6982\u5ff5\u662f\u4e0d\u591f\u7684\uff1a\u4e8b\u5b9e\u53ef\u80fd\u4e0d\u662f\u6211\u4eec\u7406\u89e3\u7684\u90a3\u6837\u3002\u8bb2\u4ee3\u7801\u90fd\u662f\u4e0d\u591f\u7684\uff1a\u9700\u8981\u7cbe\u5de7\u7684 workload \u624d\u80fd\u51fa\u73b0\u67d0\u4e2a corner case\u3002**\\n\\n\u8bc1\u660e\u624d\u662f\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\uff01\\n\\n### lec6, 7 \u5e76\u53d1\u63a7\u5236\uff08\u4e92\u65a5\uff09\\n\\n\u5e76\u53d1\u7684\u53ef\u884c\u6027\uff1f\\n\\n\u6211\u4eec\u524d\u9762\u8bf4\u660e\u4e86\u5e76\u53d1\u95ee\u9898\u7684\u6839\u672c\u89e3\u51b3\u65b9\u6cd5\u662f\u9000\u5316\u6210\u4e32\u884c\u2014\u2014\u4e92\u65a5\u6267\u884c\uff0c\u90a3\u5e76\u53d1\u7684\u610f\u4e49\u4f55\u5728\uff1f\\n\\n\u60b2\u89c2\u89d2\u5ea6\u770b\uff0c\u5982\u679c\u6709 1/k \u7684\u7a0b\u5e8f\u662f\u6ca1\u6cd5\u5e76\u53d1\u7684\uff0c\u90a3\u81f3\u5c11\u6267\u884c 1/k \u7684\u65f6\u95f4\\n\\n\u4e50\u89c2\u89d2\u5ea6\u770b\uff0c\u7531\u4e8e\u5b9e\u9645\u7684\u7269\u8d28\u754c\u662f\u201c\u5e76\u53d1\u201d\u7684\u2014\u2014\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u5bf9\u5468\u56f4\u7684\u5f71\u54cd\u662f\u9700\u8981\u65f6\u95f4\u4f20\u9012\u7684\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u7684\u533a\u57df\u8db3\u591f\u5927\uff0c\u5b8f\u89c2\u4e0a\u6bcf\u4e2a\u533a\u57df\u5c31\u53ef\u4ee5\u5728\u4e00\u5b9a\u65f6\u95f4\u6bb5\u5185\u8fd1\u4f3c\u770b\u6210\u662f\u4e0d\u5f71\u54cd\u7684\u2014\u2014\u56fe\u5e76\u53d1\uff0c\u7269\u7406\u6a21\u62df\u7b49\u7b49\uff1b\u5e76\u4e14\u8ba1\u7b97\u4efb\u52a1\u591a\u662f\u53ef\u4ee5\u5e76\u53d1\u7684\u3002\\n\\n\u5386\u53f2\u987a\u5e8f\uff1a\\n\\n\u5f00\u59cb\u9636\u6bb5\u2014\u2014\u8f6f\u4ef6\u4e92\u65a5\\n\\nPeterson \u7b97\u6cd5\uff08\u534f\u8bae\uff09\\n\\n\u540e\u7eed\u9636\u6bb5\u2014\u2014\u786c\u4ef6\u4e92\u65a5\\n\\n\u8bc1\u660e\u7684\u610f\u4e49\uff1a\u5feb\u901f\u56de\u7b54\u66f4\u591a\u7684\u95ee\u9898\uff0c\u5982\u679c\u6539\u53d8\u6761\u4ef6\uff0c\u8fd8\u6b63\u786e\u5417\uff1f\u516c\u5e73\u6027\uff1f\u6b7b\u9501\u53ef\u80fd\uff1f\uff08\u4e24\u4eba\u90fd\u65e0\u6cd5\u8fdb\u5165\u4e34\u754c\u533a\uff09\u2026\u90fd\u8f6c\u6362\u6210\u56fe\uff08\u72b6\u6001\u7a7a\u95f4\uff09\u4e0a\u7684\u904d\u5386\u95ee\u9898\u4e86\\n\\nPerterson \u7b97\u6cd5\u7684\u95ee\u9898\uff1a\\n\\n1. \u53ea\u80fd\u4e24\u4e2a\u7ebf\u7a0b\\n\\n2. \u5bf9\u4e8e\u73b0\u4ee3\u591a\u5904\u7406\u5668\u65e0\u6548\\n\\n\u5c1d\u8bd5\u5b9e\u73b0\u4e92\u65a5\u7684\u64cd\u4f5c\\n\\n1. \u5f00\u5173\u4e2d\u65ad\\n\\n\u95ee\u9898\uff1a\u4e00\uff0c\u6743\u9650\uff0cOS \u53ef\u4ee5\u7528\u6237\u6001\u4e0d\u884c \u4e8c\uff0c\u73b0\u4ee3\u591a\u5904\u7406\u5668\u6bcf\u4e2a cpu \u90fd\u6709\u81ea\u5df1\u7684\u4e2d\u65ad\uff0c\u5931\u8d25\\n\\n\u9898\u5916\u8bdd\uff1a\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad NMI\uff08non-maskable interrupt\uff09\uff0c\u4f8b\u5982\uff0c\u5f53 OS \u51fa bug \u6b7b\u5faa\u73af\u65f6\u5019\u91cd\u542f\u2014\u2014OS \u5b9a\u65f6\u8bbe\u7f6e\u67d0\u4e2a\u5bc4\u5b58\u5668\uff0c\u5982\u679c OS \u6b7b\u5faa\u73af\uff0c\u8be5 NMI \u68c0\u6d4b\u5230\u8be5\u5bc4\u5b58\u5668\u672a\u88ab\u8bbe\u7f6e\uff0c\u89e6\u53d1\u4ee3\u7801\u91cd\u542f\u7535\u8111\\n\\n\u54ea\u4e9b barrier \u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff1f[godbolt.org](http://godbolt.org)\\n\\n\u5e76\u53d1\u7f16\u7a0b\u5bf9\u601d\u7ef4\u65b9\u5f0f\u7684\u542f\u793a\uff1a\u6811\u5f62\u5e7f\u601d\u8003\u2014\u2014\u5982\u679c\u6709\u4e00\u4e2a\u80fd\u4ece 1 \u5230\u65e0\u7a77\u7684\u7535\u8111\u7a0b\u5e8f\uff08\u4f8b\u5982\u524d\u9762\u7684 model checker\uff09\uff0c\u4eba\u53ea\u9700\u8981\u60f3\u8db3\u591f\u591a\u7684 0\uff0d1 \u5373\u53ef\\n\\n2. \u8f6f\u4ef6\u4e0d\u591f\uff0c\u786c\u4ef6\u6765\u51d1\u2014\u2014\u539f\u5b50\u6307\u4ee4\u7684\u4ea7\u751f\\n\\n\u7531\u539f\u5b50\u6307\u4ee4\u5b9e\u73b0\u81ea\u65cb\u9501\u2014\u2014\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u5904\u7406\u4e2d\u65ad\uff1f\\n\\nT1 \u62ff\u9501\uff0c\u4e2d\u65ad\uff0c\u540e\u7eed T2,T3,\u2026\u5747\u81ea\u65cb\u7b49\u5f85 T1\uff0c\u5b9e\u8d28\u4e0a\u9000\u5316\u6210\u4e86\u5168\u5c40\u4e2d\u65ad\u2014\u2014\u4e2d\u65ad\u662f\u9891\u7e41\u7684\uff08\u4f8b\u5982\u7f51\u5361\uff09\uff0c\u4e0d\u53ef\u63a5\u53d7\\n\\n\u5b9e\u9645\u7684 OS \u5185\u90e8\u7ed3\u6784\u7684\u81ea\u65cb\u9501\u4f1a\u5173\u4e2d\u65ad\uff08\u9700\u8981\u4fdd\u5b58\u4e2d\u65ad\u72b6\u6001\uff0cxv6 \u662f\u4f7f\u7528\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u6808\u7ed3\u6784\uff0c\u4e0a\u9501\u524d push \u5f53\u524d\u4e2d\u65ad\uff0c\u89e3\u9501\u540e pop \u5f53\u524d\u4e2d\u65ad\uff09\uff08\u6ce8\u610f\u59cb\u7ec8\u662f\u5f53\u524d cpu \u7684\u4e2d\u65ad\uff09\\n\\nsystem \u4eba\u7684\u54f2\u5b66\u2014\u2014\u5982\u679c\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u7528\u51e0\u5f20\u7eb8\u624d\u80fd\u8bb2\u6e05\u695a\uff0c\u90a3\u5c31\u4e0d\u559c\u6b22\u2014\u2014prefer \u7b80\u5355\u505a\u6cd5\u7684\u7ec4\u5408\\n\\n\u81ea\u65cb\u9501\u6700\u5927\u7684\u95ee\u9898 Scalability \u592a\u5dee\u2014\u2014\u6838\u6570\u53d8\u591a\uff0c\u53cd\u800c\u6027\u80fd\u4e0b\u964d\uff01\\n\\n\u53ea\u9002\u7528\u4e8e\u51e0\u4e4e\u4ece\u4e0d\u62e5\u5835\uff0c\u7acb\u5373\u5b8c\u6210\u7684\u5bf9\u8c61\u2014\u2014\u4f8b\u5982\u94fe\u8868\u91cc\u9762\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\\n\\n\u5bf9\u4e8e\u957f\u7a0b\u63a7\u5236\uff0c\u9700\u8981\u7528\u5176\u4ed6\u7ed3\u6784\\n\\n3. read-mostly \u7ed3\u6784\u7684\u4f18\u5316\\n\\n\u89c2\u5bdf\u5230\uff0c\u5185\u6838\u91cc\u9762\u5f88\u591a\u7ed3\u6784\u90fd\u662f read-mostly \u7684\uff08\u4f8b\u5982\u8def\u7531\u8868\uff0c\u7528\u6237\u7ec4\u2026\u2026\uff09\\n\\n\u4e00\u4e2a\u975e\u5e38\u806a\u660e\u7684\u60f3\u6cd5\uff1aRead-copy-Update RCU \u8bfb\u65f6\u5b8c\u5168\u4e0d\u52a0\u9501\uff0c\u5199\u65f6\u62ff\u9501\u5417\uff0ccopy \u4e00\u4e2a\u65b0\u7684\u526f\u672c\uff0c\u5c06\u7248\u672c\u63a7\u5236\u7684\u6307\u9488\u6307\u5411\u65b0\u7684\u526f\u672c\\n\\n\u5176\u6838\u5fc3\u5728\u4e8e\uff0c\u5141\u8bb8\u5728\u8bfb\u5199\u4ea4\u9519\u7684\u65f6\u5019\uff0c\u4e00\u4e9b\u7a0b\u5e8f\u8bfb\u5230 v1, \u4e00\u4e9b\u7a0b\u5e8f\u8bfb\u5230 v2\uff0c\u727a\u7272\u8bfb\u5199\u7684\u4e00\u81f4\u6027\u6362\u53d6\u8bfb\u7684\u5f3a\u5e76\u53d1\\n\\n\u751a\u81f3\u53ef\u4ee5\u66f4\u597d\uff0c\u5b9e\u9645\u4e0a\u4e0d\u4e00\u5b9a\u9700\u8981\u590d\u5236\u6574\u4e2a\u5bf9\u8c61\uff0c\u4f8b\u5982\u94fe\u8868\u7684\u63d2\u5165\uff0c\u53ea\u9700\u8981\u63d2\u5165\u65f6\u6700\u540e\u4fee\u6539\u5934\u8282\u70b9\u7684 next \u6307\u9488\uff0c\u5e76\u4e14\u4e0d\u6025\u7740\u5220\u6389\u539f\u5148\u7684\u5934\u8282\u70b9\u7684 next \u5c31\u884c\u3002\u4e0b\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u4f55\u65f6\u56de\u6536\u65e7\u7248\u672c\\n\\n4. Linux \u5185\u6838 trick\\n\\n\u4e0a\u9762\u662f\u5185\u6838\u6001\u7684\u81ea\u65cb\u9501\uff0c\u90a3\u5728\u7528\u6237\u6001\u600e\u4e48\u5f97\u5230\u4e92\u65a5\u5462\uff1f\u5982\u679c\u8fd8\u662f\u7528\u539f\u5b50\u6307\u4ee4\u6765\u81ea\u65cb\uff0cscalability+\u4e2d\u65ad\u95ee\u9898\uff0c\u7528\u6237\u6001\u6ca1\u6709\u5173\u4e2d\u65ad\u7684\u6743\u9650\uff08\u62ff\u9501\u540e\u4e2d\u65ad\u4f1a\u5bfc\u81f4\u5176\u4ed6\u7ebf\u7a0b\u957f\u65f6\u95f4\u7a7a\u7b49\uff09\uff0c\u5e76\u4e14\u65e0\u6cd5\u4fdd\u8bc1\u9501\u662f\u77ed\u7a0b\u7684 \u2014\u2014\u6211\u4eec\u60f3\u8981\u8ba9\u7528\u6237\u6001\u201c\u544a\u8bc9\u201dOS\uff0c\u6211\u53ef\u4ee5\u8ba9\u51fa\u8fd9\u4e2a cpu \u4e0d\u8981\u7a7a\u8f6c\\n\\n\u89e3\u51b3\u65b9\u6848\uff0c\u5c06\u9501\u53d8\u6210\u4e00\u79cd syscall\uff0c\u9677\u5165\u5185\u6838\u91cc\u9762\u540e\u518d\u52a0\u81ea\u65cb\u9501\uff0c\u5173\u4e2d\u65ad\uff0c\u5982\u679c\u4e0d\u80fd\u83b7\u53d6\uff0c\u5219\u7b49\u5f85\uff0c\u5e76\u4e14\u53ef\u4ee5\u8c03\u5ea6 cpu\u3002\u4e00\u662f\u89e3\u51b3\u4e86\u4e2d\u65ad\u7684\u6b7b\u9501\u95ee\u9898\uff0c\u4e8c\u662f\u83b7\u53d6\u4e86\u8c03\u5ea6 cpu \u7684\u80fd\u529b\uff0c\u4e5f\u5c31\u662f ostep \u7684 yield()\uff0c\u4e09\u662f\u6709 yield \u4e4b\u540e\u5c06\u4e00\u4e2a\u4efb\u610f\u957f\u65f6\u95f4\u7684\u4e92\u65a5\u53d8\u6210\u4e86\u4e00\u4e2a\u77ed\u65f6\u7684\u81ea\u65cb\u3002\u89e3\u9501\u7684\u65f6\u5019\uff0c\u5982\u679c\u6709\u5728\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u5c31\u5524\u9192\u2014\u2014syscall \u4e5f\u4f7f\u5f97\u76d1\u63a7\u9501\u7ed3\u6784\u66f4\u65b9\u4fbf\uff0c\u4e0d\u9700\u8981\u7ba1\u7528\u6237\u6001\u662f\u600e\u4e48\u9501\u7684\uff0c\u53ea\u9700\u8981\u8003\u8651\u5185\u6838\u7684\u9501\u5c31\u884c\\n\\n\u66f4\u8fdb\u4e00\u6b65\uff0cpthread\uff0cfutex\uff08fast userspace mutex\uff09\uff1atwo path\\n\\nfast path: \u5982\u679c\u76f4\u63a5\u62ff\u5230\uff0c\u4e0d\u8fdb syscall\\n\\nslow path: \u5982\u679c\u6ca1\u62ff\u5230\uff0csyscall \u8ba9 OS \u5e2e\u6211\u201c\u81ea\u65cb\u201d\uff08yield\uff09\\n\\n\u96be\u7684\u5730\u65b9\uff0cT1 fast path, T2 slow path, T1 realease\uff08\u4e00\u4e2a\u539f\u5b50\u6307\u4ee4\uff09\u524d\u9762\u4e00\u70b9 T2 syscall\uff0cT1 \u5982\u4f55\u5524\u9192 T2?\\n\\n\u5e93\u7684\u9501\u6027\u80fd\u5df2\u7ecf\u8db3\u591f\u597d\u2014\u2014\u9664\u975e\u662f\u6781\u7aef\u60c5\u51b5\uff0c\u4f8b\u5982\u9501\u91cc\u9762\u53ea\u662f\u4e00\u4e2a sum++\u4e4b\u7c7b\u975e\u5e38\u7b80\u5355\u7684\u4e1c\u897f\\n\\n### lec9\u300110 \u5e76\u53d1\u63a7\u5236\uff1a\u540c\u6b65\\n\\n**\u540c\u6b65\uff1a\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u76f8\u5bf9\u5173\u7cfb\u7684\u4fdd\u6301**\\n\\n**\u72b6\u6001\u673a\u89c6\u89d2\uff0c\u4ece\u4e00\u4e2a\u7b80\u5355\u72b6\u6001\u53d1\u6563\u5f00\u4e4b\u540e\u53c8\u6536\u56de\u4e00\u4e2a\u7b80\u5355\u72b6\u6001**\\n\\n\u7b2c\u4e00\u4e2a\u540c\u6b65\uff1a\u201c\u5148\u6765\u5148\u7b49\u5f85\u201d\\n\\n**\u7b2c\u4e8c\u4e2a\u540c\u6b65\uff1a\u751f\u4ea7\u8005\uff0d\u6d88\u8d39\u8005\u95ee\u9898\u2014\u201499%\u7684\u5b9e\u9645\u95ee\u9898\u53ef\u4ee5\u7528\u8fd9\u4e2a\u89e3\u51b3**\\n\\n**\u5269\u4e0b 1%\u2014\u2014\u6761\u4ef6\u53d8\u91cf\u89e3\u51b3 100%\u7684\u95ee\u9898 \uff08\u540c\u6b65\uff1a\u7b49\u5230\u67d0\u4e00\u4e2a\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u505a\u67d0\u4ef6\u4e8b\uff09**\\n\\n\u5b9e\u73b0\u4e00\u4e2a\u6761\u4ef6\u53d8\u91cf\\n\\n\u62ff\u9501\uff0d\u5982\u679c\u6761\u4ef6\uff08\u8c13\u8bcd\uff09\u4e0d\u6ee1\u8db3 \uff0d\u653e\u9501\uff0dretry\uff08\u6216\u8005\u66f4\u597d\u7684 yield\uff09\\n\\n\u6240\u4ee5 condition_variable \u5c31\u662f\u8fd9\u6837\u7684\u62bd\u8c61\uff0c\u4e00\u4e2a\u6761\u4ef6+\u4e00\u628a\u9501\u7684\uff08\u4f18\u5316\uff09\u81ea\u65cb\uff0c\u603b\u662f\u5728\u5524\u9192\u4e4b\u540e\u518d\u6b21\u68c0\u67e5\u6761\u4ef6\uff08\u5e95\u5c42\u673a\u5236\u4e0a notify_one \u662f\u81ea\u7136\u7684\uff0c\u4ea4\u7ed9\u7cfb\u7edf\u8c03\u5ea6\uff09\\n\\nnotify_all \u7684\u53ef\u80fd\u5b9e\u73b0\uff1a\u7ef4\u62a4\u4e00\u4e2a\u7b49\u5f85\u6761\u4ef6\u53d8\u91cf\u7684\u4efb\u52a1\u7684\u94fe\u8868/\u961f\u5217\\n\\n:::tip[\u4e3a\u4ec0\u4e48\u8bf4 99%\u90fd\u662f\u751f\u4ea7\u8005\u6d88\u8d39\u8005]\\n\\n**\u8ba1\u7b97\u4efb\u52a1 \u2192 \u6709\u5411\u65e0\u73af\u56fe**\uff0c\u67d0\u4e9b\u8ba1\u7b97\u8282\u70b9\u4f9d\u8d56\u4e8e\u5148\u524d\u8ba1\u7b97\u7684\u8282\u70b9\\n\\n\u552f\u4e00\u7684\u4e00\u4e2a\u751f\u4ea7\u8005\u8d1f\u8d23\u904d\u5386\u8ba1\u7b97\u56fe\uff0c\u653e\u5165\u4efb\u52a1\u961f\u5217\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u8d1f\u8d23\u53d6\u51fa\u4efb\u52a1\uff0c\u8ba1\u7b97\u6267\u884c\uff0c\u6761\u4ef6\u53d8\u91cf\u7684\u6761\u4ef6\u5c31\u662f\u4f9d\u8d56\u7684\u8ba1\u7b97\u56fe\u8282\u70b9\u90fd\u8ba1\u7b97\u5b8c\u6bd5\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u8ba1\u6570\u5668\uff09\\n\\n\uff08\u6bcf\u4e00\u6761\u8fb9\u5bf9\u5e94\u4e00\u4e2a\u4e92\u65a5 \ud83d\udd12\uff0c\u6bcf\u4e00\u4e2a\u8ba1\u7b97\u8282\u70b9\u5bf9\u5e94\u4e00\u4e2a\u7ebf\u7a0b\u3002\u7ebf\u7a0b\u53ef\u4ee5\u5f00\u59cb\u8ba1\u7b97\u7684\u6761\u4ef6\u662f\u6240\u6709\u5165\u8fb9\u8ba1\u7b97\u5b8c\u6bd5\uff09\\n\\n\u53ea\u8981\u751f\u4ea7\u8005\uff08\u8c03\u5ea6\u5668\uff09\u5206\u914d\u6548\u7387\u8db3\u591f\u9ad8\uff0c\u4e5f\u5c31\u662f\u5206\u914d\u7684\u65f6\u95f4\u76f8\u8f83\u4efb\u52a1\u65f6\u95f4\u5c0f\uff0c\u5c31\u53ef\u4ee5\u5e76\u884c\\n:::\\n\\n\u4f8b\u5982\u4e00\u4e2a\u4e0d\u600e\u4e48\u597d\u5e76\u884c\u7684\uff0cdijstra\\n\\n\u7b97\u6cd5\u6838\u5fc3\u662f\uff0c\u4ece pq \u4e4b\u4e2d\u53d6\u51fa\u4e00\u4e2a\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u6240\u6709\u8fb9 relax\uff0c\u5982\u679c\u786e\u5b9e\u66f4\u77ed\uff0c\u66f4\u65b0 pq\\n\\n\u8ba1\u7b97\u56fe\u4e3a pq\u2192 \u53d6\u51fa\u8282\u70b9 \u2192N \u6761\u8fb9 \u2192pq,\u6709\u591a\u6761\u8fb9\u7684\u90e8\u5206\u5c31\u662f\u8282\u70b9 \u2192N \u6761\u8fb9\u548c N \u6761\u8fb9 \u2192relax pq\\n\\n\u4e2d\u95f4 N \u6761\u8def\u5f84\u53ef\u4ee5\u770b\u6210\u4efb\u52a1\uff0c\u5e76\u884c\uff0c\u8003\u8651\u5230\u65f6\u95f4\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u505a\u4e00\u4e2a\u7ebf\u7a0b\u6c60\uff0c\u4f8b\u5982\u7ebf\u7a0b 1 \u5bf9\u5e94 1\uff0d100 \u6761\u8fb9\uff0c\u7ebf\u7a0b 2 \u5bf9\u5e94 101\uff0d200 \u6761\u8fb9\uff0cetc\uff0c\u6700\u540e\u66f4\u65b0 pq\\n\\n\u5e76\u53d1 kmp \u53ef\u884c\u5417\uff1f\u8ba1\u7b97\u56fe\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u4f9d\u8d56\u524d\u9762\u6240\u6709\u8282\u70b9(pi[j]\u76f8\u5173)\uff0c\u4e0d\u592a\u597d\u505a\\n\\n\u5e76\u53d1 kruskal? \u53d6\u51fa\u5168\u5c40\u6700\u5c0f\u8fd9\u4e2a\u8ba1\u7b97\u4efb\u52a1\u53ef\u4ee5\u53d8\u6210\u7ef4\u62a4\u51e0\u4e2a\u5c40\u90e8\u6700\u5c0f\u7684\u5806\uff0c\u53ef\u4ee5\u5e76\u884c\\n\\n\u2026\u2026\\n\\n\u8fd9\u4e2a\u89d2\u5ea6\u80fd\u53d1\u73b0\u4e00\u4e9b\u610f\u5916\u53ef\u4ee5\u5e76\u884c\u7684\uff0c\u4f8b\u5982\u52a8\u6001\u89c4\u5212\\n\\n\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u4e3a\u4f8b\uff0c dp[i,j]\u4f9d\u8d56\u4e8e dp[i,j-1], dp[i-1,j]\u548c dp[i-1,j-1]\\n\\n\u4e5f\u5c31\u662f\u4e8c\u7ef4\u56fe\u4e0a\uff0c\u53f3\u4e0b\u89d2\u4f9d\u8d56\u4e8e\u4e0a\u5de6\u5de6\u4e0a\\n\\n\u90a3\u5bf9\u8fd9\u6837\u7684\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u6bcf\u4e00\u5c42\u90fd\u662f\u53f3\u4e0a\uff0d\u5de6\u4e0b\u7684\u4e00\u6761\u5bf9\u89d2\u7ebf\uff01\u5e76\u884c\u5ea6\u4e0d\u65ad\u589e\u52a0\uff01\\n\\n\uff08\u5f53\u7136\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u95ee\u9898 cache \u4e5f\u5360\u5f88\u5927\u4e00\u90e8\u5206\uff09\\n\\n\u4e07\u80fd\u540c\u6b65\u65b9\u6cd5\uff1a\u72b6\u6001\u673a\u4e4b\u4e2d\u201c\u5386\u53f2\u201d\u7684\u90e8\u5206\\n\\n\u4f8b\u5982\uff0c\u6709\u4e00\u5806\u7ebf\u7a0b a \u6253\u5370 H\uff0c\u53e6\u4e00\u5806\u7ebf\u7a0b b \u6253\u5370 O\uff0c\u53e6\u4e00\u5806\u7ebf\u7a0b c \u6253\u5370\u7a7a\u683c\uff0c\u8981\u6c42\u603b\u662f\u6253\u5370\u51fa\u6765\u4e3a\\n\\n\u7a7a\u683c HHO \u6216\u8005 \u7a7a\u683c HOH\\n\\n\u72b6\u6001\u673a\u4e3a\\n\\n```\\n\u7a7a\u683c->H->H->O\u56de\u7a7a\u683c\\n\\n\\t ->O->H\u56de\u7a7a\u683c\\n```\\n\\nH\uff1a\u524d\u9762\u662f H\uff0c\u540e\u9762\u662f O\uff1b\u524d\u9762\u662f O\uff0c\u540e\u9762\u662f\u7a7a\u683c\uff1b\u524d\u9762\u662f\u7a7a\u683c\uff0c\u540e\u9762 H \u6216 O\\n\\nO\uff1a\u524d\u9762\u7b2c\u4e8c\u4e2a\u662f H\uff0c\u540e\u9762\u662f\u7a7a\u683c\uff1b\u5426\u5219\u662f H\\n\\n\u7a7a\uff1a\u540e\u9762 H\\n\\n\u4e09\u7ec4\u7ebf\u7a0b\u7b49\u5f85\u6761\u4ef6\u53d8\u91cf\u201c\u53ef\u4ee5\u6253\u5370 H\uff0cO\uff0c\u7a7a\u683c\u201d\uff0c\u800c\u7ef4\u62a4\u4e00\u4e2a\u503c\u4ee3\u8868\u524d\u9762\u4e24\u4e2a\u662f\u4ec0\u4e48\uff0c\u9010\u4e00\u5339\u914d\u5404\u6761\u89c4\u5219\uff0c\u5524\u9192\u6761\u4ef6\u53d8\u91cf\u4e0a\u7b49\u5f85\u7684\u7ebf\u7a0b\\n\\n\u8ba1\u7b97\u56fe\u7684\u65b9\u6cd5\u662f\u5b9e\u9645\u53ef\u7528\u7684\\n\\n\u6bcf\u4e00\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u521d\u59cb\u4e3a 0\\n\\n\u6bcf\u4e2a\u8ba1\u7b97\u4efb\u52a1\u5bf9\u5e94\u4e00\u4e2a\u70b9\uff0c\u5bf9\u6240\u6709\u5165\u8fb9 P\\n\\n\u4ece\u521d\u59cb\u70b9\u5f00\u59cb\uff0c\u8ba1\u7b97\uff0c\u5b8c\u6210\u540e V \u6240\u6709\u51fa\u8fb9\uff0c\u5230\u7b97\u5b8c\u6240\u6709\u70b9\u7ed3\u675f\uff08\u6ca1\u6709\u51fa\u8fb9\uff09\\n\\n\u4fe1\u53f7\u91cf\u7684\u6838\u5fc3\uff1a\\n\\n1.\u5141\u8bb8\u5728\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\u83b7\u5f97\u9501\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\u91ca\u653e\u9501\\n\\n2.\u5141\u8bb8 N\u22651 \u4e2a\u7ebf\u7a0b\u8fdb\u5165\uff08\u80fd\u8ba1\u6570\u7684\u4e92\u65a5\u9501\uff09\\n\\n\u4fe1\u53f7\u91cf\u7684\u5178\u578b\u5e94\u7528\uff1a\\n\\n1. A\u2192V(s)\u2192P(s)\u2192B **\u4e00\u6b21\u6027 happen-before**\\n2. mutex \u7684 N \u4e2a\u51c6\u5165\u62d3\u5c55\\n\\n\u4fe1\u53f7\u91cf\u4f18\u96c5\u5b9e\u73b0\u751f\u4ea7\u6d88\u8d39\u8005"},{"id":"/nginx","metadata":{"permalink":"/blog/nginx","source":"@site/blog/nginx.md","title":"nginx\u57fa\u7840","description":"\u914d\u7f6e\u6587\u4ef6","date":"2024-11-01T18:57:09.000Z","tags":[{"inline":true,"label":"nginx","permalink":"/blog/tags/nginx"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":5.83,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"nginx\u57fa\u7840","author":"ayanami","tags":["nginx","web"],"keywords":["nginx"]},"unlisted":false,"prevItem":{"title":"NJU\u64cd\u4f5c\u7cfb\u7edf(jyy OS)\u8bfe\u7a0b\u7b14\u8bb0-\u5e76\u53d1\u90e8\u5206","permalink":"/blog/jyy-os\uff1a\u5e76\u53d1"},"nextItem":{"title":"CS144 Lecture Notes","permalink":"/blog/cs144/cs144 lec notes"}},"content":"\u914d\u7f6e\u6587\u4ef6\\n\\nserver \u865a\u62df\u4e3b\u673a, \u6839\u636e `{listen, server_name}`\u7684`IP-port`\u6216\u8005`domain-port`\u5bf9\u6765\u8fdb\u884c\u552f\u4e00\u6027\u6807\u8bc6, \u53ef\u4ee5\u5355\u9879\u76f8\u540c, \u4f1a\u5339\u914d\u53e6\u4e00\u9879\u8f6c\u53d1\\n\\nlocation + root, index\u6307\u5b9a\u4e3b\u9875\u7b49\\n\\n\u914d\u7f6e\u9759\u6001\u9875\u9762\u7ed3\u675f\\n\\n\\n\\n\u53cd\u5411\u4ee3\u7406: server\u7aef\u8bf7\u6c42\u8f6c\u53d1\\n\\n```nginx\\nserver {\\n    listen 8001;\\n    server_name any_name;\\n    location / {\\n\x3c!--truncate--\x3e        proxy_pass http://localhost:8088/;\\n    }\\n}\\n```\\n\\n\u8fd9\u6837\u7684\u914d\u7f6e\u6587\u4ef6\u5c068001\u7684nginx\u8bf7\u6c42\u8f6c\u53d1\u5230 `http://localhost:8088/`\u5904\\n\\n\u8fd9\u6837\u7b80\u5355\u7684\u53cd\u4ee3\u4e22\u5931\u4e86\u7528\u6237\u771f\u5b9eIP\u7684\u4fe1\u606f(\u5168\u53d8\u6210nginx\u4e86)\\n\\n\u4f7f\u7528`proxy_set_header`\u8ffd\u52a0header\u5f97\u5230\u771f\u5b9eIP\\n\\n```nginx\\nserver {\\n    listen 8001;\\n    server_name any_name;\\n    location / {\\n        proxy_set_header Host $http_host; # nginx\u4e3b\u673aIP\u52a0\u7aef\u53e3, $host nginx \u4e3b\u673aIP\\n        proxy_set_header X-Real-IP $remote_addr; # Client IP\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n        proxy_pass http://localhost:8088/;\\n        \\n    }\\n}\\n```\\n\\n\u975eHTTP\u4ee3\u7406\\n\\n- fastcgi_pass, scgi_pass (\u591a\u7528\u4e8ePHP)\\n- uwsgi_pass (\u591a\u7528\u4e8epython)\\n- memcached_pass \u8f6c\u53d1\u5230memcached server\\n\\n\\n\\nlocation\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u7b49, \u4f8b\u5982\\n\\n```nginx\\nlocation \\\\.(css|js|png|jpg|gif|ico)\\n```\\n\\n(\u8fd9\u662f\u4e00\u4e2a\u9759\u6001\u6587\u4ef6\u793a\u4f8b)\\n\\n\u53ef\u4ee5\u6a21\u7cca\u5339\u914d\\n\\n```nginx\\nlocation ^~ /fonts/ # \u6240\u6709\u8bf7\u6c42\u8def\u5f84\u4ee5/fonts/\u5f00\u5934\u7684\\n```\\n\\n\u52a8\u9759\u5206\u79bb\u7684nginx\u53cd\u4ee3\u793a\u4f8b\\n\\n```nginx\\n{\\n    listen 8002;\\n    server_name something.tomcat;\\n    \\n    # \u52a8\u6001\u8d44\u6e90\u90e8\u5206, \u8f6c\u53d1\u5230tomcat\u670d\u52a1\u5668\\n    location / {\\n        proxy_set_header Host $http_host; # nginx\u4e3b\u673aIP\u52a0\u7aef\u53e3, $host nginx \u4e3b\u673aIP\\n        proxy_set_header X-Real-IP $remote_addr; # Client IP\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n        proxy_pass http://localhost:8088/;\\n    }\\n    \\n    # \u9759\u6001\u8d44\u6e90\u90e8\u5206, nginx\u63d0\u4f9b\u6bd4tomcat\u66f4\u597d\u7684\u6027\u80fd\\n    location \\\\.(css|js|png|jpg|gif|ico){\\n        root /home/www/static;\\n    }\\n    \\n    location = /html/ie.html {\\n        root /home/www/static;\\n    }\\n    \\n    location = ^~ /fonts/ {\\n        root /home/www/static;\\n    }\\n}\\n```\\n\\n\\n\\n\u7f13\u51b2\u4e0e\u7f13\u5b58\\n\\n**\u7f13\u51b2:\u5f02\u6b65\u7f51\u7edc**, response\u4eceserver\u4ea4\u7ed9nginx\u540e\u5c31\u91ca\u653e\u94fe\u63a5, \u653e\u5728nginx\u7684buffer\u91cc\u9762, \u4f7f\u5f97\u8fde\u63a5\u7684\u6301\u7eed\u65f6\u95f4\u53d6\u51b3\u4e8enginx\u548cserver\u7684\u7f51\u901f\u800c\u4e0e\u590d\u6742\u7684client\u60c5\u51b5\u65e0\u5173\\n\\nnginx\u9ed8\u8ba4\u542f\u7528\u7f13\u51b2\\n\\n**\u7f13\u5b58:\u54cd\u5e94\u7f13\u5b58**, response\u7f13\u5b58\u5728\u78c1\u76d8, \u63a5\u53d7request\u5148\u770b\u7f13\u5b58\u6709\u6ca1\u6709, \u51cf\u5c11\u53d1\u9001\u7ed9server\u8bf7\u6c42\u6570\u91cf\\n\\n\u542f\u7528\u7f13\u5b58: \\n\\n```nginx\\nhttp {\\n    proxy_cache_path /data/nginx/cache keys_zone=mycache:10m;\\n    server {\\n        proxy_cache mycache;\\n        location / {\\n            proxy_pass http://localhost:8000;\\n        }\\n    }\\n}\\n```\\n\\n\\n\\n\u4e0d\u5355\u72ec\u62f7\u8d1d\u9759\u6001\u8d44\u6e90\u7684\u7f13\u5b58\u7b56\u7565\\n\\n```nginx\\nproxy_cache_path /data/nginx/cache keys_zone=static:100m\\nserver {\\n    # ...\\n    location \\\\.(css|js|png|jpg|gif|ico){\\n        proxy_cache static;\\n        # \u914d\u7f6e\u7f13\u5b58\u5931\u6548\u65f6\u95f4, \u9ed8\u8ba4\u4e0d\u5931\u6548\\n        proxy_cache_valid 200 302 10m;\\n        proxy_cache_valid 404 1m;\\n        proxy_cache_valid any 5m;\\n        proxy_pass http://localhost:8000;\\n    }\\n}\\n```\\n\\n\u4e00\u822c\u52a8\u6001\u5185\u5bb9\u7f13\u5b58\u4e0d\u653enginx, \u653eredis\u4e4b\u7c7b\\n\\n\\n\\n\u8d1f\u8f7d\u5747\u8861\\n\\n```nginx\\nupstream app {\\n    server localhost:8000;\\n    server localhost:8088;\\n}\\nserver {\\n    # ...\\n}\\nserver {\\n    # ...\\n}\\n```\\n\\nupstream\u5b9a\u4e49\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u7684\u670d\u52a1\u7ec4\\n\\n\u9ed8\u8ba4\u662f\u8f6e\u8be2(round-robin)\u673a\u5236\\n\\n```nginx\\nupstream app {\\n    least_conn; # \u6700\u5c0f\u8fde\u63a5\u673a\u5236, \u5c06\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u53d1\u7ed9\u6d3b\u52a8\u8fde\u63a5\u6700\u5c11\u7684server\\n    server localhost:8000;\\n    server localhost:8088;\\n}\\n```\\n\\n```nginx\\nupstream app {\\n    ip_hash; # \u4fdd\u8bc1\u4e86\u540c\u4e00\u4e2aip\u7684\u8bf7\u6c42\u603b\u662f\u8f6c\u53d1\u5230\u76f8\u540c\u670d\u52a1\u5668\\n    server localhost:8000;\\n    server localhost:8088;\\n}\\n```\\n\\n\u4e5f\u53ef\u4ee5\u52a0\u6743\u91cd\\n\\n```nginx\\nupstream app {\\n    server performance.server weight=3;\\n    server app1.server; # \u9ed8\u8ba4\u6743\u91cd1\\n    server app2.server;\\n}\\n```\\n\\n\\n\\n\u5065\u5eb7\u68c0\u67e5\\n\\n```nginx\\nupstream app {\\n    server example.com max_fails=3 fail_timeout=30s;\\n    # 30s\u5185\u5931\u8d25\u8d85\u8fc7\u4e09\u6b21, \u5c06\u670d\u52a1\u5668\u6807\u8bb0\u4e3a\u4e0d\u53ef\u752830s\\n}\\n```\\n\\n\\n\\n\u81ea\u5b9a\u4e49hash\\n\\n```nginx\\nupstream app {\\n    hash $request_uri consistent;\\n    server localhost:8000;\\n    server localhost:8088;\\n}\\n```\\n\\n**consistent \u542f\u7528 ketama \u4e00\u81f4\u54c8\u5e0c\u7b97\u6cd5, \u5728\u6dfb\u52a0\u6216\u5220\u9664\u670d\u52a1\u5668\u65f6, \u53ea\u4f1a\u91cd\u65b0\u6620\u5c04\u90e8\u5206key, \u6700\u5927\u6210\u90fd\u51cf\u5c11\u7f13\u5b58\u5931\u6548**\\n\\n\\n\\nhttps nginx\u5b8c\u6210https\u63e1\u624b\u53ef\u4ee5\u964d\u4f4e\u540e\u7aef\u63e1\u624b\u538b\u529b\\n\\n```nginx\\nserver {\\n    listen 443 ssl;\\n    server_name name;\\n    ssl_certificate /home/ssl/server.crt;\\n    ssl_certificare /home/ssl/server.key;\\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\\n    ssl_ciphers HIGH:!aNULL:!MD5\\n    # \u5982\u679c\u6709\u5bc6\u7801\\n    ssl_password_file /home/ssl/cert.pass;\\n}\\n```\\n\\n\u4f18\u5316: ssl\u63e1\u624b\u6709\u4e0d\u5c0f\u5f00\u9500,\u4fdd\u6301\u6d3b\u52a8\u8fde\u63a5\u548c\u91cd\u7528ssl\u4f1a\u8bdd\u53c2\u6570\u53ef\u4ee5\u89c1\u5e95\\n\\nnginx\u7684session\u5b58\u5728\u5de5\u4f5c\u8fdb\u7a0b\u5171\u4eab\u5e76\u6709`ssl_session_cache`\u914d\u7f6e\u7684ssl\u7f13\u5b58\u4e4b\u4e2d, 1M = 4000 Session, \u9ed8\u8ba45m\u8d85\u65f6, \u53ef\u4ee5\u4f7f\u7528`ssl_session_timeout`\u589e\u52a0\\n\\n```nginx\\nssl_session_cache shared:SSL:10m;\\nssl_session_timeout 10m;\\n```\\n\\n\\n\\n\u53cd\u4ee3TCP\u4e5f\u884c, \u4f8b\u5982mysql\u7b49\\n\\n```nginx\\n# http\\nhttp {\\n    server {\\n        # ...\\n    }\\n}\\n\\n# tcp\\nstream {\\n    server {\\n        # ...\\n    }\\n}\\n```\\n\\n\\n\\n```nginx\\nstream {\\n    upstream {\\n        # ...\\n        server any_server;\\n        keepalive 8; # \u8fde\u63a5\u6c60\u7a7a\u95f2\u8fde\u63a5\u7684\u6570\u91cf\\n    }\\n}\\n```\\n\\n\\n\\n\u8f6c\u53d1\u548c\u91cd\u5b9a\u5411:\\n\\n\u8f6c\u53d1\u662fserver\u7aef\u884c\u4e3a, \u53ef\u4ee5localhost; \u91cd\u5b9a\u5411\u662fclient\u7aef\u884c\u4e3a, \u9700\u8981\u7ed9\u53e6\u4e00\u4e2a\u670d\u52a1\u5668\u7684ip/domain\\n\\nnginx\u7684 `return` `rewrite` \u91cd\u5b9a\u5411\\n\\n\u5c06\u8001\u57df\u540d\u7684\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230\u65b0\u57df\u540d\\n\\n```nginx\\nserver {\\n    listen 80;\\n    listen 443 ssl;\\n   \\tserver_name www.old.com old.com;\\n    return 301 $scheme://www.new.com$request_uri;\\n}\\n```\\n\\n\\n\\nrewrite\u7528\u4e8e\u6b63\u5219\u66ff\u6362\u8bf7\u6c42URI\u7684\u5730\u5740\\n\\n\u4f8b\u5982\u7528\u4e8e\u89c6\u9891\u7b49\u8bf7\u6c42, \u5148\u66ff\u6362, \u518d\u91cd\u5b9a\u5411\\n\\n\\n\\n\u5176\u4ed6\u6307\u4ee4:\\n\\ngzip \u51cf\u5c11\u5927\u5c0f, \u52a0\u5927tcp\u5f00\u9500\\n\\nsendfile \u6d88\u9664\u6587\u4ef6\u4f20\u8f93\u7684\u7f13\u51b2\u533a\u5f00\u9500, \u76f4\u63a5\u5199\u5165\\n\\n```nginx\\nlocation /download {\\n    sendfile on;\\n    tcp_nopush on;\\n}\\n```\\n\\nerror_page\u6307\u5b9a\u9519\u8bef\u9875\u9762\\n\\n\\n\\n\u63a8\u8350\u5199\u6cd5:\\n\\n- \u91cd\u590d\u7684\u6307\u4ee4\u7ee7\u627f\u7236\u7ea7(\u63d0\u53d6\u516c\u5171\u9879)\\n- \u4e0d\u8981\u5c06\u6240\u6709\u8bf7\u6c42\u4ee3\u7406\u5230\u540e\u7aef, \u7f13\u5b58/\u9759\u6001\u76ee\u5f55\\n\\n- \u4f7f\u7528`try_file`\u800c\u4e0d\u662f`if -f`\\n- \u4fdd\u6301\u91cd\u5199\u89c4\u5219\u7b80\u5355\u5e72\u51c0\\n- \u4e0d\u8981\u5c06root\u914d\u7f6e\u4e3a`/`\\n- \u614e\u7528chmod 777, \u7528`namei -om path`\u663e\u793a\u8def\u5f84\u4e0a\u7684\u6240\u6709\u6743\u9650\u627e\u95ee\u9898"},{"id":"/cs144/cs144 lec notes","metadata":{"permalink":"/blog/cs144/cs144 lec notes","source":"@site/blog/cs144/cs144 lec notes.md","title":"CS144 Lecture Notes","description":"Unit 1: Internet and IP","date":"2024-09-20T00:00:00.000Z","tags":[{"inline":true,"label":"network","permalink":"/blog/tags/network"},{"inline":true,"label":"cs144","permalink":"/blog/tags/cs-144"}],"readingTime":68.02,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"CS144 Lecture Notes","date":"2024-9-20","author":"ayanami","format":"md","tags":["network","cs144"]},"unlisted":false,"prevItem":{"title":"nginx\u57fa\u7840","permalink":"/blog/nginx"},"nextItem":{"title":"Django_mosh","permalink":"/blog/django-mosh"}},"content":"## Unit 1: Internet and IP\\n\\n\\n\\n\u7f51\u7edc\u56db\u5c42\u6a21\u578b:application, transport, network, link\\n\\n7\u5c42OSI, \u62c6app,trans,link\u4e3a\u66f4\u7ec6\u7684\u4e24\u4e2a\\n\\n\u7f51\u7edc\u7684\u57fa\u7840\u548c\u5e95\u5c42\u662fIP, \u53ea\u6709IP model\u662f\u4e0d\u53ef\u66ff\u4ee3\u7684\u201c\u7ec6\u8170\u201d,\u4e0a\u5c42\u7684application\u3001transport\u548c\u4e0b\u5c42\u7684link\u90fd\u662f\u53ef\u4ee5\u66ff\u6362\u7684\\n\\napplication \u5e94\u7528\u5c42,smtp, ftp, http, ssh\\n\\ntransport \u4f20\u8f93\u5c42,tcp, udp, rdp\\n\\nlink \u8fde\u63a5\u5c42,4G, WiFi, ...\\n\\n\u7f51\u7edc\u8fde\u63a5\u7684\u51e0\u79cd\u5e38\u89c1\u4f8b\u5b50:\\n\\nclient\\\\-server, BitTorren \u4e00\u670d\u52a1\u5668\u591aclient\u7684\u96c6\u7fa4, ......\\n\\n\u7f51\u7edc application\u4e0a :read/write\\n\x3c!--truncate--\x3e\\n\u4f20\u8f93\u8fc7\u7a0b app\\\\-\\\\>...\\\\-\\\\>link\\\\-\\\\>(link\\\\-\\\\>network\\\\-\\\\>link)(router) \\\\-\\\\>... link\\\\-\\\\>...\\\\-\\\\>app\\n\\n\\n\\nIP(Internet protocol) service model:\\n\\n\u8bbe\u8ba1\u76ee\u6807:\u7b80\u5355\u751a\u81f3\u7b28\u62d9,\u7aef\u5230\u7aef(end\\\\-to\\\\-end),\u610f\u5473\u7740\u5c3d\u53ef\u80fd\u51cf\u5c11\u4e2d\u95f4router\u7684\u5de5\u4f5c\u91cf,\u80fd\u653e\u5728end\u7684\u8ba1\u7b97\u673a\u4e0a\u7684\u90fd\u653e\u5728end\u7684\u8ba1\u7b97\u673a\u4e0a\u3002\u5bf9\u4e0a\u4e0b\u505a\u975e\u5e38\u5c11\u7684\u5047\u8bbe\u3002\\n\\n\\n\\n\u51e0\u4e2a\u7279\u70b9:\\n\\n- Unreliable(\u4e0d\u4fdd\u8bc1\u80fd\u4f20\u5230) \u7531\u4e0a\u5c42\u7684\u534f\u8bae,\u5982tcp\u6765\u5b9e\u73b0\u91cd\u4f20\u7b49\u786e\u4fdd\u4f20\u5230\\n- Best effort: \u5c3d\u91cf\u4f20\u5230,\u53ea\u6709\u5728\u5fc5\u8981\u65f6\u624d\u4e22\u5f03\u6570\u636e\u5305(\u4ec0\u4e48\u662f\u5fc5\u8981\u65f6\uff1f\u4f8b\u5982\u4e2d\u95f4\u8def\u7531\u5668\u6ee1\u4e86\u65e0\u6cd5\u5904\u7406\u65b0\u8bf7\u6c42)\\n- Datagram:\u4f20\u8f93\u7684\u6bcf\u4e00\u4e2a\u5305(packets)\u90fd\u662f\u81ea\u8def\u7531(individually routed),\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86`Src_IP`\u548c`Dst_IP`\u4e0d\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u5305\u6765\u4f20\u8f93,\u540c\u65f6\u4f20\u8f93\u4f9d\u9760\u8def\u7531\u5668\u4e00\u8df3\u4e00\u8df3(hop\\\\-by\\\\-hop)\\n- Connectionless: \u65e0\u72b6\u6001,\u5305\u7684\u987a\u5e8f\u53ef\u4ee5\u88ab\u6253\u4e71,\u53d1\u9001\u548c\u63a5\u53d7\u4e5f\u6ca1\u6709\u8981\u6c42\u201c\u5efa\u7acb\u8fde\u63a5\u201d\\n\\n\u4e00\u4e9b\u7ec6\u8282:\\n\\n- Tries to prevent packets looping: packet\u5185\u7b80\u5355\u5bf9\u8df3\u8f6c\u6b21\u6570\u8ba1\u6570,\u8fbe\u5230\u67d0\u4e2a\u503c\u65f6router\u4f1a\u4e22\u5f03\\n- \u5927\u6570\u636e\u5305\u4f1a\u62c6\u6210\u591a\u4e2a (fragment)\\n- \u4f7f\u7528IP \u6807\u5934\u6821\u9a8c\u662f\u5426\u53d1\u9001\u9519\u8bef\u548c\u91cd\u65b0\u7ec4\u5408\\n\\n- \u5141\u8bb8\u52a0\u5165\u65b0\u5b57\u6bb5\\n\\nIP \u6807\u5934\\n\\n![ipv4\\\\-datagram](https://s2.loli.net/2024/09/05/6wuf2QUWsX5pGd7.png)\\n\\n\\n\\n\u5927\u90e8\u5206\u5b57\u6bb5\u90fd\u662f\u4e0d\u8a00\u800c\u55bb\u7684,flags\u548cfragment offset\u7528\u4e8e\u62c6\u5206\u6570\u636e\u7684\u91cd\u65b0\u7ec4\u5408,checksum\u662f\u6807\u5934\u7684,\u7528\u4e8e\u68c0\u6d4b\u662f\u5426\u635f\u574f,protocol ID\u6839\u636eID\u6307\u5b9a\u534f\u8bae,\u6bd4\u5982TCP, version\u6307\u5b9aIPv4, TTL\u7528\u4e8e\u8df3\u8f6c\u8ba1\u6570\u907f\u514d\u5faa\u73af,type of service\u662f\u4e00\u4e2a\u670d\u52a1\u5668\u6807\u8bc6\u7b26,\u7528\u4e8e\u8868\u8fbe\u8fd9\u4e2a\u5305\u7684\u91cd\u8981\u6027\\n\\n\\n\\n\\n\\n\u53ef\u4ee5\u7528`traceroute`\u67e5\u770b\u5305\u5728\u8def\u7531\u5668\u4e2d\u7684\u8def\u5f84\\n\\nTCP Byte Stream\\n\\n\u901a\u8fc7`{IP, port}`\u6765\u901a\u4fe1,\u4e2d\u95f4\u8fc7\u8ba1\u7b97\u673a\u6216\u8005router, \u4f8b\u5982wifi\u7b2c\u4e00\u8df3\u662f\u8fc7wifi\u63a5\u5165\u70b9\u8def\u7531\u5668\\n\\n\u8def\u7531\u5668\u8f6c\u53d1:\u8f6c\u53d1\u8868\u6a21\u5f0f\u5339\u914d(\u6700\u5927\u524d\u7f00\u5339\u914d)\\n\\n> \u5982\u679c\u5728\u5730\u5740\u5339\u914d\u8fc7\u7a0b\u4e2d,\u4e0d\u80fd\u548c\u8def\u7531\u8868\u4e2d\u4efb\u4f55\u6761\u76ee\u6240\u5339\u914d,packet\u5c06\u88ab\u4e22\u5f03\u3002\\n>\\n> \u3010\u4e00\u4e2a\u540d\u4e3a Destination Unreachable(\u76ee\u6807\u4e0d\u53ef\u8fbe)\u7684ICMP\u4fe1\u606f\u5c06\u53d1\u56de\u7ed9\u6e90\u5730\u5740\u3011\\n\\n\\n\\n\\n\\nTCP \u4e09\u6b21\u63e1\u624b(3\\\\-way handshake) \\n\\n- client \\\\\\\\-\\\\> server SYN \u8bf7\u6c42\\n- server \\\\\\\\-\\\\> client SYN/ACK \u786e\u8ba4\u8bf7\u6c42\\n- client \\\\\\\\-\\\\> server ACK \u786e\u8ba4\u8bf7\u6c42\\n\\n\\n\\npacket switching:\\n\\n**Independently** for each arriving packet, pick its outgoing link. If the link is free, send it. Else **hold the packet** for later.\\n\\n\u65e9\u671f\u7684\u8df3\u8dc3\u662f\u8fd9\u6837\u7684,\u6bcf\u4e00\u4e2a\u8def\u7531\u5668\u5c06src_ip\u6539\u6210\u81ea\u5df1(\u8fd9\u5c31\u662fNAT,\u7f51\u7edc\u5730\u5740\u8f6c\u6362,\u5c06\u5927\u91cf\u7684\u79c1\u6709IP\u9690\u85cf\u5728\u5c11\u91cf\u516c\u6709IP\u91cc\u9762),\u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\u8d70\\n\\n> \u5b89\u5168\u7f51\u5173\u5904\u4e8e\u79c1\u6709\u7f51\u7edc\u548c\u516c\u6709\u7f51\u7edc\u7684\u8fde\u63a5\u5904\u3002\u5f53\u5185\u90e8PC(10.1.1.2)\u5411\u5916\u90e8\u670d\u52a1\u5668(202.1.1.2)\u53d1\u9001\u4e00\u4e2aIP\u53051\u65f6,IP\u5305\u5c06\u901a\u8fc7\u5b89\u5168\u7f51\u5173\u3002\u5b89\u5168\u7f51\u5173\u67e5\u770b\u5305\u5934\u5185\u5bb9,\u53d1\u73b0\u8be5IP\u5305\u662f\u53d1\u5411\u516c\u6709\u7f51\u7edc\u7684,\u7136\u540e\u5b83\u5c06IP\u53051\u7684\u6e90\u5730\u574010.1.1.2\u6362\u6210\u4e00\u4e2a\u53ef\u4ee5\u5728Internet\u4e0a\u9009\u8def\u7684\u516c\u6709\u5730\u5740202.1.1.1,\u5e76\u5c06\u8be5IP\u5305\u53d1\u9001\u5230\u5916\u90e8\u670d\u52a1\u5668,\u4e0e\u6b64\u540c\u65f6,\u5b89\u5168\u7f51\u5173\u8fd8\u5728\u7f51\u7edc\u5730\u5740\u8f6c\u6362\u8868\u4e2d\u8bb0\u5f55\u8fd9\u4e00\u6620\u5c04\u3002\u5916\u90e8\u670d\u52a1\u5668\u7ed9\u5185\u90e8PC\u53d1\u9001IP\u53051\u7684\u5e94\u7b54\u62a5\u65872(\u5176\u521d\u59cb\u76ee\u7684\u5730\u5740\u4e3a202.1.1.1),\u5230\u8fbe\u5b89\u5168\u7f51\u5173\u540e,\u5b89\u5168\u7f51\u5173\u518d\u6b21\u67e5\u770b\u5305\u5934\u5185\u5bb9,\u7136\u540e\u67e5\u627e\u5f53\u524d\u7f51\u7edc\u5730\u5740\u8f6c\u6362\u8868\u7684\u8bb0\u5f55,\u7528\u5185\u90e8PC\u7684\u79c1\u6709\u5730\u574010.1.1.2\u66ff\u6362\u76ee\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d,\u5b89\u5168\u7f51\u5173\u5bf9PC\u548cServer\u6765\u8bf4\u662f\u900f\u660e\u7684\u3002\u5bf9\u5916\u90e8\u670d\u52a1\u5668\u6765\u8bf4,\u5b83\u8ba4\u4e3a\u5185\u90e8PC\u7684\u5730\u5740\u5c31\u662f202.1.1.1,\u5e76\u4e0d\u77e5\u905310.1.1.2\u8fd9\u4e2a\u5730\u5740\u3002\u56e0\u6b64,NAT\u201c\u9690\u85cf\u201d\u4e86\u4f01\u4e1a\u7684\u79c1\u6709\u7f51\u7edc\u3002\\n\\n\u4f46\u5b89\u5168\u95ee\u9898\u6bd4\u8f83\u5927,\u8def\u7531\u5668\u4e0d\u5e0c\u671b\u76ee\u6807\u77e5\u9053\u81ea\u5df1\u7684ip, \u5c31\u6539\u6210\u5168dst, \u6bcf\u6b21\u8df3\u8dc3\u90fd\u5c06src\u6539\u4e3a\u4e0b\u4e00\u8df3\u7684ip\\n\\n\u7ed3\u679c\\n\\n- \u7b80\u5355\u7684packet\u4f20\u64ad\\n- \u9ad8\u6548\u7684\u94fe\u63a5\u5171\u4eab\\n\\n\\n\\nNo per\\\\-flow state required:\\n\\n\u4e24\u7aef\u4e0d\u9700\u8981\u77e5\u9053router\u7684state, router\u4e0d\u9700\u8981\u5b58\u50a8\u5176\u4ed6\u7684state(\u56e0\u800c\u4e0d\u9700\u8981\u8003\u8651\u6e05\u9664\u9519\u8bef\u7684\u72b6\u6001)\\n\\n\u7531\u4e8e\u662f\u4ee5\u5305\u4f5c\u4e3a\u6700\u5c0f\u5355\u4f4d,\u94fe\u63a5\u5171\u4eab\u548c\u6d41\u91cf\u5206\u914d\u5f88\u7b80\u5355\\\\-\\\\>\u6839\u672c\u4e0d\u9700\u8981\u7ba1\u8c01\u4f20\u8fc7\u6765\u7684,\u6709\u5305\u5c31\u53d1\\n\\n\\n\\nLayering \u5206\u5c42:\\n\\nseperation concerns\\n\\n\u6a21\u5757\u5316,\u91cd\u7528,\u660e\u786e\u7684\u4e0a\u4e0b\u8fb9\u754c,\u5173\u6ce8\u70b9\u5206\u79bb,Peer\\\\-to\\\\-peer communication\\n\\n\\n\\n\u88c5\u5305\u662f\u7075\u6d3b\u7684\\n\\nVPN example\\n\\n\u4ece\u91cc\u5230\u5916HTTP data \\\\\\\\-\\\\> TCP(to web) \\\\-\\\\>IP(to web) \\\\\\\\-\\\\> TLS(to VPN)\\\\-\\\\>TCP(to VPN)\\\\-\\\\>IP(to VPN)\\\\\\\\-\\\\> Ethernet(to next hop) \\n\\n\\n\\n\u5b57\u8282\u5e8f,\u5185\u5b58:\u7f51\u7edc\u5b57\u8282\u5e8f,\u5927\u7aef\u5e8f\\n\\nIPv4\\n\\n32\u4f4d a.b.c.d 192.168.0.1 \\n\\nnetmask \u5b50\u7f51\u63a9\u7801:**apply this mask, if it matches, in te same network** (if IP_A & mask == IP_B & mask,\u5728\u4e00\u4e2a\u5b50\u7f51\u91cc\u9762)\\n\\n\u4f8b\u5982 netmast 255.255.255.0 \u610f\u5473\u7740\u524d24bit match\\n\\n**\u7b2c\u4e00\u8df3\u65f6,\u5982\u679cSrc_IP \u548c Dst_IP\u5728\u540c\u4e00\u5b50\u7f51\u5185,\u4e0d\u8d70\u5916\u9762\u8def\u7531\u5668** \\\\\\\\-\\\\> 127.0.0.1 \u548c 127.X.X.X\\n\\n```shell\\n> ifconfig\\n...\\ninet 127.0.0.1  netmask 255.0.0.0\\n...\\n```\\n\\n\\n\\n\u5730\u5740\u7ed3\u6784(historical):\\n\\n![image\\\\-20240905234039196](https://s2.loli.net/2024/09/05/BQAF9LH7EI1tZo8.png)\\n\\n\\n\\n\u95ee\u9898:\u4e0d\u591f\u7075\u6d3b\\n\\n\u76ee\u524d:CIDR Classless Inter\\\\-Domain Routing\\n\\n171.64.0.0/16  /16\u610f\u5473\u774016\u4f4d\u5b50\u7f51\u63a9\u7801,171.64.0.0 ~ 171.64.255.255\u90fd\u662f\\n\\nICANN ip\u5730\u5740\u5206\u914d\\n\\n\\n\\nLongest Prefix Match(\u6700\u957f\u524d\u7f00\u5339\u914d)\\n\\n\u8f6c\u53d1\u8868\u5b9e\u9645\u4e0a\u662f a set of CIDR entries\\n\\n| dest                                         | link |\\n| -------------------------------------------- | ---- |\\n| 0.0.0.0/0 (x.x.x.x, default, \u6bcf\u4e2arouter\u90fd\u6709) | 1    |\\n| 171.33.0.0/16 (171.33.x.x)                   | 5    |\\n\\n\\n\\nAddress Resolution Protocol(ARP) \u5730\u5740\u89e3\u6790\u534f\u8bae\\n\\n\u89e3\u51b3\u95ee\u9898:\u6211\u6709IP, \u90a3\u53d1\u9001\u5230\u54ea\u4e2a\u786c\u4ef6\uff1f(Link\u5c42,\u63cf\u8ff0\u7279\u5b9a\u7f51\u5361,\u6709\u552f\u4e00ID)\\n\\neg 48bit Ethernet 00:13:72:4c:d9:6a\\n\\n\\n\\n\u4f8b\u5982,\u6709\u4e00\u4e2a\u7f51\u5173gateway\u4ea4\u6362\u673a,\u4ed6\u6709\u4e0d\u540c\u7684\u63a5\u53e3,\u5bf9\u5e94\u4e0d\u540c\u7684ip\\n\\n\u4eceIP_A \\\\-\\\\> IP_B\u7684\u5185\u90e8\u8bf7\u6c42,IP_A\u5148\u7531\u5b50\u7f51\u63a9\u7801\u628a\u8bf7\u6c42\u53d1\u5230gateway\u63a5\u53e3A, gateway\u8bc6\u522bpacket\u7684dst_IP\u4e4b\u540e\u901a\u8fc7\u63a5\u53e3B\u53d1\u51fa,\u518d\u7531\u5b50\u7f51\u63a9\u7801\u53d1\u9001\u5230IP_B\\n\\n \\n\\nARP link \u548c network\u5c42\u4e4b\u95f4,\u7f13\u5b58 ip \\\\<-\\\\> link \u5730\u5740\u7684mapping\\n\\n\u7b80\u5355\u7684 request-reply \u7ed3\u6784\\n\\n\u8981\u53d1\u9001\u6d88\u606f\u7ed9ip X, \u5148\u67e5\u7f13\u5b58, \u5982\u679c\u6ca1\u6709, sent request to link layer broadcast address \u201c\u8c01\u6709IP X?\u201d\\n\\n\u5f53IP_X\u63a5\u6536\u5230\u6570\u636e\u7684\u65f6\u5019\u7ed9Src\u53d1\u201c\u6211\u6709IP X\\"(\u4e0d\u8d70\u5e7f\u64ad)\\n\\n\\n\\n\\n\\n## Unit 2: Transport\\n\\nThe TCP Service Model\\n\\n\\n\\nReliable byte delivery service\\n\\n- Acknowledgments indicate correct delivery\\n- Checksums detect corrupted data\\n- Sequance numbers detect missing data\\n- Flow-control prevents overruning receiver\\n- Congestion Control \u62e5\u5835\u63a7\u5236\\n\\n\\n\\nTCP Segment Format\\n\\nUnique TCP connection: IP DA, IP SA, Protocol ID=\\"TCP\\", Source Port, Destation Port\\n\\n![image-20240906195851377](https://s2.loli.net/2024/09/06/sNe1a4CtuPxMKB2.png)\\n\\n\u901a\u8fc7sequence \u548cacknowledgment sequence\u53ef\u4ee5\u786e\u5b9a\u524dN\u4e2a\u5b57\u8282\u5df2\u7ecf\u6b63\u786e\u53d1\u9001,sequence\u662fTCP Data\u7684\u9996\u4e2a\u5b57\u8282\u5728TCP\u8bd5\u56fe\u53d1\u9001\u7684\u5b57\u8282\u6d41\u4e2d\u4f4d\u7f6e\\n\\n\\n\\nFIN flag \u6807\u5fd7\u5173\u95ed,\u5173\u95edTCP\u8fde\u63a5\u7684\u8fc7\u7a0b\u5c31\u662f\u4e00\u65b9A\u5148\u53d1FIN, \u5173\u95edA-\\\\\\\\>B\u7684\u7ba1\u9053, \u4e4b\u540eB\u786e\u5b9a\u53d1\u9001\u5b8c\u6570\u636e\u540e\u53d1\u9001FIN\u5230A, \u5173\u95edB\u5230A\u7ba1\u9053\u3002 PSH\u6307\u793a\u7acb\u523b\u53d1\u9001\u65b0\u6570\u636e\u800c\u4e0d\u662f\u7b49\u5f85\u66f4\u591a\u8001\u6570\u636e\\n\\n\\n\\nwindow-based flow control\\n\\nretransmission and timeouts\\n\\n\\n\\nUDP Service Model\\n\\n\\n\\nUDP \u6807\u5934\u53ea\u6709\u56db\u4e2a\u6bb5:\\n\\nSource Port, Destination Port, Checksum, Length\\n\\n\\n\\nNo connection established\\n\\n**Packets may show up in any order!!!**\\n\\n\u6ca1\u6709\u786e\u8ba4,\u6ca1\u6709\u68c0\u6d4b\u4e22\u5305\u548c\u4e71\u5e8f\u7684\u673a\u5236,\u6ca1\u6709\u6d41\u91cf\u63a7\u5236\\n\\n\\n\\nICMP Internet Control Message Protocal\\n\\nCommunicates network layer info between end hosts and routers\\n\\nReports error conditions\\n\\n\\n\\n- Reporting Message\\n- Unreliable - no retries\\n\\n\\n\\n\u5178\u578b\u7684ICMP IP header | ICMP header | ICMP data\\n\\nICMP header\u91cc\u9762\u4e3b\u8981\u5c31\u662f type \u548c code, \u4e24\u8005\u5408\u8d77\u6765\u63cf\u8ff0\u4e86\u4e00\u4e2amessage(\u901a\u8fc7\u5bf9\u7167\u8868, \u4f8b\u5982 )\\n\\n| 0-Echo\u54cd\u5e94   | 0    | Echo\u54cd\u5e94\u62a5\u6587       |\\n| ------------ | ---- | ------------------ |\\n| 3-\u76ee\u7684\u4e0d\u53ef\u8fbe | 0    | \u76ee\u6807\u7f51\u7edc\u4e0d\u53ef\u8fbe\u62a5\u6587 |\\n\\n\u7528\u4e8e ping, traceroute\u7b49\\n\\n\\n\\ntraceroute\u600e\u4e48\u5b9e\u73b0\uff1f\u5f88\u7cbe\u5de7\u7684\u8bbe\u8ba1\\n\\nclientA-\\\\\\\\>B A\u53d1\u9001\u4e00\u4e2aTTL\u4e3a1\u7684UDP message,\u7136\u540e\u7b2c\u4e00\u4e2arouter\u63a5\u53d7,TTL\u4e3a0, \u51b3\u5b9a\u4e22\u5f03\u5e76\u56de\u4f20\u4e00\u4e2aICMP\u6d88\u606f\\n\\n| 11-ICMP\u8d85\u65f6 | 0    | TTL\u8d85\u65f6\u62a5\u6587 |\\n| ----------- | ---- | ----------- |\\n\\n\\n\\n clientA\u62ff\u5230\u8fd9\u4e2a\u62a5\u6587\u5c31\u5f97\u5230\u4e86\u7b2c\u4e00\u4e2arouter\u8282\u70b9\u7684\u4fe1\u606f,\u4e4b\u540e\u5c31\u53ef\u4ee5\u53d1\u9001\u4e00\u4e2aTTL=2\u7684...\u4ee5\u6b64\u7c7b\u63a8\\n\\n\\n\\nEnd-To-End Principle\\n\\nError Detection\\n\\n- Checksum:\u7b80\u5355\u5c06data \u52a0\u548c,\u5f31\u4f46\u5feb\\n- CRC\u6821\u9a8c:\u8ba1\u7b97\u591a\u9879\u5f0f\u4f59\u6570 \u5f3a\u4e00\u4e9b,\u6162\u4e00\u4e9b,\u7ea0\u9519\u4e00\u4f4d,\u67e5\u95192\u4f4d\\n- \u6d88\u606f\u9a8c\u8bc1\u7801MAC -\\\\> TLS, \u9700\u8981\u5bc6\u94a5 \u5269\u4e0b\u7684\u4e00\u70b9\u95ee\u9898\u5728\u4e0e\u4e00\u4e2ak\u4f4d\u7684\u7801\u5982\u679c\u53d1\u751f\u5355\u4f4d\u7ffb\u8f6c,\u67092^-k\u7684\u53ef\u80fd\u68c0\u6d4b\u4e0d\u51fa\u6765,\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u4e0a\u53ef\u80fd\u4e0d\u5982CRC\\n\\n\\n\\nIP/UDP/TCP Checksum: \u62a5\u5934\u4e2d\u6240\u6709\u5176\u4ed616\u4f4d\u5b57\u7684\u53cd\u7801\u548c\u768416\u4f4d\u53cd\u7801\\n\\n\u68c0\u9a8c,\u6574\u4e2aIP\u6807\u5934\u7684\u6c42\u548c\u7ed3\u679c\u5e94\u8be5\u4e3a0(\u4fee\u6539\u6807\u5934\u6bd4\u5982TTL\u65f6\u9700\u8981\u91cd\u65b0\u8ba1\u7b97)\\n\\n\u5feb,\u4f46\u53ea\u4fdd\u8bc1\u67e51\u4f4d\u9519\\n\\nLink Layer\u5e7f\u6cdb\u4f7f\u7528CRC\\n\\nMAC\\n\\n\\n\\n\u6709\u9650\u72b6\u6001\u673a FSM\\n\\n![FSM](https://code.wandoer.com/wp-content/uploads/2019/03/tcpfsm.jpg)\\n\\n ![img](https://upload.wikimedia.org/wikipedia/en/5/57/Tcp_state_diagram.png)\\n\\n\\n\\n\\n\\nFlow Control\\n\\nsender\u53ef\u4ee5send 500000\u4e2apacket/s\\n\\nreceiver \u53ea\u80fdreceive 200000\u4e2a\\n\\n\u539f\u5219\u662fsender\u51cf\u5c11\u53d1\u9001\u7684\u5305\u6570\u91cf,receiver give feedback\\n\\n- stop & wait sender\u53d1\u4e00\u4e2a\u5c31\u7b49\u4e00\u4e2aACK, \u9664\u975e\u8d85\u65f6\u6ca1\u6709\u63a5\u53d7ACK\u91cd\u53d1,receiver\u63a5\u4e00\u4e2a\u56de\u4e00\u4e2aACK\\n\\n\u6709\u4e00\u4e2a\u95ee\u9898\u662fACK Delay\\n\\n\u5982\u679csender\u53d1\u4e86\u4e00\u4e2a\u5305A0,\u4f46ACK\u5728timeout\u4e86,\u5c1d\u8bd5\u91cd\u53d1A1\u540e\u624d\u6536\u5230,\u4e8e\u662fsender\u7ee7\u7eed\u53d1\u4e0b\u4e00\u4e2a\u5305B0,sender\u5982\u4f55\u533a\u5206\u6b64\u65f6\u63a5\u53d7\u5230\u7684ACK\u662fA1\u7684ACK\u8fd8\u662fB0\u7684ACK?\\n\\n\u4e00\u79cd\u90e8\u5206\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u52a0\u5165\u4e00\u4e9b\u6807\u5fd7\u4f4d\u6765\u6807\u8bc6\u662f\u8fd9\u4e2apacket\u662f\u590d\u5236\u8fd8\u662f\u539f\u59cb\u6570\u636e,\u4f46\u8fd8\u662f\u6709\u4e00\u4e9b\u95ee\u9898,\u4f8b\u5982\u8fd9\u6837\u5047\u8bbe\u4e86\u7f51\u7edc\u4f20\u8f93\u7684\u6570\u636e\u4e0d\u662f\u590d\u5236\u7684,\u8fd8\u6709\u65e0\u6cd5\u89e3\u51b3\u957f\u5ef6\u8fdf\u7684\u95ee\u9898(\u5047\u8bbe\u6709k\u4e2a\u6807\u5fd7\u4f4d,\u6700\u591a\u8bb0\u5f55\u7b2c2^k^\u6b21\u91cd\u53d1,\u5982\u679c\u6709\u8d85\u8fc72^k^\u6b21timeout\u7684\u5ef6\u8fdf,\u5c31\u8fd8\u662f\u4f1a\u51fa\u73b0\u65e0\u6cd5\u533a\u5206\u91cd\u53d1\u548c\u65b0\u5305\u7684\u95ee\u9898)\\n\\n\u5f53\u7136\u901a\u8fc7\u52a8\u6001\u8c03\u8282timeout\u548c\u628aACK\u505a\u6210\u4e00\u4e2a\u591f\u957f\u7684\u6807\u5fd7(\u6bd4\u5982\u4e0b\u9762\u7684\u5e8f\u5217\u53f7)\u662f\u53ef\u4ee5\u505a\u7684,\u6bd4\u5982\u4e0b\u6587\u7684\u6ed1\u52a8\u7a97\u53e3\u5c31\u662fstop & wait\u7684\u6cdb\u5316,\\n\\n> linux \u4e0b\u8fd9\u4e2atimeout\u88ab\u52a8\u6001\u5730(\u901a\u8fc7\u6d4b\u91cf\u53d1\u51fa\u5230ACK\u7684\u65f6\u95f4\u91c7\u6837\u7b49\u65b9\u6cd5)\u8c03\u8282\u4e3a\u7565\u5927\u4e8e\u4f20\u8f93\u65f6\u95f4,\u4e3a\u4e86\u5904\u7406\u7f51\u7edc\u7684\u6ce2\u52a8\u6027,\u5982\u679c\u53d1\u73b0\u4e00\u4e2a\u5305\u91cd\u4f20\u4e4b\u540e\u8fd8\u662f\u4e22,\u5c31\u628atimeout\u8bbe\u7f6e\u4e3a\u539f\u6765\u76842\u500d\\n\\n\u5bf9\u4e8e\u91cd\u590d\u7684\u66f4\u4f18\u5904\u7406\u8fd8\u4f1a\u6709SACK\u5b57\u6bb5(\u9009\u62e9\u6027\u786e\u8ba4),receiver\u56de\u4f20\u6570\u636e\u8868\u660e\u54ea\u91cc\u662f\u590d\u5236\u4e86,sender\u77e5\u9053\u4e4b\u540e\u5c31\u7ee7\u7eed\u53d1\u9001\u4e86\\n\\n\\n\\n\u66f4\u5927\u7684\u95ee\u9898\u5728\u4e8e\u901f\u5ea6,\u5047\u8bbe\u4e24\u5730\u670950ms\u5ef6\u8fdf,\u6765\u56de100ms, \u4e00\u4e2a\u5305\u6bd4\u59821.5KB, \u8fd9\u6837\u7684\u7f51\u7edc\u6700\u5927\u53ea\u80fd\u670915KB\u7684\u901f\u7387\uff01\\n\\n\\n\\n\\n\\n- sliding window\\n\\n\u5141\u8bb8\u591a\u4e2a\u672a\u786e\u8ba4\u7684\u7247\u6bb5 (multiple un-acked segments)\\n\\n\u5c06\u4e00\u4e9b\u7ed1\u8d77\u6765\u7684\u7247\u6bb5\u53eb\u505awindow,\u59cb\u7ec8\u4fdd\u6301\u7ba1\u9053\u901f\u7387\u62c9\u6ee1\\n\\n\u4ec0\u4e48\u610f\u601d\uff1f\u539f\u5148\u53ea\u80fd\u67091\u4e2a\u5305\u5728\u8def\u4e0a,\u73b0\u5728\u53ef\u4ee5\u6709n\u4e2a\\n\\n\\n\\nSender\\n\\n\u6bcf\u4e2a\u7247\u6bb5\u90fd\u6709\u4e00\u4e2a\u5e8f\u5217\u53f7(SeqNo)\\n\\n\u7ef4\u62a4\u4e09\u4e2a\u53d8\u91cf:Send window size(SWS),Last ack received(LAR), Last seg sent(LSS)\\n\\n\u7ef4\u6301\u7684\u8981\u6c42:LSS-LAR \\\\<= SWS, \u4fdd\u8bc1\u4e2d\u95f4\u98de\u7684\u5305 \\\\<= SWS \u4e2a (\u4e00\u4e2aSWS\u5927\u5c0f\u7684buffer\\n\\n\\n\\nReceiver\\n\\n\u8fd8\u662f\u7ef4\u62a4\u4e09\u4e2a\u53d8\u91cf:RWS, last acceptable seg(LAS), last seg received (LSR)\\n\\n\u8981\u6c42 LAS - LSR \\\\<= RWS, \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u7a97\u53e3\u662f5, \u4e0a\u4e00\u4e2a\u63a5\u53d7\u7684\u662f3, \u4e0d\u4f1a\u63a5\u53d79\u4ee5\u540e\u7684SeqNo\u7684\u5305,\u5e76\u4e14 LAS \\\\<= LSE + RWS\u90fd\u63a5\u53d7,\u4e5f\u5c31\u662f\u8bf49\u4e4b\u524d\u7684\u90fd\u662f\u53ef\u4ee5\u7684,\u6bd4\u59822,\u4f1a\u63a5\u53d7\u5e76\u56de\u4e00\u4e2aACK = \u4e0b\u4e00\u4e2a\u5b57\u8282 \\n\\n\u4e5f\u5c31\u662f\u8bf4 \u7b2c\u4e00\u4e2a\u5305\u5047\u5982\u662f 0-999\u5b57\u8282 ACK \u5c31\u662f1000\\n\\n\u4e0b\u6587\u4e2d ack \u5ffd\u7565\u6389\u8fd9\u4e2a\u503c\u533a\u522b \u53051,ACK1\u53ea\u8868\u793a\u903b\u8f91\u4e0a\u7684\u7b2c\u4e00\u4e2a\u5305\u548c\u7b2c\u4e00\u4e2aACK\\n\\n(\u903b\u8f91\u4e0a\u4e0b\u4e00\u4e2a\u5305,\u4f8b\u5982\u53d1\u90011,2\u4e22,345,\u56de\u7684ACK\u662f1 222)\\n\\n\\n\\n\u5982\u4f55\u77e5\u9053\u5305\u4e22\u4e86\\n\\n\u76ee\u524d\u7684\u65b9\u6cd5\u5c31\u662f\u7b49\u8d85\u65f6,\u4f8b\u59822\u4e22\u4e86\u4e00\u76f4\u7b49ACK 3,\u5230timeout\u4e86\u91cd\u53d12\\n\\n\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f\u6bd4\u5982\u6211\u5728\u53d112345,2\u4e22\u4e86,\u56deACK1 222, \u8fde\u7eed3\u4e2a2\u8868\u660e\u786e\u5b9e\u662f2\u4e22\u4e86,\u90a3\u5c31\u53ef\u4ee5\u4e0d\u7528\u7b49\u8d85\u65f6\u7acb\u523b\u89e6\u53d1\u91cd\u4f20(TCP\u5feb\u901f\u91cd\u4f20)\\n\\n\\n\\n\u90a3\u5982\u679cACK\u4e22\u4e86\u5462\uff1f\\n\\n\u5982\u679c\u662f\u524d\u9762\u7684ACK\u4e22\u4e86\u65e0\u6240\u8c13,\u6700\u540e\u4e00\u4e2aACK\u5c31\u8868\u660e\u8fd9\u4e2a\u4e4b\u524d\u7684\u6240\u6709\u90fd\u5df2\u7ecf\u63a5\u53d7,\u4e0d\u7136\u5c31\u91cd\u53d1\u5457\\n\\n\\n\\n\u91cd\u4f20\u591a\u5c11\uff1f\\n\\n- Go-back-N \u4e00\u4e2a\u5305loss,\u6574\u4e2awindow\u91cd\u4f20 \u5bf9\u7f51\u7edc\u60c5\u51b5\u60b2\u89c2\\n- Selective repeat \u53ea\u53d1loss\u7684 \u5bf9\u7f51\u7edc\u60c5\u51b5\u4e50\u89c2\\n\\n\u770b\u5b9e\u9645\u60c5\u51b5,\u4e0d\u4e00\u5b9a\u54ea\u4e2a\u5feb,\u8fd9\u662f\u4e00\u4e2atrade-off\\n\\n\\n\\nRWS \\\\<= SWS\\n\\n\\n\\n\u6240\u4ee5\u8fd9\u91cc\u9762\u7684\\n\\n![image-20240906195851377](https://s2.loli.net/2024/09/06/sNe1a4CtuPxMKB2.png)\\n\\nwindow size\u5c31\u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f,Seq \u548c ACK Seq\u5c31\u662f\u4e0a\u6587\u6240\u8ff0\u7684\u5e8f\u5217\u53f7\\n\\n\\n\\n\u4e00\u4e2a\u53d1\u9001\u7b2c4000-4999\u5b57\u8282\u7684\u5305,seqNo\u4f1a\u662f4000, Ack\u4f1a\u662f4999+1=5000=\u4e0b\u4e00\u4e2a\u5305\u5e94\u8be5\u7684seqNo\\n\\nRSVD: reserved\\n\\nHlen,\u4e5f\u53eboffset,\u8868\u660edata\u6bb5\u4ece\u54ea\u91cc\u5f00\u59cb\\n\\nFlags:ACK\u8868\u793aACK \u662f\u5426\u6709\u6548(\u7b2c\u4e00\u4e2a\u53d1\u51fa\u5305\u7684ack\u5c31\u65e0\u610f\u4e49,\u5176\u4ed6\u90fd\u6709\u610f\u4e49), SYN/FIN \u4f4d\u638c\u7ba1TCP\u8fde\u63a5(\u7b2c\u4e00\u4e2a\u5305, ack not set,syn set)\\n\\n\u6240\u4ee5\u540e\u9762\u4f20\u56de\u7684\u5c31\u662fsyn/ack ,\u4ece\u7b2c\u4e8c\u4e2a\u5305\u5f00\u59cb\u5c31\u7ed3\u675f\u4e86syn\u4e14\u6709\u5408\u6cd5ack,\u5c31\u662fack\\n\\nRST: reset the connection\\n\\n\\n\\n\\n\\nTCP Setup/Teardown\\n\\nSetup\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f,seqNo\u901a\u5e38\u4e0d\u4ece0\u5f00\u59cb(\u5b89\u5168\u539f\u56e0),\u6240\u4ee5\u7b2c\u4e00\u6b21\u63e1\u624b \\n\\nactive \u5e26\u4e0a \\\\{SYN, S~A~\\\\} (A means active) \u6211\u7684\u5e8f\u5217\u5f00\u59cb\u662fS~a~\\n\\npassive \u56de\u590d\\\\{SYN, S~P~, ACK, S~a+1~\\\\} (P means passive) \u8868\u660e\u6211\u7684\u5e8f\u5217\u5f00\u59cb\u662fS~p~\\n\\nactive \u56de\u590d \\\\{S~a+1~, ACK, S~P+1~\\\\}\\n\\n\u4ee5\u4e0a\u4e3a 0\u5b57\u8282 data\\n\\n\\n\\nTeardown\\n\\n\u4f7f\u7528FIN bit\\n\\nA-\\\\>B FIN,seq S~a~, ack S~b~\\n\\nB-\\\\>A ack S~a+1~\\n\\nB-\\\\>A FIN, seq S~b~, ack S~a+1~\\n\\nA-\\\\>B ack S~b+1~\\n\\n\\n\\ncleaning up safely\\n\\n\u5982\u679cteardown\u7684\u90e8\u5206(final ack)\u4e22\u5305\u600e\u4e48\u529e\uff1f\\\\-\\\\> \u4e0d\u7ba1\u4e22\u4e0d\u4e22,\u5728\u53d1\u51faFIN\u4e4b\u540e,active \u90fd\u4f1a\u5230TIME_WAIT\u72b6\u6001,\u5927\u7ea6\u4f1akeep socket twice the maxium segment lifetime,\u4e4b\u540e\u5173\u6389\u5e76\u91cd\u7f6e\\n\\n\\n\\n## Unit 3: Packet Switching\\n\\nCircuit Switching \u7535\u8bdd\\n\\nProblems\\n\\n- Inefficient (for brusty req)\\n- Diverse Rates\\n- State Management\\n\\n\\n\\nPacket Switching \\n\\n- \u901a\u8fc7\u8def\u7531\u8868\u72ec\u7acb\u8def\u7531\\n\\n- \u6240\u6709\u7684\u5305\u5171\u4eab\u76f8\u540c\u7684\u6700\u5927\u8fde\u63a5\u901f\u7387(router\u9700\u8981\u5927buffer\u6765\u6536\u5305)\\n- router\u65e0\u8fde\u63a5\u72b6\u6001\\n\\n\\n\\n\u597d\u5904:\\n\\n1. efficient use of expensive links \u5171\u4eab\u901f\u7387\u4f7frouter\u4e0d\u95f2\u7f6e\\n1. resilience to failure of links & routers, no state \\\\-\\\\> \u8f7b\u677e\u5207\u6362\u7ebf\u8def\\n\\n\\n\\nDelays\\n\\nPropagation Delay $t_l=\\\\frac{l}{c}$ \u8ddd\u79bb l / \u5149\u901fc\\n\\nPacketization Delay $t_p=\\\\frac{p}{r}$ \u5305\u957f\u5ea6p / \u6bcf\u79d2\u80fd\u653e\u5230\u8fde\u63a5\u4e0a\u7684bit\u6570r\\n\\nQueueing Delay \u5728\u8def\u7531\u5668\u7684buffer queue\u4e4b\u4e2d\u6392\u961f\u7b49\u5f85\u53d1\u5c04\u65f6\u95f4\\n\\nEnd-to-end delay \u5bf9\u6240\u6709\u7ecf\u8fc7\u7684router r~i~  $t=\\\\sum_i (\\\\frac{p}{r_i}+\\\\frac{l_i}{c} + Q_i(t))$\\n\\n\u524d\u4e24\u4e2a\u662f\u56fa\u5b9a\u7684,queueing delay\u662f\u968f\u673a\u7684,\u5bfc\u81f4\u4e86\u7aef\u5230\u7aef\u65f6\u95f4\u5177\u6709\u4e00\u5b9a\u7684\u6ce2\u52a8\u6027\\n\\nReal-Time Apps \u4e3a\u4e86\u907f\u514dqueueing delay\u5e26\u6765\u7684\u4f53\u9a8c\u4e0b\u964d,\u4f1a\u5f15\u5165\\n\\nPlayback buffers \u89c6\u9891\u7f13\u51b2\u533a\\n\\nplayback buffer \\\\-\\\\> video decoder \\\\-\\\\> screen\\n\\n\u4e5f\u4e0d\u662f\u56fa\u5b9a\u503c,\u4f1a\u589e\u5927buffer\u6765\u5c3d\u91cf\u4e0d\u8981\u505c\\n\\n\\n\\nqueue model: FIFO\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u5b57\u8282\u6570\u968f\u65f6\u95f4\u7684\u53d8\u5316\u662f\u5206\u6bb5\u7684(\u5305\u4e00\u4e2a\u4e2a\u6765),\u8fd1\u4f3c\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e00\u6bb5\u662f\u76f4\u7ebf\\n\\n**Small packet help reduce end-to-end delay**\\n\\n\u5c0f\u5305\u7684\u60c5\u51b5\u4e0b \u5404\u4e2a\u4e2d\u95f4router\u7684Queue delay + Packetization delay\u53ef\u4ee5\u5e76\u884c,\u5982\u56fe,\u7c7b\u4f3ccpu\u6d41\u6c34\u7ebf, \u5173\u952e\u662f\u4e00\u4e2a\u5305\u662f\u6700\u5c0f\u4f20\u8f93\u5355\u4f4d\\n\\n![image-20240907163508951](https://s2.loli.net/2024/09/07/WqRdP1ebG42tUzB.png)\\n\\nStatistical Multiplexing Gain\\n\\n\u7531\u4e8e\u4ece\u4e00\u4e2alink\u8f93\u5165\u7684packet\u7684\u901f\u7387A\u5177\u6709\u6ce2\u52a8\u6027\u548c\u968f\u673a\u6027,\u8bbe\u8981\u4f7f\u4ed6\u4e0d\u4e22\u5305\u9700\u8981R\u7684\u8f93\u51fa\u901f\u7387\\n\\n\u5047\u8bbe\u6709\u53e6\u4e00\u4e2alink \u8f93\u5165B, \u4e5f\u9700\u8981R,\u540c\u65f6\u63a5\u53d7AB\u7684\u8def\u7531\u5668\u9700\u8981\u7684\u8f93\u51fa\u901f\u7387R\' \\\\< 2R, \u56e0\u4e3aAB\u7684\u6700\u5927\u503c\u65f6\u95f4\u70b9\u5927\u6982\u7387\u4e0d\u91cd\u53e0\\n\\n\u8ba9\u6211\u4eec\u5728\u5904\u7406\u591a\u8def\u6d41\u91cf\u7684\u65f6\u5019\u53cd\u800c\u66f4\u9ad8\u6548\\n\\n\\n\\nQueues With Random Arrival Processes\\n\\n- Burstiness increase delay \\\\-\\\\> \u5305\u4e0d\u91cd\u53e0,\u5e73\u5747delay\u4f4e\\n\\n- Determinism minimizes delay \\\\-\\\\> \u5982\u679cqueue\u4e3a\u7a7a,\u5c31\u65e0\u6cd5\u5229\u7528\u8f93\u51fa,\u4e0d\u786e\u5b9a\u7684\u5230\u6765\u65f6\u95f4\u52a0\u5267\u62e5\u6324\\n- Little\'s Result \u5e73\u5747\u5230\u8fbe\u7387$\\\\lambda$ \u5e73\u5747\u6392\u961f\u8005\u6570\u91cfL,\u5e73\u5747\u6392\u961f\u5ef6\u8fdfd, L = $\\\\lambda * d$\\n- M/M/1 queue\\n\\n\u5c06\u6536\u5305\u4e8b\u4ef6\u8fd1\u4f3c\u4e3a\u6cca\u677e\u8fc7\u7a0b,\u76f8\u4e92\u72ec\u7acb\u4e14t\u65f6\u95f4\u5185\u5230\u8fbe\u7684\u5305\u6570n, E(n)=$\\\\lambda t$\\n\\n(\u6ce8\u610f\u7f51\u7edc**\u5305**\u5b9e\u9645\u5f88\u7a81\u53d1,\u4e0d\u662f\u6cca\u677e\u8fc7\u7a0b,\u4f46\u8fd9\u4e2amodel work for new **flows**, \u65b0\u8fde\u63a5\u662f\u8fd1\u4f3c\u6cca\u677e\u7684)\\n\\n\\n\\n![image-20240907171142326](https://s2.loli.net/2024/09/07/M4icDXqmZLtk7uG.png)\\n\\n\u5f53\u5165\u5305\u901f\u7387\u63a5\u8fd1\u51fa\u5305\u901f\u7387\u65f6,\u7b49\u5f85\u65f6\u95f4\u4f1a\u5927\u5e45\u5ea6\u4e0a\u6da8\\n\\n\u5e73\u5747\u6392\u961f\u8005\u6570\u91cf\u5c31\u662f $\\\\lambda * d = \\\\frac{\\\\lambda}{\\\\mu - \\\\lambda}$\\n\\n\\n\\npacket switch \u4ea4\u6362\u673a\\n\\n\u4e00\u4e2a\u5305\u6765\u4e4b\u540e \\\\-\\\\> \u67e5\u5730\u5740 \\\\-\\\\> \u66f4\u65b0header \\\\-\\\\> \u8fdb\u5165\u6392\u961f \\\\-\\\\> \u53d1\u9001\\n\\n\\n\\nInternet router\\n\\n1, \u5982\u679cDA \u4e0d\u7b49\u4e8e\u81ea\u5df1,\u4e22\\n\\n2, \u68c0\u67e5ip version\u548cdatagram\u957f\u5ea6\\n\\n3, \u51cf\u5c11TTL, \u66f4\u65b0\u6821\u9a8c\u548c\\n\\n4, TTL == 0? \\n\\n5, \u67e5\u8def\u7531\u8868, IP DA\u51b3\u5b9a\u4e0b\u4e00\u8df3, \u627e\u5230\u5bf9\u5e94\u7684Ethernet DA, \u53d1\u9001\u5230\u7535\u7ebf\\n\\n\\n\\nIP match \\\\-\\\\> binary TRIE \u6216\u8005 \u4e09\u8fdb\u5236\u53ef\u5bfb\u5740\u5185\u5b58\\\\-\\\\> 01X\u66b4\u529b\u5e76\u884c\u6bd4\u8f83,\u5f88\u5feb\\n\\nEthernet match \\\\-\\\\> hash\\n\\n\\n\\nInput Queued Packet Switch\\n\\n\u4e00\u4e2a\u6709 N \u4e2a\u8f93\u5165\u53e3\u7684\u4ea4\u6362\u673a,\u6bcf\u53d1\u9001\u4e00\u4e2apacket\u8017\u65f6R,\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u8f93\u51fadelay\u662f(N+1) * R (\u5047\u8bbe\u8f93\u51fa\u901f\u7387\u8db3\u591f\u5927)\\n\\n\u5982\u679c\u628a\u6392\u961f\u653e\u5728\u8f93\u5165,\u6700\u574f\u60c5\u51b5\u4e0bdelay,\u7406\u60f3\u72b6\u6001\u4e0b\u53ef\u4ee5\u964d\u4f4e\u52302R\\n\\n\u4f46\u95ee\u9898\u662f,\u5982\u679c\u9a6c\u4e0a\u8981\u8f93\u51fa\u7684\u51e0\u4e2a\u5305\u662f\u540c\u4e00\u4e2a\u8f93\u51fa\u53e3,\u4e00\u4e2a\u8f93\u51fa\u53e3\u540c\u65f6\u53ea\u80fd\u8f93\u51fa\u4e00\u4e2a,\u5c31\u548c\u539f\u6765\u7684\u6ca1\u6709\u533a\u522b\u4e86\\n\\n\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662fVirtual Output Queues,\u5728\u6bcf\u4e2a\u8f93\u5165\u53e3\u90fd\u505aM\u4e2a\u961f\u5217,M\u662f\u8f93\u51fa\u53e3\u7684\u6570\u91cf,\u6bcf\u6b21\u8f93\u51fa\u90fd\u4eceM\u4e2a\u4e0d\u540c\u7684\u8f93\u51fa\u53e3\u53d6\\n\\n\u4e3e\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50\u662f\u7ea2\u7eff\u706f\u8f66\u9053,\u8f66\u5728\u8fdb\u5165\u8def\u53e3\u524d(\u201c\u8f93\u5165\u53e3\u201d)\u5206\u597d\u961f\u5217,\u540c\u65f6\u8f93\u51fa\u7684\u5c31\u53ef\u4ee5\u589e\u52a0,\u6392\u961f\u65f6\u95f4\u5c31\u53ef\u4ee5\u51cf\u5c11,\u4f46\u8981\u6c42\u7684\u9053\u8def\u5bbd\u5ea6\u53d8\u591a\\n\\n\\n\\nFIFO\u7684\u95ee\u9898\u548c\u5176\u4ed6\u9009\u9879\\n\\n\u7ecf\u5178\u6392\u961f\u95ee\u9898,\u5982\u679c\u6709\u4e00\u4e2a\u5927\u5305\u5835\u7740,\u6240\u6709\u5305\u7684\u6392\u961f\u65f6\u95f4\u90fd\u4f1a\u589e\u52a0\\n\\n\\n\\nstrict priority\\n\\n\u5f88\u7b26\u5408\u76f4\u89c9,\u540c\u4e00\u4e2a\u8f93\u5165\u53e3\u518d\u6765\u51e0\u4e2a\u961f\u5217,\u5e76\u5206\u597d\u4f18\u5148\u7ea7,\u540c\u4e00\u4e2a\u7aef\u53e3\u63a5\u53d7\u591a\u4e2a\u961f\u5217\u8f93\u5165\u7684\u65f6\u5019\u603b\u662f\u4f18\u5148\u53d6\u9ad8\u4f18\u5148\u7ea7\u7684\u5305\\n\\n\u4e5f\u662f\u7ecf\u5178\u95ee\u9898:\u997f\u6b7b,\u4f46\u95ee\u9898\u4e0d\u50cfsys\u90a3\u6837\u4e25\u91cd,\u997f\u6b7b\u5c31\u997f\u6b7b\u4e86(),\u5e7f\u6cdb\u5e94\u7528\\n\\n\u6216\u8005weight priority,\u89e3\u51b3\u997f\u6b7b\u95ee\u9898\\n\\n\u53d6\u6bcf\u4e2a\u961f\u5217\u7684\u6982\u7387 p =  w~i~ / sum(w~i~) (\u7528Round\u65b9\u6cd5)\\n\\n\u8003\u8651\u5230\u6bcf\u4e2a\u5305\u7684\u5927\u5c0f\u4e0d\u4e00\u6837,\u7406\u8bba\u4e0a\u6982\u7387\u5e94\u8be5\u5e94\u7528\u5230\u5b57\u8282\u4e0a\u800c\u4e0d\u662f\u5305\u4e0a,\u4f46\u53c8\u4e0d\u80fd\u62c6\u5f00\u5305\u53d1\u9001,\u600e\u4e48\u505a\u5462\uff1f\\n\\nWFQ, \u5229\u7528\u6211\u4eec\u5728\u77e5\u9053\u5305\u5927\u5c0f\u8fd9\u4e2a\u4e8b\u5b9e\\n\\n\u5728\u6bcf\u4e2a\u961f\u5217\u8ba1\u6570(virtual_time),\u6743\u91cd\u4e3aw\u7684\u961f\u5217\u5728\u53d1\u9001\u4e00\u4e2asize\u5927\u5c0f\u7684\u5305\u540e,self.vt += size / w, \u4e4b\u540e\u628aself.vt push\u8fdb\u6700\u5c0f\u5806\\n\\n\u8c03\u5ea6\u4e0b\u4e00\u4e2a\u5305\u65f6\u4ece\u6700\u5c0f\u5806\u91ccpop()\u5c31\u884c\\n\\n\\n\\nrate guarantees (Guaranteed Delay)\\n\\n\\n\\nRSVP  RFC2205\\n\\n\\n\\n![image-20240907230305637](https://s2.loli.net/2024/09/07/eOjCAPm8Wfdv6Lz.png)\\n\\n\u7ed9\u51fa\u8fde\u63a5\u603b\u8017\u65f610ms\u4e0a\u754c, \u4f20\u8f93\u65f6\u95f4 \u8def\u7a0b/c = 5ms, \u6253\u5305\u65f6\u95f4=\u6bcf\u4e2a\u5305\u7684\u5b57\u8282\u6570/\u6570\u636e\u7ebf\u6700\u5927\u901f\u5ea6 = 0.48ms\\n\\n\u5269\u4e0b\u6700\u591a4.52ms\u7684\u6392\u961f\u5ef6\u8fdf, \u5206\u57283\u4e2arouter, \u8981\u4fdd\u8bc1\u4e0d\u4e22\u5305, \u5c31\u9700\u8981\u81f3\u5c11 15 Mb * 4.52 / 3ms = 24000bit = 3KB\u7684 buffer\\n\\nbuffer\u7684\u8bbe\u8ba1\u5728 \u201c\u7ed9\u5b9a\u4e00\u5b9a\u6700\u5927\u5ef6\u8fdf\u7684\u60c5\u51b5\u4e0b,\u4e0d\u5141\u8bb8\u4e22\u5305\u201d \\n\\n\\n\\n## Unit 4: Congestion Control\\n\\n\u5835\u585e\u63a7\u5236\\n\\ntcp\u5835\u585e\u63a7\u5236\\n\\n\u5835\u585e\u662f\u4e0d\u53ef\u907f\u514d\u7684 \\n\\n\u5835\u585e\u5e26\u6765\u4e22\u5305,\u7531\u4e8e\u91cd\u4f20\u7b49,\u4f1a\u5e26\u6765\u66f4\u591a\u7684\u6570\u636e\u6d41\u91cf,\u8fdb\u4e00\u6b65\u52a0\u6df1\u5835\u585e\\n\\nmax-min fair: \u4e0d\u80fd\u901a\u8fc7\u51cf\u5c11\u53e6\u4e00\u4e2a\u6d41\u7684\u901f\u7387\u7684\u65b9\u6cd5\u589e\u52a0\u5176\u4e2d\u4e00\u4e2a\u6d41\u7684\u901f\u7387\u65f6\\n\\n\\n\\n\u5148\u524d\u7684\u60f3\u6cd5\\n\\n- \u7b80\u5355\u7684\u5728\u5404\u4e2a\u53ef\u80fd\u7684router\u4e0a\u5e73\u5747\u5206\u914d\u6d41\u91cf \u95ee\u9898\u5728\u4e8e\u6ca1\u6709\u4efb\u4f55\u53cd\u9988\u673a\u5236\\n- network-based \u663e\u5f0f\u53cd\u9988ECN,\u5f53router\u5835\u585e\u53d1\u751f\u7684\u65f6\u5019,\u7ed9\u6570\u636e\u6e90\u53d1\u9001\u5305\u6307\u793a\u62e5\u5835\\n- end-host-based \u901a\u8fc7\u5728\u53d1\u9001\u7aef\u89c2\u5bdf\u7f51\u7edc\u7684\u884c\u4e3a(\u53d1\u9001\u7684\u8bf7\u6c42\u662f\u5426\u8d85\u65f6\uff1f\u662f\u5426\u4e22\u5305\uff1f)\u8c03\u6574\u53d1\u9001\u901f\u5ea6\\n\\n\u5b9e\u9645\u7684TCP\u91c7\u7528end-host based\\n\\n> TCP varies the number of oudstanding packets in the network bt varying window size:\\n\\n> Window size = min\\\\{Advertised Window(given by receiver), Congestion Window\\\\}\\n\\n\\n\\nAIMD(Additive Increase Multiplicative Decrease)\\n\\nIf a packet receive OK : W \\\\<\\\\- W + 1/W\\n\\nIf a packet is dropped(at Window size W): W \\\\<\\\\- W/2\\n\\n\u79f0\u4e3atcp\u952f\u9f7f\u6216\u8005AIMD\u952f\u9f7f\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f,\u5b9e\u9645\u4e0a\u5728\u52a0\u7684\u4e2d\u95f4\u8fc7\u7a0b\u4e2d,\u7f51\u7edc\u901f\u7387\u5c31\u5df2\u7ecf\u62c9\u6ee1\u4e86,\u540e\u9762\u518d\u52a0\u5b9e\u9645\u4e0a\u662f\u5728\u55c5\u63a2router\u7684\u7f13\u51b2\u533a\u5927\u5c0f\\n\\n\\n\\nsingle flow AIMD\\n\\n\u524d\u671f router buffer\u7a7a\\n\\nRTT = constant\\n\\n\u541e\u5410\u91cfT=W=dN/dt\\n\\ndW/dN = 1/W , dW/dt = T/W = const\\n\\nW,T \u6b63\u6bd4\u4e8et\\n\\n\u5f53W\u5927\u4e8e\u8f93\u51fa\u901f\u7387R(\u5e38\u6570), router buffer\u5f00\u59cb\u79ef\u7d2f\\n\\ndW / dt = R/W \u21d2 W = sqrt (Rt+C)\\n\\n\u6b64\u65f6\u541e\u5410\u91cf\u4e3aR,RTT=k* buffersize+D\\n\\n\u8d8b\u52bf\u4e0a\u548cW\u76f8\u540c(\u4f46\u4e0d\u5b8c\u5168\u4e00\u6837,\u56e0\u4e3aT\u8f93\u5165=R+buffersize\u53d8\u5316\u7387=W/RTT),\u53ef\u4ee5\u5f97\u5230buffer size \u968f\u65f6\u95f4\u53d8\u5316\\n\\nmulti flows AIMD\\n\\n\u5728\u591a\u9053\u6570\u636e\u6d41\u7684\u60c5\u51b5\u4e0b,\u4e4b\u524d\u7684AIMD\u4e0d\u662f\u5f88\u9002\u7528\\n\\n\u95ee\u9898\u5728\u4e8e\u51cf\u5c11\u7684\u65f6\u673a\u4e0d\u662f\u6240\u6709\u6d41\u540c\u6b65\u7684,\u90e8\u5206\u6d41\u51cf\u5c11\u540ebuffer\u53c8\u4e0d\u6ee1,\u5176\u4ed6\u6d41\u5c31\u4e0d\u51cf\u5c11,\u603b\u4f53\u53d1\u751f\u4e22\u5305\u7684\u65f6\u95f4\u5c31\u5f88\u5206\u6563\u968f\u673a,\u5bfc\u81f4\u5b8f\u89c2\u4e0arouter\u7684buffer\u4e00\u76f4\u8d8b\u4e8e\u6ee1\u7684\\n\\n![alt text](image.png)\\n\\n\u591a\u6d41\u65f6 \u541e\u5410\u91cfT\u4e5f\u4e0d\u518d\u7b49\u4e8e(\u5ffd\u7565\u5e38\u6570)\u7a97\u53e3\u5927\u5c0fW(\u591a\u4e2a\u6d41\u7684\u5e73\u5747)\\n\\n(buffer\u59cb\u7ec8\u8d8b\u4e8e\u6ee1\u7684)\\n\\n\u603b\u541e\u5410\u91cf\u8fd1\u4f3c\u6052\u7b49\u4e8eR\\n\\nRTT\u4e5f\u8fd1\u4f3c\u4e3a\u5e38\u6570\\n\\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6d41,\u90fd\u662fW/2 \u2192 W \u2192 W/2\u7684\u6d41\u7a0b\\n\\n\u53c8\u7531\u4e8ebuffer\u662f\u6ee1\u7684,RTT\u6052\u5b9a,dW/dt = T/W = 1/ RTT = const ,\u76f4\u7ebf\\n\\n\u5e73\u5747\u541e\u5410 T\u2018 = 3/4 Wmax/RTT\\n\\n\u4e00\u6b21\u4e22\u5305\u524d\u53d1\u9001\u7684\u5305\u6570A = 3/8 Wmax^2 ,\u5219\u4e22\u5305\u7387p=1/A\\n\\n\u5219T\u2019 =  sqrt(3/2) * 1/RTT*sqrt(p)\\n\\n\u8003\u8651\u5230\u6bcf\u4e2a\u5305\u5b57\u8282\u6570\u4e0d\u540c,\u518d\u4e58\u4e00\u4e2a\u5e73\u5747\u5b57\u8282\u6570MSS\\n\\nT\u2019 = sqrt(3/2) * MSS/RTT*sqrt(p)\\n\\n\u4e5f\u5c31\u662f\u8bf4,AIMD\u5bf9\u4e24\u4e2a\u91cf\u654f\u611f: RTT(\u670d\u52a1\u5668\u6709\u591a\u8fdc,router \u6392\u961f\u65f6\u95f4\u591a\u5927)\u548c \u4e22\u5305\u7387p\\n\\nTCP\u5835\u585e\u63a7\u5236\\n\\n![alt text](image-2.png)\\n\\n\u65e9\u671fTCP(\u6ca1\u6709\u5835\u585e\u63a7\u5236)\u7684\u95ee\u9898\u5728\u4e8e,\u7aef\u7684\u901f\u7387\u8d85\u8fc7router\u7684\u901f\u7387\u592a\u591a,receiver\u8fd4\u56de\u7684windows size\u5b9e\u9645\u4e0a\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u7f51\u7edc\u5b9e\u9645\u80fd\u5bb9\u7eb3\u7684\u5927\u5c0f,\u4e0d\u65ad\u4e22\u5305\u91cd\u4f20\\n\\nTCP Tahoe: \u52a0\u4e0acongestion window, timeout estimation\u548cself-clocking\\n\\ncongestion window\u4e2d\u7684\u4e8c\u9636\u6bb5congestion control\\n\\n- Slow start:\u5728\u8fde\u63a5\u5efa\u7acb\u6216\u8005\u53d1\u751f\u4e22\u5305\u65f6,AIMD\u524d\u9762\u7ebf\u6027\u589e\u52a0\u7591\u4f3c\u6709\u70b9\u592a\u6162\u4e86,\u52a0\u901f\u4e00\u4e0b\\n- Congestion avoidance: AIMD\\n\\nSlow Start\\n\\nWindow starts at Maximum Segment Size MSS\\n\\nIncrease window by MSS for each ACK packet\\n\\ndW/dt = dN/dt  = W \u21d2 W = exp(t)\\n\\n\u6307\u6570\u589e\u52a0\u8bd5\u63a2\u541e\u5410\u4e0a\u9650\\n\\nCongestion avoidance\\n\\n- Increase by MSS^2/congestion window for each ACK\\n- Behavior: increase by MSS each RTT\\n- Linear increase\\n\\n\u5728\u4e24\u79cd\u72b6\u6001\u95f4\u5207\u6362\u4f7f\u75283\u4e2a\u4fe1\u53f7\u4f5c\u4e3a\u4fe1\u606f:\\n\\n- Inc ACK: \u4f20\u8f93\u826f\u597d\\n- Dup ACK: \u53d1\u751f\u4e22\u5305/\u5ef6\u8fdf\\n- Timeout: \u7f51\u7edc\u5d29\u6e83\\n\\n![alt text](image-1.png)\\n\\n![alt text](image-3.png)\\n\\nTimeout Estimation\\n\\n\u592a\u5c0f,\u4f1a\u9891\u7e41\u8d85\u65f6,\u56de\u5230slow start,\u5f71\u54cd\u901f\u5ea6\\n\\n\u592a\u957f,\u4f1a\u9891\u7e41\u91cd\u53d1,\u5f71\u54cd\u901f\u5ea6\\n\\n\u6311\u6218\u5728\u4e8eRTT\u662f\u9ad8\u5ea6\u52a8\u6001\u4e14\u8d1f\u8f7d\u76f8\u5173\u7684\\n\\n\u65e9\u671f\u7684\u7b97\u6cd5\\n\\n![alt text](image-4.png)\\n\\n\u95ee\u9898\u5728\u4e8e\u5047\u8bbe\u4e86RTT\u7684\u65b9\u5dee\u4e0d\u662f\u5f88\u5927,\u4f46\u8fd9\u662f\u4e0d\u5bf9\u7684\\n\\n\u5927\u65b9\u5dee\u4e0b\u7684RTT\u4f1a\u9891\u7e41\u5e26\u6765\u8fc7\u5c0f\u6216\u8005\u8fc7\u5927\u7684\u95ee\u9898\\n\\n![alt text](image-5.png)\\n\\n\u5c06\u65b9\u5dee\u7eb3\u5165\u8003\u8651,\u5b9e\u9a8c\u6548\u679c\u597d\\n\\nself-clocking\\n\\n\u5e94\u8be5\u53eb\u4e00\u4e2a\u539f\u5219/\u5b9e\u73b0\u65b9\u5f0f,\u4f53\u73b0\u4e3aTCP\u7684\u5835\u585e\u7a97\u53e3\u4e0d\u7531\u5916\u90e8\u65f6\u949f\u51b3\u5b9a,\u800c\u662f\u6839\u636e\u6536\u5230\u7684ACK\u9891\u7387\u81ea\u52a8\u6539\u53d8\u53d1\u9001\u901f\u7387(\u5373\u524d\u9762\u7684slow start\u548cAIMD)\\n\\nTCP Reno\\n\\n- 3-Dup ACK\u4e0d\u518d\u8fd4\u56de\u52301,\u8fd4\u56de1/2 * Wmax (fast recovery)\\n- \u5f533-Dup\u7684\u65f6\u5019\u7acb\u523b\u91cd\u4f20\\n\\n(\u4e0d\u7b49\u5f85\u91cd\u4f20\u8ba1\u65f6\u5668\u8d85\u65f6, \u5e76\u4e14\u7acb\u523b\u589e\u5927\u5835\u585e\u7a97\u53e31/2 * ssthreld + 3,\u4e5f\u5c31\u662f\u628a\u8fd9\u4e2aDup\u7684\u5305\u7acb\u523b\u52a0\u5230\u8fd9\u4e00\u6b21\u91cd\u4f20\u4e4b\u4e2d,\u6df7\u5165\u6b63\u5e38\u7684\u53d1\u9001\u6d41,\u4e0d\u7b49\u5f85\u51e0\u6b21RTT\u6269\u5927window size)\\n![alt text](image-6.png)\\n\\n## Unit 5: NAT Application\\n\\nDNS, HTTP, BitTorrent\\n\\nNAT \u5f53\u5185\u90e8\u63a5\u53e3\u6536\u5305\u65f6,\u6539\u5199\u6e90\u5730\u5740\u4e3aNAT\u7684\u5916\u90e8\u63a5\u53e3\u5730\u5740\\n\\n\u4f8b\u5982\u5bb6\u5eadwifi \u591a\u8bbe\u5907\u8fde\u63a5\u5b9e\u9645\u4e0a\u5171\u4eab\u76f8\u540c\u7684IP\\n\\nNAT \u539f\u5219\u4e0a\u662f\u4e00\u4e2amap\\n\\n\u770b\u770b\u81ea\u5df1\u7684public IP https://whatismyipaddress.com/\\n\\n\\n\u8fd8\u6709\u4e2a\u5185\u7f51IP\u7684\u5e38\u8bc6\\n\\n> \u79c1\u6709IP\u5730\u5740\u662f\u5728\u4e92\u8054\u7f51\u4e0a\u4e0d\u88ab\u8def\u7531\u7684IP\u5730\u5740,\u4e13\u4e3a\u5185\u90e8\u7f51\u7edc\u4f7f\u7528\u3002\u79c1\u6709IP\u5730\u5740\u8303\u56f4\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6bb5:\\n>\\n> 1. **10.0.0.0 - 10.255.255.255**:\u8fd9\u4e2a\u8303\u56f4\u5185\u7684IP\u5730\u5740\u88ab\u5212\u5206\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684A\u7c7b\u7f51\u7edc,\u901a\u5e38\u7528\u4e8e\u5927\u578b\u4f01\u4e1a\u6216\u7ec4\u7ec7\u7684\u5185\u90e8\u7f51\u7edc\u3002\\n> 2. **172.16.0.0 - 172.31.255.255**:\u8fd9\u4e2a\u8303\u56f4\u5185\u7684IP\u5730\u5740\u662f14\u4e2a\u8fde\u7eed\u7684B\u7c7b\u7f51\u7edc,\u5e38\u7528\u4e8e\u4e2d\u7b49\u89c4\u6a21\u7684\u7ec4\u7ec7\u3002\\n> 3. **192.168.0.0 - 192.168.255.255**:\u8fd9\u4e2a\u8303\u56f4\u5185\u7684IP\u5730\u5740\u662f256\u4e2a\u8fde\u7eed\u7684C\u7c7b\u7f51\u7edc,\u901a\u5e38\u7528\u4e8e\u5bb6\u5ead\u6216\u5c0f\u578b\u4f01\u4e1a\u7f51\u7edc\u3002\\n\\n\\n\\nNAT \u5206\u7c7b\\n\\n- Full Cone NAT\\n- Restricted Cone NAT\\n- Port Restricted Cone NAT\\n- Symmetric NAT\\n\\n\u533a\u522b\u5728\u4e8eFull Cone NAT\u53ea\u662f\u4e00\u4e2amap,\u4e0d\u505a\u5b89\u5168\u68c0\u67e5\\n\\n\u5141\u8bb8\u4e0d\u662fDst IP\u7684\u4e3b\u673a\u901a\u8fc7NAT\u7684\u5916\u90e8\u63a5\u53e3\u7ed9\u5185\u90e8\u63a5\u53e3\u53d1\u5305,\u5141\u8bb8\u5916\u90e8\u4e3b\u52a8\u8fde\u63a5\u5185\u90e8\\n\\nRestricted Cone\u53ea\u5141\u8bb8Dst IP\u7684\u4e3b\u673a\u53d1\u5305,\u540c\u65f6\u5fc5\u987b\u5185\u90e8\u5148\u8fde\u63a5\u5916\u90e8\\n\\nPort \u5c31\u662f\u4e0d\u4ec5\u8981\u6c42IP\u76f8\u540c,\u8fd8\u8981\u6c42\u7aef\u53e3\u53f7\u4e5f\u76f8\u540c\\n\\nSymmetric \u7684\u4e0d\u540c\u70b9\u5728\u5185\u90e8,\u5728Port\u7684\u57fa\u7840\u4e0a,\u5982\u679c\u5185\u90e8\u4e00\u4e2a\\\\{IP,port\\\\}\u5c1d\u8bd5\u8fde\u63a5\u4e24\u4e2a\u4e0d\u540c\u7684\u5916\u90e8\\\\{IP,port\\\\}, NAT\u4f1a\u7ed9\u8fd9\u4e2a\u5185\u90e8\u7684\u5206\u914d\u4e24\u4e2a\u4e0d\u540c\u7684\\\\{IP, port\\\\},\u7136\u540e\u548c\u5916\u90e8\u4e00\u5bf9\u4e00\u94fe\u63a5\\n\\n\u5982\u679c\u4e0d\u7b26\u5408\u8981\u6c42,\u6709\u7684\u4e0d\u7ffb\u8bd1,\u6709\u7684\u4f1a\u8fd4\u56de\u4e00\u4e2aICMP\u9519\u8bef\\n\\nSymmetric\u6709\u4e00\u4e9b\u95ee\u9898\\n\\n\u4f8b\u5982\u6709\u6e38\u620f\u7684\u591a\u4eba\u5728\u7ebf\u670d\u52a1\u5668\u628a\u4e0d\u540c\u7684\u6e38\u620f\u5185\u5730\u56fe\u670d\u52a1\u653e\u5728\u4e0d\u540c\u7684\u7aef\u53e3/IP\u4e0a\u6765\u5206\u6d41,\u5f53\u540c\u65f6\u9700\u8981\u4e24\u79cd\u670d\u52a1\u7684\u65f6\u5019,\u5efa\u7acb\u4e86\u4e24\u4e2a\u8fde\u63a5,server\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u8fd9\u4e24\u4e2a\u8fde\u63a5\u90fd\u662f\u540c\u4e00\u4e2a\u4e1c\u897f\u53d1\u51fa\u6765\u7684(\u7aef\u53e3\u4e0d\u4e00\u6837)\\n\\nstatic mapping\\n\\nNAT hairmapping NAT\u56de\u6d41\\n\\n\u4f8b\u5982,\u5728\u5185\u7f51\u4e2d\u6709\u4e00\u53f0\u670d\u52a1\u5668S,\u5176\u901a\u8fc7NAT\u66b4\u9732\u7ed9\u5916\u9762\u7684DNS,\u5185\u7f51\u6709\u4e00\u4e2a\u5ba2\u6237\u7aefC\u60f3\u8981\u8bbf\u95eeS,\u5982\u679c\u4f7f\u7528DNS\u7684\u8bdd,\u5f97\u5230\u7684\u662fS\u66b4\u9732\u7ed9\u5916\u9762\u7684NAT IP\u3002\u8fd9\u4e2a\u65f6\u5019,\u8d70\u5916\u9762\u8fd8\u662f\u8d70\u91cc\u9762\uff1f\\n\\nNAT hairmapping\u6709\u591a\u79cd\u53ef\u80fd\u7684\u914d\u7f6e,\u4e00\u79cd\u8ba9\u5185\u90e8\u8bbf\u95ee\u8d70\u5916\u90e8,\u727a\u7272\u6027\u80fd\u6362\u53d6\u5bf9\u5185\u5b89\u5168\u6027,\u4e00\u79cd\u662f\u4e3b\u52a8\u8bc6\u522b\u5185\u90e8\u5230\u5916\u90e8\u7684\u8bf7\u6c42,\u5e76\u628a\u5b83\u653e\u5728\u5185\u90e8\u89e3\u51b3\u4e0d\u8d70NAT\\n\\n\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762\u66f4\u4e25\u91cd\u7684\u95ee\u9898\u5728\u4e8e\u5982\u679c\u60f3\u8981\u8d70\u91cc\u9762,B\u5411\u5916\u90e8IP\u53d1\u9001\u5305,\u5374\u4ece\u5185\u90e8IP\u63a5\u53d7\u5305,IP\u4e0d\u540c\u6839\u672c\u4e0d\u4f1a\u63a5\u53d7\\n\\n\\n\\nNAT\u5e26\u6765\u7684\u95ee\u9898\\n\\n\u4f8b\u5982B\u60f3\u8981\u4e0eNAT\u540e\u9762\u7684A\u901a\u4fe1,\u4f46mapping\u91cc\u9762\u6ca1\u6709,\u4e0d\u80fd\u4e3b\u52a8\u8fde,\u4e5f\u4e0d\u4f1a\u7528A\u7684NAT\u52a0B\u7684mapping\\n\\nConnection Reversal, ![NAT Traversal by Connection Reversal](https://www.researchgate.net/profile/Bryan-Ford/publication/1959162/figure/fig3/AS:669491117711375@1536630529609/NAT-Traversal-by-Connection-Reversal.png)\\n\\n\\n\\n\u516c\u7f51B-\\\\>\u4e2d\u8f6cR-\\\\>\u8bf7\u6c42\u5185\u7f51A,A-\\\\>B\u8fde\u63a5,\u56e0\u4e3a\u8fd9\u4e2a\u8bf7\u6c42\u662f\u53cd\u5411\u7684(B\u60f3\u8981\u8fdeA,\u4f46\u5b9e\u9645\u4e0a\u53d8\u6210A\u8fdeB),\u6240\u4ee5\u53ebConnection Reversal\\n\\n\\n\\nRelay \u4e2d\u7ee7,A\u3001B\u90fd\u5728\u5185\u7f51,\u901a\u8fc7\u4e2d\u7ee7R\u505a\u8f6c\u53d1\\n\\n\u8981\u6c42\u52a0\u5bc6(\u9664\u975e\u4fe1\u4efbR),\u4e14\u6d88\u8017\u670d\u52a1\u5668\u6027\u80fd\\n\\n![](https://bford.info/pub/net/p2pnat/img6.png)\\n\\n\\n\\nNAT Hole-Punching NAT\u6253\u6d1e(\u4e00\u822c\u7528\u4e8eUDP)\\n\\n\u4e24\u4e2aClient\u90fd\u5728NAT\u540e\u9762,\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0https://mthli.xyz/p2p-hole-punching/\\n\\n\u4e3b\u8981\u6b65\u9aa4:ClientA,B\u7ed9\u4e2d\u95f4\u516c\u7f51\u670d\u52a1\u5668S\u6ce8\u518c\u81ea\u5df1\u7684\u5185\u7f51\u5730\u5740,\u5e76\u901a\u8fc7\u83b7\u53d6\u5bf9\u65b9\u7684\u516c\u7f51IP\u3001\u5185\u7f51IP, \u4e4b\u540eA\u5411\u7740B\u53d1\u8bf7\u6c42\u6253\u901aA\u7684NAT(\u52a0\u4e0aB\u7684\u516c\u7f51IP\u7684mapping),B\u5411A\u53d1\u8bf7\u6c42\u6253\u901aB\u7684NAT(\u52a0\u4e0aA\u7684NAT\u7684\u516c\u7f51IP\u7684mapping),\u4e4b\u540eAB\u5c31\u53ef\u4ee5\u6b63\u5e38\u901a\u8bdd\u4e86(\u96a7\u9053\u6253\u901a)\\n\\n![](https://bford.info/pub/net/p2pnat/img8.png)\\n\\n\\n\\n![](https://bford.info/pub/net/p2pnat/img9.png)\\n\\n\\n\\n\u5982\u679cNAT\u4e0d\u4e00\u6837\u6df1,\u6709\u591a\u5c42\u6df1\u5462\uff1f\\n\\nAB\u5728\u53d1\u9001\u81ea\u5df1\u4fe1\u606f,\u5f97\u5230\u5bf9\u65b9\u4fe1\u606f\u7684\u65f6\u5019\u9700\u8981\u628a\u4e00\u8def\u4e0a\u6bcf\u4e00\u7ea7NAT\u7684\u516c\u7f51IP\u5e26\u51fa,\u800c\u5728\u6253\u6d1e\u7684\u65f6\u5019\u9700\u8981\u4ece\u5916\u5230\u5185\u4e00\u7ea7\u7ea7\u6253(\u7531\u4e8e\u7f3a\u4e4f\u62d3\u6251\u4fe1\u606f,\u5f80\u5f80\u4e0d\u662f\u6700\u4f18,\u4e5f\u53ef\u80fd\u4f1a\u8d85\u65f6)\\n\\n\u6ce8\u610f\\n\\n> Since ![$A$](https://bford.info/pub/net/p2pnat/img3.png) and ![$B$](https://bford.info/pub/net/p2pnat/img4.png) are on different private networks and their respective private IP addresses are not globally routable, the messages sent to these endpoints will reach either the wrong host or no host at all. **Because many NATs also act as DHCP servers, handing out IP addresses in a fairly deterministic way from a private address pool usually determined by the NAT vendor by default, it is quite likely in practice that ![$A$](https://bford.info/pub/net/p2pnat/img3.png)\'s messages directed at ![$B$](https://bford.info/pub/net/p2pnat/img4.png)\'s private endpoint will reach *some* (incorrect) host on ![$A$](https://bford.info/pub/net/p2pnat/img3.png)\'s private network that happens to have the same private IP address as ![$B$](https://bford.info/pub/net/p2pnat/img4.png) does.** **Applications must therefore authenticate all messages in some way to filter out such stray traffic robustly. The messages might include application-specific names or cryptographic tokens, for example, or at least a random nonce pre-arranged through ![$S$](https://bford.info/pub/net/p2pnat/img5.png).**\\n\\n\\n\\n\\n\\n\\n\\n> #### TCP Hole Punching TCP\u6253\u5b54\\n>\\n> Establishing peer-to-peer TCP connections between hosts behind NATs is slightly more complex than for UDP, but TCP hole punching is remarkably similar at the protocol level. Since it is not as well-understood, it is currently supported by fewer existing NATs. When the NATs involved *do* support it, however, TCP hole punching is just as fast and reliable as UDP hole punching. Peer-to-peer TCP communication across well-behaved NATs may in fact be *more* robust than UDP communication, because unlike UDP, the TCP protocol\'s state machine gives NATs on the path a standard way to determine the precise lifetime of a particular TCP session.\\n> \u5728 NAT \u540e\u9762\u7684\u4e3b\u673a\u4e4b\u95f4\u5efa\u7acb\u70b9\u5bf9\u70b9 TCP \u8fde\u63a5\u6bd4 UDP \u7a0d\u5fae\u590d\u6742\u4e00\u4e9b,\u4f46 TCP \u6253\u6d1e\u5728\u534f\u8bae\u7ea7\u522b\u975e\u5e38\u76f8\u4f3c\u3002\u7531\u4e8e\u5b83\u8fd8\u6ca1\u6709\u88ab\u5f88\u597d\u5730\u7406\u89e3,\u76ee\u524d\u652f\u6301\u5b83\u7684\u73b0\u6709 NAT \u8f83\u5c11\u3002\u7136\u800c,\u5f53\u6d89\u53ca\u7684 NAT*\u652f\u6301*\u65f6,TCP \u6253\u6d1e\u4e0e UDP \u6253\u6d1e\u4e00\u6837\u5feb\u901f\u4e14\u53ef\u9760\u3002\u4e8b\u5b9e\u4e0a,\u8de8\u884c\u4e3a\u826f\u597d\u7684 NAT \u7684\u70b9\u5bf9\u70b9 TCP \u901a\u4fe1\u53ef\u80fd\u6bd4 UDP \u901a\u4fe1*\u66f4*\u7a33\u5065,\u56e0\u4e3a\u4e0e UDP \u4e0d\u540c,TCP \u534f\u8bae\u7684\u72b6\u6001\u673a\u4e3a\u8def\u5f84\u4e0a\u7684 NAT \u63d0\u4f9b\u4e86\u4e00\u79cd\u6807\u51c6\u65b9\u6cd5\u6765\u786e\u5b9a\u7279\u5b9a TCP \u4f1a\u8bdd\u7684\u7cbe\u786e\u751f\u547d\u5468\u671f\u3002\\n>\\n>\\n>\\n> #### Sockets and TCP Port Reuse \u5957\u63a5\u5b57\u548c TCP \u7aef\u53e3\u91cd\u7528\\n>\\n> The main practical challenge to applications wishing to implement TCP hole punching is not a protocol issue but an application programming interface (API) issue. Because the standard Berkeley sockets API was designed around the client/server paradigm, the API allows a TCP stream socket to be used to initiate an outgoing connection via `connect()`, or to listen for incoming connections via `listen()` and `accept()`, *but not both*. Further, TCP sockets usually have a one-to-one correspondence to TCP port numbers on the local host: after the application binds one socket to a particular local TCP port, attempts to bind a second socket to the same TCP port fail.\\n> \u5bf9\u4e8e\u5e0c\u671b\u5b9e\u73b0 TCP \u6253\u6d1e\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4,\u4e3b\u8981\u7684\u5b9e\u9645\u6311\u6218\u4e0d\u662f\u534f\u8bae\u95ee\u9898,\u800c\u662f\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3 (API) \u95ee\u9898\u3002\u7531\u4e8e\u6807\u51c6 Berkeley \u5957\u63a5\u5b57 API \u662f\u56f4\u7ed5\u5ba2\u6237\u7aef/\u670d\u52a1\u5668\u8303\u4f8b\u8bbe\u8ba1\u7684,\u56e0\u6b64\u8be5 API \u5141\u8bb8\u4f7f\u7528 TCP \u6d41\u5957\u63a5\u5b57\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u53d1\u8d77\u4f20\u51fa\u8fde\u63a5: `connect()` ,\u6216\u8005\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u4fa6\u542c\u4f20\u5165\u8fde\u63a5 `listen()` \u548c `accept()` ,*\u4f46\u4e0d\u80fd\u4e24\u8005\u517c\u800c\u6709\u4e4b*\u3002\u6b64\u5916,TCP \u5957\u63a5\u5b57\u901a\u5e38\u4e0e\u672c\u5730\u4e3b\u673a\u4e0a\u7684 TCP \u7aef\u53e3\u53f7\u4e00\u4e00\u5bf9\u5e94:\u5e94\u7528\u7a0b\u5e8f\u5c06\u4e00\u4e2a\u5957\u63a5\u5b57\u7ed1\u5b9a\u5230\u7279\u5b9a\u672c\u5730 TCP \u7aef\u53e3\u540e,\u5c1d\u8bd5\u5c06\u7b2c\u4e8c\u4e2a\u5957\u63a5\u5b57\u7ed1\u5b9a\u5230\u540c\u4e00 TCP \u7aef\u53e3\u4f1a\u5931\u8d25\u3002\\n>\\n> For TCP hole punching to work, however, we need to use a single local TCP port to listen for incoming TCP connections and to initiate multiple outgoing TCP connections concurrently. Fortunately, all major operating systems support a special TCP socket option, commonly named `SO_REUSEADDR`, which allows the application to bind multiple sockets to the same local endpoint as long as this option is set on all of the sockets involved. BSD systems have introduced a `SO_REUSEPORT` option that controls port reuse separately from address reuse; on such systems *both* of these options must be set.\\n> \u7136\u800c,\u4e3a\u4e86\u8ba9 TCP \u6253\u6d1e\u53d1\u6325\u4f5c\u7528,\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5355\u4e2a\u672c\u5730 TCP \u7aef\u53e3\u6765\u4fa6\u542c\u4f20\u5165 TCP \u8fde\u63a5\u5e76\u540c\u65f6\u542f\u52a8\u591a\u4e2a\u4f20\u51fa TCP \u8fde\u63a5\u3002\u5e78\u8fd0\u7684\u662f,\u6240\u6709\u4e3b\u8981\u64cd\u4f5c\u7cfb\u7edf\u90fd\u652f\u6301\u7279\u6b8a\u7684 TCP \u5957\u63a5\u5b57\u9009\u9879,\u901a\u5e38\u79f0\u4e3a`SO_REUSEADDR` ,\u53ea\u8981\u5728\u6240\u6709\u6d89\u53ca\u7684\u5957\u63a5\u5b57\u4e0a\u8bbe\u7f6e\u6b64\u9009\u9879,\u5b83\u5c31\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u5c06\u591a\u4e2a\u5957\u63a5\u5b57\u7ed1\u5b9a\u5230\u540c\u4e00\u672c\u5730\u7aef\u70b9\u3002 BSD\u7cfb\u7edf\u5f15\u5165\u4e86`SO_REUSEPORT`\u9009\u9879,\u53ef\u4ee5\u4e0e\u5730\u5740\u91cd\u7528\u5206\u5f00\u63a7\u5236\u7aef\u53e3\u91cd\u7528\uff1b\u5728\u6b64\u7c7b\u7cfb\u7edf\u4e0a,\u5fc5\u987b\u8bbe\u7f6e\u8fd9*\u4e24\u4e2a*\u9009\u9879\u3002\\n\\n\u66f4\u591a\u7ec6\u8282\u53ef\u4ee5\u770b https://bford.info/pub/net/p2pnat/\\n\\n\u7531\u4e8eS\u548cA\u662f\u4e24\u4e2a\u5916\u90e8\u8282\u70b9,\u6240\u4ee5S\u8bd5\u63a2\u51fa\u7684ip, port\u8981\u80fd\u7528,\u8fd8\u8981\u6c42B\u7684NAT\u4e0d\u662fsymmetric\u7684,A\u4e5f\u4e00\u6837\\n\\n\\n\\n\u6559\u6388\u8fd8\u63d0\u51fa\u4e86\u4e2a\u5f88\u5e7d\u9ed8\u7684\u95ee\u9898\u662f\\n\\n\u8981\u6c42NAT\u652f\u6301\u6253\u6d1e(\u751a\u81f3\u5176\u4ed6\u90a3\u4e9b\u9ad8\u7ea7\u63aa\u65bd)\u662f\u8fdd\u80ccp2p\u7684,\u9700\u8981NAT\u7684\u652f\u6301,NAT\u539f\u5219\u4e0a\u4e0d\u4f1a\u4e3a\u4e0d\u6d41\u884c\u7684\u65b0\u534f\u8bae\u63d0\u4f9b\u6253\u6d1e\u652f\u6301(\u9700\u8981NAT\u8d77\u7801\u77e5\u9053\u54ea\u91cc\u662fIP,\u54ea\u91cc\u662fport,etc),\u800c\u5728\u73b0\u5728\u5e7f\u6cdb\u4f7f\u7528NAT\u7684\u60c5\u51b5\u4e0b,\u4e0d\u652f\u6301\u7a7f\u8fc7NAT\u7684\u534f\u8bae\u96be\u4ee5\u6d41\u884c\u8d77\u6765,\u6b7b\u5faa\u73af\u4e86\\n\\n\\n\\nNAT Debate:\\n\\nPros:\u5b89\u5168\u6027,\u5730\u5740\u91cd\u7528\\n\\nCons:\u4e0d\u662fp2p\u4f9d\u8d56\u5927\u89c4\u6a21\u7684\u786c\u4ef6\u652f\u6301,\u7edf\u4e00\u89c4\u8303\u7684\u56f0\u96be,\u6dfb\u52a0\u65b0\u884c\u4e3a\u7684\u56f0\u96be,\u5e94\u7528\u7a0b\u5e8f\u7f16\u5199\u589e\u52a0\u7684\u56f0\u96be\\n\\n\\n\\nNAT Operations\\n\\nRFC 4787 UDP\\n\\n- A NAT MUST have an \\"Endpoint-Independent Mapping\\" behavior(mapping\u548c\u5916\u90e8\u7aef\u53e3\u65e0\u5173,\u7981\u6b62symmetric NAT)\\n- ......\\n\\nRFC 5382 TCP\\n\\n- \u4e00\u6837,\u7981\u6b62symmetric NAT\\n- \u5fc5\u987b\u5141\u8bb8\u540c\u65f6\u7684\u5f00\u542fTCP\u8fde\u63a5(A\u6253\u6d1e\u8fde\u63a5B\u7684public IP,SYN;\u7136\u540eB\u8fde\u63a5A\u7684public IP,SYN\u3002\u6b64\u65f6\u9700\u8981\u80fd\u8fde\u63a5,\u6253\u6d1e\u5b8c\u6210,NAT\u5fc5\u987b\u5141\u8bb8\u4e14\u6b63\u786e\u5904\u7406A SYN, B SYN\u8fd9\u79cdTCP State)(NAT\u4e0d\u9650\u5236\u4efb\u4f55\u904d\u5386TCP\u72b6\u6001\u56fe\u7684\u8fde\u63a5\u5b9e\u73b0\u65b9\u5f0f)\\n- \u6536\u5230\u6ca1\u6709map\u7684TCP SYN\u65f6\u5fc5\u987b\u81f3\u5c11\u4fdd\u75596s\u624d\u53ef\u4ee5\u53d1\u9001ICMP\u54cd\u5e94 (\u5982\u679c\u4e00\u4e2a\u5728\u8303\u56f4\u5916\u7684\u6253\u6d1e\u7528TCP SYN\u4f20\u5165,\u7136\u540e\u7ed9\u4ed6\u62d2\u4e86,\u81ea\u5df1\u8fd9\u8fb9\u5c1d\u8bd5\u6253\u5bf9\u9762\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5bf9\u9762TCP\u8fde\u63a5\u5173\u95ed\u5220\u4e86\u8fd9\u4e2amapping\u6253\u6d1e\u5931\u8d25)\\n- ......\\n\\n\\n\\nHTTP:\\n\\nREQ/RES API\\n\\ntext protocal, document-centric\\n\\n\\n\\nHTTP Req Format:\\n\\n---\\n\\nmethod | URL | version\\n\\nheader field name | value\\n\\n...\\n\\nheader field name | value\\n\\nblank line\\n\\nbody\\n\\n---\\n\\n\\n\\nHTTP/1.0\\n\\n- Open connection\\n- Issue GET\\n- Server closes connection after response\\n\\n\\n\\nHTTP/1.0 Speed\\n\\nLatency 50ms\\n\\nReq size:1 seg, Res 2 seg\\n\\nSeg packetization delay: 10ms, full duplex(\u5168\u53cc\u5de5,\u6536\u53d1\u4e92\u4e0d\u5f71\u54cd)\\n\\nMaximum open connections: 2\\n\\nwindow\u8db3\u591f\u5927\\n\\n\\n\\nCase 1: Single Page\\n\\nSYN: 50 + SYN/ACK 50 + ACK/req 60 + res/70 = 230ms\\n\\n\\n\\nCase 2: page loads 2 images\\n\\nstep1(page): Setup 100ms, req/res 130ms\\n\\nstep2(images): Setup 100ms,produce 2 response, 100 + 60 + 2*20+50 = 250ms \\n\\n\u603b\u5171250 + 100 + 130 = 480ms\\n\\nTCP\u8fde\u63a5\u5360\u4e86\u5f88\u5927\u7684\u5f00\u9500,HTTP\u65e0\u72b6\u6001\u5f71\u54cdTCP\u670d\u7528\\n\\n\\n\\n\\n\\nHTTP/1.1 Keep-Alive\\n\\n1.0 \u7684\u95ee\u9898\\n\\n- \u591a\u8fde\u63a5\u6bcf\u6b21\u90fd\u8981Setup\u592a\u6162\u4e86\\n- \u5f88\u591a\u7684\u4f20\u8f93\u5927\u5c0f\u90fd\u5f88\u5c0f,TCP \u7684window size\u96be\u4ee5\u53d8\u5927(Slow Start & AIMD)\\n\\n\\n\\nHTTP/1.1\\n\\n- Added Connection header for req\\n  - keep-alive: \u544a\u8bc9server\u4e0d\u8981\u5173\u95ed\u8fd9\u4e2aconnection\\n  - close: \u544a\u8bc9server\u5173\u95ed\\n  - Server can always ignore\\n\\n- Added Connection header for res\\n  - keep-alive: \u544a\u8bc9client\u4e0d\u4f1a\u5173\u95ed\u8fd9\u4e2aconnection\\n  - close: \u544a\u8bc9client\u4f1a\u5173\u95ed\\n- Added Keep-Alive header for res\\n  - \u544a\u8bc9client connection\u53ef\u80fd\u88ab\u7ef4\u6301\u6253\u5f00\u591a\u4e45\\n\\n\\n\\nSPDY\\n\\n- req pipelining\\n- remove redundant headers\\n- Becoming basis of HTTP/2.0\\n\\n\\n\\nBitTorrent\\n\\n\u4ed6\u8bb2\u7684\u592a\u5feb\u4e86\\n\\nbt\u79cd\u5b50\u539f\u7406\u8fd8\u53ef\u4ee5\u53c2\u8003\\n\\nhttps://jaminzhang.github.io/p2p/BitTorrent-Principle-Introduction/\\n\\nhttps://www.cnblogs.com/HMingR/p/13703917.html\\n\\nhttps://www.zhihu.com/question/49829233/answer/160765176\\n\\nhttps://zh.wikipedia.org/wiki/BitTorrent_(%E5%8D%8F%E8%AE%AE)\\n\\n\\n\\nDNS\\n\\n\u539f\u7406\u7ec6\u8282(\u5c42\u6b21\u7cfb\u7edf)\u76f4\u63a5\u770bb\u7ad9\u6216\u8005\u5c0f\u6797\u5c31\u884c,\u6ca1\u4ec0\u4e48\u65b0\u4e1c\u897f\\n\\n\u8bbe\u8ba1\u65f6 DNS\u5e94\u8be5\u662f \\n\\n- \u8bfb\u8fdc\u8fdc\u591a\u4e8e\u5199\\n- \u5f31\u4e00\u81f4\u6027\u8981\u6c42\\n- \u53ef\u8f83\u957f\u671f\u7f13\u5b58\\n- \u5355\u70b9\u6545\u969c\u4e0d\u5f71\u54cd\u6574\u4e2a\u7cfb\u7edf\u5de5\u4f5c\\n\\n\\n\\n\u5206\u5e03\u5f0f,\u591aDNS server \\\\-\\\\> \u5f3a\u5927\u7684DDoS\u6297\u6027\\n\\nDNS cache poisoning \u7be1\u6539DNS resolver\u91cc\u9762\u7684cache\u6307\u5411\u6076\u610f\u7f51\u7ad9\\n\\n\\n\\nDNS info \\\\-\\\\> Resource Records (RR)\\n\\nname [TTL] [class] [type] rdata\\n\\n- name: domain name\\n- TTL: time to live (in seconds)\\n- class: for extensibility, usually IN 1(Internet)\\n- type: type, two critical: A(Ipv4 address) and (NS name server)\\n- rdata: data depends on type\\n\\n\\n\\nDNS Message\\n\\n![image-20240913220108331](https://s2.loli.net/2024/09/13/1zgXxURw2JEaHhO.png)\\n\\ndns name compression\\n\\n\u6574\u4e2aDNS\u5305 \\\\< 512\u5b57\u8282\\n\\n\\n\\nOther Kinds of Records\\n\\nCNAME: to create an alias DNS name \\n\\nSOA: start of authority\\n\\nTXT: some text(for extension)\\n\\nPTR: map address to name\\n\\nAAAA: Ipv6\\n\\n\\n\\nDHCP\\n\\n\u4e0eIP\u901a\u4fe1\u81f3\u5c11\u9700\u8981:\\n\\n- IP\u5730\u5740\\n- \u5b50\u7f51\u63a9\u7801\\n- \u7f51\u5173 Gateway router, \u4f20\u51fa\u53bb\u7684\u7b2c\u4e00\u8df3\\n- [optional] DNS\\n\\n\u95ee\u9898:\u4ece\u4e00\u4e2a\u65b0\u7535\u8111,\u5982\u4f55\u5f97\u5230\u8fd9\u4e9b\u503c\uff1f\\n\\n\u66fe\u7ecf:\u624b\u5de5\u914d\u7f6e\\n\\n\u73b0\u5728:DHCP\u534f\u8bae,Dynamic Host Configuration Protocal\\n\\nhttps://info.support.huawei.com/info-finder/encyclopedia/zh/DHCP.html\\n\\n\\n\\n\u5e38\u89c1\u7684DHCP\u670d\u52a1\u5668:\u8def\u7531\u5668/\u5149\u732b\\n\\n\u8bfe\u7a0b\u8bb2\u5f97\u8fdc\u4e0d\u5982\u52a8\u753b\u6e05\u695a\\n\\nhttps://www.bilibili.com/video/BV1Gd4y1n7Xz/?share_source=copy_web&vd_source=60f8c73d5ef551168e0bbb088ac46073\\n\\n\\n\\n\\n\\n\u865a\u62df\u673a\u7684\u7f51\u7edc\u6a21\u5f0f:\\n\\n- \u7f51\u7edc\u5730\u5740\u8f6c\u6362NAT, \u7406\u89e3\u4e3a\u4e3a\u6bcf\u4e00\u4e2a\u865a\u62df\u673a\u865a\u62df\u4e86\u4e00\u4e2aDHCP\u670d\u52a1\u5668\u4f5c\u4e3a\u4e00\u4e2a**\u53ea\u51fa\u4e0d\u8fdb**\u7684NAT,\u7ed9\u865a\u62df\u673a\u5206\u914d\u4e86\u865a\u62df\u8bbe\u5907MAC, \u865a\u62df\u673a\u5185\u8fde\u63a5\u5916\u90e8ok(\u5bbf\u4e3b\u673a\u4f1a\u4f5c\u4e3aNAT\u8fdb\u884c\u8f6c\u53d1), host\u8fde\u63a5\u865a\u62df\u673a\u4e0d\u884c(NAT\u5916\u516c\u7f51\u8fde\u5185\u7f51), \u865a\u62df\u673a\u4e4b\u95f4\u4e0d\u80fd\u4e92\u8fde(\u6709\u81ea\u5df1\u72ec\u7acb\u7684DHCP)(\u4e0d\u8003\u8651\u7aef\u53e3\u8f6c\u53d1\u7b49)\\n- NAT\u7f51\u7edc,\u5728\u865a\u62df\u673a\u524d\u52a0\u4e00\u53f0\u865a\u62df\u4ea4\u6362\u673a,\u4ea4\u6362\u673a\u8fde\u63a5\u5bbf\u4e3b\u673a,DHCP\u5730\u5740\u3001\u7f51\u5173\u5730\u5740\u4e0d\u518d\u4e00\u6837,\u8fd9\u6837\u865a\u62df\u673a\u53ef\u4ee5\u8fde\u63a5\u865a\u62df\u673a,\u5176\u4ed6\u540c\u4e0a\\n- \u6865\u63a5(\u7f51\u5361),\u628a\u865a\u62df\u673a\u653e\u5728\u5bbf\u4e3b\u673a\u7684\u5c40\u57df\u7f51\u91cc\u9762,\u4e5f\u4f5c\u4e3a\u4e00\u4e2a\u201c\u72ec\u7acb\u8bbe\u5907\u201d\u53bb\u8fde\u63a5\u5bbf\u4e3b\u673a\u5668\u8fde\u63a5\u7684DHCP server,\u6d88\u8017\u5bbf\u4e3b\u6240\u5728\u5c40\u57df\u7f51\u7684IP\u5730\u5740,\u6b64\u65f6\u5168\u90e8\u53ef\u4ee5\u8fde\\n\\n- \u5185\u90e8\u7f51\u7edc:\u53ef\u4ee5\u4e92\u76f8ping, \u4e0d\u80fdping\u5bbf\u4e3b\u548c\u5916\u90e8\u7f51\u7edc,\u4e00\u4e2a\u9694\u79bb\u7684\u5185\u90e8\u7f51\u7edc\\n- Host-only(\u4ec5\u4e3b\u673a):\u865a\u62df\u673a\u548c\u5bbf\u4e3b\u6784\u6210\u7684\u5185\u90e8\u7f51\u7edc,\u865a\u62df\u673a\u4e0d\u80fd\u8fde\u5916\u90e8\u4e92\u8054\u7f51\u548c\u88ab\u8fde,\u6bd4\u5982docker\u91c7\u7528host-only\u591a\\n\\n\\n\\n## Unit 6: Routing\\n\\nApproaches\\n\\n- Flooding \u5728\u6bcf\u4e2a\u8282\u70b9\u5e7f\u64ad,\u6548\u7387\u4f4e,\u4f46\u80fd\u4fdd\u8bc1\u53ef\u8fbe\u6027,\u4ec5\u5728\u5bf9\u7f51\u7edc\u62d3\u6251\u4e00\u65e0\u6240\u77e5\u65f6\u8003\u8651\\n- Source routing \u53e6\u4e00\u4e2a\u6781\u7aef,\u7aef\u70b9\u5b8c\u5168\u77e5\u9053\u5185\u90e8\u7684\u62d3\u6251,\u8fdb\u800c\u76f4\u63a5\u6307\u5b9a\u4e00\u6761\u8def\\n- Forwarding table \u6838\u5fc3\u5728\u4e8e\u5982\u4f55\u586b\u5145\u8fd9\u4e9b\u8f6c\u53d1\u8868\\n- Spanning tree \u4e00\u79cd\u586b\u5145\u8f6c\u53d1\u8868\u7684\u65b9\u6cd5,\u53ef\u4ee5\u662f\u8ddd\u79bb\u7684\u6700\u5c0f\u751f\u6210\u6811,\u8df3\u6570\u7684\u6700\u5c0f\u751f\u6210\u6811,\u5ef6\u8fdf\u7684\u6700\u5c0f\u751f\u6210\u6811......\\n\\n\u5b9e\u9645\u4e0a\u91c7\u7528\u7684\u8def\u7531\u7b97\u6cd5\u4e5f\u79f0\u8def\u7531\u534f\u8bae\\n\\nMetrics\\n\\nShortest path spanning trees\\n\\nOther types of routing\\n\\n- Multipath \u6700\u5c0f\u751f\u6210\u6811\u7684\u95ee\u9898\u5728\u4e8e\u6709\u4e9b\u8282\u70b9\u7684\u7684\u5ea6\u4f1a\u5f88\u9ad8,\u541e\u5410\u538b\u529b\u5f88\u5927,\u5c06\u4e0d\u540c\u7684\u5305\u5206\u914d\u5230\u4e0d\u540c\u8def\u5f84\u4e0a\u5747\u5300\u8d1f\u8f7d \\n- Multicast \u591a\u4e2a\u76ee\u6807\u4f18\u5316\u7684\u60c5\u51b5,\u4f8b\u5982,\u5e7f\u64ad,\u60f3\u8981\u4ee5\u5c3d\u53ef\u80fd\u5c11\u7684\u4f20\u8f93\u4ee3\u4ef7\u53d1\u9001\u5230\u5927\u91cf\u4e3b\u673a\\n\\n\\n\\nBellman-Ford \u7b97\u6cd5\\n\\n\u8fd9\u91cc\u4ed6\u7528\u7684\u201c\u5230X\u7684\u6700\u5c0f\u751f\u6210\u6811\u201d\u5b9e\u9645\u4e0a\u662fX\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u6811\\n\\n\u5206\u5e03\u5f0fBellman-Ford\\n\\n1. \u521d\u59cb\u6240\u6709\u70b9\u5230\u6e90\u7684\u8ddd\u79bb\u8bbe\u4e3a\u65e0\u7a77,\u8bb0\u4e3a\u8ddd\u79bb\u5411\u91cfC=(C1,C2,...)\\n2. \u6bcf\u8fc7T\u65f6\u95f4,\u5c06C\u53d1\u9001\u5230\u6240\u6709\u90bb\u8fb9\\n3. \u5982\u679c\u53d1\u73b0\u53d1\u9001\u8fc7\u6765\u7684Ci\u6bd4\u81ea\u5df1\u7684Ci\u5c0f,\u66f4\u65b0\u81ea\u5df1\u7684Ci\\n4. \u91cd\u590d23\\n\\n\\n\\n\u8fd0\u884c\u65f6\u95f4:\u6700\u957f\u65e0\u5faa\u73af\u8def\u5f84\\n\\n\u6536\u655b\u6027:\u4e00\u5b9a\u6536\u655b\\n\\n\u5f53\u8fde\u63a5\u7684cost\u6539\u53d8/\u8fde\u63a5\u6302\u4e86:Bad news travel slowly(Count to Infinity Problem)\\n\\nR1-\\\\>R2-\\\\>R3-\\\\>R4\u7684\u56fe,R3-\\\\>R4\u65ad\u4e86,R3\u4f1a\u628aR3-R4\u66f4\u65b0\u4e3aR2-R3 + R2-R4\u7684\u503c\u800c\u4e0d\u662f\u65e0\u7a77\uff01\\n\\n\u8fd9\u6837Ri-\\\\>R4\u7684\u503c\u90fd\u662f\u6162\u6162\u589e\u52a0,**\u5bf9\u5207\u65ad\u5b8c\u5168\u4e0d\u654f\u611f**\\n\\n\\n\\n\u89e3\u51b3\u65b9\u6cd5\u6709\u5f88\u591a:\\n\\n- \u8bbe\u7f6e\u201c\u65e0\u7a77\u201d\u4e3a\u4e00\u4e2a\u5c0f\u7684\u503c,\u8fed\u4ee3\u5230\u8d85\u8fc7\u5b83\u5c31\u662f\u65e0\u7a77,\u505c\u6b62,\u8ba4\u4e3a\u622a\u65ad\\n- split horizon: R2\u4eceR3\u5904\u5f97\u5230\u6700\u5c0f\u7684cost, \u4e0d\u53cd\u5411\u4f20\u56deR3(\u6216\u4f20\u56de\u65e0\u7a77)\\n- ......\\n\\nsplit horizon\u4e0d\u4e00\u5b9a\u603b\u662f\u6709\u6548\u7684,\u6bd4\u8f83\u5bb9\u6613\u6784\u9020\u4f8b\u5b50\\n\\nBellman Ford \u7b97\u6cd5\u548csplit horizon\u7b49\u673a\u5236\u6784\u6210\u4e86\u7b2c\u4e00\u4ee3\u8def\u7531\u534f\u8bae(Routing Infomation Protocol, RIP)\\n\\n\u4f18\u70b9\u662f\u8def\u7531\u5668\u7684\u8ba1\u7b97\u91cf\u5f88\u5c0f\\n\\n\\n\\nDijkstra\u7b97\u6cd5 \u5927\u5bb6\u90fd\u5f88\u719f\u4e86\\n\\n\u6ce8\u610f\u4e00\u4e0bDijkstra\u5728cost\u6539\u53d8\u6216\u8005link\u51fa\u9519\u7684\u65f6\u5019\u9700\u8981\u5bf9\u6240\u6709\u8282\u70b9\u91cd\u65b0\u8ba1\u7b97\u5355\u6e90\u6700\u77ed\u8def\u5f84\\n\\n\u8ba1\u7b97\u91cf\u5927,\u4f46\u9519\u8bef\u7acb\u5373\u4f20\u64ad\\n\\nOSPF(Open Shortest Path First)\u534f\u8bae\u7684\u57fa\u7840\\n\\n\\n\\nHierarchy and Autonomous Systems(AS)\\n\\n\u524d\u9762\u628a\u4e92\u8054\u7f51\u770b\u6210\u8def\u7531\u5668\u7684\u96c6\u5408,\u5bf9\u4e5f\u4e0d\u5bf9\\n\\n\u6838\u5fc3\u95ee\u9898\u662f\u89c4\u6a21\u592a\u5927\u4e86,\u5bfc\u81f4\u4ea4\u6362\u548c\u540c\u6b65\u5f00\u9500\u592a\u5927,\u5373\u4f7f\u6309\u7167O(E)\u4e5f\u4e0d\u73b0\u5b9e, \u5b9e\u9645\u4e0a\u662f\u591a\u4e2a\u5c0f\u96c6\u5408\u8fde\u63a5\u8d77\u6765\\n\\n\u6bcf\u4e00\u4e2a\u5c0f\u96c6\u5408\u79f0\u4e3a\u4e00\u4e2aAS,AS\u5185\u90e8\u81ea\u5df1\u51b3\u5b9a\u8def\u7531\u534f\u8bae,\u901a\u8fc7\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u51fa\u53e3\u548c\u5916\u90e8\u8fde\u63a5\\n\\n![image-20240915210137838](https://s2.loli.net/2024/09/15/KEXth5DIPTyBqfG.png)\\n\\n\\n\\n\u5728AS\u4e4b\u95f4,\u5fc5\u987b\u4f7f\u7528BGP-4(Border Gateway Protocol, rfc 1771)\\n\\nAS\u7684\u7c92\u5ea6\u5927\u6982\u5728\u5927\u5b66\u6821,\u5927\u4f01\u4e1a\u8fd9\u6837\\n\\n\u627e\u627e\u4ea4\u5927\u7684AS\\n\\n```shell\\n\u276f traceroute electsys.sjtu.edu.cn\\ntraceroute to electsys.sjtu.edu.cn (202.120.35.189), 30 hops max, 60 byte packets\\n 1  * * *\\n 2  * * 10.3.2.217 (10.3.2.217)  4.413 ms\\n 3  10.32.31.246 (10.32.31.246)  4.915 ms  4.895 ms  4.874 ms\\n 4  10.32.73.226 (10.32.73.226)  4.305 ms  4.732 ms  4.090 ms\\n 5  202.120.35.189 (202.120.35.189)  4.033 ms  4.014 ms  3.995 ms\\n\\n\u276f whois 202.120.35.189                                               \\n% [whois.apnic.net]                                                  \\n% Whois data copyright terms    http://www.apnic.net/db/dbcopyright.h\\ntml                                                                  \\n                                                                     \\n% Information related to \'202.112.0.0 - 202.121.255.255\'             \\n                                                                     \\n% Abuse contact for \'202.112.0.0 - 202.121.255.255\' is \'abuse@cernet.\\nedu.cn\'                                                              \\n                                                                     \\ninetnum:        202.112.0.0 - 202.121.255.255                        \\nnetname:        CERNET-CN                                            \\ndescr:          China Education and Research Network                 \\ndescr:          China Education and Research Network Center          \\ndescr:          Tsinghua University                                  \\ndescr:          Beijing, 100084                                      \\ncountry:        CN                                                   \\nadmin-c:        CER-AP                                               \\ntech-c:         CER-AP                                               \\nabuse-c:        AC1685-AP                                            \\nstatus:         ALLOCATED PORTABLE                                   \\nremarks:        origin AS4538                                        \\nmnt-by:         APNIC-HM                                             \\nmnt-lower:      MAINT-CERNET-AP                                      \\nmnt-routes:     MAINT-CERNET-AP                                      \\nmnt-irt:        IRT-CERNET-AP                                        \\nlast-modified:  2020-09-03T09:16:29Z                                 \\nsource:         APNIC                                                \\n                                                                     \\nirt:            IRT-CERNET-AP                                        \\naddress:        Network Research Center,                             \\naddress:        Main Bldg, Tsinghua Univ                             \\naddress:        Beijing 100084, China                                \\nphone:          +86-10-62784301                                      \\nfax-no:         +86-10-62785933                                      \\ne-mail:         abuse@cernet.edu.cn                                  \\nabuse-mailbox:  abuse@cernet.edu.cn                                  \\nadmin-c:        CER-AP                                               \\ntech-c:         CER-AP                                               \\nauth:           # Filtered                                           \\nremarks:        timezone GMT+8                                       \\nremarks:        http://www.ccert.edu.cn                              \\nremarks:        abuse@cernet.edu.cn was validated on 2024-07-04      \\nmnt-by:         MAINT-CERNET-AP                                      \\nlast-modified:  2024-07-04T04:10:10Z                                 \\nsource:         APNIC                                                \\n                                                                     \\nrole:           ABUSE CERNETAP                                       \\naddress:        Network Research Center,                             \\naddress:        Main Bldg, Tsinghua Univ                             \\naddress:        Beijing 100084, China                                \\ncountry:        ZZ                                                   \\nphone:          +86-10-62784301                                      \\ne-mail:         abuse@cernet.edu.cn                                  \\nadmin-c:        CER-AP                                               \\ntech-c:         CER-AP                                               \\nnic-hdl:        AC1685-AP                                            \\nremarks:        Generated from irt object IRT-CERNET-AP              \\nremarks:        abuse@cernet.edu.cn was validated on 2024-07-04      \\nabuse-mailbox:  abuse@cernet.edu.cn                                  \\nmnt-by:         APNIC-ABUSE                                          \\nlast-modified:  2024-07-04T04:10:19Z                                 \\nsource:         APNIC                                                \\n                                                                     \\nrole:           CERNET Helpdesk                                      \\naddress:        CERNET Center                                        \\naddress:        Beijing 100084, China                                \\ncountry:        CN                                                   \\nphone:          +86-10-6278-4049                                     \\nfax-no:         +86-10-6278-5933                                     \\ne-mail:         helpdesk@cernet.edu.cn                               \\nremarks:        abuse@cernet.edu.cn                                  \\nadmin-c:        XL1-CN                                               \\ntech-c:         SZ2-AP                                               \\nnic-hdl:        CER-AP                                               \\nmnt-by:         MAINT-CERNET-AP                                      \\nlast-modified:  2020-09-03T09:14:12Z                                 \\nsource:         APNIC                                                \\n                                                                     \\n% This query was served by the APNIC Whois Service version 1.88.25 (W\\nHOIS-AU1)                                                            \\n          \\n```\\n\\n\\n\\n\u662f\u4e2d\u56fd\u6559\u80b2\u548c\u79d1\u7814\u8ba1\u7b97\u673a\u7f51\u7edc()\\n\\nmac\u4e0a\u652f\u6301`traceroute -a`\u4f46\u662fubuntu\u597d\u50cf\u4e0d\u652f\u6301\\n\\n\\n\\nInterior Routing Protocols\\n\\nRIP:\\n\\n- \u4f7f\u7528\u5206\u5e03\u5f0fBellman-Ford \\n- \u6bcf30s\u66f4\u65b0\u4e00\u6b21\\n- \u6ca1\u6709\u8eab\u4efd\u9a8c\u8bc1\\n- \u66fe\u7ecf\u5e7f\u6cdb\u4f7f\u7528,\u73b0\u5728\u591a\u88abOSPF\u548cISIS\u53d6\u4ee3\\n\\nOSPF:\\n\\n- \u8fde\u63a5\u4fe1\u606f\u76f4\u63a5\u66b4\u529bflooding\\n- \u6bcf\u4e00\u4e2a\u8def\u7531\u5668\u90fd\u8dd1Dijkstra\\n- \u8eab\u4efd\u9a8c\u8bc1\\n- \u5f88\u591a\u590d\u6742\u7684\u7ec6\u8282(doge)\\n\\n\\n\\n\u5355\u4e2a\u51fa\u53e3\u7684AS\u975e\u5e38\u7b80\u5355\\n\\n- \u6bcf\u4e00\u4e2a\u8def\u7531\u5668\u7684default routing(\u8def\u7531\u8868\u7b2c\u4e00\u9879)\u90fd\u662f\u51fa\u53e3\\n\\n- \u8def\u7531\u8868\u901a\u5e38\u5f88\u5c0f\\n\\n\u591a\u51fa\u53e3:\\n\\n\u5fc5\u987b\u6307\u5b9a\u6bcf\u4e00\u4e2arouter\u7684\u51fa\u53e3\u548c\u5bf9\u5e94\u524d\u7f00\\n\\nApproach 1: hot-patato routing, \u5206\u914d\u79bb\u8def\u7531\u5668\u6700\u8fd1\u7684\u51fa\u53e3\\n\\nApproach 2: \u5206\u914d\u79bb\u76ee\u6807\u6700\u8fd1\u7684\u51fa\u53e3\\n\\n\\n\\nBGP-4 \u5c1d\u8bd5\u89e3\u51b3\u7684\u95ee\u9898:\\n\\n- \u7f51\u7edc\u62d3\u6251\u590d\u6742\\n- AS \u7684 COST \u4e94\u82b1\u516b\u95e8,\u6240\u4ee5\u4e0d\u53ef\u80fd\u627e\u6700\u77ed\u8def\u5f84,\u627e\u5230\u4e00\u7ec4\u8def\u5f84\u5c31\u884c\\n- \u6709\u4e9bAS\u4e0d\u4fe1\u4efb\u5176\u4ed6\u7684\u4e00\u4e9bAS,\u9690\u79c1\u4fdd\u62a4\\n- \u4e0d\u540cAS\u7684\u7b56\u7565\u548c\u76ee\u6807\u4e0d\u540c\\n\\n\\n\\nthe structure of Internet \\n\\n\u4ece Global ISP \u5230 Regional ISP \u5230 access ISP\\n\\n\\n\\nBGP4\\n\\n![image-20240915215047521](https://s2.loli.net/2024/09/15/4bVGglyHLmp5sYk.png)\\n\\n\\n\\n![image-20240915215218659](https://s2.loli.net/2024/09/15/8Tax3UIWlM6gXKV.png)\\n\\n![image-20240915215328459](https://s2.loli.net/2024/09/15/erTnhlEjHGFxADw.png)\\n\\n\u4f8b\u5982\u5546\u4e1a\u4e0a\u7684local pref\u53ef\u80fd\u662f\\n\\ncustomer > peer > provider\\n\\n\\n\\nMulticast\\n\\nReverse Path Broadcast(RPB)\\n\\naka Reverse Path Forwarding(RPF)\\n\\n\u91cd\u7528\u5df2\u6709\u7684\u6700\u77ed\u8def\u5f84\u6811,Flooding\u4f46\u662f\u53ea\u5728\u6700\u77ed\u8def\u5f84\u6811\u4e0aFlooding\\n\\n\u8fdb\u4e00\u6b65\u53ef\u4ee5\u7ed9\u6700\u77ed\u8def\u5f84\u6811\u52a0\u4e0a\u526a\u679d\\n\\n\\n\\n\u5982\u679c\u8bf4\u5bf9\u6bcf\u4e2a\u8282\u70b9\u90fd\u7ef4\u62a4\u4e00\u4e2a\u6700\u77ed\u8def\u5f84\u6811\u5f00\u9500\u592a\u5927,\u4e5f\u53ef\u4ee5\u6bd4\u5982\u6240\u6709\u8282\u70b9\u90fd\u91c7\u7528\u4e2d\u95f4\u7684\u67d0\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u6811\\n\\n\u591a\u64ad\u5e38\u5e38\u4e0d\u77e5\u9053\u4e5f\u96be\u4ee5\u77e5\u9053\u63a5\u53d7\u8005,\u8fd9\u65f6\u5019\u9700\u8981\u63a5\u53d7\u8005\u4e3b\u52a8\u8868\u793a\u63a5\u53d7\u6570\u636e\u5305\u7684\u610f\u613f\\n\\nIGMP host\u548c\u76f4\u8fderouter\u7684\u534f\u8bae,host\u8981\u6c42router\u63a5\u53d7\u67d0\u4e9b\u591a\u64ad\u7ec4\u7684\u6570\u636e;router\u8f6e\u8be2host\u662f\u5426\u8fd8\u60f3\u8981\\n\\n\\n\\n\u4e00\u4e9b\u534f\u8bae DVMRP, PIM\\n\\nmulticast\u4f7f\u7528\u7684\u6bd4\u60f3\u8c61\u7684\u5c11, \u5e76\u4e14\u65e9\u671f\u6548\u7387\u786e\u5b9e\u4e0d\u9ad8,\u5e76\u4e14\u5b89\u5168\u3001\u63a7\u5236\u4e4b\u7c7b\u7684\u95ee\u9898\u4e5f\u5f88\u591a\\n\\n\\n\\nSpanning Tree Protocol\\n\\nEthernet\u662f\u5982\u4f55\u907f\u514d\u5faa\u73af\u7684\uff1f(\u6ca1\u6709TTL\u5b57\u6bb5\u7684\u60c5\u51b5\u4e0b)\u2014\u2014\u6784\u5efa\u751f\u6210\u6811\\n\\n\\n\\n![image-20240915221756676](https://s2.loli.net/2024/09/15/cgl25yRxMDVLwp7.png)\\n\\n\u73b0\u5728\u7684\u7b97\u6cd5\u53c8\u6709\u5f88\u591a\u53d8\u5316\u548c\u6539\u8fdb\\n\\n\\n\\nIPv6 128\u4f4d\u5730\u5740 16 * 8 8\u4e2a 4\u4e2a16\u8fdb\u5236 \u5b57\u6bcd\u5757\\n\\n`https://[2001:470:806d:1::9]:80`\\n\\n\u5927\u5730\u5740\u7a7a\u95f4\u7b80\u5316\u914d\u7f6e\u548cIP\u5206\u914d\u95ee\u9898\\n\\n## Unit 7: Physical and Link\\n\\nLink\\n\\n\u8fde\u63a5\u5c42\\n\\nChannel capacity = B log~2~(1+S/N)\\n\\n- B \u5e26\u5bbd,S \u4fe1\u53f7\u5f3a\u5ea6,N\u566a\u58f0\\n\\n\\n\\n\u7535\u78c1\u6ce2-\\\\>\u4fe1\u53f7:\\n\\n- Amplitude Shift Keying ASK\u632f\u5e45\u8c03\u5236 \\n- Freq Shift Keying FSK\u9891\u7387\u8c03\u5236\\n- Phase Shift Keying PSK\u76f8\u4f4d\u8c03\u5236\\n\\n\u6709\u7ebf\u7f51\u7edc\u4e00\u822cASK \u6162\u7684PAM-5,\u5feb\u7684PAM-16\\n\\n\u632f\u5e45\u8c03\u5236\u9700\u8981\u73af\u5883\u5e72\u6270\u5c0f\u4e14\u7a33\u5b9a\\n\\n\u7c7b\u4f3c\u65e0\u7ebf\u7f51\u7edc,\u73af\u5883\u5e72\u6270\u5927,\u5c31\u5e38\u7528PSK\\n\\nBPSK two phases (0, pi)\\n\\nQPSK (0, 90, 180, 270)\\n\\n\\n\\n\u76f8\u4f4d\u7684\u4f18\u70b9\u6709\u4e00\u4e2a\u662f\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u5f97\u5230\u4efb\u610f\u76f8\u4f4d\u7684\u6ce2\\n\\nI/Q Moudulation \u4e00\u4e2a0,\u4e00\u4e2a180,\u7ebf\u6027\u53e0\u52a0\\n\\nQAM \u540c\u65f6\u4f7f\u7528ASK\u548cPSK\u6765\u5f97\u5230\u7269\u7406\u5c42\u4e0a\u8868\u793a\u66f4\u591a\u4fe1\u606f\u7684\u7b26\u53f7\\n\\neg. 16-QAM for 3G\\n\\n\\n\\nBit Error and Coding\\n\\nBit Error \u566a\u58f0\u5fc5\u5b9a\u5e26\u6765\u9519\u8bef\u7684symbol\\n\\nCoding \u901a\u8fc7\u5728\u7269\u7406\u5c42\u52a0\u5165\u5197\u4f59\u7684bit\u6765\u68c0\u9519\u7ea0\u9519\\n\\nm/n code: m\u4f4dbit\u8f6c\u5316\u4e3an\u4f4d\u7269\u7406\u5c42bit 1/2 3/4\\n\\n\\n\\n\u7269\u7406\u548c\u94fe\u8def\u539f\u7406\\n\\n\u5982\u4f55\u5728\u6ca1\u6709\u5168\u5c40\u65f6\u949f\u7684\u60c5\u51b5\u4e0b\u4ece\u7535\u78c1\u6ce2\u5f97\u5230symbol(\u63a5\u53d7\u8005\u4e0d\u77e5\u9053\u53d1\u9001\u8005\u7684\u65f6\u949f)\\n\\n\\n\\n\u5f02\u6b65\u901a\u4fe1:\\n\\n\u6536\u5230Start\u7684\u4e0b\u964d\u6cbf\u4e4b\u540e\u5f00\u59cb\u6309\u7167\u81ea\u5df1\u7684\u65f6\u949f\u5468\u671f\u63a5\u53d7\\n\\n\u9002\u7528\u4e8e \u6570\u636e\u91cf\u5c0f(\u79ef\u7d2f\u504f\u79fb\u5c11,\u65e0\u9700\u540c\u6b65)\u7684\u60c5\u51b5\\n\\n\u4f8b\u5982\u7ea2\u5916\u9065\u63a7\u5668\\n\\n\\n\\n\u540c\u6b65\u901a\u4fe1:\\n\\n![image-20240914003537280](https://s2.loli.net/2024/09/14/sowvx1uN8WatKA6.png)\\n\\n\u4ece\u65f6\u949f\u6062\u590d\u5355\u5143\u901a\u8fc7\u8fc7\u6ee4\u7b49\u624b\u6bb5\u4ece\u53d1\u9001\u4fe1\u53f7\u4e2d\u5f97\u5230\u539f\u59cb\u65f6\u949f\\n\\n\u4ee5\u539f\u59cb\u65f6\u949f\u901f\u7387\u538b\u5165FIFO, \u53e6\u4e00\u7aef\u4ee5\u63a5\u6536\u7aef\u7684\u65f6\u949f\u5f39\u51faFIFO \\n\\n\\n\\n\u5982\u679c\u4e0d\u53d1\u9001\u539f\u59cb\u65f6\u949f\u4fe1\u53f7,\u8981\u5b8c\u6210clock recovery\u9700\u8981\u539f\u59cbdata\u6709\u4e0a\u5347/\u4e0b\u964d\u6cbf\\n\\n\u5982\u4f55\u5904\u7406\u51680/\u51681\uff1f\\n\\nManchester Coding: \\n\\n> \u5728\u66fc\u5f7b\u65af\u7279\u7f16\u7801\u4e2d,\u6bcf\u4e00\u4f4d\u7684\u4e2d\u95f4\u6709\u4e00\u8df3\u53d8,\u4f4d\u4e2d\u95f4\u7684\u8df3\u53d8\u65e2\u4f5c[\u65f6\u949f\u4fe1\u53f7](https://baike.baidu.com/item/\u65f6\u949f\u4fe1\u53f7/0?fromModule=lemma_inlink),\u53c8\u4f5c\u6570\u636e\u4fe1\u53f7\u3002\\n>\\n> \u66fc\u5f7b\u65af\u7279\u7f16\u7801\u6709\u4e24\u79cd\u76f8\u53cd\u7684\u7ea6\u5b9a\u3002\\n>\\n> \u5176\u4e2d\u7684\u7b2c\u4e00\u79cd\u7ea6\u5b9a\u75311949\u5e74\u7531GE\u6258\u9a6c\u65af(GE Thomas)\u9996\u6b21\u51fa\u7248,\u968f\u540e\u6709\u4f17\u591a\u4f5c\u5bb6\u4f7f\u7528,\u4f8b\u5982,\u5b89\u8fea\xb7\u5854\u5357\u9c8d\u59c6(Andy Tanenbaum)\u3002 [3]\u5b83\u6307\u5b9a\u5bf9\u4e8e0\u4f4d,\u4fe1\u53f7\u7535\u5e73\u5c06\u4e3a\u4f4e\u9ad8\u7535\u5e73(\u5047\u8bbe\u5bf9\u6570\u636e\u8fdb\u884c\u5e45\u5ea6\u7269\u7406\u7f16\u7801)-\u5728\u4f4d\u5468\u671f\u7684\u524d\u534a\u6bb5\u4e3a\u4f4e\u7535\u5e73,\u5728\u540e\u534a\u6bb5\u4e3a\u9ad8\u7535\u5e73\u3002\u5bf9\u4e8e1\u4f4d,\u4fe1\u53f7\u7535\u5e73\u5c06\u4e3a\u9ad8-\u4f4e\u3002\\n>\\n> \u7b2c\u4e8c\u79cd\u7ea6\u5b9a\u4e5f\u88ab\u4f17\u591a\u4f5c\u8005\u4f7f\u7528(\u4f8b\u5982William Stallings) [4],IEEE 802.4(\u4ee4\u724c\u603b\u7ebf)\u548cIEEE 802.3(\u4ee5\u592a\u7f51)\u6807\u51c6\u7684\u4f4e\u901f\u7248\u672c\u6240\u9075\u5faa\u3002\u5b83\u6307\u51fa\u903b\u8f910\u7531\u9ad8-\u4f4e\u4fe1\u53f7\u5e8f\u5217\u8868\u793a,\u903b\u8f911\u7531\u4f4e-\u9ad8\u4fe1\u53f7\u5e8f\u5217\u8868\u793a\u3002\\n\\n![image-20240914004311151](https://s2.loli.net/2024/09/14/xWHkfsrdiq6C9QV.png)\\n\\n\\n\\n\u95ee\u9898:\u4e2d\u95f4\u90a3\u4e2a\u8df3\u53d8\u4e3a\u4ec0\u4e48\u65e0\u5f71\u54cd\uff1f\\n\\n\u7b54:\u5bf9\u9762\u4e5f\u9700\u8981\u6709\u5927\u6982\u9891\u7387,\u8fc7\u4e00\u4e2a\u8fc7\u6ee4\u5668(\u627e\u9891\u7387\u7684\u4e3b\u6210\u5206),\u65f6\u949f\u80fd\u5dee\u4e24\u500d\u8fd8\u662f\u592a\u79bb\u8c31\u4e86\\n\\nPros:\\n\\n- \u4fdd\u8bc1\u4e00\u4e2abit\u4e00\u6b21\u8f6c\u6362\\n- \u4fdd\u8bc1\u4e86 d.c balance (\u76f8\u7b49\u7684high/low, \u6709\u6548\u7535\u538b\u7a33\u5b9a)\\n\\nCons: \u66fc\u5f7b\u65af\u7279\u7f16\u7801\u7684\u95ee\u9898\u662f\u6700\u574f\u9700\u8981\u4e24\u500d\u7684\u5e26\u5bbd\\n\\n\\n\\n4b5b encoding\\n\\n![image-20240914005027325](https://s2.loli.net/2024/09/14/dCSU6vbEDLWKqtP.png)\\n\\n\\n\\nCoding\\n\\n\u7269\u7406\u6027\u9519\u8bef\u7684\u6982\u7387\u4f4e\u4f46\u4e0d\u662f\u6ca1\u6709\\n\\n\u52a0\u5197\u4f59:forward coding\\n\\nReed Solomon \u7f16\u7801(CD, DVD, RAID6, ...)\\n\\n- \u4ecedata\u4e2d\u53d6k\u5757\\n- \u8ba9\u8fd9k\u5757\u4f5c\u4e3a\u4e00\u4e2ak-1\u7684\u591a\u9879\u5f0ff\u7684\u7cfb\u6570\\n- \u7528f\u8ba1\u7b97n\u4e2a\u4e0d\u540c\u70b9(n\\\\>=k)\\n- \u628a\u8fd9n\u4e2a\u70b9\u4f5c\u4e3ak\u5757\u7684\u9644\u52a0\u4e5f\u53d1\u9001\\n- n\u4e2a\u4e2d\u4efb\u610fk\u4e2a\u53ef\u4ee5\u6062\u590d\u539f\u59cb\u591a\u9879\u5f0f\\n\\n\u6700\u591a\u6821\u6b63 (n-k)/2\u4e2aerror,\u53ef\u4ee5\u67e5\u6240\u6709\u9519\\n\\n\\n\\n\u53ef\u4ee5\u901a\u8fc7interleaving\u6765\u63d0\u5347\u7ea0\u9519\u80fd\u529b,\u907f\u514dburst errors\\n\\n\\n\\nThe Link Layer\\n\\nEthernet\u4e0a\u901a\u8fc7\u4ecb\u8d28(\u7a7a\u6c14,\u603b\u7ebf\u7b49)\u8fde\u63a5\u7684\u591a\u53f0\u4e3b\u673a\u7684\u53d1\u4fe1\u534f\u8bae\uff1f\\n\\n- Aloha \u975e\u5e38\u7b80\u5355,\u6709\u8bdd\u5c31\u76f4\u63a5\u5bf9\u4ecb\u8d28\u8bf4,\u51b2\u7a81(\u81ea\u5df1\u8bf4\u5b8c\u542c,\u5982\u679c\u4e0d\u4e00\u6837\u5c31\u51b2\u7a81\u4e86)\u5c31\u7a0d\u540e\u91cd\u53d1\\n- CSMA/CD(\u5b9e\u9645\u4f7f\u7528\u7684) \u6bd4\u8f83Aloha,\u52a0\u4e861.\u8bf4\u524d\u5148\u542c\u6709\u6ca1\u6709\u5728\u8bf4(CS) 2.(CD)\u5982\u679c\u51b2\u7a81\u7acb\u523b\u505c\u6b62,\u51b2\u7a81\u540e\u6839\u636e\u5f53\u524d\u8d1f\u8f7d\u968f\u673a\u51b3\u5b9a\u91cd\u53d1\u65f6\u95f4(0, 2^n^)512 bit times\\n\\n- \u66f4\u590d\u6742\u7684token ring\u4e4b\u7c7b\u7528\u7684\u4e0d\u662f\u5f88\u591a,\u5bb9\u9519\u6027\u4e5f\u4e0d\u662f\u5f88\u597d\\n\\nCSMA/CD \u6709\u6700\u5c0f\u5305\u5927\u5c0f\u8981\u6c42\\n\\n\u5982\u679c\u8ddd\u79bb\u6700\u8fdc\u4e24\u4e2a\u70b9\u8ddd\u79bbL, \u4f20\u8f93\u901f\u7387c, \u6bcf\u4e2a\u5305\u81f3\u5c11\u8981\u67092L/c\u8fd9\u4e48\u957f,\u5426\u5219collision\u4fe1\u53f7\u4f20\u8f93\u5230\u4e00\u4e2a\u5df2\u7ecf\u53d1\u5b8c\u5305\u7684\u8282\u70b9\u662f\u4ee4\u4eba\u7591\u60d1\u7684\\n\\n\\n\\nEthenet\\n\\n\u66f4\u5feb\u7684Ethenet \u7531\u4e8e 2L/c \u7684\u9650\u5236,\u6570\u636e\u5305\u5927\u5c0f\u4e0d\u53d8,L\u53ea\u80fd\u7f29\u5c0f\\n\\n\u65e9\u671f:\u4f7f\u7528Hub \u96c6\u7ebf\u5668\\n\\n\u540e\u6765Ethenet\u8d8a\u6765\u8d8a\u5feb,\u51b2\u7a81\u589e\u52a0,L\u51cf\u5c11,\u9700\u8981\u8fdb\u884c\u66f4\u591a\u5206\u533a,\u4e0d\u518d\u80fd\u4e00\u4e2aHub\u5168\u7ba1,\u540c\u65f6\u82af\u7247\u6280\u672f\u5347\u7ea7,\u6210\u672c\u964d\u4f4e,\u5c31\u4ece\u7c97\u653e\u7ba1\u7406\u4ea7\u751f\u4e86\u4ea4\u6362\u673a\\n\\n\u5e76\u4e14\u4ea4\u6362\u673a\u7684\u7ebf\u8fd8\u53ef\u4ee5\u505a\u6210\u5168\u53cc\u5de5,\u8fdb\u4e00\u6b65\u51cf\u5c11\u51b2\u7a81\\n\\nHubs to Switches\\n\\n> \u5bf9\u4e8e\u96c6\u7ebf\u5668\u800c\u8a00,\u4fe1\u53f7\u5c06\u6cbf\u5176\u7aef\u53e3\u8fdb\u884c\u4f20\u8f93,\u5e76\u5e7f\u64ad\u5230\u5176\u4ed6\u7aef\u53e3,\u6b63\u56e0\u5982\u6b64\u5bb9\u6613\u4ea7\u751f\u5e7f\u64ad\u98ce\u66b4,\u5f53\u7f51\u7edc\u89c4\u6a21\u8f83\u5927\u65f6\u5176\u6027\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u800c\u4ea4\u6362\u673a\u53ea\u6709\u53d1\u51fa\u8bf7\u6c42\u7684\u7aef\u53e3\u548c\u76ee\u7684\u7aef\u53e3\u4e4b\u95f4\u624d\u4f1a\u76f8\u4e92\u54cd\u5e94,\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7aef\u53e3,\u56e0\u6b64\u4ea4\u6362\u673a\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u6709\u6548\u6291\u5236\u5e7f\u64ad\u98ce\u66b4\u7684\u4ea7\u751f\u3002\\n>\\n> \u6b64\u5916,\u96c6\u7ebf\u5668\u7684\u6240\u6709\u7aef\u53e3\u90fd\u662f\u5171\u4eab\u4e00\u6761\u5e26\u5bbd,\u5728\u540c\u4e00\u65f6\u523b\u53ea\u80fd\u6709\u4e24\u4e2a\u7aef\u53e3\u8fdb\u884c\u6570\u636e\u4f20\u8f93,\u5176\u4ed6\u7aef\u53e3\u90fd\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u3002\u800c\u4ea4\u6362\u673a\u7684\u6bcf\u4e2a\u7aef\u53e3\u90fd\u6709\u4e00\u6761\u72ec\u7acb\u7684\u5e26\u5bbd,\u5f53\u5404\u4e2a\u7aef\u53e3\u8fdb\u884c\u5de5\u4f5c\u65f6,\u6bcf\u4e2a\u7aef\u53e3\u4e4b\u95f4\u4e92\u4e0d\u53d7\u5f71\u54cd\u3002\u800c\u4e14\u4ea4\u6362\u673a\u4f1a\u4fdd\u7559\u4e0e\u4e4b\u8fde\u63a5\u7684\u6240\u6709\u8bbe\u5907\u7684MAC\u5730\u5740,\u53ef\u67e5\u8be2\u5230\u6570\u636e\u8f6c\u53d1\u5230\u4e86\u54ea\u4e2a\u7aef\u53e3\u4e0a\u3002\u4e5f\u5c31\u662f\u8bf4\u4ea4\u6362\u673a\u786e\u5207\u5730\u77e5\u9053\u5c06\u6570\u636e\u53d1\u9001\u5230\u4e86\u54ea\u4e2a\u7aef\u53e3,\u80fd\u6709\u6548\u8282\u7701\u7f51\u7edc\u54cd\u5e94\u65f6\u95f4\u3002\u4f46\u96c6\u7ebf\u5668\u5374\u6ca1\u6cd5\u533a\u5206\u5c06\u6570\u636e\u8f6c\u53d1\u5230\u4e86\u54ea\u4e2a\u7aef\u53e3\u3002\\n\\n\\n\\n| \u533a\u522b                   | \u96c6\u7ebf\u5668                                        | \u4ea4\u6362\u673a                                                       | \u8def\u7531\u5668                                  |\\n| ---------------------- | --------------------------------------------- | ------------------------------------------------------------ | --------------------------------------- |\\n| \u5de5\u4f5c\u5c42\u6b21               | \u7269\u7406\u5c42                                        | \u6570\u636e\u94fe\u8def\u5c42                                                   | \u7f51\u7edc\u5c42                                  |\\n| \u4f5c\u7528                   | \u4fe1\u53f7\u653e\u5927\u548c\u4f20\u8f93\u4f5c\u7528,\u53ef\u5c06\u8ba1\u7b97\u673a\u7f51\u7edc\u8fde\u63a5\u5728\u4e00\u8d77\u3002 | \u5c06\u4e00\u4e2a\u7f51\u7edc\u7aef\u53e3\u5206\u6210\u591a\u4e2a\u7f51\u7edc\u7aef\u53e3,\u7528\u4e8e\u8fde\u63a5\u66f4\u591a\u7684\u8bbe\u5907\uff1b\u540c\u65f6\u53ef\u7ba1\u7406\u7aef\u53e3\u548c\u914d\u7f6eVLAN\u5b89\u5168\u7ba1\u7406\u3002 | \u8fde\u63a5\u4e0d\u540c\u7684\u7f51\u7edc,\u4ee5\u53ca\u9009\u62e9\u4fe1\u606f\u4f20\u8f93\u7684\u7ebf\u8def\u3002 |\\n| \u6570\u636e\u4f20\u8f93\u5f62\u5f0f           | \u7535\u4fe1\u53f7                                        | \u5e27\u548c\u5305                                                       | \u5305                                      |\\n| \u7aef\u53e3                   | 4/12\u7aef\u53e3                                      | \u591a\u7aef\u53e3,\u901a\u5e38\u57284~48\u7aef\u53e3\u6570\u4e4b\u95f4                                  | 2/4/5/8\u7aef\u53e3                             |\\n| \u4f20\u8f93\u65b9\u5f0f               | \u6cdb\u6d2a\u3001\u5355\u64ad\u3001\u591a\u64ad\u6216\u5e7f\u64ad                        | \u5148\u5e7f\u64ad\u5728\u5355\u64ad\u6216\u591a\u64ad                                           | \u5148\u5e7f\u64ad\u5728\u5355\u64ad\u548c\u591a\u64ad(\u53d6\u51b3\u4e8e\u9700\u6c42)          |\\n| \u8bbe\u5907\u7c7b\u578b               | \u975e\u667a\u80fd\u8bbe\u5907                                    | \u667a\u80fd\u8bbe\u5907                                                     | \u667a\u80fd\u8bbe\u5907                                |\\n| \u5e94\u7528                   | \u5c40\u57df\u7f51                                        | \u5c40\u57df\u7f51                                                       | \u5c40\u57df\u7f51/\u57ce\u57df\u7f51/\u5e7f\u57df\u7f51                    |\\n| \u4f20\u8f93\u6a21\u5f0f               | \u534a\u53cc\u5de5                                        | \u534a\u53cc\u5de5/\u5168\u53cc\u5de5                                                | \u5168\u53cc\u5de5                                  |\\n| \u901f\u7387                   | 10Mbps                                        | 10/100Mbps, 1Gbps                                            | 1~100Mbps(\u65e0\u7ebf) 100~1000Mbps(\u6709\u7ebf)      |\\n| \u7528\u4e8e\u6570\u636e\u4f20\u8f93\u7684\u5730\u5740\u7c7b\u578b | MAC\u5730\u5740                                       | MAC\u5730\u5740                                                      | IP\u5730\u5740                                  |\\n\\n\\n\\n![image-20240914014627891](https://s2.loli.net/2024/09/14/QfjLvwRaoA21Kn8.png)\\n\\n![image-20240914014742672](https://s2.loli.net/2024/09/14/Y6vkIzncm3XWigO.png)\\n\\n\\n\\nWireless Networking\\n\\nRadiates over space \\\\-\\\\> \u6700\u574fr^2^\u7684\u4fe1\u53f7\u8870\u51cf\\n\\nUncontrolled medium \\\\-\\\\> \u6613\u53d7\u5f71\u54cd,\u968f\u65f6\u53d8\u5316\\n\\n\\n\\ncan reflect \\n\\nwifi \u5177\u6709\u9ad8\u4e22\u5305\u7387,\u4e14\u6ce2\u52a8\u5de8\u5927-\\\\>\u5fc5\u987b\u8003\u8651tcp\u7b49\u91cd\u4f20\u673a\u5236\\n\\n\\n\\nCSMA/CD\u5bf9wifi\u4e0d\u9002\u7528:\u6838\u5fc3\u5728\u4e8e\u78b0\u649e\u68c0\u67e5,\u5728\u65e0\u7ebf\u60c5\u51b5\u4e0b,\u81ea\u5df1\u76d1\u542c\u5230\u7684\u60c5\u51b5\u548c\u5b9e\u9645\u63a5\u53d7\u8005\u5904\u7684\u60c5\u51b5\u533a\u522b\u8f83\u5927(\u6bd4\u5982\u8870\u51cf\u592a\u591a\u4ee5\u81f3\u4e8e\u542c\u4e0d\u5230)\\n\\n\u95ee\u9898\u6709:\\n\\n- \u5982\u4f55\u533a\u5206\u662f\u78b0\u649e\u8fd8\u662f\u4fe1\u53f7\u8870\u51cf\u592a\u591a\u6ca1\u6536\u5230\\n- Exposed terminal, B-\\\\>A, C-\\\\>D, \u5706\u5f62\u533a\u57df\u4ee5\u4e3a\u4fe1\u9053\u78b0\u649e,\u5b9e\u9645\u6ca1\u6709\u78b0\u649e\u53ef\u4ee5\u4f7f\u7528\\n- Hidden terminal, \u4f8b\u5982A-B-C,\u4e2d\u95f4\u6709\u5c71, A\u611f\u77e5\u4e0d\u5230C, C\u611f\u77e5\u4e0d\u5230A,\u65e0\u6cd5\u78b0\u649e\u68c0\u6d4b\\n\\n![1583899442855](https://img2018.cnblogs.com/blog/1958143/202003/1958143-20200311121104859-1365284745.png)\\n\\n\\n\\nCSMA/CA (collision avoidance)\\n\\n\u628a\u78b0\u649e\u68c0\u6d4b\u6539\u6210\u78b0\u649e\u68c0\u67e5,\u5c1d\u8bd5\u53d1\u9001\u5305\u7684\u65f6\u5019\u5148\u7ed9\u76ee\u6807\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4,\u5f53\u76ee\u6807\u8fd4\u56de\u786e\u8ba4\u65f6\u624d\u53d1\u5305,\u5426\u5219\u7b49\u5f85\u5e76\u91cd\u8bd5,\u5982\u679c\u7b49\u5f85\u592a\u4e45\u4e22\u5f03\u8fd9\u4e2a\u5305\\n\\n\\n\\n![image-20240914185814619](https://s2.loli.net/2024/09/14/xvTGNABhWOosK27.png)\\n\\n\\n\\n\u53c2\u8003 https://www.cnblogs.com/cpaulyz/p/12461500.html\\n\\nCSMA/CA\u5c1d\u8bd5\u964d\u4f4e\u78b0\u649e\u7684\u6982\u7387,\u4f46\u6ca1\u6709\u89e3\u51b3\u4e0a\u9762Exposed terminal\u7b49\u95ee\u9898\\n\\n\\n\\n\u5728CSMA/CA\u4e0a\u7684\u8865\u5145:RTS/CTS\\n\\n\u7b80\u8981\u6d41\u7a0b\\n\\n> \u5728\u9001\u771f\u7684\u5c01\u5305\u4e4b\u524d,\u5148\u5ee3\u64ad\u4e00\u500b request to send \u5c01\u5305\u3002\u9019\u500b\u5c01\u5305\u4e0d\u53ea\u6709\u76ee\u7684\u5730\u6703\u6536\u5230,\u767c\u9001\u8005\u50b3\u8f38\u7bc4\u570d\u5167\u7684\u5176\u4ed6\u88dd\u7f6e\u4e5f\u6703\u6536\u5230\u3002\u800c\u76ee\u7684\u5730\u5982\u679c\u9806\u5229\u6536\u5230\u9019\u500b RTS \u7684\u5c01\u5305,\u5247\u5fc5\u9808\u5ee3\u64ad\u4e00\u500b clear to send (CTS) \u5c01\u5305,\u4ee3\u8868\u5df2\u7d93\u6e96\u5099\u597d\u63a5\u6536\u5c01\u5305\u3002\\n>\\n> \u4e26\u4e14\u898f\u5b9a:\u807d\u5230 CTS \u5ee3\u64ad\u7684\u90a3\u4e9b\u7bc0\u9ede,\u4e5f\u5c31\u662f\u4e0a\u5716\u4e2d\u7684\u7d05\u8272\u7bc0\u9ede,\u5728\u4e00\u6bb5\u8db3\u5920\u5411 \ud835\udc36 \u50b3\u8f38\u5b8c\u8a0a\u606f\u7684\u6642\u9593\u5167,\u90fd\u4e0d\u80fd\u5411 \ud835\udc36 \u50b3\u8f38\u8a0a\u606f\\n\\nhttps://en.wikipedia.org/wiki/IEEE_802.11_RTS/CTS\\n\\n\u8fd9\u4e2a\u8bb2\u5f97\u5f88\u597d https://hackmd.io/@0xff07/SJO5VTpmY\\n\\n\\n\\n\u89e3\u51b3\u4e86Hidden terminal, \u5bf9\u53e6\u5916\u4e24\u4e2a\u6548\u679c\u4e0d\u662f\u5f88\u597d\\n\\n**\u4f46\u662f\u5b9e\u9645\u7684WIFI\u7cfb\u7edf\u4e0d\u600e\u4e48\u7528,\u5f00\u9500\u95ee\u9898**\\n\\n\u4f20\u8f93\u901f\u7387\u8d8a\u9ad8,\u5b9e\u9645\u6570\u636e\u9700\u8981\u7684\u65f6\u95f4\u8d8a\u5c11,\u5728\u4f20\u6570\u636e\u524d\u8fdb\u884cRTS/CTS\u6c9f\u901a\u7684\u5f00\u9500\u5c31\u8d8a\u5927,11Mbps\u7684\u65f6\u5019\u5df2\u7ecf\u5360\u4e8625%\u7684\u5f00\u9500\\n\\n\\n\\n802.11 Format\\n\\n![image-20240914193159633](https://s2.loli.net/2024/09/14/b2Pfe4ZFJndMxcS.png)\\n\\nduration\u53ef\u4ee5\u7528\u6765\u63d0\u4f9bCTS\u5bf9\u5176\u4ed6\u8282\u70b9\u9700\u8981\u7b49\u591a\u4e45\u7684\u901a\u77e5\\n\\nwifi\u4e3a\u4e86\u5411\u524d\u517c\u5bb9\u6027\\n\\n\u524d\u9762\u7684\u63a7\u5236\u5934\u662f\u4ee5\u6700\u4f4e\u901f\u73871mbps \u53d1\u9001\u7684,\u540e\u9762\u7684data\u6bb5\u624d\u53ef\u4ee5\u52a0\u901f\\n\\n\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u901f\u7387\u4e0a\u4e0d\u53bb(2020\u7684144\u8bf4\u6700\u5927600mbps\u5de6\u53f3(for 802.11.n 2008))\u548cRTS/CTS\u5b9e\u9645\u4e0a\u5f00\u9500\u5f88\u5927\u7684\u539f\u56e0\\n\\n\\n\\nFragementation:\\n\\n\u4e0d\u540c\u7684Link\u5c42\u5bf9\u5305\u7684\u5927\u5c0f\u6700\u5927\u9650\u5236\u662f\u4e0d\u540c\u7684\\n\\n\u4e00\u4e2a\u5927\u7684\u6570\u636e\u4f20\u8f93\u65f6\u4f1a\u88ab\u5206\u6210\u8bb8\u591a\u5c0f\u5305,\u800c\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u5982\u679c\u5206\u6210\u7684\u5c0f\u5305\u8fd8\u662f\u8d85\u8fc7\u4e86\u8fd9\u4e00\u6bb5\u7684\u4f20\u8f93\u9650\u5236,\u5c31\u4f1a\u7ee7\u7eed\u62c6\u5206,\u4f46\u76f4\u5230dst\u4e4b\u524d\u90fd\u4e0d\u4f1a\u88ab\u91cd\u65b0\u7ec4\u88c5\u3002\\n\\n\u8fc7\u591a\u7684\u5c0f\u5305\u5e26\u6765\u4e86\u901f\u5ea6\u548c\u5bb9\u6613\u4e22\u5931(\u4e00\u65e6\u6709\u4e00\u4e2aIP\u5305\u62c6\u51fa\u6765\u7684\u51e0\u4e2a\u5c0f\u5305\u4e22\u5931\u5c31\u9700\u8981\u91cd\u53d1\u6574\u4e2aIP\u5305)\u7b49\u95ee\u9898,\u6240\u6709\u8981\u907f\u514d\\n\\n\u4e00\u4e2a\u6280\u672f\u624b\u6bb5\u662f\u4f7f\u7528IP\u7684DF(don\'t fragment)bit,\u6307\u5b9a\u4e4b\u540e\u5982\u679c\u53d1\u73b0\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5206\u7247,\u5c31\u4e22\u5f03\u5e76\u8fd4\u56de\u4e00\u4e2aICMP error\\n\\n\u5206\u7247\u7ec6\u8282\u53c2\u8003\\n\\nhttps://packetpushers.net/blog/ip-fragmentation-in-detail/\\n\\n\u73b0\u5728\u7684\u5206\u6bb5\u95ee\u9898\u5c11\u4e86\u5f88\u591a,\u4e00\u4e2a\u662f\u57fa\u672c\u4f7f\u7528Ethernet 1500MTU, \u4e8c\u4e2a\u662f\u4f1a\u63d0\u524d\u4f7f\u7528ICMP\u68c0\u6d4b\u8def\u5f84\u4e0a\u6700\u77ed\u7684MTU(maximium transmition unit),\u63a7\u5236\u5305\u5c0f\u4e8eMTU\u6765\u907f\u514d\u5206\u5757,\u4e0d\u8fc7\u5bf9\u4e8eUDP,\u53c2\u89c1\u4e0a\u9762\u7684blog,\u8fd8\u662f\u6709\u4e0d\u5c11\u95ee\u9898\\n\\n\\n\\n## Unit 8: Security\\n\\n1. Secrecy\\n2. Integrity\\n3. Authentication\\n4. Uninterrupted communication\\n\\n\\n\\n\u8fd9\u4e2a\u7ae0\u8282\u5efa\u8bae\u770b\u770b\u4ed6\u7684\u52a8\u753bdemo\u542c\u6545\u4e8b(bushi)\\n\\nLayer2 ATTACK(Link)\\n\\nMAC Overflow attack: \u4ea4\u6362\u673a\u4ece\u5305\u7684src,dst\u4e2d\u5b66\u4e60\u8def\u5f84,\u5982\u679c\u8868\u91cc\u9762\u6ca1\u6709\u5c31\u5168\u7aef\u53e3\u5e7f\u64ad,\u4e3a\u4e86\u8ba9\u653b\u51fb\u8005\u770b\u5230\u4ea4\u6362\u4fe1\u606f,\u653b\u51fb\u8005\u4ea7\u751f\u5927\u91cf\\\\{src,dst\\\\}\u5305\u7528\u4e8eLRU\u9a71\u9010\u4ea4\u6362\u673a\u539f\u6709\u7684\u8def\u5f84\u8868,\u4f7f\u5f97\u5176\u4ed6\u4eba\u53d1\u5305\u4ea7\u751f\u5e7f\u64ad\\n\\n\\n\\nDHCP ATTACK \u5efa\u7acb\u6076\u610fDHCP server, \u5e76\u5148\u4e8e\u597d\u7684server\u53d1\u51fa\u54cd\u5e94\\n\\n\u540c\u7406\u7684ARP ATTCAK\\n\\n\\n\\nTCP Hijacking(TCP\u52ab\u6301)ARP ATTACK\u7684\u57fa\u7840\u4e0a,\u4f5c\u4e3aTCP\u8fde\u63a5\u7684\u8f6c\u53d1\u4e2d\u95f4\u4eba\u7a83\u542c\u4fe1\u606f\\n\\n\\n\\nLayer3 ATTACK(IP)\\n\\nICMP ATTACK \u5728\u8def\u7531\u4e0d\u5230\u7684\u65f6\u5019\u4f1a\u8fd4\u56de\u4e00\u4e2aICMP error,\u653b\u51fb\u8005\u901a\u8fc7\u6076\u610f\u8def\u7531\u5668\u5145\u5f53\u4e2d\u95f4\u4eba/\u91cd\u5b9a\u5411\u5230\u6076\u610f\u5730\u5740\\n\\nBGP hijacking \u975e\u5e38\u4e25\u91cd,\u51e0\u4e4e\u65e0\u6cd5\u9632\u5907\u3002\u4ece\u8fd0\u8425\u5546\u5c42\u9762\u8fdb\u884c\u653b\u51fb,\u63d0\u4f9b\u9519\u8bef\u7684\u8def\u7531\u201c\u8def\u6807\u201d https://www.cloudflare.com/zh-cn/learning/security/glossary/bgp-hijacking/\\n\\nMore Specific Prefix\\n\\n\\n\\nDDos \u5927\u89c4\u6a21\u53d8\u5316\u8089\u9e21\u5411server\u53d1\u9001\u6d88\u8017\u8d44\u6e90\u65e0\u610f\u4e49\u8bf7\u6c42,\u4f8b\u5982flood ping,\u5360\u7528\u5927\u91cf\u7f51\u7edc\u5e26\u5bbd\u81f3\u670d\u52a1\u4e0d\u53ef\u7528\\n\\n\u66f4\u7cbe\u5999\u7684\u662f\u53ef\u4ee5\u6709\u5176\u4ed6\u670d\u52a1\u5668\u5145\u5f53\u653e\u5927\u8df3\u677f,\u6709\u4e9b\u8bf7\u6c42\u7684\u54cd\u5e94\u4f1a\u6bd4\u8bf7\u6c42\u5927\u51e0\u500d,\u5411\u67d0\u4e2a\u8df3\u677f\u670d\u52a1\u5668\u53d1\u9001\u76ee\u6807\u4e3a\u653b\u51fb\u670d\u52a1\u5668\u7684\u8bf7\u6c42,\u8df3\u677f\u670d\u52a1\u5668\u7684\u54cd\u5e94\u6d2a\u6d41\u5c31\u53ef\u4ee5\u6bd4\u539f\u59cb\u653b\u51fb\u6d41\u653e\u5927\u51e0\u500d,\u4e5f\u66f4\u4e0d\u597d\u8ffd\u8e2a\\n\\n\\n\\n\u8fd8\u6709SYN Attack \u591a\u53f0\u653b\u51fb\u673a\u5668\u5411\u670d\u52a1\u5668\u53d1\u8d77tcp\u8bf7\u6c42,\u53c8\u4e0d\u5efa\u7acb\u94fe\u63a5,\u8ba9\u88ab\u653b\u51fb\u670d\u52a1\u5668\u81ea\u5df1\u8d85\u65f6\u624d\u91ca\u653e,\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\u3002\u7c7b\u4f3c\u8fd8\u6709\u53d1\u9001\u90e8\u5206IP\u94fe\u63a5\u788e\u7247\u7684IP Fragment flooding\\n\\n\u8fd8\u6709UDP echo\u653b\u51fb,SSL\u653b\u51fb......\\n\\n\\n\\n\u89e3\u51b3\u65b9\u6cd5:\u52a0\u5bc6 && \u53ef\u62d3\u5c55(\u9ad8\u53ef\u7528)\u7cfb\u7edf && \u4fe1\u4efb\u94fe && ......\\n\\n\\n\\n\u540e\u9762\u7684\u5bc6\u7801\u5b66\u611f\u89c9\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7814\u7a76\u7684\u5fc5\u8981,\u90fd\u662f\u6570\u5b66\u7ec6\u8282,\u975e\u5bf9\u79f0\u52a0\u5bc6\u3001\u8bc1\u4e66\u3001TLS\u4e4b\u7c7b\u770b\u770b\u79d1\u666e\u4e5f\u884c,\u5199\u8fc7web\u591a\u5c11\u77e5\u9053\u4e9b\u3002\u77e5\u9053\u548b\u56de\u4e8b,\u62ff\u6765\u7528\u5c31\u884c\u3002\u7528\u8bfe\u7a0b\u7684\u4e00\u53e5\u8bdd:\\n\\n> It\'s easy to make a mistabke. Use existing, open source implementions. Be careful and follow best practices."},{"id":"django-mosh","metadata":{"permalink":"/blog/django-mosh","source":"@site/blog/Django-mosh.md","title":"Django_mosh","description":"Django mosh","date":"2024-07-12T00:00:00.000Z","tags":[{"inline":true,"label":"django","permalink":"/blog/tags/django"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":14.395,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"Django_mosh","date":"2024-07-12T00:00:00.000Z","author":"ayanami","slug":"django-mosh","tags":["django","web"],"keywords":["django"]},"unlisted":false,"prevItem":{"title":"CS144 Lecture Notes","permalink":"/blog/cs144/cs144 lec notes"},"nextItem":{"title":"splay tree","permalink":"/blog/splay-tree"}},"content":"Django mosh\\n\\nshell django-admin\\n\\n```shell\\ndjango-admin startproject <proj name> .\\n```\\n\\nrun server\\n\\n```shell\\npython manage.py runserver\\n```\\n\\napp \u53ef\u4ee5\u901a\u8fc7 proj \u521d\u59cb settings.py \u96c6\u6210\\n\x3c!--truncate--\x3e\\n```python\\nINSTALLED_APPS = [\\n    \'django.contrib.admin\',\\n    \'django.contrib.auth\',\\n    \'django.contrib.contenttypes\',\\n    \'django.contrib.sessions\',\\n    \'django.contrib.messages\',\\n    \'django.contrib.staticfiles\',\\n    \'new proj name\',\\n]\\n```\\n\\n\x3c!-- truncate --\x3e\\n\\n\u521b\u5efa\u65b0 app\\n\\n```shell\\npython manage.py startapp <appname>\\n```\\n\\n\u6dfb\u52a0\u8fdb\u8def\u7531\\n\\n```python\\nfrom django.contrib import admin\\nfrom django.urls import include, path\\n\\nurlpatterns = [\\n    path(\'admin/\', admin.site.urls),\\n    path(\'__debug__/\', include(\'debug_toolbar.urls\')),\\n    path(\'playground\', include(\'playground.urls\')),\\n]\\n```\\n\\nviews: \u7c7b\u4f3c Controller req->res, request handler\\n\\ndebug: django-debug-toolbar \u914d\u7f6e\u65b9\u6cd5\u6587\u6863\\n\\nurlconf\\n\\n```python\\n# --- app added\\nfrom django.urls import path\\nfrom . import views\\n\\n# URLconf\\nurlpatterns = [\\n   path(\'hello/\', views.say_hello)  # \'/\' is important\\n]\\n\\n# --- main proj\\n\\nfrom django.contrib import admin\\nfrom django.urls import include, path\\nurlpatterns = [\\n    path(\'admin/\', admin.site.urls),\\n    path(\'__debug__/\', include(\'debug_toolbar.urls\')),\\n    path(\'playground/\', include(\'playground.urls\')),\\n]\\n```\\n\\n\u5176\u4e2d urlpatterns \u662f\u4e00\u4e2a\u5185\u7f6e\u8def\u7531\u53d8\u91cf\\n\\nmodel \u7c7b\u4f3c entity\\n\\n```python\\nfrom django.db import models\\n\\n# Create your models here.\\nclass Product(models.Model):\\n    title = models.CharField(max_length=255)\\n    description = models.TextField()\\n    # 9999.99\\n    price = models.DecimalField(max_digits=6, decimal_places=2)\\n    inventory = models.IntegerField()\\n    last_update = models.DateTimeField(auto_now=True)\\n\\nclass Customer(models.Model):\\n    first_name = models.CharField(max_length=255)\\n    last_name = models.CharField(max_length=255)\\n    email = models.EmailField(unique=True)\\n    phone = models.CharField(max_length=20)\\n    birth_date = models.DateField(null=True) # nullable\\n\\n```\\n\\n\u6ce8\u610f\uff1a\\n\\n- \u6ca1\u6709 id field django \u81ea\u52a8\u521b\u5efa\uff08\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u4e3b\u952e\uff09\\n\\n\u7c7b\u4f3c\u679a\u4e3e\u548c@JsonProperty\\n\\n```python\\n    MEMBERSHIP_BRONZE = \'B\'\\n    MEMBERSHIP_SILVER = \'S\'\\n    MEMBERSHIP_GOLD = \'G\'\\n    MEMBERSHIP_CHOICES = [\\n        (MEMBERSHIP_BRONZE, \'Bronze\'),\\n        (MEMBERSHIP_SILVER, \'Silver\'),\\n        (MEMBERSHIP_GOLD, \'Gold\'),\\n    ]\\n    membership = models.CharField(max_length=1, choices=MEMBERSHIP_CHOICES,\\n                                  default=MEMBERSHIP_BRONZE)\\n```\\n\\n\u5176\u4e2d\'B\'\u662f\u5b9e\u9645\u5b58\u5728\u6570\u636e\u5e93\u4e4b\u4e2d\u7684\u503c\uff0c\'Bronze\'\u662f\u5b9e\u9645\u5bf9\u4e0a\u5448\u73b0\u7684\u503c\\n\\nOneToOne Mapping\\n\\n```python\\nclass Address(models.Model):\\n    city = models.CharField(max_length=255)\\n    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, primary_key=True)\\n```\\n\\non_delete \u53ef\u4ee5\u8bbe\u7f6e\u591a\u79cd\u7ea7\u8054\uff0c\u4f8b\u5982 SETNULL,SETDEFAULT,PROTECT,CASCADE\\n\\ndjango \u91cc\u9762 OneToOne \u9ed8\u8ba4\u662f\u53cc\u5411\u7684\uff0c\u4f1a\u81ea\u52a8\u5728 Customer \u4e4b\u4e2d\u751f\u6210 address \u5c5e\u6027\\n\\nOneToMany: db view\uff0c\u76f4\u63a5\u4f7f\u7528 ForeignKey\\n\\ne.g\\n\\n```python\\nclass Cart(models.Model):\\n    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, primary_key=True)\\n\\nclass CartItem(models.Model):\\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)\\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\\n    number = models.IntegerField()\\n    added_at = models.DateTimeField(auto_now_add=True)\\n\\n```\\n\\nManyToMany\\n\\n```python\\nclass Promotion(models.Model):\\n    # \u4fc3\u9500, \u548c\u4ea7\u54c1\u662f\u591a\u5bf9\u591a\u5173\u7cfb\\n    description = models.CharField(max_length=255)\\n    discount = models.FloatField()\\n    start_at = models.DateTimeField(null=True)\\n    end_at = models.DateField(null=True)\\n\\nclass Product(models.Model):\\n    title = models.CharField(max_length=255)\\n    description = models.TextField()\\n    # 9999.99\\n    price = models.DecimalField(max_digits=6, decimal_places=2)\\n    inventory = models.IntegerField()\\n    last_update = models.DateTimeField(auto_now=True)\\n    collection = models.ForeignKey(\'Collection\', on_delete=models.PROTECT)\\n    promotion = models.ManyToManyField(\'Promotion\')  # get by default \'product_set\' in promotion\\n\\n```\\n\\n\u5904\u7406\u5faa\u73af\u4f9d\u8d56\uff1a\\n\\nCollection \u7c7b\u4e4b\u4e2d\u6709\u4e00\u4e2a feature product\uff0c\u540c\u65f6 product \u88ab Collection \u5305\u542b\uff0c\u89e3\u51b3\u65b9\u6cd5\u4e3a\u52a0\u4e0a`\'\'`\\n\\n\u76f8\u5f53\u4e8e\u7559\u4e86\u89e3\u6790\u7b26\u53f7\uff0c\u4f46\u4f1a\u5f71\u54cd\u4fee\u6539\u65f6\u7684\u6539\u52a8\uff0c\u6240\u4ee5\u4e00\u822c\u4e0d\u8981\u7528\\n\\n\u89e3\u51b3 django \u81ea\u52a8\u521b\u5efa\u53cd\u5411\u4f9d\u8d56\u5bfc\u81f4\u7684\u91cd\u540d\u95ee\u9898\uff0c\u4e00\u79cd\u662f\u6307\u5b9a related_name\uff0c\u53e6\u4e00\u79cd\u76f4\u63a5\u6307\u5b9a\u4e3a`\'+\'`\u610f\u601d\u662f\u4e0d\u751f\u6210\u53cd\u5411\u4f9d\u8d56\\n\\n```python\\nfrom django.db import models\\nclass Collection(models.Model):\\n    feature_product = models.ForeignKey(\'Product\', on_delete=models.SET_NULL,null=True, related_name=\'+\')\\n\\nclass Product(models.Model):\\n    collection = models.ForeignKey(Collection, on_delete=models.PROTECT)\\n```\\n\\n#### \u6cdb\u578b\u5173\u7cfb\\n\\n\u5982\u679c\u6211\u4eec\u60f3\u8981\u6709\u4e00\u4e2a tag, \u7528\u4e8e\u5bf9\u4efb\u610f\u7269\u4f53\u6253\u6807\u7b7e\uff08\u56e0\u800c\u9700\u8981\u4e0e\u5177\u4f53\u7684 store \u89e3\u8026\uff09\uff0c\u600e\u4e48\u505a\uff1f\\n\\n```python\\nfrom django.db import models\\nfrom django.contrib.contenttypes.fields import GenericForeignKey\\n# Create your models here.\\nclass Tag(models.Model):\\n    title = models.CharField(max_length=255)\\n\\nclass TagItem(models.Model):\\n    tag = models.ForeignKey(Tag, on_delete=models.CASCADE)\\n\\n    # Generic\\n    # Type, ID -> content\\n    content_type = models.ForeignKey(\'contenttypes.ContentType\', on_delete=models.CASCADE)\\n    object_id = models.PositiveIntegerField()\\n    content_object = GenericForeignKey(\'content_type\', \'object_id\')\\n\\n```\\n\\n> \u4e5f\u5c31\u662f\u8bf4 content_type \u5165\u5e93\u7684\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5e8f\u5217\u5316\u540e\u7684\u7c7b\u578b\u4fe1\u606f\u53d8\u91cf\uff08\u4f8b\u5982 string\uff09,\u800c object_id \u662f int\uff0c\u8fd0\u884c\u65f6\u53ef\u4ee5\u8ba1\u7b97\u7684\u7ed3\u679c content_obj\uff1f\\n\\n\u7b54: \u662f\u7684\uff0c\\n\\n`content_type` \u5b57\u6bb5\u5b58\u50a8\u7684\u662f\u4e00\u4e2a `ContentType` \u5bf9\u8c61\u7684 ID\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u4ee3\u8868\u4e86\u5173\u8054\u5bf9\u8c61\u7684\u7c7b\u578b\u3002`ContentType` \u662f Django \u7684\u4e00\u4e2a\u5185\u7f6e\u6a21\u578b\uff0c\u5b83\u5b58\u50a8\u4e86\u6240\u6709\u5df2\u6ce8\u518c\u6a21\u578b\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u6a21\u578b\u7684\u540d\u5b57\u548c\u5b83\u6240\u5728\u7684\u5e94\u7528\u7684\u540d\u5b57\u3002\\n\\n`object_id` \u5b57\u6bb5\u5b58\u50a8\u7684\u662f\u5173\u8054\u5bf9\u8c61\u7684 ID\u3002\u8fd9\u4e2a ID \u662f\u5173\u8054\u5bf9\u8c61\u5728\u5b83\u6240\u5728\u7684\u6570\u636e\u5e93\u8868\u4e2d\u7684\u4e3b\u952e\u3002\\n\\n`content_object` \u662f\u4e00\u4e2a `GenericForeignKey` \u5b57\u6bb5\uff0c\u5b83\u4e0d\u4f1a\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u5bf9\u5e94\u7684\u5217\uff0c\u800c\u662f\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 `content_type` \u548c `object_id` \u7684\u503c\u53bb\u83b7\u53d6\u5173\u8054\u5bf9\u8c61\u3002\u8bbf\u95ee `content_object` \u5c5e\u6027\u65f6\uff0cDjango \u4f1a\u6839\u636e `content_type` \u548c `object_id` \u7684\u503c\u53bb\u67e5\u8be2\u5bf9\u5e94\u7684\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u8fd9\u4e2a\u5bf9\u8c61\u3002\\n\\n\u7ec3\u4e60\uff1aLikeItem\\n\\n```python\\nfrom django.db import models\\nfrom django.contrib.auth.models import User\\nfrom django.contrib.contenttypes.fields import GenericForeignKey\\n# Create your models here.\\nclass LikeItem(models.Model):\\n    # who likes what\\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\\n    content_type = models.ForeignKey(\'contenttypes.ContentType\', on_delete=models.CASCADE)\\n    object_id = models.PositiveIntegerField()\\n    content_object = GenericForeignKey(\'content_type\', \'object_id\')\\n```\\n\\n#### migrations\\n\\n\u5e94\u8be5\u8ba9 Django \u5b8c\u6210\u5efa\u5e93\u5efa\u8868\u7b49\u64cd\u4f5c\\n\\n```shell\\npython manage.py makemigrations\\n```\\n\\nmigration \u662f django \u81ea\u52a8\u751f\u6210\u7684\u4ee5\u5e93\u4e3a\u5355\u4f4d\u7684 db \u4fee\u6539\u64cd\u4f5c\u7684\u62bd\u8c61\uff0c\u5305\u542b log \u7b49\u529f\u80fd\\n\\n\u4fee\u6539 entity \u4e4b\u540e\u4e5f\u7b80\u5355\u7684\u91cd\u65b0\u8fd0\u884c migration \u5c31\u884c\uff08\u53ef\u80fd\u8981\u6539\u6539\u6587\u4ef6\u540d\uff08\u751f\u6210\u7684\u6587\u4ef6\u540d\u7c7b\u4f3c git commit \u7684 hashID,\u662f\u4f1a\u51fa\u73b0\u5728\u540e\u7eed migration \u7684 depandency \u91cc\u9762\u7684\uff09\uff09\\n\\nmigration \u53ea\u662f\u521b\u5efa\u4e86\u64cd\u4f5c\uff0c\u4e4b\u540e\u4f7f\u7528\u5982\u4e0b\u5165\u5e93\\n\\n```shell\\npython manage.py migrate\\n```\\n\\n#### slug\\n\\n```python\\n    slug = models.SlugField(default=\'-\')\\n```\\n\\nslug \u662f\u4e00\u4e2a\u53ef\u4ee5\u5339\u914d\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf\u548c\u8fde\u5b57\u7b26\u7684\u52a8\u6001\u8def\u7531, **\u7528\u4e8e\u4f7f\u4e00\u4e2a\u4e1c\u897f\u5bf9\u641c\u7d22\u5f15\u64ce\u68c0\u7d22\u66f4\u52a0\u53cb\u597d**\\n\\n\u4f8b\u5982\uff0c\u5982\u679c\u60f3\u68c0\u7d22\u4e00\u7bc7\u535a\u5ba2`some-blog`\uff0c\u4e00\u4e2a url \u4e3a`myweb/blogs/some-blog`\u7684\u5b50\u7f51\u9875\u80af\u5b9a\u6bd4`myweb/blogs/1`\u5bb9\u6613\u68c0\u7d22\\n\\n\u53ef\u4ee5\u7528`path(\'.../<slug:slug>\')`\u6765\u52a8\u6001\u6355\u83b7 slug \u8def\u7531\u53c2\u6570\\n\\n#### meta data\\n\\n\u53ef\u4ee5\u5728 model.Model \u7c7b\u7684\u6d3e\u751f\u7c7b\u4e4b\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u5185\u90e8\u7c7b Meta\uff0c\u5176\u4e2d\u5c31\u53ef\u4ee5\u4fee\u6539\u8868\u540d\u5b57\uff0c\u589e\u52a0\u7d22\u5f15\u7b49\\n\\n\u7531\u4e8e django \u4e00\u822c\u662f\u201c\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e\u201d\u7684\u903b\u8f91\uff0c\u5982\u679c\u4f60\u5728\u4e00\u4e2a\u5730\u65b9\u6539\u4e86\uff0c\u5c31\u8981\u5168\u6539\u6765\u4fdd\u6301\u7edf\u4e00\u6027\uff0c\u6240\u4ee5\u6539\u5f97\u6bd4\u8f83\u5c11\\n\\n\u6709\u4e86\u8fd9\u4e9b migration \u6587\u4ef6\u4e4b\u540e\uff0c\u53ef\u4ee5\u50cf git checkout \u4e00\u6837\u56de\u5230 db \u7684\u67d0\u4e2a\u72b6\u6001\\n\\n```python\\npython manage.py migrate store <migrate_no>\\n```\\n\\n\u96c6\u6210 postgresql\uff0c\u770b\u5b98\u65b9 tutorial \u6539 settings.py\\n\\n```python\\nDATABASES = {\\n    \'default\': {\\n        \'ENGINE\': \'django.db.backends.postgresql\',\\n        \'NAME\': \'mosh_course\',\\n        \'USER\': \'ayanami\',\\n        \'PASSWORD\': os.environ.get(\'POSTGRES_PASSWORD\', \'mosh_course\'),\\n        \'HOST\': os.environ.get(\'POSTGRES_HOST\', \'localhost\'),\\n        \'PORT\': 5432,\\n    }\\n}\\n```\\n\\nmock \u4e00\u4e9b\u6570\u636e [mockaroo.com](https://mockaroo.com/) \u5f88\u597d\u7528\\n\\n#### \u67e5\u8be2\uff08DAO\uff09\\n\\ndjango \u4f7f\u7528 queryset \u8fdb\u884c\u67e5\u8be2\uff0c\u53ef\u4ee5\u7406\u89e3\u6210 java \u7684 stream\\n\\n```python\\nquery_set = Customer.objects.all()\\n```\\n\\nquery_set \u53ef\u4ee5 filter, order_by \u7b49\u94fe\u5f0f\u8c03\u7528\u5f97\u5230\u65b0\u7684 query_set,\u5e76\u5728\u6700\u540e\u4e00\u4e2a\u201c\u6c42\u503c\u201d\u7684 api \u4e0a\uff08\u4f8b\u5982\u5207\u7247\uff0cget \u7b49\u64cd\u4f5c\uff09\u901a\u8fc7\u5b9e\u9645 query \u8fd4\u56de\u6570\u636e\\n\\n\u4e5f\u5c31\u662f\u8bf4\u5b83\u662f lazy query \u7684\uff0c\u6ce8\u610f query_set \u4e0d\u4fdd\u8bc1\u975e null\uff0c\u5982\u679c\u4f7f\u7528 get \u6ca1\u627e\u5230\u7684\u8bdd\u4f1a\u629b\u51fa\u9519\u8bef ObjectNotFoundException\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u907f\u514d\u629b\u9519\u7684\u65b9\u6cd5\u662f\u4f7f\u7528`filter().first()`\u7684\u5f62\u5f0f\uff0c\u5728 filter \u8fd4\u56de\u7a7a\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de`None`\\n\\n`filter`\u6216\u8005`get`\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u7279\u6b8a\u53c2\u6570`pk`\u6765\u6307\u5b9a\u4e3b\u952e\u662f\u5565\\n\\n#### filter\\n\\n\u53ea\u80fd\u4f20\u952e\u503c\u5bf9\uff0c\u95ee\u9898\uff1a\\n\\n- \u8868\u793a\u5c0f\u4e8e\uff1f\\n\\n\u4f7f\u7528\u7279\u6b8a\u7684\u9644\u52a0\u7ea6\u5b9a\u5f62\u5f0f\uff08\u7c7b\u4f3c JPA\uff09`filter(<something>__st=5` ,\u5176\u4e2d`__st`\u7684\u540e\u7f00\u4f5c\u4e3a\u7279\u6b8a\u8c13\u8bcd\u6807\u5fd7\\n\\n\u53ef\u4ee5\u7ec4\u5408`filter(collection__id__range=(5, 10))`collection \u8868\u4e2d id \u4e3a 5 \uff5e 10 \u7684\\n\\n\u5e38\u89c1\u7684\u8fd8\u6709`__contains`, `___startwith`\\n\\n\u6761\u4ef6\u7ec4\u5408 Q object \u548c`|`,`~`,`&`\\n\\n```python\\nPoll.objects.get(\\n    Q(question__startswith=\\"Who\\"),\\n    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),\\n)\\n```\\n\\n\u57fa\u672c\u7b49\u540c\u4e8e\\n\\n```sql\\nSELECT * from polls WHERE question LIKE \'Who%\'\\n    AND (pub_date = \'2005-05-02\' OR pub_date = \'2005-05-06\')\\n```\\n\\n\u6570\u636e\u5f15\u7528 F Object\uff0c\u8868\u793a\u5f15\u7528\u672c\u8868\u6216\u8005\u5916\u952e\u5173\u8054\u8868\u91cc\u9762\u7684\u5b57\u6bb5\\n\\n```python\\nPoll.objects.get(\\n    Q(question__startswith=\\"Who\\"),\\n    who=F(question),  # \u672c\u8868\u7684\'who\'\u5b57\u6bb5 == \u672c\u8868\u7684 \'question\'\u5b57\u6bb5\\n    who=F(anothertable__question) # \u672c\u8868\u7684\'who\'\u5b57\u6bb5 == \u672c\u8868\u7684\'anothertable\'\u5916\u952e\u5173\u8054\u8868\u7684 \'question\'\u5b57\u6bb5\\n)\\n```\\n\\n#### Sort\\n\\n`order_by`\\n\\n```python\\nquery_set = Customer.objects.order_by(\'name\') #\u6309\u7167name\u5b57\u6bb5\u5347\u5e8f\\nquery_set = Customer.objects.order_by(\'-name\') #\u6309\u7167name\u5b57\u6bb5\u964d\u5e8f\\n```\\n\\n#### \u5f97\u5230 table \u7684\u5b57\u6bb5\u5bf9\u8c61\\n\\n\u6709\u4e0d\u540c\u7684\u65b9\u6cd5\\n\\n- `values`\u5f97\u5230 entity(object)\\n\\n- `values_list`\u5f97\u5230 dict of tuple\\n- `only`\u548c`defer`\u90fd\u662f entity\uff0c\u53ea\u67e5\u8be2\u548c\u5ef6\u8fdf\u67e5\u8be2\uff0c\u4f46\u662f\u6709\u4e2a\u6ce8\u610f\u70b9\uff1a\u4e0d\u4f1a\u52a8\u6001\u68c0\u67e5\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u5c5e\u6027\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u4f1a\u5f97\u5230\u975e\u5e38\u591a\u7684 query -> \u6027\u80fd\u5927\u5e45\u5ea6\u964d\u4f4e\\n\\n#### \u8d85\u7ea7\u725b\u9b54\u7684\u4e00\u4e2a\u8bbe\u8ba1\\n\\ndjango \u9ed8\u8ba4 **\u4e0d** \u52a0\u8f7d\u5173\u8054\u8868\\n\\n\u540c\u65f6\uff0c\u4ed6\u7684\u66f4\u65b0\u4e5f\u662f **\u4e0d** \u5173\u8054\u7684\u2014\u2014\u9700\u8981\u624b\u52a8\u66f4\u65b0\u5173\u8054\u8868\u5185\u4fe1\u606f\\n\\n\u5982\u679c\u8868 A \u6709 B \u7684\u5916\u952e\uff0c\u7136\u540e\u52a0\u8f7d\u4e86\u8868 A \u7684 all(),\u5c31\u4f1a\u6bcf\u4e00\u4e2a\u8868 A \u7684 row \u90fd join \u67e5\u8be2\u4e00\u6b21\u8868 B\\n\\n**\u52a0\u8f7d\u5173\u8054\u8868**:\\n\\n```python\\nall_A = A.objects.select_related(\'B\').all()\\n```\\n\\n\u76f8\u5173\u7684\u4e00\u4e2a api \u662f prefetch\uff0c\u548c select \u7684\u533a\u522b\u5728\u4e8e select \u662f\u4e00\u5bf9\u4e00\u7684\u65f6\u5019\u7528\uff0cprefetch \u662f\u4e00\u5bf9\u591a\u7684\u65f6\u5019(\u4e00\u4e2a A \u53ef\u80fd\u5bf9\u5e94\u591a\u4e2a B \u7684\u65f6\u5019)\u7528\\n\\n```python\\nall_A = A.objects.prefetch_related(\'B\').all()\\n```\\n\\n#### aggregate\\n\\n\u4f20\u5165\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u503c\u662f\u67d0\u79cd Django \u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570\uff08\u5982`Count(\'id\')`\uff0c\u5bf9 id \u5217\u8ba1\u6570\uff09\\n\\n\uff08\u4e25\u683c\u6765\u8bf4\u662f django database function \u6216\u8005\u5b83\u7684\u5305\u88c5\uff08\u4f7f\u7528`Func`api\uff09\uff09\\n\\n\u8fd4\u56de\u7684\u662f\\\\{\u952e-\u56de\u8c03\u8ba1\u7b97\u7ed3\u679c\\\\} \u7684 dict\\n\\nExpressionWrapper & Custom Manager\\n\\n\u7528\u5230\u518d\u8bf4\\n\\ndjango \u4f1a\u7f13\u5b58\\n\\n#### CRUD\\n\\ncreate:\\n\\n```python\\n# \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u6709intellisense\uff0c\u53ef\u4ee5refactor\\n    new_customer = Customer()\\n    new_customer.birth_date = \\"1990-01-01\\"\\n    new_customer.email = \\"n7sZf@example.com\\"\\n    new_customer.save()\\n# \u7b2c\u4e8c\u79cd\uff0c\u66f4\u77ed\u4f46\u6ca1\u6709\\n\\tnew_customer = Customer.objects.create(birth_date=\\"1990-01-01\\", email=\\"n7sZf@example.com\\")\\n```\\n\\nupdate:\\n\\n```python\\n    new_customer = Customer.objects.get(pk=1)\\n    new_customer.birth_date = \\"1990-01-01\\"\\n    new_customer.email = \\"n7sZf@example.com\\"\\n    new_customer.save()\\n    # \u5f53\u7136\u8fd8\u6709\u7b2c\u4e8c\u79cdupdate object.filter(pk=1).update()\\n```\\n\\n\u6ce8\u610f\u9700\u8981\u7528 get\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u663e\u5f0f\u8bfb\\n\\n```python\\n    customer = Customer(pk=1)\\n    customer.delete()\\n    # \u5f53\u7136\u8fd8\u6709\u7b2c\u4e8c\u79cddelete object.filter(pk=1).delete()\\n```\\n\\n#### Transaction\\n\\n\u73b0\u5728\u6709\u4e00\u4e2a\u539f\u5b50\u6027\u95ee\u9898\uff0cdjango \u662f\u4e0d\u5173\u8054\u66f4\u65b0\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5148\u66f4\u65b0 order\uff0c\u518d\u66f4\u65b0 orderItem\uff0c\u8fd9\u5c31\u5e26\u6765\u4e86\u539f\u5b50\u6027\u95ee\u9898\\n\\n\u89e3\u51b3\u65b9\u6cd5\uff0c\u4f7f\u7528 `with transaction.atomic():`\u5305\u88f9\u591a\u6b21 save()\u4e14\u9700\u8981\u4fdd\u8bc1\u539f\u5b50\u6027\u7684\u5730\u65b9\\n\\n#### The Ultimate Solution\\n\\n```python\\nqueryset = Customer.object.raw(\'SELECT * FROM store_product\')\\n```\\n\\n\u6ce8\u610f\u8fd9\u4e2a queryset \u6ca1\u6709 filter \u4e4b\u7c7b\u7684\u65b9\u6cd5\u4e86\uff0c\u9000\u5316\u4e86\uff08\u60b2\uff0c\u5dee@Query \u8fdc\u751a\uff09\\n\\n#### admin\\n\\n1. custom \u53ef\u4ee5\u6539\u6539\u9ed8\u8ba4\u63a7\u5236\u9762\u677f\u7684\u5217\u8868\u540d\u5b57\uff0c\u52a0\u4e0a\u7b5b\u9009\u548c\u6392\u5e8f\u7b49\u7b49\uff08ModelAdmin Options\uff09\\n\\n\u8fd9\u90e8\u5206\u5176\u5b9e\u50cf\u524d\u7aef\u7684\u67d0\u79cd\u7edf\u8ba1\u6a21\u5757\u4e86\\n\\n#### RESTful api\\n\\n1.\\"Controller\\": router + json/... sender\\n\\n\u5148\u52a0\u4e2a`rest_framework`\u5230 INTSALLED_APPS\\n\\n\u7136\u540e\u8fd9\u6837\\n\\n```python\\nfrom rest_framework.decorators import api_view\\nfrom rest_framework.response import Response\\n@api_view()\\ndef ok(request):\\n    return Response(\\"ok\\")\\n```\\n\\n\u8def\u7531\u8fd8\u662f\u5728 urlpatterns \u91cc\u9762\u52a0\\n\\n2.\\"DTO+Serializer\\": serializer\\n\\n\u6709\u70b9\u50cf\u6570\u636e\u5e93\u7684 api, \u5bf9\u4e0d\u540c\u7684\u57fa\u672c\u7c7b\u578b\u8c03\u7528\u4e86 serializer\uff0c\u7531\u4e8e\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u91cd\u65b0\u53d6\u53d8\u91cf\u540d\u5b57\uff08\u6307\u5b9a source \u5c5e\u6027\u5373\u53ef\uff09\u548c\u9009\u62e9\u4e22\u6389\u7684\u53d8\u91cf\uff0c\u5c31\u66ff\u4ee3\u4e86@JsonProperty \u548c@JsonIgnore \u4e4b\u7c7b\u7684\u4e1c\u897f\\n\\n```python\\nfrom rest_framework import serializers\\n\\nclass customer_serializer(serializers.Serializer):\\n    id = serializers.IntegerField()\\n    first_name = serializers.CharField(max_length=255)\\n    last_name = serializers.CharField(max_length=255)\\n    email = serializers.EmailField()\\n    phone = serializers.CharField(max_length=255)\\n    birth_date = serializers.DateField()\\n```\\n\\n\u4e4b\u540e\u53ef\u4ee5\u8fd9\u6837\uff0c\u628a object -> serializer -> serializer.data -> dict/json response\\n\\n```python\\n@api_view()\\ndef get_single_customer(request, id:int):\\n    queryset = Customer.objects.get(id=id)\\n    serializer = customer_serializer(queryset, many=False)\\n    # \u5982\u679c\u4f20\u5165\u4e00\u4e2aiterable\u5c31\u53ef\u4ee5many=True\\n    return Response(serializer.data)\\n\\nurlpatterns = [\\n    # dynamic route customer/{id}\\n    path(\'customer/<int:id>/\', views.get_single_customer),\\n]\\n```\\n\\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e0d safe\uff0cget \u4e00\u4e2a\u4e0d\u6b63\u786e id \u5c31\u70b8\u4e86\\n\\nsafe \u5199\u6cd5\u5982\u4e0b\uff0c`get_object_or_404`\u53ea\u662f`try except`\u7136\u540e\u8fd4\u56de\u4e00\u4e2a`Response(status=404)`\u7684\u8bed\u6cd5\u7cd6\\n\\n```python\\n@api_view()\\ndef get_single_customer(request, id:int):\\n    queryset = get_object_or_404(Customer, pk=id)\\n    serializer = customer_serializer(queryset, many=False)\\n    return Response(serializer.data)\\n```\\n\\n\u8fd9\u4e2a DTO \u7684\u90e8\u5206\u8fd8\u80fd\u7ed9 Simplify \u4e00\u70b9, \u4f8b\u5982\u52a0\u70b9\u95f4\u63a5\u8ba1\u7b97\u91cf\\n\\n```python\\n\\tfirst_name = serializers.CharField(max_length=255)\\n    last_name = serializers.CharField(max_length=255)\\n\\n    def get_full_name(self, customer:Customer):\\n        return customer.first_name + \\" \\" + customer.last_name\\n    full_name = serializers.SerializerMethodField(\'get_full_name\')\\n```\\n\\nrelated object serialize\\n\\n- `serializers.PrimaryKeyRelatedField` \u6307\u5b9a`queryset`\uff08\u4e00\u822c\u5c31\u76f4\u63a5`xxx.object.all()`\u5c31\u884c\uff09\u4e4b\u540e\u8fd4\u56de\u4e00\u4e2a query \u540e\u7684 id \u5217\u8868\\n- \u4e5f\u53ef\u4ee5\u5b9a\u4e49`__str__`\u540e\uff0c`serializers.StringRelatedField`\\n- \u7a0d\u5fae\u590d\u6742\u7684`serializers.HyperlinkedRelatedField`\u53ef\u4ee5\u628a\u8fd4\u56de\u7684\u53d8\u6210\u4e00\u4e2a list of url\uff0c\u4f8b\u5982 \\".../collections/1\\"\u4e4b\u7c7b\\n\\n**\u5982\u679c\u60f3\u8981\u5bf9\u8c61\u5957\u5bf9\u8c61\u5462?**\\n\\n\u81ea\u5b9a\u4e49\u4e00\u4e2a`NestObjSerializer`\u7c7b\uff0c\u7136\u540e\\n\\n```python\\n\\tnest_obj = NestObjSerializer()\\n```\\n\\nDTO \u7684\u8bed\u6cd5\u7cd6\uff1amodelSerializer\\n\\n```python\\nclass customer_serializer(serializers.ModelSerializer):\\n    # id = serializers.IntegerField()\\n    # first_name = serializers.CharField(max_length=255)\\n    # last_name = serializers.CharField(max_length=255)\\n    # email = serializers.EmailField()\\n    # phone = serializers.CharField(max_length=255)\\n    # birth_date = serializers.DateField()\\n    class Meta:\\n        model = Customer\\n        fields = [\'id\', \'first_name\', \'last_name\', \'email\', \'phone\', \'birth_date\', \'full_name\']\\n    def get_full_name(self, customer:Customer):\\n        return customer.first_name + \\" \\" + customer.last_name\\n    full_name = serializers.SerializerMethodField(\'get_full_name\')\\n```\\n\\nPOST\\n\\n```python\\n@api_view([\'GET\', \'POST\'])\\ndef single_customer(request, id:int):\\n    if request.method == \'GET\':\\n        queryset = get_object_or_404(Customer, pk=id)\\n        serializer = customer_serializer(queryset, many=False)\\n        return Response(serializer.data)\\n    elif request.method == \'POST\':\\n        serializer = customer_serializer(data=request.data)\\n        serializer.is_valid(raise_exception=True)\\n        return Response(serializer.validated_data)\\n```\\n\\n\u8fd9\u91cc\u7684`raise_exception`\u76f8\u5f53\u4e8e\u4e00\u4e2a invalidate -> return status.HTTP_404_BAD_REQUEST \u7684\u5206\u652f\\n\\n\u53ef\u4ee5\u5728 serializer \u4e4b\u4e2d override validate \u65b9\u6cd5(\u53cd\u5e8f\u5217\u5316\u4e4b\u540e\u662f\u4e00\u4e2a Dict),\u4f8b\u5982\\n\\n```python\\ndef validate(self, data):\\n    if data[\'password\']!=data[\'confirm_password\']:\\n        return serializers.ValidationError(\\"xxx\\");\\n    return data\\n```\\n\\n\u5165\u5e93\uff1a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u76f4\u63a5`serializer.save()`\\n\\n\u5982\u679c\u9700\u8981\u5bf9 POST \u4f20\u5165\u7684\u5bf9\u8c61\u5904\u7406\u540e\u518d\u5165\u5e93\uff0c\u53ef\u4ee5 override serializer \u7684`create`\u548c`update`\u65b9\u6cd5\\n\\nPUT \u7684\u533a\u522b\u5728\u4e0e serializer \u591a\u4f20\u5165\u4e00\u4e2a\u88ab\u66f4\u65b0\u7684 item \u505a\u53c2\u6570\\n\\n```python\\n@api_view([\'GET\', \'POST\', \'PUT\'])\\ndef single_customer(request, id:int):\\n    // ...\\n    elif request.method == \'PUT\':\\n        serializer = customer_serializer(queryset, data=request.data)\\n        serializer.is_valid(raise_exception=True)\\n        serializer.save()\\n        return Response(serializer.validated_data)\\n```\\n\\nDELETE: \u5bf9 entity \u8c03\u7528`delete()`\uff0c\u624b\u52a8\u68c0\u67e5\u6709\u6ca1\u6709\u4f9d\u8d56\u5bfc\u81f4\u65e0\u6cd5\u5220\u9664\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6709\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a 405_method_not_allowed\\n\\n### Advanced API concepts\\n\\n- Class-based Views\\n\\n- Generic Views\\n\\n- ViewSet\\n- Nested Routers\\n\\n\u4e0a\u9762\u7684\u518d\u770b\\n\\n- filtering\\n- sorting\\n- paging\\n\\n```python\\n@api_view()\\ndef get_sorted_customers(request):\\n    queryset = Customer.objects.all()\\n    first_name = request.query_params.get(\'first_name\', None)\\n    last_name = request.query_params.get(\'last_name\', None)\\n    if first_name is not None:\\n        queryset = queryset.filter(first_name=first_name)\\n    if last_name is not None:\\n        queryset = queryset.filter(last_name=last_name)\\n    serializer = customer_serializer(queryset, many=True)\\n    return Response(serializer.data)\\n```\\n\\n\u7c7b\u89c6\u56fe\u4e0b\u8fd8\u53ef\u4ee5\u5f15\u5165\u5916\u754c\u5e93\uff0cdjango-filter \u8fdb\u4e00\u6b65\u7b80\u5316\u7f16\u7801\uff0c\u5e76\u4e14\u5f15\u5165 GenericFilter\\n\\n\u540c\u65f6\u96c6\u6210\u4e86\u53ef\u89c6\u5316 API\uff0c\u652f\u6301\u5404\u79cd\u8fc7\u6ee4\u7ec4\u5408\\n\\nSearch\uff1a restframework \u7684 SearchFilter \u7ec4\u4ef6\\n\\nSort: restframework \u7684 OrderingFilter \u7ec4\u4ef6\\n\\nPagination: restframework \u7684 PageNumberPagination \u7ec4\u4ef6"},{"id":"/splay-tree","metadata":{"permalink":"/blog/splay-tree","source":"@site/blog/splay-tree.md","title":"splay tree","description":"splay tree","date":"2024-07-12T00:00:00.000Z","tags":[{"inline":true,"label":"ds","permalink":"/blog/tags/ds"}],"readingTime":4.76,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"splay tree","date":"2024-07-12T00:00:00.000Z","author":"ayanami","tags":["ds"]},"unlisted":false,"prevItem":{"title":"Django_mosh","permalink":"/blog/django-mosh"},"nextItem":{"title":"xv6book Notes(C1-4)","permalink":"/blog/xv6book-notes"}},"content":"### splay tree\\n\\n1. Counting Binary Tree\\n\\nref: [\u5361\u7279\u5170\u6570\uff08Catalan number\uff09\uff08\u4e8c\uff09 - \u77e5\u4e4e (zhihu.com)](https://zhuanlan.zhihu.com/p/31526354), [stackoverflow \u4e13\u680f](https://cs.stackexchange.com/questions/368/counting-binary-trees>)\\n\\n\u7ed9\u5b9a\u8282\u70b9\u6570 n\uff0c\u4e8c\u53c9\u6811\u7684\u79cd\u7c7b\u6570\uff1f \u5361\u5854\u5170\u6570 C(n).\\n\\n$$\\nC(n) = \\\\frac{1}{n+1} * C_{2n}^{n}\\n$$\\n\\n\x3c!-- truncate --\x3e\\n\\n\u76f4\u89c2\u7406\u89e3\uff1f\u6362\u4e2a\u89d2\u5ea6\uff0c\u81ea\u5e95\u5411\u4e0a\\n\\n\u603b\u5171 n \u4e2a\u8282\u70b9\u6bcf\u6b21\u94fe\u63a5\u4e24\u4e2a\u5f62\u6210\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u6709\u591a\u5c11\u79cd\u8fde\u6cd5\\n\x3c!--truncate--\x3e\\n\u7b49\u6548\u4e8e\u5bf9\u5e8f\u5217 $A_1A_2A_3A_4...A_n$ \u52a0\u62ec\u53f7\uff0c\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u52a0\u6cd5\\n\\n\u7b49\u6548\u4e8e\u62ec\u53f7\u95ee\u9898\uff08\u5b9a\u4e49\u5361\u7279\u5170\u6570\u7684\u539f\u59cb\u95ee\u9898\uff09\uff1a\\n\\n\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u5b9a\u4e49\uff08\u975e\u9012\u5f52\uff09\u4e3a\uff1a\\n\\n- \u95ed\u5408\uff08\u5de6\u62ec\u53f7\u6570=\u53f3\u62ec\u53f7\u6570\uff09\\n- \u4ece\u5de6\u5230\u53f3\uff0c\u4efb\u610f\u65f6\u523b\u5de6\u62ec\u53f7\u6570&gt;=\u53f3\u62ec\u53f7\u6570\\n\\n\u9012\u5f52\u4e3a\uff1a\\n\\n- \uff08a\uff09\u662f\u62ec\u53f7\u5e8f\u5217\\n- A\uff0cB \u662f\u62ec\u53f7\u5e8f\u5217\uff0c\uff08AB\uff09\u4e5f\u662f\u62ec\u53f7\u5e8f\u5217\\n\\n\u7531\u975e\u9012\u5f52\u5b9a\u4e49\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u7b49\u4ef7\u95ee\u9898\uff1a\\n\\n- \u4e00\u4e2a n\\\\*n \u65b9\u683c\uff0c\u4e0d\u80fd\u8fc7\u5bf9\u89d2\u7ebf\uff0c\u4ece\u5de6\u4e0b\u51fa\u53d1\uff0c\u53ea\u80fd\u5411\u53f3\u6216\u8005\u4e0a\u8d70\uff0c\u7ec8\u70b9\u5728\u53f3\u4e0a\u89d2\uff08\u628a n \u683c\u5b50\u7684 n+1 \u6761\u7ebf\u770b\u6210 n \u5143\u7d20\u5e8f\u5217\u7684 n+1 \u4e2a\u53ef\u4ee5\u63d2\u5165\u62ec\u53f7\u7684\u70b9\uff0c\u5411\u53f3\u8d70\u770b\u6210\u662f\u5de6\u62ec\u53f7\uff0c\u5411\u4e0a\u8d70\u770b\u6210\u53f3\u62ec\u53f7\uff09\\n\\n- \u4e00\u4e2a\u4e8c\u8fdb\u5236\u5e8f\u5217\uff0c\u4efb\u610f\u65f6\u523b\u7d2f\u8ba1 0 \u7684\u6570\u76ee\u5c0f\u4e8e\u7b49\u4e8e 1 \u7684\u6570\u76ee\uff0c\u6700\u540e 0 \u6570\u8981\u7b49\u4e8e 1 \u6570\\n\\n- \u4e00\u4e2a\u5141\u8bb8\\\\{push,pop\\\\}\u7684\u961f\u5217\uff0cn \u6b21\u64cd\u4f5c\u4e4b\u540e\u961f\u5217\u4e3a\u7a7a\\n\\n\u8bbe\u8fd9\u6837\u7684\u6570\u76ee\u4e3a C(n)\\n\\n\u9012\u63a8\u5f0f\u5b50\uff1a$$C(n) = C(0)C(n) + C(1)C(n-1)+...+C(n)C(0)$$ \uff08\u76f4\u89c2\u7406\u89e3: $C(0)C(n)$\u662f\u5de6\u5b50\u6811 0 \u4e2a\uff0c\u53f3\u5b50\u6811 n \u4e2a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff09\\n\\n1. splay tree\\n\\nref: [\u6df1\u5165\u7406\u89e3\u4f38\u5c55\u6811(splay tree) - \u77e5\u4e4e (zhihu.com)](https://zhuanlan.zhihu.com/p/348797577)\uff0c [Splay Tree Visualzation (usfca.edu)](https://www.cs.usfca.edu/~galles/visualization/SplayTree.html)\\n\\n\u8bd5\u56fe\u5bf9 AVL \u6811\u8fdb\u884c\u4f18\u5316\\n\\n\u7531\u5c40\u90e8\u6027\u539f\u7406\uff0c\u60f3\u5230\u80fd\u5426\u5c06\u6700\u8fd1\u8bbf\u95ee\u7684\u5143\u7d20\uff08\u5bb9\u6613\u518d\u6b21\u88ab\u8bbf\u95ee\uff09\u65cb\u8f6c\u5230\u6839\u4e0a\u53bb\u65b9\u4fbf\u4e0b\u6b21\u8bbf\u95ee\\n\\n\u6734\u7d20\u60f3\u6cd5: \u4e00\u76f4\u5411\u4e0a\uff0c\u548c\u7236\u8282\u70b9\u65cb\u8f6c\uff01zig-zag\\n\\n\u95ee\u9898\uff1a\u5982\u679c\u662f\u201c\u4e00\u201d\u5b57\u5f62\uff0c\u5728\u5c06\u6700\u5e95\u5c42\u7684\u8282\u70b9\u65cb\u8f6c\u5230\u9876\u90e8\u7684\u540c\u65f6\uff0c\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u4e5f\u88ab\u65cb\u8f6c\u4e0b\u6765\u4e86\uff0c\u6811\u7684\u6574\u4f53\u5f62\u6001\u6ca1\u53d8\uff0c\u6700\u574f\u7684\u65f6\u5019\u6bcf\u4e00\u6b21\u8c03\u6574\u90fd\u662f O(n)\\n\\n\u4f38\u5c55\u6811\u6539\u8fdb\uff1a\u5982\u679c\u662f\u201c\u4e4b\u201d\u5b57\u5f62\uff0c\u548c\u6734\u7d20\u60f3\u6cd5\u4e00\u6837\uff1b\u5982\u679c\u662f\u201c\u4e00\u5b57\u5f62\u201d\uff0c\u5148\u65cb\u8f6c\u7236\u8282\u70b9\u548c\u7956\u5148\u8282\u70b9\uff08\u5982\u679c\u6709\uff0c\u6ca1\u6709\u5c31\u7b97\u4e86\uff09\uff0c\u518d\u5c06\u67e5\u8be2\u8282\u70b9\u5411\u4e0a\u65cb\u8f6c\\n\\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u7684\u4f18\u5316\u4f1a\u8ba9\u6700\u574f\u60c5\u51b5\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230 log(n)\\n\\n\u8fd9\u662f\u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5\uff0c\u8981\u6c42\u4ece\u6839\u5f00\u59cb\u67e5\u8be2\u65f6\u7ef4\u62a4 O(n)\u7684\u67e5\u8be2\u6808\uff0c\u8fd8\u6709\u4e0d\u76f4\u89c2\u7684\u81ea\u9876\u5411\u4e0b\u65b9\u6cd5\uff0c\u4f18\u5316\u4e86\u7a7a\u95f4\u6548\u7387\\n\\n\u4f38\u5c55\u6811\u7684\u5e94\u7528\uff1a\\n\\n- \u4f18\u5316\u5bf9 AVL \u6811\u7684\u8fde\u7eed\u67e5\u8be2\\n- \u533a\u95f4\u64cd\u4f5c\uff1a\u7531\u4e8e\u4f38\u5c55\uff08zig-zag \u7b49\uff09\u4e0d\u5f71\u54cd\u6811\u7684\u6027\u8d28\uff08\u5728\u8fd9\u91cc\u91cd\u8981\u7684\u662f\u4e2d\u5e8f\u904d\u5386\u7684\u5e8f\u5217\u4e0d\u53d8\uff08\u8981\u662f\u65cb\u8f6c\u6539\u53d8\u4e86\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u7ed3\u6784\u90a3\u4e0d\u5c31\u5bc4\u4e86\uff09\uff09\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u7528\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811\u4ee3\u8868\u4e00\u4e2a comparable \u7684\u5143\u7d20\u5e8f\u5217\u65f6\uff0c\u53ef\u4ee5\u5229\u7528\u4f38\u5c55\u53d8\u6362\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff1a\\n  - \u63d2\u5165\u533a\u95f4\uff1a\u5728\u7b2c p \u4e2a\u5143\u7d20\u548c\u7b2c p+1 \u4e2a\u5143\u7d20\u4e4b\u95f4\u63d2\u5165\u533a\u95f4\uff1a\u5c06 p \u5411\u4e0a\u4f38\u5c55\u5230\u6839\uff0c\u518d\u5c06 p+1 \u5411\u4e0a\u4f38\u5c55\u5230\u6839\u7684\u53f3\u5b50\u6811\uff0c\u63d2\u5165\u533a\u95f4\u7684\u6839\u5c31\u662f p+1 \u7684\u5de6\u5b50\u6811\\n  - \u5220\u9664\u533a\u95f4\uff1a\u5220\u9664[m,n]\u533a\u95f4\u53ea\u9700\u8981\u5c06\u7b2c m-1 \u4e2a\u5143\u7d20\u4f38\u5c55\u5230\u6839\uff0c\u518d\u5c06 n+1 \u4e2a\u5143\u7d20\u4f38\u5c55\u5230\u6839\u7684\u53f3\u5b50\u6811\uff0c\u4e4b\u540e\u5220\u6389\u5b83\u7684\u5de6\u5b50\u6811\u5c31\u884c\\n  - \u7ffb\u8f6c\u533a\u95f4\uff1a\u53cd\u8f6c\u533a\u95f4[m,n]\u5185\u7684\u5143\u7d20\uff0c\u6ce8\u610f\u5230\u9006\u5e8f\u7684\u9012\u5f52\u8868\u8ff0\uff1a $$R(AmB) = R(B)mR(A)$$, \u64cd\u4f5c\u4e3a\uff1a1.\u5c06\u5143\u7d20 m-1 \u4f38\u5c55\u5230\u6839 2.\u5c06\u5143\u7d20 n+1 \u4f38\u5c55\u5230\u6839\u7684\u53f3\u5b50\u6811\uff0c\u6b64\u65f6[m,n]\u5c31\u662f\u5b83\u7684\u5de6\u5b50\u6811 3.\u7ef4\u62a4\u4e00\u4e2a reverse \u6807\u8bb0\uff0c\u6807\u8bb0\u4e3a 1 \u5219\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\uff0c\u5e76\u5c06\u8be5\u6807\u8bb0\u4e0b\u653e\u7ed9\u5de6\u53f3\u5b50\u6811\u7684\u6839\uff0c\u5c06[m,n]\u7684\u6839\u7684 reverse \u6807\u8bb0\u7f6e 1"},{"id":"xv6book-notes","metadata":{"permalink":"/blog/xv6book-notes","source":"@site/blog/xv6book.md","title":"xv6book Notes(C1-4)","description":"\u4e00\u4e9b\u7ec6\u8282\u548c\u601d\u8003\uff1a","date":"2024-07-12T00:00:00.000Z","tags":[{"inline":true,"label":"xv6","permalink":"/blog/tags/xv-6"},{"inline":true,"label":"os","permalink":"/blog/tags/os"},{"inline":true,"label":"system","permalink":"/blog/tags/system"}],"readingTime":90.675,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"xv6book Notes(C1-4)","date":"2024-07-12T00:00:00.000Z","author":"ayanami","tags":["xv6","os","system"],"slug":"xv6book-notes"},"unlisted":false,"prevItem":{"title":"splay tree","permalink":"/blog/splay-tree"},"nextItem":{"title":"Go,Gin\u5b66\u4e60","permalink":"/blog/Go-Gin\u5b66\u4e60"}},"content":"\u4e00\u4e9b\u7ec6\u8282\u548c\u601d\u8003\uff1a\\n\\nQ: wait for reading the source code and thinking\\n\\nA: after reading the source code and thinking\\n\\n\x3c!-- truncate --\x3e\\n\\n### Chapter 1\\n\\n#### 1.1\\n\\nclose syscall just \\"Release the file fd\\", don\'t really operate on the file itself.\\n\\nand correspandingly, the open syscall just ask for a fd and return\\n\\nfd isn\'t something new, just the an \\"alias\\" or \\"abstraction\\" of file store location in real world\\n\\n> Q: Is fd a key-value mapping of inode which the kernel mainteins?\\n\x3c!--truncate--\x3e\\nwait syscall\'s full def\\n\\n```c\\nint wait(int* status);\\n// wait for a child to exit; exit status in *status, returns child PID\\n```\\n\\nexit syscall\\n\\n```c\\nint exit(int status);\\n// terminate the current process; status reported to wait().No return\\n// return 0 conventionally to indicate success, 1 to indicate failure\\n```\\n\\n> Q: Is no return means the end of the process? FurtherMore, after exit syscall, OS is doing what during waiting(or scheding)? release resources, specific?\\n\\nwait return -1 when the process has no children(when return? killed or exited)\\n\\nexec syscall\\n\\n\\"replacing the calling process\'s memory with a **new memory image** loaded file stored in the file sys\\"\\n\\nnot magic, the file must have some specific **format** to indicate which part of the file holds instruction, which part of the file holds data... etc\\n\\nxv6 use _ELF format_\\n\\n> Link: Chapter 3\\n\\nthe pipe implement in suer shell\\n\\nassume that we have pipe syscall already\\n\\ncmd, after parse, has been given a cmd type\\n\\n```c\\n    case PIPE:\\n        pcmd = (struct pipecmd *)cmd;\\n// pipecmd is just\\n/*\\n   struct pipecmd{\\n   \\t \\tint* type; // enum actually\\n   \\t \\tcmd* leftcmd;\\n   \\t \\tcmd* right;\\n   \\t \\t// Q: cmd only has an element \\"type\\", why?\\n   }\\n*/\\n        if (pipe(p) < 0)\\n            panic(\\"pipe\\");\\n        if (fork1() == 0) {\\n            close(1);\\n            // close the write port\\n            dup(p[1]);\\n            // duplicate the write port of the pipe, now it will occupy the 1\\n            // close the other pipe fd\\n            close(p[0]);\\n            close(p[1]);\\n            runcmd(pcmd->left);\\n            // now run the cmd\\n        }\\n        if (fork1() == 0) {\\n            // same\\n            close(0);\\n            dup(p[0]);\\n            close(p[0]);\\n            close(p[1]);\\n            runcmd(pcmd->right);\\n        }\\n        close(p[0]);\\n        close(p[1]);\\n        wait(0);\\n        wait(0);\\n        break;\\n```\\n\\nAttention: It calls twice `fork`. The left of pipe and the right of pipe are both the children of shell.\\n\\nAnd there\' s a **recursion** here(`runcmd`):\\n\\nthe cmd struct only needs an element \\"type\\" because the cmd runs only when its type is \\"EXECCMD\\"\\n\\n```c\\nstruct execcmd {\\n    int type;\\n    char *argv[MAXARGS];\\n    char *eargv[MAXARGS];\\n};\\n```\\n\\nThe entire shell actual only has such a simple core in main function\\n\\n```c\\n    // Read and run input commands.\\n    while (getcmd(buf, sizeof(buf)) >= 0) {\\n        // ...\\n        if (fork1() == 0) // fork a child process\\n            runcmd(parsecmd(buf)); // run cmd\\n        wait(0); // wait for the child be killed or exit\\n    }\\n\\t// never return\\n```\\n\\nSo that\'s a reason why Unix(xv6) separate `fork` and `exec`. We need the possibility to execute some code between fork and exec, like implementing pipe(doing some operation on fd)\\n\\nAlso, another reason is to waste the resources: Based on COPY-ON-WRITE\\n\\nxv6 allocates the memory of **user** implicitly using fork and exec\\n\\nuser process can also explicitly call `sbrk`to ask for more memory\\n\\n#### 1.2\\n\\n> A file descriptor is a small integer representing **a kernel-managed object** that a process may read/write to\\n\\nsource:\\n\\n- open: file\uff0c dir, device\\n- create: pipe\\n- dup\\n\\nAn **abstraction** of a file, device, pipe, **making them all look like streams of bytes**\\n\\n**The shell ensures three fd open(which is the shell process\'s stdin, stdout and stderr)** (console)\\n\\nThere\'s an offset binding with each fd, making it possible to write code like\\n\\n```c\\nif(fork()==0){\\n    write(fd, \\"Hello \\", 6);\\n}\\nelse{\\n    wait(0);\\n    write(fd, \\"world\\", 6);\\n}\\n```\\n\\nfork && dup will copy the fd and the offset\\n\\ndup is used to implement the shell command like this\\n\\n```bash\\n[somecommand] 2>&1\\n```\\n\\nwhich means redirect the err message to the stdout\\n\\nIt can be implemented by\\n\\n```c\\nclose(2);\\nfd = dup(1);// so it copies the 1\'s fd and offset, and occupy the loc of 2(stderr).\\n```\\n\\n#### 1.3\\n\\n> A pipe is a kernel buffer that exposed to process as a pair of file discriptors\\n\\nIf there is no data available, the read side of a pipe will be blocked. A `read` on a pipe waits:\\n\\n- write data\\n- **the ref count of the write fd of the pipe is 0**\\n\\nSo it\'s very important to close write fd in the child process\\n\\n> if one of wc\'s fd refers to the pipe, the wc would never see the end-of-file\\n\\n\u9a8c\u8bc1\uff1a\\n\\n```c\\n#include <stdio.h>\\n#include <unistd.h>\\n\\nint main() {\\n  // wc the std input\\n  int p[2];\\n  char *argv[2];\\n  argv[0] = \\"wc\\";\\n  argv[1] = NULL;\\n  pipe(p);\\n  if (fork() == 0) {\\n    // child process\\n    printf(\\"switched to child process\\\\n\\");\\n    close(0);\\n    dup(p[0]);\\n    close(p[0]);\\n    close(p[1]); // \u6b64\u5904\u82e5\u6ce8\u91ca......\\n    execvp(argv[0], argv);\\n  } else {\\n    printf(\\"switched to parent process\\\\n\\");\\n    close(p[0]);\\n    write(p[1], \\"hello world\\\\n\\", 11);\\n    close(p[1]);\\n  }\\n  return 0;\\n}\\n```\\n\\n\u7ed3\u679c\u662f\\n\\n```bash\\n\u276f gcc pipe.c\\n\u276f ./a.out\\nswitched to parent process\\nswitched to child process\\n      0       2      11\\n```\\n\\n\u5982\u679c\u5c06`close(p[1])`\u6ce8\u91ca\u6389\uff0c\u4e0d\u4f1a\u8f93\u51fa 0 2 11, \u56e0\u4e3a wc \u6839\u672c\u6ca1\u770b\u5230 end-of-file\uff08\u7ba1\u9053\u5199\u7aef\u5f15\u7528\u8ba1\u6570\u4e0d\u4e3a 0\uff09\uff0c\u786e\u5b9e\u5982\u6b64\\n\\n\u8fd9\u91cc\u5176\u5b9e\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\uff1a\\n\\n- \u4ee3\u7801\u4e4b\u4e2d\u6ca1\u6709\u4f7f\u7528`wait`\uff0c\u56e0\u800c\u4e0d\u4fdd\u8bc1\u7236\u5b50\u8fdb\u7a0b\u7684\u5148\u540e\u987a\u5e8f\uff1b\u4f46\u662f\uff0c\u5982\u679c\u5148\u5207\u6362\u5230\u5b50\u8fdb\u7a0b\uff0c\u4f1a\u56e0\u4e3a\u7ba1\u9053\u5185\u90e8\u6ca1\u6709\u53ef\u8bfb\u7684\u6570\u636e\u800c\u5835\u585e\uff0c\u518d\u6b21\u53d1\u751f\u8fdb\u7a0b\u8c03\u5ea6\u3002\\n- \u53ef\u80fd\u8fd8\u6709\u7591\u95ee\uff0c\u5982\u679c\u7236\u8fdb\u7a0b\u5728 write \u4e2d\u95f4\u53d1\u751f\u8fdb\u7a0b\u5207\u6362\u5462\uff1f\u5b9e\u9645\u4e0a\u662f\u4e0d\u4f1a\u53d1\u751f\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4`write`\u662f atomic operation, **\u5728 Unix \u548c Linux \u7cfb\u7edf\u4e2d\uff0c\u5bf9\u4e8e\u7ba1\u9053\u548c\u666e\u901a\u6587\u4ef6\u7684 write \u64cd\u4f5c\uff0c\u5982\u679c\u5199\u5165\u7684\u6570\u636e\u91cf\u5c0f\u4e8e PIPE_BUF\uff08\u901a\u5e38\u662f 4096 \u5b57\u8282\uff09\uff0c\u90a3\u4e48 write \u64cd\u4f5c\u662f\u539f\u5b50\u7684**\\n\\nread the code of sh.c 100\\n\\n> Thus, the shell may create the tree of process; The leaves of tree are command and the interior nodes are processes that wait the left and the right children complete.\\n\\n\u4e66\u4e0b\u9762\u51e0\u6bb5\u5bf9\u8fd9\u79cd fork \u4e24\u6b21\uff0c\u5de6\u53f3\u4e2d\u7684\u6267\u884c\u987a\u5e8f\u7684 design \u4e5f\u505a\u4e86\u5f88\u6709\u610f\u601d\u7684\u63a2\u8ba8\\n\\npipe\'s advtanges over temp file(why `echo hi | wc` is better than `echo hi > tmp; wc < tmp`)\\n\\n- pipes clean themselves up\\n- pipes can pass arbitrarily long streams of data, while tmp file need enough space in disk and may be slower\\n- pipes allows paralel execution(recall the pipe tree)\\n- pipe\'s blocking reads\\n\\n#### 1.4\\n\\nfile system: a tree starting at `root`\\n\\ntree node: data file: **uninterpreted byte arrays**\\n\\ndir: a **named ref** of data files and other dir\\n\\n`chdir` and `open` syscall\\n\\ncreate new files or dirs?\\n\\n- `open(\\"path\\", O_CREATE)`\\n- `mkdir(\\"path\\")`\\n- `mknod(\\"path\\", major-dev-number, minor-dev-number)`\\n\\nmknod \u8fd9\u4e2a syscall \u6bd4\u8f83\u7279\u6b8a\uff0c\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u547d\u540d\u7ba1\u9053 FIFO \u6216\u8005\u8bbe\u5907\u6587\u4ef6\\n\\n\u547d\u540d\u7ba1\u9053\u5c31\u662f\u5e26\u540d\u5b57\u7684\u7ba1\u9053\\n\\n\u8bbe\u5907\u6587\u4ef6\u5206\u6210\u4e24\u79cd\\n\\n> \u5728 Unix \u548c Linux \u7cfb\u7edf\u4e2d\uff0c\u8bbe\u5907\u88ab\u8868\u793a\u4e3a\u8bbe\u5907\u6587\u4ef6\uff0c\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6\u7c7b\u578b\u3002\u8bbe\u5907\u6587\u4ef6\u5206\u4e3a\u4e24\u79cd\uff1a\u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\u548c\u5757\u8bbe\u5907\u6587\u4ef6\u3002\\n>\\n> - \u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\uff1a\u63d0\u4f9b\u4e0d\u5e26\u7f13\u51b2\u7684\u3001\u4e32\u884c\u7684\u6570\u636e\u8bbf\u95ee\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bfb\u5199\u7684\u662f\u8bbe\u5907\u63d0\u4f9b\u7684\u539f\u59cb\u6570\u636e\u3002\u952e\u76d8\u548c\u9f20\u6807\u7b49\u8f93\u5165\u8bbe\u5907\u901a\u5e38\u662f\u5b57\u7b26\u8bbe\u5907\u3002\\n> - \u5757\u8bbe\u5907\u6587\u4ef6\uff1a\u63d0\u4f9b\u5e26\u7f13\u51b2\u7684\u3001\u968f\u673a\u8bbf\u95ee\u7684\u6570\u636e\u8bbf\u95ee\uff0c\u6570\u636e\u4ee5\u5757\u4e3a\u5355\u4f4d\u8fdb\u884c\u8bfb\u5199\u3002\u786c\u76d8\u548c\u5149\u9a71\u7b49\u5b58\u50a8\u8bbe\u5907\u901a\u5e38\u662f\u5757\u8bbe\u5907\u3002\\n>\\n> \u8bbe\u5907\u6587\u4ef6\u4e0e\u666e\u901a\u6587\u4ef6\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u8bbe\u5907\u6587\u4ef6\u63d0\u4f9b\u4e86\u4e00\u79cd\u8bbf\u95ee\u786c\u4ef6\u8bbe\u5907\u7684\u63a5\u53e3\u3002\u5f53\u4f60\u5bf9\u8bbe\u5907\u6587\u4ef6\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u4e0e\u76f8\u5e94\u7684\u8bbe\u5907\u8fdb\u884c\u901a\u4fe1\u3002\\n>\\n> \u4e3b\u8bbe\u5907\u53f7\u548c\u6b21\u8bbe\u5907\u53f7\u662f\u8bbe\u5907\u6587\u4ef6\u7684\u91cd\u8981\u5c5e\u6027\uff0c\u5b83\u4eec\u7528\u4e8e\u6807\u8bc6\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5907\u3002\\n>\\n> - \u4e3b\u8bbe\u5907\u53f7\uff1a\u7528\u4e8e\u6807\u8bc6\u8bbe\u5907\u7684\u7c7b\u578b\u6216\u8bbe\u5907\u9a71\u52a8\u3002\u4f8b\u5982\uff0c\u6240\u6709\u7684 SCSI \u786c\u76d8\u90fd\u6709\u76f8\u540c\u7684\u4e3b\u8bbe\u5907\u53f7\u3002\\n> - \u6b21\u8bbe\u5907\u53f7\uff1a\u7528\u4e8e\u6807\u8bc6\u540c\u4e00\u7c7b\u578b\u7684\u8bbe\u5907\u4e2d\u7684\u5177\u4f53\u8bbe\u5907\u3002\u4f8b\u5982\uff0c\u7cfb\u7edf\u4e2d\u7684\u7b2c\u4e00\u4e2a SCSI \u786c\u76d8\u7684\u6b21\u8bbe\u5907\u53f7\u662f 0\uff0c\u7b2c\u4e8c\u4e2a SCSI \u786c\u76d8\u7684\u6b21\u8bbe\u5907\u53f7\u662f 1\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\\n>\\n> \u8bbe\u5907\u53f7\u662f\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4f7f\u7528\u7684\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u4e0d\u9700\u8981\u76f4\u63a5\u5904\u7406\u8bbe\u5907\u53f7\u3002\u5f53\u4f60\u6253\u5f00\u4e00\u4e2a\u8bbe\u5907\u6587\u4ef6\u65f6\uff0c\u7cfb\u7edf\u4f1a\u6839\u636e\u8bbe\u5907\u6587\u4ef6\u7684\u8bbe\u5907\u53f7\u627e\u5230\u76f8\u5e94\u7684\u8bbe\u5907\u9a71\u52a8\uff0c\u7136\u540e\u7531\u8bbe\u5907\u9a71\u52a8\u5904\u7406\u4f60\u7684\u8bfb\u5199\u8bf7\u6c42\u3002(\u4e5f\u5c31\u662f\u8bf4\u5185\u6838\u7ef4\u62a4\u4e86\u4e00\u4e2a\u8bbe\u5907\u53f7-&gt;\u9a71\u52a8\u7684 jump table)\\n\\n\u6587\u4ef6\u548c\u6587\u4ef6\u540d\u5728\u6587\u4ef6\u7cfb\u7edf\u4e4b\u4e2d\u662f\u4e24\u4e2a\u4e1c\u897f\uff1a\\n\\n- \u6587\u4ef6 file: \u662f\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\u7684 metadata\uff0c\u6216\u8005\u53eb inode\\n- \u6587\u4ef6\u540d\uff1a\u662f\u5bf9\u6587\u4ef6\u7684\u4e00\u4e2a link \u6216\u8005 ref, \u6587\u4ef6\u540d\u662f\u7531\u6587\u4ef6\u5939 dir \u6765\u7ef4\u62a4\u7684\u4e00\u4e2a dir entry\\n\\n```c\\nstruct dirent {\\n  ushort inum;\\n  char name[DIRSIZ];\\n};\\n```\\n\\n```c\\n#define T_DIR     1   // Directory\\n#define T_FILE    2   // File\\n#define T_DEVICE  3   // Device\\n\\nstruct stat {\\n  int dev;     // File system\'s disk device\\n  uint ino;    // Inode number\\n  short type;  // Type of file\\n  short nlink; // Number of links to file\\n  uint64 size; // Size of file in bytes\\n};\\n```\\n\\nfile \u662f\u7531\u4e00\u4e9b\u7c7b\u578b\u4fe1\u606f\u3001\u6743\u9650\u4fe1\u606f\u3001\u5f15\u7528\u8ba1\u6570\u7b49\u4fe1\u606f+data \u7ec4\u6210\u7684\uff08\u5176\u4e2d\u7684 data \u5c31\u662f inode\uff09\\n\\n```c\\nstruct file {\\n  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;\\n  int ref; // reference count\\n  char readable;\\n  char writable;\\n  struct pipe *pipe; // FD_PIPE\\n  struct inode *ip;  // FD_INODE and FD_DEVICE\\n  uint off;          // FD_INODE\\n  short major;       // FD_DEVICE\\n};\\n\\n// in-memory copy of an inode\\nstruct inode {\\n  uint dev;           // Device number\\n  uint inum;          // Inode number\\n  int ref;            // Reference count\\n  struct sleeplock lock; // protects everything below here\\n  int valid;          // inode has been read from disk?\\n\\n  short type;         // copy of disk inode\\n  short major;\\n  short minor;\\n  short nlink;\\n  uint size;\\n  uint addrs[NDIRECT+1];\\n};\\n```\\n\\n`link` : \u7ed9\u6307\u5b9a\u7684 inode \u52a0\u4e0a\u53e6\u4e00\u4e2a\u540d\u5b57\\n\\n```c\\nopen(\\"a\\", O_CREATE);\\nlink(\\"a\\", \\"b\\"); // \u73b0\u5728\u540d\u5b57\u201cb\u201d\u4e5f\u6307\u5411\u201ca\u201d\u5bf9\u5e94\u7684inode\u4e86\\n```\\n\\n`unlink`: \u5220\u9664\u4e00\u4e2a\u540d\u5b57\\n\\n\u4e00\u4e2a\u6709\u8da3\u7684\u5e94\u7528\u662f\u521b\u5efa\u4e34\u65f6\u6587\u4ef6\\n\\n```c\\nopen(\\"temp\\", O_CREATE|O_RDWR);\\nunlink(\\"temp\\");\\n```\\n\\n\u6b64\u65f6\u53ea\u6709 open \u8fd4\u56de\u7684\u6216\u8005\u5176\u5b83\u5730\u65b9\u7684\u62ff\u5230\u7684 fd \u8fd8\u80fd\u8bbf\u95ee\u4e34\u65f6\u6587\u4ef6\\n\\n\u5f53\u8fd9\u4e2a\u8fdb\u7a0b\u9000\u51fa\uff0c\u56de\u6536 fd \u7684\u65f6\u5019\uff0ctemp \u8fd9\u4e2a\u6587\u4ef6\u7684\u5f15\u7528\u8ba1\u6570\u4e3a 0\uff0c\u4f1a\u88ab\u6e05\u9664\\n\\n\u4e00\u4e2a\u5c0f\u7ec6\u8282\uff0cshell \u5927\u90e8\u5206\u7684\u547d\u4ee4\u90fd\u662f\u653e\u5728\u5176\u4ed6\u6587\u4ef6\u4e4b\u4e2d\u8c03\u7528\u6765\u5b9e\u73b0\u7684\uff0c\u5373 fork+exec\uff0c\u4f46 cd \u662f\u5728 shell \u91cc\u9762\u7684\\n\\n```c\\nint main(void) {\\n    static char buf[100];\\n    int fd;\\n\\n    // Ensure that three file descriptors are open.\\n    while ((fd = open(\\"console\\", O_RDWR)) >= 0) {\\n        if (fd >= 3) {\\n            close(fd);\\n            break;\\n        }\\n    }\\n\\n    // Read and run input commands.\\n    while (getcmd(buf, sizeof(buf)) >= 0) {\\n        if (buf[0] == \'c\' && buf[1] == \'d\' && buf[2] == \' \') {\\n            // Chdir must be called by the parent, not the child.\\n            buf[strlen(buf) - 1] = 0; // chop \\\\n\\n            if (chdir(buf + 3) < 0)\\n                fprintf(2, \\"cannot cd %s\\\\n\\", buf + 3);\\n            continue;\\n        }\\n        if (fork1() == 0)\\n            runcmd(parsecmd(buf));\\n        wait(0);\\n    }\\n    exit(0);\\n}\\n```\\n\\n\u56e0\u4e3a cd \u7684\u65f6\u5019\u662f shell \u8fdb\u7a0b cd \u800c\u4e0d\u662f\u5b50\u8fdb\u7a0b cd\\n\\n#### 1.5\\n\\nUnix syscall interface standard: POSIX(Portable Operating System Interface)\\n\\n#### lab01 Utils\\n\\nboot xv6\uff1a\u7167\u505a\u5373\u53ef\uff0c\u6216\u53c2\u7167\u8e29\u5751\u8bb0\u5f55\\n\\nsleep: \u77e5\u9053 user.h \u662f syscall \u5b9a\u4e49\u7684\u5730\u65b9\u5373\u53ef\uff0c\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b syscall \u662f\u5565\u610f\u601d\\n\\npingpong: \u6ce8\u610f child process \u548c parent process \u7684\u6536\u53d1\u987a\u5e8f\uff0c\u4e0d\u8981\u8ba9\u4e24\u4e2a\u7ba1\u9053\u90fd block \u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6ce8\u610f\u6253\u5370\u7684 fd \u662f\u4ec0\u4e48\\n\\n\u53c2\u8003\u4ee3\u7801\u5b9e\u73b0\\n\\n```c\\n#include \\"kernel/stat.h\\"\\n#include \\"kernel/types.h\\"\\n#include \\"user/user.h\\"\\nint main() {\\n  // ping-pong: two thread byte communication\\n  // note the pipe is unidirectional\\n  int p2c_pipe[2];\\n  int c2p_pipe[2];\\n  pipe(p2c_pipe);\\n  pipe(c2p_pipe);\\n  if ((fork()) == 0) {\\n    // child process\\n    close(0);\\n    dup(p2c_pipe[0]);\\n    close(p2c_pipe[0]);\\n    close(p2c_pipe[1]);\\n\\n    const char *send = \\"pong\\\\n\\";\\n    char *received = malloc(5);\\n    int pid = getpid();\\n    read(0, received, 5);\\n    fprintf(1, \\"%d: received %s\\", pid, received);\\n    write(c2p_pipe[1], send, sizeof(send)); // write back\\n\\n    free(received);\\n  } else {\\n    close(0);\\n    dup(c2p_pipe[0]);\\n    close(c2p_pipe[0]);\\n    close(c2p_pipe[1]);\\n\\n    // keep the STDOUT\'s fd: 1\\n    const char *send = \\"ping\\\\n\\";\\n    write(p2c_pipe[1], send, sizeof(send));\\n\\n    char *received = malloc(5);\\n    int pid = getpid();\\n    read(0, received, 5);\\n\\n    fprintf(1, \\"%d: received %s\\", pid, received);\\n    free(received);\\n  }\\n  exit(0);\\n}\\n```\\n\\nprimes: \u8fd9\u4e2a lab \u6709\u4e00\u4e9b\u96be\u5ea6\\n\\n\u5728\u7b2c\u4e00\u6b21\u505a\u7684\u65f6\u5019\u5176\u5b9e\u6ca1\u641e\u61c2\\n\\n\u9996\u5148\u8981\u7406\u89e3\u9898\u76ee\u610f\u601d\uff1a\u80cc\u666f\u6750\u6599\u7ed9\u51fa\u4e86\u8fd9\u6837\u7684\u7d20\u6570\u5e76\u884c\u7b5b\u6cd5\\n\\n```\\np = get a number from left neighbor\\nprint p\\nloop:\\n    n = get a number from left neighbor\\n    if (p does not divide n)\\n        send n to right neighbor\\n```\\n\\n\u5176\u4e2d\u6bcf\u4e00\u6b21\u7b5b\u4e4b\u95f4\u90fd\u662f\u7ba1\u9053\uff0c\u800c\u6bcf\u4e00\u8f6e\u7b5b\u672c\u8eab\u662f\u4e00\u4e2a\u8fdb\u7a0b\\n\\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u5728\u67d0\u4e2a\u5faa\u73af\u4e4b\u4e2d\uff0c\u5b8c\u6210 \\"\u4ece\u4e0a\u4e00\u4e2a\u7ba1\u9053\u7684\u8f93\u5165\u8bfb\u53d6\u4e0a\u4e00\u6b21\u7b5b\u5269\u4e0b\u7684\u6570\\" \u5230 \\"\u91c7\u7528\u8bfb\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6570\u4f5c\u4e3a\u65b0\u7684\u7b5b\u5b50\uff0c\u5e76\u5c06\u5b83\u6253\u5370\\" \u5230 \u201c\u65b0\u5efa\u7ba1\u9053\uff0c\u5411\u7ba1\u9053\u91cc\u9762\u5199\u5165\u6570\u636e\u201d\\n\\n\u800c\u6700\u5173\u952e\u7684\u5176\u5b9e\u5728\u4e8e\uff1a\\n\\n- \u6211\u4eec\u600e\u4e48\u6837\u53bb\u6307\u793a\u8bfb\u5230\u7684\u6570\u662f\u4e0d\u662f\u7b2c\u4e00\u4e2a\uff0c\u600e\u6837\u5224\u5b9a\u524d\u9762\u7684\u6570\u5df2\u7ecf\u8bfb\u5b8c\u548c\u6574\u4e2a\u65b9\u6cd5\u5df2\u7ecf\u7ed3\u675f\\n- \u6211\u4eec\u600e\u4e48\u5904\u7406\u65b0\u5efa\u7ba1\u9053\u548c\u65b0\u5efa\u5b50\u8fdb\u7a0b\uff0c\u5305\u62ec\u5b83\u4eec\u4e4b\u95f4\u7684\u5148\u540e\u987a\u5e8f\\n- \u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u5806\u548c\u6808\uff0c\u6240\u4ee5\u4e0a\u8ff0\u7684\u6807\u8bc6\u7b26\u5e94\u8be5\u8981\u4e48\u662f\u672c\u5730\u91cf\uff0c\u8981\u4e48\u662f\u7ba1\u9053\u8fd9\u79cd\u5168\u5c40\u7ef4\u62a4\u7684\\n\\n\u8fd8\u6709\u5c31\u662f\u6ce8\u610f\u63d0\u793a\uff0c\u4f8b\u5982:\\n\\n- \u63d0\u793a\u91cc\u9762\u8bf4\u4e86`Be careful to close file descriptors that a process doesn\'t need, because otherwise your program will run xv6 out of resources before the first process reaches 35.`\u8fd9\u5b9e\u9645\u4e0a\u8bf4\u660e\u4e86\u5f53\u4f60\u7684\u8f93\u51fa\u91cc\u9762 `$`\u7b26\u53f7\u5939\u5728\u8f93\u51fa\u4e2d\u95f4\u7684\u65f6\u5019\uff0c\u662f\u56e0\u4e3a\u4f60\u7684\u7956\u5148\u8fdb\u7a0b\u6ca1\u6709\u7b49\u5230\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u90fd\u7ed3\u675f\u5c31\u9000\u51fa\u4e86\uff08\u6240\u4ee5 xv6 shell \u8ba4\u4e3a\u8981\u6267\u884c\u4e0b\u4e00\u6b21\u547d\u4ee4\u8f93\u5165\uff0c\u8f93\u51fa\u4e86`$`)\\n- Hint: `read` returns zero when the write-side of a pipe is closed. \u8fd9\u4e00\u6761\u5b9e\u9645\u4e0a\u63d0\u793a\u4e86\u5faa\u73af\u7684\u5199\u6cd5\\n\\n\u4e0b\u9762\u7ed9\u51fa\u4e2a\u4eba\u5b9e\u73b0\uff1a\\n\\n```c\\n#include \\"kernel/stat.h\\"\\n#include \\"kernel/types.h\\"\\n#include \\"user/user.h\\"\\nint main() {\\n  int curNumber = -1;\\n  int p[2];\\n  pipe(p);\\n\\n  int cnt = 0;\\n  int div = 2;\\n\\n  if (fork() == 0) {\\n    close(0);\\n    dup(p[0]);\\n    close(p[0]);\\n    close(p[1]);\\n\\n    int newpipe[2];\\n    int ret = 0;\\n    int flag = 0; // if there are primes in the pipe.\\n\\n    // now pipe input is fd: 0\\n    while (1) {\\n      ret = read(0, &curNumber, sizeof(int));\\n      //   fprintf(1, \\"cnt=%d, curNumber=%d\\\\n\\", cnt, curNumber);\\n      //   all commented fprintf are some log info\\n      cnt++;\\n      if (cnt == 1) {\\n        div = curNumber; // the prime to div\\n        pipe(newpipe); // new pipe\\n      }\\n      if (ret == 0) {\\n        // the parent process has written all the numbers and exit\\n        if (flag == 0) {\\n          // no prime left\\n          // fprintf(1, \\"over\\\\n\\");\\n          close(p[0]);\\n          close(p[1]);\\n          close(newpipe[0]);\\n          close(newpipe[1]);\\n          break;\\n        } else if (fork() == 0) {\\n          // the new child process(next stage)\\n          // reset cnt and flag\\n          cnt = 0;\\n          flag = 0;\\n\\n          close(0);\\n          dup(newpipe[0]);\\n          close(newpipe[0]);\\n          close(newpipe[1]);\\n        } else {\\n          close(0); // release the pipe and process\\n          close(1);\\n          close(p[0]);\\n          close(p[1]);\\n          wait(0); // wait for the latest process to exit, a wait \\"stack\\"\\n          exit(0);\\n        }\\n      } else {\\n        if (cnt == 1) {\\n          // fprintf(1, \\"process: %d\\\\n\\", getpid());\\n          fprintf(1, \\"prime %d\\\\n\\", curNumber);\\n        }\\n        if (curNumber % div != 0) {\\n          write(newpipe[1], &curNumber, sizeof(int));\\n          flag = 1;\\n        }\\n      }\\n    }\\n  }\\n\\n  close(p[0]);\\n  for (int i = 2; i <= 35; i++) {\\n    write(p[1], &i, sizeof(int));\\n  }\\n  close(p[1]);\\n  wait(0);\\n  exit(0);\\n}\\n```\\n\\n\u5b9e\u9645\u4e0a\u662f\uff0c\u5148\u521b\u5efa pipe\uff0c\u7136\u540e\u628a\u6570\u636e\u653e\u5728 pipe \u91cc\u9762\uff0c\u7b49\u5230 read \u8fd4\u56de\u4e00\u4e2a 0\uff08\u7236\u8fdb\u7a0b\u5199\u5b8c\uff0c\u7ba1\u9053\u8bfb\u5b8c\uff0c\u7ba1\u9053\u5199\u7aef\u5df2\u7ecf\u6ca1\u6709\u5f15\u7528\uff09\u7684\u65f6\u5019\uff0c\u53bb fork \u4e00\u4e2a\u8fdb\u7a0b\uff0c\u7136\u540e\u201c\u627f\u63a5\u201d\u8fd9\u4e2a\u7ba1\u9053\u7684\u6570\u636e\\n\\nfind:\\n\\n\u6839\u636e\u5b83\u7684 hint \u53bb\u770b ls.c\uff0c\u4f9d\u846b\u82a6\u753b\u74e2\u5373\u53ef\\n\\nxargs\uff1a\\n\\n\u4e5f\u662f\u7406\u89e3\u5c31\u4e0d\u96be\uff0c\u6ce8\u610f\u4e0d\u9700\u8981\u81ea\u5df1\u5199\u7ba1\u9053\u548c\u6267\u884c\u5206\u8bcd\u4e4b\u7c7b\uff0c\u53ea\u9700\u8981\u8bfb\u8f93\u5165\u5373\u53ef\\n\\n---\\n\\n### Chapter 2\\n\\n> An operating system must fulfill three requirements: multiplexing, isolation and interaction\\n\\nxv6 runs on a multi-core RISC-V microprocessor and is written in \\"LP64\\"C\\n\\nThe CPU in a complete computer is surrounded by support hardware, **much of it in the form of I/O interfaces**\\n\\nin xv6, this includes a RAM, a ROM containg boot code, a serial connection to the user\'s board/screen, and a disk for storage\\n\\n#### 2.1 Abstracting physical resources\\n\\nwhy?\\n\\n\u4e3a\u4ec0\u4e48\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u505a\u6210\u4e00\u4e2a\u5e93\uff1f\u2014\u2014\u4e8b\u5b9e\u4e0a\u5728\u5d4c\u5165\u5f0f\u548c\u4e00\u4e9b\u5b9e\u65f6\u7cfb\u7edf\u91cc\u9762\u662f\u8fd9\u6837\u7684\\n\\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u8981\u63d0\u4f9b\u5f3a\u9694\u79bb\u6027\\n\\n> Such a cooperative time-sharing scheme may be OK if all applications trust each other and have no [bugs.It](http://bugs.It)\'s more typical for applications to not trust each other, and to have bugs\\n\\n\u4e3a\u4e86\u5b9e\u73b0\u5f3a\u9694\u79bb\u6027\uff0c\u907f\u514d\u7a0b\u5e8f\u5bf9\u4e8e\u786c\u4ef6\u8d44\u6e90\u7684\u76f4\u63a5\u8bbf\u95ee\u662f\u5f88\u6709\u5e2e\u52a9\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981**\u5c06 resource \u62bd\u8c61\u6210 service**\\n\\n\u4f8b\u5982\u5728 Unix \u91cc\u9762\uff0c\u7a0b\u5e8f\u5bf9\u78c1\u76d8\u6ca1\u6709\u76f4\u63a5\u7684\u6982\u5ff5\uff0c\u8bfb\u5199\u662f\u901a\u8fc7\u6587\u4ef6\u7cfb\u7edf\u548c pathname \u5b8c\u6210\u7684\uff1b\u7a0b\u5e8f\u5bf9\u4e8e CPU \u548c\u65f6\u5206\u5171\u4eab\u6ca1\u6709\u76f4\u63a5\u7684\u6982\u5ff5\uff0c\u8fd9\u90e8\u5206\u662f\u7531\u7cfb\u7edf\u7684\u8c03\u5ea6\u7b56\u7565\u638c\u63a7\u7684\uff1b\u7a0b\u5e8f\u5bf9\u4e8e\u7269\u7406\u5185\u5b58\u6ca1\u6709\u76f4\u63a5\u7684\u6982\u5ff5\uff0c\u5bf9\u5185\u5b58\u7684\u64cd\u4f5c\u662f\u901a\u8fc7`exec`syscall \u5b9e\u73b0\u7684\uff0c\u5982\u679c\u5185\u5b58\u7d27\u5f20\u7684\u8bdd\uff0c\u4e00\u4e9b\u8fdb\u7a0b\u7684\u6570\u636e\u751a\u81f3\u4f1a\u88ab\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\\n\\n#### 2.2 User mode, supervisor mode, and syscalls\\n\\n\u4e3a\u4e86\u7ef4\u6301\u5f3a\u9694\u79bb\u6027\uff0c\u7528\u6237\u7a0b\u5e8f\u5fc5\u7136\u4e0d\u80fd\u6539\u5199\u7cfb\u7edf\u7a0b\u5e8f\uff0c\u8fd9\u662f\u7531 CPU \u6765\u5b9e\u73b0\u7684\\n\\n\u786c\u4ef6\u4e0a\u63d0\u4f9b\u4e09\u79cd mode: machine mode, supervisor mode and user mode\\n\\n\u5176\u4e2d machine mode \u5728\u7ecf\u8fc7\u4e00\u4e9b\u521d\u59cb\u7684\u5f15\u5bfc\u548c\u914d\u7f6e\u8ba1\u7b97\u673a\u7684\u4ee3\u7801\u4e4b\u540e\u5c31\u8f6c\u5230 supervisor mode\\n\\n\u7136\u540e\uff0c\u4e5f\u662f CPU \u786c\u4ef6\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7279\u6743\u6307\u4ee4\uff0c\u5982\u679c\u5728\u7528\u6237\u6001\u6267\u884c\u4e86\u7279\u6743\u6307\u4ee4\u5c31\u4f1a\\n\\n> \\"then the CPU doesn\'t execute the instruction, but switch to supervisor-mode code that can terminate the application\\"\\n\\n\u66f4\u5177\u4f53\u6765\u8bf4\uff0cCPU \u4f1a\u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38\uff0c\u7136\u540e\u4f1a\u53d1\u751f\u4e2d\u65ad\uff0c\u6839\u636e\u4e2d\u65ad\u5411\u91cf\u8868\uff0c\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u4ee3\u7801\u5904\u6267\u884c\\n\\nQ\uff1a\u4ee3\u7801\u600e\u4e48\u77e5\u9053\u8981\u7ec8\u6b62\u54ea\u4e2a\u8fdb\u7a0b\u5462\uff1f\\n\\nA\uff1aRISCV \u4e4b\u4e2d\u6709\u4e00\u5806\u4e2d\u65ad\u76f8\u5173\u7684\u5bc4\u5b58\u5668\uff0c\u5728 xv6 \u8fd9\u79cd\u6a21\u62df\u5668\u4e4b\u4e2d\u662f stvec, sepc, scause,stval......\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4fdd\u5b58\u4e86\u4e2d\u65ad\u53d1\u751f\u7684\u5730\u5740\uff0c\u4e2d\u65ad\u7684\u539f\u56e0\uff08\u4e2d\u65ad\u7c7b\u578b+\u7f16\u53f7\uff09\uff0c\u4e2d\u65ad\u5904\u7406\u5668\u72b6\u6001\u4fe1\u606f,.....\u8fd9\u662f\u5176\u4e00\uff1b\u4e2d\u65ad\u5185\u90e8\u4e00\u822c\u4e0d\u53d1\u751f\u8fdb\u7a0b\u8c03\u5ea6\uff08\u4fdd\u8bc1\u4e86\u8fdb\u7a0b\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff09\uff0c\u800c\u64cd\u4f5c\u7cfb\u7edf\u662f\u77e5\u9053\u5f53\u524d\u8fdb\u7a0b\u7684\uff08xv6 \u4e4b\u4e2d proc.c \u7684 myproc\uff09\\n\\n> \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5728\u5904\u7406\u4e2d\u65ad\u7684\u8fc7\u7a0b\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u884c\u8fdb\u7a0b\u8c03\u5ea6\u3002\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff08ISR\uff09\u7684\u76ee\u7684\u662f\u5feb\u901f\u54cd\u5e94\u786c\u4ef6\u4e8b\u4ef6\uff0c\u5982 I/O \u5b8c\u6210\u3001\u5b9a\u65f6\u5668\u5230\u671f\u7b49\u3002\u4e3a\u4e86\u4fdd\u6301\u7cfb\u7edf\u7684\u54cd\u5e94\u6027\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u9700\u8981\u5c3d\u53ef\u80fd\u77ed\u4e14\u9ad8\u6548\uff0c\u4ee5\u4fbf\u5c3d\u5feb\u5b8c\u6210\u4e2d\u65ad\u5904\u7406\u5e76\u8fd4\u56de\u5230\u88ab\u4e2d\u65ad\u7684\u8fdb\u7a0b\u3002\\n>\\n> \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\uff0cCPU \u5904\u4e8e\u5185\u6838\u6a21\u5f0f\uff08\u6216\u79f0\u4e3a\u7279\u6743\u6a21\u5f0f\uff09\uff0c\u6b64\u65f6\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6682\u505c\u5f53\u524d\u7528\u6237\u8fdb\u7a0b\u7684\u6267\u884c\uff0c\u4fdd\u5b58\u5176\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\u5728\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\uff0c\u5176\u4ed6\u8fdb\u7a0b\u7684\u8c03\u5ea6\u548c\u6267\u884c\u88ab\u6682\u505c\uff0c\u76f4\u5230\u4e2d\u65ad\u5904\u7406\u5b8c\u6210\u3002\\n>\\n> \u4e00\u65e6\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6062\u590d\u4e4b\u524d\u88ab\u4e2d\u65ad\u7684\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u8be5\u8fdb\u7a0b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u4e0a\u4e0b\u6587\u5207\u6362\uff08Context Switching\uff09\uff0c\u5b83\u6d89\u53ca\u5230\u5c06 CPU \u7684\u63a7\u5236\u6743\u4ece\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5207\u6362\u56de\u7528\u6237\u8fdb\u7a0b\u3002\\n>\\n> \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4\u8f83\u957f\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u7cfb\u7edf\u7684\u5b9e\u65f6\u6027\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u91c7\u7528\u4e2d\u65ad\u5d4c\u5957\uff08Nested Interrupts\uff09\u6216\u4f7f\u7528\u8f6f\u4e2d\u65ad\uff08Soft Interrupts\uff09\u7b49\u6280\u672f\u6765\u5904\u7406\u66f4\u590d\u6742\u7684\u4e2d\u65ad\u5904\u7406\u903b\u8f91\uff0c\u540c\u65f6\u5141\u8bb8\u5176\u4ed6\u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c\u3002\u4f46\u8fd9\u4e9b\u6280\u672f\u901a\u5e38\u7528\u4e8e\u7279\u5b9a\u7684\u573a\u666f\uff0c\u5982\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08RTOS\uff09\u6216\u9700\u8981\u5904\u7406\u5927\u91cf\u4e2d\u65ad\u7684\u7cfb\u7edf\u3002\u5728\u5927\u591a\u6570\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4e2d\u65ad\u5904\u7406\u4ecd\u7136\u662f\u4e00\u4e2a\u5feb\u901f\u4e14\u4e0d\u6d89\u53ca\u8fdb\u7a0b\u8c03\u5ea6\u7684\u8fc7\u7a0b\u3002\\n\\n\u5728 Linux \u4e4b\u4e2d\uff0c\u4e2d\u65ad\u53ef\u4ee5\u88ab\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4e2d\u65ad\u4e2d\u65ad\uff0c\u5f62\u6210\u4e2d\u65ad\u5d4c\u5957\\n\\n> Linux \u5c06\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5206\u4e3a\u4e0a\u4e0b\u4e24\u90e8\u5206\uff0c\u9700\u8981\u7d27\u6025\u5904\u7406\u7acb\u5373\u6267\u884c\u7684\u5f52\u4e3a\u4e0a\u534a\u90e8\uff0c\u4e0d\u90a3\u4e48\u7d27\u6025\u7684\u5f52\u4e3a\u4e0b\u534a\u90e8\u3002\\n>\\n> \u8fd9\u4fbf\u6d89\u53ca\u5230\u4e86\u5f00\u5173\u4e2d\u65ad\u7684\u95ee\u9898\u3002\u5f00\u4e2d\u65ad\uff0c\u5373 EFLAGS \u7684 IF \u4f4d\u7f6e 1\uff0c\u8868\u793a\u5141\u8bb8\u54cd\u5e94\u4e2d\u65ad\uff1b\u5173\u4e2d\u65ad\uff0c\u5373 EFLAGS \u7684 IF \u4f4d\u7f6e 0\uff0c\u8868\u793a\u4e0d\u5141\u8bb8\u54cd\u5e94\u4e2d\u65ad\u3002\\n>\\n> \\\\*\\\\*1\u3001\\\\*\\\\*\u4e0a\u534a\u90e8\u5206\u662f\u523b\u4e0d\u5bb9\u7f13\u7684\uff0c\u9700\u8981\u7acb\u5373\u6267\u884c\u7684\u90e8\u5206\uff0c\u6240\u4ee5\u8981\u5728\u5173\u4e2d\u65ad\u7684\u72b6\u6001\u4e0b\u6267\u884c\u3002\\n>\\n> \\\\*\\\\*2\u3001\\\\*\\\\*\u800c\u4e0b\u534a\u90e8\u5206\u4e0d\u90a3\u4e48\u7d27\u6025\uff0c\u5728\u5f00\u4e2d\u65ad\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\uff0c\u5982\u679c\u6b64\u65f6\u6709\u65b0\u7684\u4e2d\u65ad\u53d1\u751f\uff0c\u5f53\u524d\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4fbf\u4f1a\u6362\u4e0b CPU\uff0cCPU \u4f1a\u53e6\u5bfb\u65f6\u95f4\u91cd\u65b0\u8c03\u5ea6\uff0c\u5b8c\u6210\u6574\u4e2a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u3002\\n\\n\u800c\u5bf9\u4e8e\u8fd9\u6837\u7684\u4e2d\u65ad\u5d4c\u5957\uff0c\u5b9e\u9645\u4e0a\u662f\u4fdd\u5b58\u4e86\u524d\u9762\u4e2d\u65ad\u7684\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u4e2d\u65ad\u6808\uff0c\u5728\u8fc7\u7a0b\u4e4b\u4e2d\u4e0d\u4f1a\u5207\u5230\u6b63\u5e38\u8fd0\u884c\u7684\u8fdb\u7a0b\\n\\n\u7528\u6237\u7ea7\u6307\u4ee4\u6784\u6210\u4e86 user space\uff0c\u518d\u52a0\u4e0a\u7279\u6743\u7ea7\u6784\u6210\u4e86 kernel space\\n\\n\u8fd0\u884c\u518d kernel space \u7684 software \u5c31\u662f kernel\\n\\n\u7528\u6237\u7a0b\u5e8f\u4e0d\u80fd\u76f4\u63a5\u6267\u884c\u7279\u6743\u6307\u4ee4\uff0cCPU \u63d0\u4f9b\u4e86\u7279\u6b8a\u7684\u6307\u4ee4\uff08\u5728 RISCV \u91cc\u9762\u662f ecall\uff09\u6765\u5c06 user mode \u5207\u6362\u5230 supervisor mode \u5e76**enter the kernel at an entry point specified by kernel**(\u8fd9\u5c31\u662f syscall)\\n\\n\u5f53\u5207\u6362\u5230 supervisor mode \u7684\u65f6\u5019\uff0ckernel \u4f1a\u5bf9 syscall \u63d0\u4f9b\u7684 argument \u505a validation\uff0c\u4ee5\u6b64\u6765\u51b3\u5b9a\u540e\u7eed\u7684\u64cd\u4f5c\\n\\n#### 2.3 Kernel organization\\n\\nmonolithic kernel and micro kernel: \u5b8f\u5185\u6838\u548c\u5fae\u5185\u6838\\n\\nOS \u9996\u5148\u8981\u89e3\u51b3\u7684\u8bbe\u8ba1\u662f\uff0c\u6709\u591a\u5c11 OS \u7684\u90e8\u5206\u8fd0\u884c\u5728 supervisor mode?\\n\\n\u8ba9\u5168\u90e8\u7684 OS \u8fd0\u884c\u5728 supervisor mode \u4e0a\u662f\u5b8f\u5185\u6838\uff0c\u4f8b\u5982 Linux \u7684\u601d\u8def\uff0c\u597d\u5904\u662f\u6548\u7387\uff08\u4f8b\u5982\u5185\u6838\u5185\u90e8\u5404\u6a21\u5757\u4e4b\u95f4\u7684\u901a\u4fe1\u66f4\u7b80\u5355\u4e86\uff09\uff0c\u574f\u5904\u662f\u5bf9\u4ee3\u7801\u7684\u66f4\u9ad8\u8981\u6c42\uff08\u5185\u6838\u4ee3\u7801\u6570\u91cf\u7684\u81a8\u80c0\uff0c\u4e00\u65e6\u5185\u6838\u9519\u8bef\u5c31\u5fc5\u987b\u91cd\u542f\u7535\u8111\uff09\\n\\n\u65b0\u5174\u7684\u5fae\u5185\u6838\u601d\u8def\u662f OS \u628a\u6587\u4ef6\u7cfb\u7edf\u7b49\u5927\u91cf\u90e8\u5206\u4f5c\u4e3a server \u8fd0\u884c\u5728\u7528\u6237\u6001\uff0c\u53ea\u5c06\u5fc5\u8981\u7684\u5c11\u91cf\u4ee3\u7801\u548c server \u4e4b\u95f4\u901a\u4fe1\u7684\u4ee3\u7801\u653e\u5728 supervisor mode \u4e0b\u9762\u8fd0\u884c\uff0c\u8fd9\u6837\u7684\u597d\u5904\u6709\u6bd4\u5982 supervisor mode \u4e0b\u9762\u7684\u4ee3\u7801\u6b64\u65f6\u5c11\u5230\u53ef\u4ee5\u505a\u7a0b\u5e8f\u5b89\u5168\u6027\u9a8c\u8bc1\\n\\n**Fig2.2 xv6 kernel \u5404\u6587\u4ef6\u7684\u7528\u9014**\\n\\n(\u5404\u4e2a\u6587\u4ef6\u8fd1\u4f3c\u6a21\u5757\u5316\uff0c\u5404\u4e2a\u6a21\u5757\u4e4b\u95f4\u7684\u63a5\u53e3\u5b9a\u4e49\u5728 kernel/defs.h)\\n\\n#### 2.4 Code: xv6 organization\\n\\n#### 2.5 Process overview\\n\\n> The unit of isolation in xv6 (as in other Unix operating systems)is a process. The process abstraction prevents one process from wrecking or spying on other process\'s memory, CPU, fd, etc\\n\\n> The process provides the illusion to a program that it has its own private machine.(e.g own memory system(**address space**), own CPU, own disk)\\n\\nkernel/proc.h\\n\\n```c\\n// Saved registers for kernel context switches.\\nstruct context {\\n  uint64 ra;\\n  uint64 sp;\\n\\n  // callee-saved\\n  uint64 s0;\\n  uint64 s1;\\n  uint64 s2;\\n  uint64 s3;\\n  uint64 s4;\\n  uint64 s5;\\n  uint64 s6;\\n  uint64 s7;\\n  uint64 s8;\\n  uint64 s9;\\n  uint64 s10;\\n  uint64 s11;\\n};\\n\\n// Per-CPU state.\\nstruct cpu {\\n  struct proc *proc;          // The process running on this cpu, or null.\\n  struct context context;     // swtch() here to enter scheduler().\\n  int noff;                   // Depth of push_off() nesting.\\n  int intena;                 // Were interrupts enabled before push_off()?\\n};\\n\\nextern struct cpu cpus[NCPU];\\n\\n// per-process data for the trap handling code in trampoline.S.\\n// sits in a page by itself just under the trampoline page in the\\n// user page table. not specially mapped in the kernel page table.\\n// the sscratch register points here.\\n// uservec in trampoline.S saves user registers in the trapframe,\\n// then initializes registers from the trapframe\'s\\n// kernel_sp, kernel_hartid, kernel_satp, and jumps to kernel_trap.\\n// usertrapret() and userret in trampoline.S set up\\n// the trapframe\'s kernel_*, restore user registers from the\\n// trapframe, switch to the user page table, and enter user space.\\n// the trapframe includes callee-saved user registers like s0-s11 because the\\n// return-to-user path via usertrapret() doesn\'t return through\\n// the entire kernel call stack.\\nstruct trapframe {\\n  /*   0 */ uint64 kernel_satp;   // kernel page table\\n  /*   8 */ uint64 kernel_sp;     // top of process\'s kernel stack\\n  /*  16 */ uint64 kernel_trap;   // usertrap()\\n  /*  24 */ uint64 epc;           // saved user program counter\\n  /*  32 */ uint64 kernel_hartid; // saved kernel tp\\n  /*  40 */ uint64 ra;\\n  /*  48 */ uint64 sp;\\n  /*  56 */ uint64 gp;\\n  /*  64 */ uint64 tp;\\n  /*  72 */ uint64 t0;\\n  /*  80 */ uint64 t1;\\n  /*  88 */ uint64 t2;\\n  /*  96 */ uint64 s0;\\n  /* 104 */ uint64 s1;\\n  /* 112 */ uint64 a0;\\n  /* 120 */ uint64 a1;\\n  /* 128 */ uint64 a2;\\n  /* 136 */ uint64 a3;\\n  /* 144 */ uint64 a4;\\n  /* 152 */ uint64 a5;\\n  /* 160 */ uint64 a6;\\n  /* 168 */ uint64 a7;\\n  /* 176 */ uint64 s2;\\n  /* 184 */ uint64 s3;\\n  /* 192 */ uint64 s4;\\n  /* 200 */ uint64 s5;\\n  /* 208 */ uint64 s6;\\n  /* 216 */ uint64 s7;\\n  /* 224 */ uint64 s8;\\n  /* 232 */ uint64 s9;\\n  /* 240 */ uint64 s10;\\n  /* 248 */ uint64 s11;\\n  /* 256 */ uint64 t3;\\n  /* 264 */ uint64 t4;\\n  /* 272 */ uint64 t5;\\n  /* 280 */ uint64 t6;\\n};\\n\\nenum procstate { UNUSED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };\\n\\n// Per-process state\\nstruct proc {\\n  struct spinlock lock;\\n\\n  // p->lock must be held when using these:\\n  enum procstate state;        // Process state\\n  struct proc *parent;         // Parent process\\n  void *chan;                  // If non-zero, sleeping on chan\\n  int killed;                  // If non-zero, have been killed\\n  int xstate;                  // Exit status to be returned to parent\'s wait\\n  int pid;                     // Process ID\\n\\n  // these are private to the process, so p->lock need not be held.\\n  uint64 kstack;               // Virtual address of kernel stack\\n  uint64 sz;                   // Size of process memory (bytes)\\n  pagetable_t pagetable;       // User page table\\n  struct trapframe *trapframe; // data page for trampoline.S\\n  struct context context;      // swtch() here to run process\\n  struct file *ofile[NOFILE];  // Open files\\n  struct inode *cwd;           // Current directory\\n  char name[16];               // Process name (debugging)\\n};\\n```\\n\\n1. \u6bcf\u4e2a process \u6709\u81ea\u5df1\u7684 pagetable, which defines each process\'s address space\\n\\n2. At the top of the address space xv6 reserves a page for a trampoline and a map mapping the process\'s trapframe(\u8be6\u7ec6\u7684\u89e3\u91ca\u7559\u5f85 Chapter4 \u8865). Xv6 use these two pages to transition into the kernel and back;\\n\\n3. process vs thread: thread\\\\*\\\\*\u7ebf\u7a0b\u662f\u201cgive the process an illusion of its own CPU\u201d\\\\*\\\\*\u5bf9 CPU \u7684\u62bd\u8c61\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u8ba8\u8bba\u8fdb\u7a0b\u7684\u5207\u6362\u548c\u8c03\u5ea6\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u8ba8\u8bba\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4 thread \u7684\u72b6\u6001\u7684\u53d8\u5316\uff0c\u5207\u6362\u8fdb\u7a0b\u5c31\u662f\u5c06\u8fd9\u4e2a\u8fdb\u7a0b\u7684 thread \u6302\u8d77\uff08suspend\uff09\uff0c\u518d\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u67d0\u4e2a\u7ebf\u7a0b\u6267\u884c\u3002xv6 \u4e4b\u4e2d\u4e00\u4e2a process \u53ea\u6709\u4e00\u4e2a thread\uff0c\u4f46\u662f\u73b0\u4ee3\u7684\u7cfb\u7edf\u6709\u591a\u4e2a thread \u6765\u5229\u7528\u591a\u6838 cpu\uff08Linux \u7684 thread \u6982\u5ff5\u548c Windows \u53c8\u6709\u4e00\u4e9b\u4e0d\u540c\uff0c\u8fd9\u91cc\u662f Linux \u7684 thread \u6982\u5ff5\uff09\\n\\n4. \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684 kernel stack \u548c user stack\uff0c\u5f53 syscall/IO \u7b49\uff0c\u9700\u8981\u8fdb\u5165 kernel \u7684\u65f6\u5019\uff0c**\u5185\u6838\u7684\u4ee3\u7801\u653e\u5728 kernel stack \u91cc\u9762\u6267\u884c\uff0cuser stack \u662f\u7ef4\u6301\u4e0d\u52a8\u7684**\uff08\u5b9e\u9645\u4e0a\u5728 ecall \u6307\u4ee4\u53d1\u8d77\u7684\u65f6\u5019\uff0c\u4ee3\u7801\u5c31\u4e0d\u5728\u7528\u6237\u6001\u4e86\uff0c\u90a3\u6267\u884c\u4ece\u7528\u6237\u6001-&gt;\u5185\u6838\u6001\u8fd9\u90e8\u5206\u4ee3\u7801\u4e5f\u8981\u4f7f\u7528\u5bc4\u5b58\u5668\uff0c\u5982\u4f55\u4fdd\u5b58\u539f\u6709\u5bc4\u5b58\u5668\u7684\u503c\u5462\uff1f\u8fd9\u4f1a\u5728 lab4 \u4e4b\u4e2d\u8bb2\u89e3\uff0c\u5927\u4f53\u6765\u8bf4\u662f\u4f7f\u7528\u7279\u6b8a\u7684\u989d\u5916\u5bc4\u5b58\u5668\uff08\u5b58\u653e trapframe \u57fa\u5740\uff09\u548c\u5bf9\u5e94\u7684\u7279\u6b8a\u6307\u4ee4\uff0c\u5148\u628a a0 \u4e0a\u7684\u503c\u548c\u989d\u5916\u5bc4\u5b58\u5668\u7684\u503c\u505a\u4ea4\u6362\uff0c\u7136\u540e\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u53ef\u7528\u7684\u5bc4\u5b58\u5668\uff0c\u540c\u65f6\u5728\u989d\u5916\u5bc4\u5b58\u5668\u4e0a\u4fdd\u7559\u4e86\u539f\u6765\u7684\u5730\u5740\uff0c\u7136\u540e\u901a\u8fc7 a0 \u76f8\u5bf9\u5bfb\u5740\uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u503c\u4fdd\u5b58\u5728 trapframe \u7684 page \u4e0a\uff0c\u6700\u540e\u4ece\u989d\u5916\u5bc4\u5b58\u5668\u8bfb\u56de\u6765 a0 \u5e76\u4fdd\u5b58\uff09\\n\\n#### 2.6 Code: starting xv6, the first process and system call\\n\\n\u542f\u52a8 xv6 \u7684\u8fc7\u7a0b\u6982\u8ff0\uff1a\\n\\n1. When the risc-v computer powers on, it initializes itself and start boot loader in read-only memory.The boot loader load xv6 kernel into memory.(\u8fd9\u90e8\u5206\u5e94\u8be5\u662f qemu \u6a21\u62df\u7684)\\n2. in machine mode, the CPU executes xv6 at \\\\_entry(kernel/entry.S)\\n\\n```assembly\\n\\t# qemu -kernel loads the kernel at 0x80000000\\n        # and causes each CPU to jump there.\\n        # kernel.ld causes the following code to\\n        # be placed at 0x80000000.\\n.section .text\\n_entry:\\n\\t# set up a stack for C.\\n        # stack0 is declared in start.c,\\n        # with a 4096-byte stack per CPU.\\n        # sp = stack0 + (hartid * 4096)\\n        la sp, stack0\\n        li a0, 1024*4\\n\\tcsrr a1, mhartid\\n        addi a1, a1, 1\\n        mul a0, a0, a1\\n        add sp, sp, a0\\n\\t# jump to start() in start.c\\n        call start\\nspin:\\n        j spin\\n```\\n\\n\u5176\u4e2d\u6709\u4e09\u4e2a\u6ce8\u610f\u7684\u5730\u65b9\uff1a\u4e00\u662f\u4ece 0x80000000 \u5f00\u59cb\u662f\u56e0\u4e3a 0x0 \u5230 0x80000000 \u7559\u4e0b\u6765\u505a IO \u7528\u4e86\uff1b\u4e8c\u4e2a\u662f start \u51fd\u6570\u201cperforms some configuration in machine mode and then switches to supervisor mode\u201d\uff1b\u4e09\u662f\u6b64\u65f6\u9875\u8868\u662f\u88ab\u7981\u7528\u7684\uff0c\u90fd\u662f direct-mapping\\n\\nstart \u8fd8\u5e72\u4e86\u542f\u7528\u4e2d\u65ad\uff0c\u542f\u7528\u65f6\u949f\uff0c\u8bbe\u7f6e\u8fd4\u56de\u5230 main \u7b49\u64cd\u4f5c\\n\\n```assembly\\n// entry.S jumps here in machine mode on stack0.\\nvoid\\nstart()\\n{\\n  // set M Previous Privilege mode to Supervisor, for mret.\\n  unsigned long x = r_mstatus();\\n  x &= ~MSTATUS_MPP_MASK;\\n  x |= MSTATUS_MPP_S;\\n  w_mstatus(x);\\n\\n  // set M Exception Program Counter to main, for mret.\\n  // requires gcc -mcmodel=medany\\n  w_mepc((uint64)main); // \u8fd4\u56de\u5230main(\u8bbe\u7f6epc)\\n\\n  // disable paging for now.\\n  w_satp(0);\\n\\n  // delegate all interrupts and exceptions to supervisor mode.\\n  w_medeleg(0xffff);\\n  w_mideleg(0xffff);\\n  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);\\n\\n  // ask for clock interrupts.\\n  timerinit();\\n\\n  // keep each CPU\'s hartid in its tp register, for cpuid().\\n  int id = r_mhartid();\\n  w_tp(id);\\n\\n  // switch to supervisor mode and jump to main().\\n  asm volatile(\\"mret\\");\\n}\\n```\\n\\n\u7136\u540e\u8fdb\u5165\u5230 main\\n\\n```c\\n#include \\"types.h\\"\\n#include \\"param.h\\"\\n#include \\"memlayout.h\\"\\n#include \\"riscv.h\\"\\n#include \\"defs.h\\"\\n\\nvolatile static int started = 0;\\n\\n// start() jumps here in supervisor mode on all CPUs.\\nvoid\\nmain()\\n{\\n  if(cpuid() == 0){\\n    consoleinit();\\n    printfinit();\\n    printf(\\"\\\\n\\");\\n    printf(\\"xv6 kernel is booting\\\\n\\");\\n    printf(\\"\\\\n\\");\\n    kinit();         // physical page allocator\\n    kvminit();       // create kernel page table\\n    kvminithart();   // turn on paging\\n    procinit();      // process table\\n    trapinit();      // trap vectors\\n    trapinithart();  // install kernel trap vector\\n    plicinit();      // set up interrupt controller\\n    plicinithart();  // ask PLIC for device interrupts\\n    binit();         // buffer cache\\n    iinit();         // inode cache\\n    fileinit();      // file table\\n    virtio_disk_init(); // emulated hard disk\\n    userinit();      // first user process\\n    __sync_synchronize();\\n    started = 1;\\n  } else {\\n    while(started == 0)\\n      ;\\n    __sync_synchronize();\\n    printf(\\"hart %d starting\\\\n\\", cpuid());\\n    kvminithart();    // turn on paging\\n    trapinithart();   // install kernel trap vector\\n    plicinithart();   // ask PLIC for device interrupts\\n  }\\n\\n  scheduler();\\n}\\n```\\n\\n\u5148\u662f\u4e00\u4e9b\u8bbe\u7f6e\u7684\u521d\u59cb\u5316\\n\\n\u521d\u59cb\u5316\u5b8c\u6bd5\u540e\uff0c\u8c03\u7528 userinit()\u8fdb\u5165\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\\n\\n```c\\n// Set up first user process.\\nvoid\\nuserinit(void)\\n{\\n  struct proc *p;\\n\\n  p = allocproc();\\n  initproc = p;\\n\\n  // allocate one user page and copy init\'s instructions\\n  // and data into it.\\n  uvminit(p->pagetable, initcode, sizeof(initcode));\\n  p->sz = PGSIZE;\\n\\n  // prepare for the very first \\"return\\" from kernel to user.\\n  p->trapframe->epc = 0;      // user program counter\\n  p->trapframe->sp = PGSIZE;  // user stack pointer\\n\\n  safestrcpy(p->name, \\"initcode\\", sizeof(p->name));\\n  p->cwd = namei(\\"/\\");\\n\\n  p->state = RUNNABLE;\\n\\n  release(&p->lock);\\n}\\n```\\n\\n\u5176\u4e2d\\n\\n```c\\n// a user program that calls exec(\\"/init\\")\\n// od -t xC initcode\\nuchar initcode[] = {\\n  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,\\n  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,\\n  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,\\n  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,\\n  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,\\n  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,\\n  0x00, 0x00, 0x00, 0x00\\n};\\n```\\n\\n\u662f\u8fd9\u73a9\u610f\u7684\u4e8c\u8fdb\u5236\\n\\n```c\\n# Initial process that execs /init.\\n# This code runs in user space.\\n\\n#include \\"syscall.h\\"\\n\\n# exec(init, argv)\\n.globl start\\nstart:\\n        la a0, init\\n        la a1, argv\\n        li a7, SYS_exec\\n        ecall\\n\\n# for(;;) exit();\\nexit:\\n        li a7, SYS_exit\\n        ecall\\n        jal exit\\n\\n# char init[] = \\"/init\\\\0\\";\\ninit:\\n  .string \\"/init\\\\0\\"\\n\\n# char *argv[] = { init, 0 };\\n.p2align 2\\nargv:\\n  .long init\\n  .long 0\\n```\\n\\n\u7136\u540e\u901a\u8fc7\u8c03\u7528 SYS_exec \u8fdb\u884c syscall \u518d\u6b21\u8fdb\u5165\u5185\u6838\u6001\u6267\u884c init.c,\u542f\u52a8 shell,the system is up\\n\\n```c\\n// init: The initial user-level program\\n\\n#include \\"kernel/types.h\\"\\n#include \\"kernel/stat.h\\"\\n#include \\"kernel/spinlock.h\\"\\n#include \\"kernel/sleeplock.h\\"\\n#include \\"kernel/fs.h\\"\\n#include \\"kernel/file.h\\"\\n#include \\"user/user.h\\"\\n#include \\"kernel/fcntl.h\\"\\n\\nchar *argv[] = { \\"sh\\", 0 };\\n\\nint\\nmain(void)\\n{\\n  int pid, wpid;\\n\\n  if(open(\\"console\\", O_RDWR) < 0){\\n    mknod(\\"console\\", CONSOLE, 0);\\n    open(\\"console\\", O_RDWR);\\n  }\\n  dup(0);  // stdout\\n  dup(0);  // stderr\\n\\n  for(;;){\\n    printf(\\"init: starting sh\\\\n\\");\\n    pid = fork();\\n    if(pid < 0){\\n      printf(\\"init: fork failed\\\\n\\");\\n      exit(1);\\n    }\\n    if(pid == 0){\\n      exec(\\"sh\\", argv);\\n      printf(\\"init: exec sh failed\\\\n\\");\\n      exit(1);\\n    }\\n\\n    for(;;){\\n      // this call to wait() returns if the shell exits,\\n      // or if a parentless process exits.\\n      wpid = wait((int *) 0);\\n      if(wpid == pid){\\n        // the shell exited; restart it.\\n        break;\\n      } else if(wpid < 0){\\n        printf(\\"init: wait returned an error\\\\n\\");\\n        exit(1);\\n      } else {\\n        // it was a parentless process; do nothing.\\n      }\\n    }\\n  }\\n}\\n```\\n\\n\u540e\u9762\u8fd8\u8981\u56de\u6765\u52a0\u6df1\u7406\u89e3\uff0c\u8fd8\u662f\u8ff7\u8ff7\u7cca\u7cca\u7684\\n\\n#### 2.7 Security Model & 2.8 Real World\\n\\n\u95f2\u804a\u6bb5\\n\\n### Chapter 3: Page tables\\n\\n#### 3.1 Paging Hardware\\n\\npage table: allow xv6 to isolate different address space to multiplex them onto a single physical memory\\n\\nxv6 performs a few tricks: mapping the same memory(a trampoline page)in several address space, and guarding kernel and user stacks with an unmapped page\\n\\nxv6: Sv39 RISCV\\n\\nFig 3.1\\n\\nVA\uff1a\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d 25 \u4f4d\u989d\u5916\u4f4d\uff08\u4e0d\u53c2\u4e0e\u8f6c\u6362\uff09\uff0c 27 \u4f4d\u9875\u8868 index, 12 \u4f4d Offset\\n\\nPTE\uff1a 10 \u4f4d\u53ef\u62d3\u5c55\u4f4d\uff0c3 \u7ea7\u9875\u8868 \\\\* 9 \u4f4d index\uff08512^3^\u6761\uff09,\u6bcf\u6761 PTE 44 \u4f4d PPN\uff08Physical Page Number\uff09\uff0c10 \u4f4d\u6807\u5fd7\u4f4d Flag\\n\\nPA: 44 \u4f4d PPN+12 \u4f4d Offset\\n\\n\u4e09\u7ea7\u9875\u8868\uff1a\\n\\nPros:\u7a7a\u95f4\u6548\u7387\uff0c\u53ea\u6709\u88ab\u4f7f\u7528\u7684\u9875\uff08VALID \u6807\u5fd7\u4f4d\u4e3a 1\uff09\uff0c\u624d\u4f1a\u88ab\u5206\u914d\u5185\u5b58\uff0c\u76f8\u5f53\u4e8e\u9875\u8868\u6811\u4e0a\uff0c\u8bb8\u591a\u53f6\u5b50\u7684\u6df1\u5ea6\u90fd\u53ea\u6709 1 \u6216 2\\n\\nCons:\u4e00\u6761\u6307\u4ee4\u5fc5\u987b\u5728 PTE \u4e4b\u4e2d\u8d70\u4e09\u6b21\uff08\u901a\u8fc7\u79fb\u4f4d\u64cd\u4f5c\uff09\uff0c\u964d\u4f4e\u4e86\u4e00\u90e8\u5206\u65f6\u95f4\u6548\u7387\\n\\n\u8865\u507f\uff1aTLB\uff08Translation Look-Aside Buffer\uff09\\n\\nimportant Fig 3.2 detail\\n\\n\u544a\u8bc9\u786c\u4ef6\u542f\u7528\u9875\u8868\uff1akernel \u628a\u6700\u9ad8\u7ea7\u9875\u8868\u7684\u57fa\u5740\u5b58\u5165 satp register\\n\\n\u6bcf\u4e2a CPU \u90fd\u6709\u81ea\u5df1\u7684 satp\uff0c\u6240\u4ee5\u4e0d\u540c CPU \u53ef\u4ee5\u8fd0\u884c\u4e0d\u540c\u7684\u8fdb\u7a0b\uff08\u5404\u81ea\u6709\u81ea\u5df1\u7684\u5730\u5740\u7a7a\u95f4\u548c\u9875\u8868\uff09\\n\\n\u6bcf\u4e2a process(\u5305\u62ec\u5185\u6838)\u8bfb\u5199\u7684\u90fd\u662f VA\uff0cVA \u901a\u8fc7**\u8fdb\u7a0b\u81ea\u5df1\u7684\u9875\u8868**\u8f6c\u6362\u6210 PA\uff0c\u518d\u53bb\u8bfb\u5199\u5b9e\u9645\u7684\u7269\u7406\u5b58\u50a8\\n\\n\u5185\u6838\u5e94\u8be5\u4fdd\u6301\u5bf9\u6574\u4e2a\u7269\u7406\u5b58\u50a8\u7684\u64cd\u63a7\u6743\uff0c\u6240\u4ee5\u6574\u4e2a\u7269\u7406\u7684\u5b58\u50a8\u7a7a\u95f4\u90fd\u88ab\u6620\u5c04\u5230\u4e86\u5185\u6838\u7684\u9875\u8868\u4e4b\u4e2d\uff0c\u800c xv6 \u4e3a\u4e86\u5b9e\u73b0\u7684\u7b80\u6d01\u6027\uff0c\u57fa\u672c\u90fd\u662f\u76f4\u63a5\u6620\u5c04\uff0c\u4e5f\u5c31\u662f VA=PA\uff0c\u8fd9\u6837**\u5728\u5185\u6838\u4e4b\u4e2d**\u8bfb\u5199 VA \u5c31\u7b49\u540c\u4e8e\u8bfb\u5199 PA \u4e86\u3002\\n\\n#### 3.2 Kernel address space\\n\\n\u5185\u6838\u603b\u8981\u77e5\u9053\u5404\u4e2a\u8bbe\u5907\u7684 PA \u548c\u5b83\u81ea\u5df1\u9875\u8868 VA \u7684\u5173\u7cfb\uff0c\u8fd9\u4e2a\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u914d\u7f6e\u6216\u8005\u7ea6\u5b9a\uff08QEMU \u7684\u914d\u7f6e\uff09\\n\\n\u8fd9\u91cc\\n\\n> The kernel gets at RAM and memory-mapped device registers using \\"direct mapping\\".That is, mapping the resources at virtual addresses that are equal to physical addresses\\n\\n\u7b80\u5316\u5185\u6838\u8bfb\u5199\u7684\u4ee3\u7801\uff0c\u6bd4\u5982 fork \u5b9e\u9645\u4e0a\u7ed9\u5b50\u8fdb\u7a0b\u7533\u8bf7\u5230\u7684\u662f PA\uff08\u7269\u7406\u5185\u5b58\uff09\uff0c\u4f46\u662f\u5185\u6838\u4e4b\u540e\u5c31\u76f4\u63a5\u628a\u5b83\u5f53\u4f5c\u662f\u865a\u62df\u5730\u5740\u5728\u5bf9\u4ed6\u8fdb\u884c\u4ee3\u7801\u64cd\u4f5c\u4e86\\n\\n\u5728 fork \u8c03\u7528\u7684 uvmcopy \u4e4b\u4e2d\\n\\n```c\\n        if ((mem = kalloc()) == 0)\\n            goto err; // \u8fd9\u91cc\u7684mem\u662fPA\uff08kalloc\u8fd4\u56de\u7684\u5730\u5740\uff09\\n        memmove(mem, (char *)pa, PGSIZE); // \u8fd9\u91cc\u5c31\u76f4\u63a5\u628amem\u5f53VA\u4e86(\u4e00\u4e2a\u8fdb\u7a0b\u81ea\u5df1\u201c\u770b\u5230\u201d\u7684\u662fVA)\\n```\\n\\n\u4e24\u4e2a\u4e0d\u662f\u76f4\u63a5\u6620\u5c04\u7684\u5185\u5b58\u9875\\n\\n- The trampoline page: \u5b83\u5728\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u4e0a\u90fd\u5360\u636e\u4e86\u6700\u9876\u7aef\u7684\u4e00\u9875\uff0c\u6240\u4ee5\u5728\u5185\u6838\u7684 VA \u5730\u5740\u7a7a\u95f4\u4e4b\u4e2d\uff0c\u5b83\u4e24\u6b21\u6620\u5c04\u5230\u540c\u4e00\u4e2a PA,\u4e00\u6b21\u662f\u5185\u6838\u7684 kernel text \u4ee3\u7801\u6bb5\uff0c\u53e6\u4e00\u6b21\u662f kernel \u7684 VA \u7684\u6700\u9876\u7aef\\n\\n- The guard page: \u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u6838\u6808\u4e0b\u9762\u6709\u4e00\u4e2a guard page\uff0c\u5b83\u7684 PTE_V \u8bbe\u7f6e\u4e3a\u4e86 0\uff0c\u9632\u6ea2\u51fa\uff0c\u5982\u679c\u6808\u6ea2\u51fa\u4e86\u5c31\u4f1a\u4ea7\u751f pagefault\\n\\n\u6b64\u65f6\u5185\u6838\u6808\u5bf9\u5e94\u7684 PA \u4e5f\u88ab\u4e24\u4e2a VA \u6620\u5c04\uff0c\u4e00\u4e2a\u662f kernel data \u6bb5\u7684\u76f4\u63a5\u6620\u5c04\uff1b\u53e6\u4e00\u4e2a\u662f VA \u9876\u90e8\u7684 Kstack \u6bb5\\n\\n\u4e3a\u4ec0\u4e48\u8981\u7ef4\u6301\u8fd9\u6837\u4e24\u4e2a\u6620\u5c04\u662f\u56e0\u4e3a\uff0c\u5982\u679c\u53ea\u6709 kernel data \u6bb5\u7684\u76f4\u63a5\u6620\u5c04\uff0c\u90a3\u6211\u4eec\u60f3\u8981\u52a0\u4e0a guard page\uff0c\u5c31\u5fc5\u987b\u8981\u5c06\u8fd9\u4e00\u6bb5\u8bbe\u7f6e\u6210 invalid\uff0c\u4e5f\u5c31\u662f\u53d6\u6d88 guard page \u7684\u6620\u5c04\uff1b\u90a3\u83ab\u540d\u5176\u5999\u5730\uff0cRAM \u91cc\u9762\u7684\u67d0\u90e8\u5206\u7269\u7406\u5185\u5b58\u5bf9\u5185\u6838\u5c31\u4e0d\u80fd\u7528\u4e86\\n\\n\u6240\u4ee5\u8981\u6263\u6263\u641c\u641c\uff0c\u4e24\u4e2a\u6620\u5c04\u4e4b\u540e\uff0c\u5185\u6838\u7684\u4fdd\u62a4\u9875\u4e0d\u653e\u5728\u5b9e\u9645\u7684 kernel data \u6bb5\uff0c\u800c\u662f\u653e\u5728 VA \u7684 top \u6bb5\uff0c\u800c\u5e76\u6ca1\u6709\u5b9e\u9645\u201c\u5bf9\u5e94\u201d\u7684\u7269\u7406\u9875\uff0c\u7701\u4e0b\u4e86\u4e0d\u5c11\u9875\u9762\u7684\u5185\u5b58\uff0c\u4e5f\u4fdd\u8bc1\u4e86\u7269\u7406\u9875\u7684\u8fde\u7eed\u6027\\n\\n\uff08\u672c\u8d28\u4e0a\u5c31\u662f\uff1a\\n\\n1. \u60f3\u4fdd\u8bc1 kernel data/text \u6bb5\u662f\u76f4\u63a5\u6620\u5c04\u7684\\n\\n2. \u60f3\u4fdd\u8bc1\u7269\u7406\u5185\u5b58 RAM \u7684\u4f7f\u7528\u662f\u8fde\u7eed\u7684\\n\\n3. \u60f3\u8981\u52a0 guard page\\n\\n\u5982\u679c\u6ca1\u6709\u4e24\u6b21\u6620\u5c04\uff0c12 \u548c 3 \u4e0d\u80fd\u540c\u65f6\u6210\u7acb\uff1b\\n\\n\uff09\\n\\n#### 3.3 Code:creating an address space\\n\\nkvm \u76f8\u5173\u7684\u51fd\u6570\u5efa\u7acb\u5728 kernel \u7684\u76f4\u63a5\u6620\u5c04\u4e4b\u4e0a\\n\\n\u4f8b\u5982 walk \u91cc\u9762\\n\\n```c\\n            if (!alloc || (pagetable = (pde_t *)kalloc()) == 0) // \u8fd9\u91cc\u7684pagetable\u662fPA\\n                return 0;\\n            memset(pagetable, 0, PGSIZE); // \u4f20\u8fdb\u5165\u5f53\u51fd\u6570\u53c2\u6570\u7684\u662fVA\\n```\\n\\n\u4ec0\u4e48\u65f6\u5019\u9875\u8868\u88ab\u542f\u7528\u5462\uff1fkvminithart \u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\\n\\n```c\\n    kinit();         // physical page allocator\\n    kvminit();       // create kernel page table\\n    kvminithart();   // turn on paging\\n```\\n\\n\u4e5f\u5c31\u662f\u6211\u4eec\u5148 kvminit()\u521d\u59cb\u5316 kernel pagetable(\u628a\u6574\u4e2a RAM \u5168\u90e8\u6620\u5c04\u5230 kernel pagetable)\\n\\n\u5bf9\u7167\u4e0a\u9762\u7684\u56fe\u7406\u89e3\u4e0b\u9762\u7684\u4ee3\u7801\\n\\n```c\\n\\n/*\\n * the kernel\'s page table.\\n */\\npagetable_t kernel_pagetable;\\n\\nextern char etext[]; // kernel.ld sets this to end of kernel code.\\n\\nextern char trampoline[]; // trampoline.S\\n\\n/*\\n * create a direct-map page table for the kernel.\\n */\\nvoid kvminit() {\\n    kernel_pagetable = (pagetable_t)kalloc();\\n    memset(kernel_pagetable, 0, PGSIZE);\\n\\n    // uart registers\\n    kvmmap(UART0, UART0, PGSIZE, PTE_R | PTE_W);\\n\\n    // virtio mmio disk interface\\n    kvmmap(VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);\\n\\n    // CLINT\\n    kvmmap(CLINT, CLINT, 0x10000, PTE_R | PTE_W);\\n\\n    // PLIC\\n    kvmmap(PLIC, PLIC, 0x400000, PTE_R | PTE_W);\\n\\n    // map kernel text executable and read-only.\\n    kvmmap(KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R | PTE_X);\\n\\n    // map kernel data and the physical RAM we\'ll make use of.\\n    kvmmap((uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext,\\n           PTE_R | PTE_W);\\n\\n    // map the trampoline for trap entry/exit to\\n    // the highest virtual address in the kernel.\\n    kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);\\n}\\n```\\n\\n\u7136\u540e\u542f\u7528\u9875\u8868\\n\\n```c\\nvoid kvminithart() {\\n  w_satp(MAKE_SATP(kernel_pagetable)); // write the stap register\\n  sfence_vma(); // clean TLB, \u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u5bf9RISCV\u6307\u4ee4sfence.vma\u7684\u6a21\u62df\\n}\\n```\\n\\n\u5b9e\u9645\u7684 RISCV CPU \u8fd8\u4f1a\u6709\u4e00\u4e9b\u5730\u5740\u7a7a\u95f4\u6807\u8bc6\u7b26\uff0c\u4f7f\u8fdb\u7a0b\u5207\u6362\u7684\u65f6\u5019\u4e0d\u9700\u8981\u51b2\u6d17\u6574\u4e2a TLB\\n\\n#### 3.4 Physical memory allocation\\n\\n#### 3.5 Code: Physical memory allocator\\n\\n\u7ef4\u62a4\u4e86\u4e00\u4e2a struct run \u7684\u94fe\u8868 freelist\uff0c\u7136\u540e\u6bcf\u6b21\u5206\u914d\u5c31\u662f\u53d6\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0cfree \u5c31\u662f\u5c06\u8be5\u9875\u8fde\u63a5\u5230\u94fe\u8868\u672b\u5c3e\\n\\n\u6bcf\u6b21\u5206\u914d\u548c free \u90fd\u4f1a acquire spinlock\uff0c\u6765\u7ef4\u6301\u5e76\u53d1\u7684 robust\\n\\n#### 3.6 Process address space\\n\\n\u8bb2\u5b8c\u4e86\u5185\u6838\u7a7a\u95f4\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u8bb2 user space,\u4e5f\u5c31\u662f\u5404\u4e2a\u7528\u6237\u8fdb\u7a0b\\n\\n\u4e3b\u8981\u662f\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u5728 xv6 \u4e4b\u4e2d\u5c31\u662f\u7b80\u5355\u7684 single page \u7684\u5b9e\u73b0\uff0c\u53c2\u89c1 exec.c\\n\\n\u8fd9\u4e2a page \u4e0a\u4ece\u9876\u5230\u5e95\u653e\u7740\\n\\n- argument 0\\\\~N (N \u4e2a\u5b57\u7b26\u4e32\uff0cargv[]\u7684\u503c)\\n- address of argument \uff08N \u4e2a pointer\uff09\\n- argc\\n- return PC\\n- ...\uff08\u5176\u4ed6\uff09\\n\\n\u7136\u540e\u8fd9\u4e2a stack page \u4e0b\u9762\u8fd8\u6709\u4e00\u4e2a guard page\uff0c\u5b83\u7684 PTE_V \u662f 0\uff0c\u7528\u4e8e\u5728 stack overflow \u7684\u65f6\u5019\u4ea7\u751f pagefault\\n\\nQ\uff1a\u4e5f\u5c31\u662f xv6 \u7684\u7528\u6237\u7a0b\u5e8f\u7684\u6808\u7684\u5927\u5c0f\u6700\u591a\u53ea\u6709 4kb?\\n\\nA\uff1a\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u662f\u7684\\n\\n\u5728\u7528\u6237\u7a0b\u5e8f\u91cc\u9762\u52a0\u4e0a\\n\\n```c\\n    int a[100000];\\n    for (int i = 0; i < 100000; i++)\\n        a[i] = i;\\n    fprintf(1, \\"a:alloc %d pages.\\\\n\\", sizeof(a) / PGSIZE);\\n    fprintf(1, \\"the address of a is %p\\", a);\\n```\\n\\n\u5c31\u4f1a\u51fa\u73b0\\n\\n```bash\\n$ sleep\\nusertrap(): unexpected scause 0x000000000000000f pid=4\\n            sepc=0x000000000000002e stval=0xfffffffffffa1540\\n```\\n\\nscause \u5bc4\u5b58\u5668\u8bb0\u5f55\u4e86\u8fd9\u6b21\u5f02\u5e38\u7684\u539f\u56e0\\n\\n\u67e5\u8be2[riscv \u624b\u518c](https://raw.githubusercontent.com/riscv/virtual-memory/main/specs/663-Svpbmt.pdf)\u53ef\u77e5, 000f \u662f Store/AMO pagefault\uff0c\u9a8c\u8bc1\u4e86\u6211\u4eec\u6808\u6ea2\u51fa\u7684\u731c\u60f3\\n\\n> AMO page fault\uff08Atomic Memory Operation page fault\uff09\u662f\u6307\u5728 RISC-V \u67b6\u6784\u4e2d\uff0c\u5f53\u6267\u884c\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\uff08\u5982`amoadd`\u3001`amoxor`\u7b49\uff09\u65f6\uff0c\u7531\u4e8e\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u7269\u7406\u9875\u6ca1\u6709\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff08\u5373\u6ca1\u6709\u5bf9\u5e94\u7684\u7269\u7406\u9875\u5e27\uff09\uff0c\u6216\u8005\u8bbf\u95ee\u7684\u9875\u6ca1\u6709\u5199\u6743\u9650\uff0c\u800c\u89e6\u53d1\u7684\u9875\u9519\u8bef\uff08Page Fault\uff09\u5f02\u5e38\u3002\\n>\\n> \u5728 RISC-V \u4e2d\uff0c\u539f\u5b50\u5185\u5b58\u64cd\u4f5c\uff08AMO\uff09\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5185\u5b58\u8bbf\u95ee\u6307\u4ee4\uff0c\u5b83\u5141\u8bb8\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\u540c\u6b65\u5730\u6267\u884c\u539f\u5b50\u64cd\u4f5c\uff0c\u5982\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4ea4\u6362\u7b49\uff0c\u800c\u4e0d\u9700\u8981\u989d\u5916\u7684\u540c\u6b65\u673a\u5236\u3002\u8fd9\u4e9b\u64cd\u4f5c\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u9501\u548c\u5176\u4ed6\u5e76\u53d1\u63a7\u5236\u7ed3\u6784\u3002\\n>\\n> \u5f53\u5904\u7406\u5668\u5c1d\u8bd5\u6267\u884c AMO \u6307\u4ee4\u65f6\uff0c\u5982\u679c\u9047\u5230\u4ee5\u4e0b\u60c5\u51b5\u4e4b\u4e00\uff0c\u5c31\u4f1a\u89e6\u53d1 AMO page fault\uff1a\\n>\\n> 1. **\u865a\u62df\u5730\u5740\u672a\u6620\u5c04**\uff1a\u5904\u7406\u5668\u5c1d\u8bd5\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u9875\u8868\u4e2d\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u3002\\n> 2. **\u5199\u6743\u9650\u4e0d\u8db3**\uff1a\u5373\u4f7f\u865a\u62df\u5730\u5740\u5df2\u7ecf\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u4f46\u8be5\u9875\u6ca1\u6709\u5199\u6743\u9650\uff08\u5728\u9875\u8868\u9879\u4e2d\uff0c\u5199\u6743\u9650\u4f4d W \u88ab\u8bbe\u7f6e\u4e3a 0\uff09\u3002\\n>\\n> \u5728\u53d1\u751f AMO page fault \u65f6\uff0c\u5904\u7406\u5668\u4f1a\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\uff08\u5728 RISC-V \u4e2d\u79f0\u4e3a\u4e2d\u65ad\u5411\u91cf\uff09\uff0c\u64cd\u4f5c\u7cfb\u7edf\u9700\u8981\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\u3002\u5904\u7406\u7a0b\u5e8f\u4f1a\u68c0\u67e5\u5bfc\u81f4\u5f02\u5e38\u7684\u865a\u62df\u5730\u5740\uff0c\u5982\u679c\u5730\u5740\u5408\u6cd5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u4ece\u78c1\u76d8\u6216\u5176\u4ed6\u5b58\u50a8\u4ecb\u8d28\u4e2d\u52a0\u8f7d\u7f3a\u5931\u7684\u9875\u5230\u7269\u7406\u5185\u5b58\uff0c\u5e76\u66f4\u65b0\u9875\u8868\u4ee5\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002\u5982\u679c\u5730\u5740\u4e0d\u5408\u6cd5\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u7ec8\u6b62\u76f8\u5173\u8fdb\u7a0b\u3002\\n>\\n> AMO page fault \u662f RISC-V \u67b6\u6784\u4e2d\u5904\u7406\u5e76\u53d1\u548c\u540c\u6b65\u95ee\u9898\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u786e\u4fdd\u4e86\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\u539f\u5b50\u64cd\u4f5c\u7684\u6b63\u786e\u6027\u548c\u4e00\u81f4\u6027\u3002\\n\\n\u4f46\u6709\u4e2a\u5947\u602a\u7684\u5730\u65b9\uff0c\u5982\u679c\u6ca1\u6709\\n\\n```c\\n    fprintf(1, \\"the address of a is %p\\", a);\\n```\\n\\n\u8fd9\u4e00\u884c\\n\\n\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u89e6\u53d1, \u67e5\u770b\u4e86 fprintf \u5185\u90e8\uff0c\u5e76\u6ca1\u6709\u4ec0\u4e48\u5947\u602a\u7684\u5730\u65b9\\n\\n\u6000\u7591\u662f\u5982\u679c\u4e0d\u8c03\u7528 fprintf \u7684\u8bdd\uff0c\u7f16\u8bd1\u5668\u4f18\u5316\u4e86\u8fd9\u4e00\u6bb5\u65e0\u7528\u4ee3\u7801\uff1f\\n\\n#### 3.7 Code:sbrk\\n\\n\u4e0a\u9762\u56fa\u5b9a\u4e86 Stack \u662f\u4e00\u4e2a PAGE \u4e4b\u540e\u6709\u4e00\u4e2a\u597d\u5904\u5c31\u662f\u5927\u5927\u7b80\u5316\u4e86\u540e\u9762\u7684\u5185\u5b58\u5206\u914d\\n\\n\u4e4b\u524d\u770b\u5f97\u4e0d\u4ed4\u7ec6\uff0c\u6ca1\u770b\u5230\u6808\u53ea\u6709\u4e00\u9875\uff0c\u4e00\u76f4\u6ca1\u592a\u641e\u61c2\u4e3a\u5565\u5b83\u7684 growproc \u7ed9\u4e86\u4e00\u4e2a sz \u4f5c\u4e3a\u53c2\u6570\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u7684 sz\uff08\u5982\u679c\u662f\u4f20\u7edf\u7684\u6808\u4ece\u4e0a\u5f80\u4e0b\u589e\u957f\uff0c\u5806\u4ece\u4e0b\u5f80\u4e0a\u589e\u957f\u7684\u6a21\u578b\uff09\u672c\u8eab\u5c31\u4ee4\u4eba\u8ff7\u60d1\uff0callocproc \u7684\u65f6\u5019\u5c1a\u53ef\u89e3\u91ca\u4e3a\u662f\u5806+\u6808+\u5176\u4ed6\uff0cdealloc \u7684\u65f6\u5019\u5982\u4f55\u6839\u636e\u51cf\u5c0f\u7684 sz \u76f4\u63a5\u786e\u5b9a\u91ca\u653e\u7684\u9875\u5462\uff1f\u8fd8\u6709\u5c31\u662f\u5b83\u7684 sz \u662f\u5982\u4f55\u52a8\u6001\u76d1\u63a7\u6808\u7684\u589e\u957f\u7684\u5462\uff1f\\n\\n\u7b54\u6848\u662f\u6839\u672c\u6ca1\u6709\u76d1\u63a7\uff0c\u4e0a\u9762\u7684 text \u6bb5\u662f\u4ee3\u7801\u6587\u672c\uff0cdata \u6bb5\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u90fd\u662f\u7f16\u8bd1\u65f6\u786e\u5b9a\u7684\u4e1c\u897f\uff0c\u800c stack \u53ea\u6709\u4e00\u4e2a page\uff0cguard page \u4e5f\u53ea\u6709\u4e00\u4e2a page\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd0\u884c\u524d\uff0c\u5806\u5e95\u90e8\u6709\u591a\u5c11\u4e2a page \u5df2\u7ecf\u88ab\u6307\u5b9a\uff0c\u5e76\u4e14\u6808\u5728\u5806\u4e0b\u9762\uff08\u770b\u56fe\uff09\uff0c\u6211\u4eec\u7684\u5185\u5b58\u5206\u914d\u53d8\u6210\u53ea\u5bf9\u5806\u64cd\u4f5c\u4e86\uff0c\u8fd9\u4e2a sz \u4e5f\u53d8\u6210\u4e86\u5f88\u76f4\u63a5\u7684\u4ece\u5e95\u90e8\u5411\u4e0a\u6570\u7684 page \u6570\u91cf\uff08\u770b\u6e90\u7801\u53ef\u4ee5\u77e5\u9053\uff0ctrampoline page \u548c trapframe page \u6ca1\u6709\u88ab\u8ba1\u5165 p-&gt;sz \u91cc\u9762\uff0c\u800c\u662f\u88ab\u653e\u5728 kalloc \u7684 kernel \u7684\u7a7a\u95f4\u91cc\u9762\uff0c\u4e0d\u9700\u8981 user process \u77e5\u9053\u76f8\u5173\u7684\u4fe1\u606f\uff09\\n\\n\u8fd9\u4e5f\u662f\u9875\u8868\u7684\u53e6\u4e00\u4e2a\u4f5c\u7528\u4f53\u73b0\u7684\u65f6\u5019\uff1a\\n\\nxv6 \u7684\u6240\u6709\u5185\u5b58\u5206\u914d\u90fd\u662f\u901a\u8fc7 kalloc()\u5b9e\u73b0\u7684\uff0c\u5982\u4f55\u77e5\u6653 user process \u662f\u5426\u6709\u6743\u91ca\u653e\u67d0\u4e2a\u7269\u7406\u7a7a\u95f4\u5462\uff1f\u53c8\u6216\u8005\u8bf4\u600e\u4e48\u7ef4\u62a4\u54ea\u4e2a\u7269\u7406\u7a7a\u95f4\u662f\u88ab\u54ea\u4e2a\u8fdb\u7a0b\u62ff\u5230\u7684\u5462\uff1f\u5c31\u662f\u901a\u8fc7\u9875\u8868\uff0c\u5728\u91ca\u653e\u7a7a\u95f4\u4e4b\u524d\u8fdb\u884c\u6b64\u8fdb\u7a0b\u7684\u9875\u8868\u4e0a\u5230\u5e95\u6709\u6ca1\u6709\u8fd9\u4e2a\u5408\u6cd5 PA \u7684\u68c0\u67e5(uvmunmap)\\n\\n```c\\n        if ((pte = walk(pagetable, a, 0)) == 0)\\n            panic(\\"uvmunmap: walk\\");\\n        if ((*pte & PTE_V) == 0)\\n            panic(\\"uvmunmap: not mapped\\");\\n        if (PTE_FLAGS(*pte) == PTE_V)\\n            panic(\\"uvmunmap: not a leaf\\");\\n```\\n\\n#### 3.8 Code:exec\\n\\nexec.c \u6e90\u7801\\n\\n```c\\n#include \\"types.h\\"\\n#include \\"param.h\\"\\n#include \\"memlayout.h\\"\\n#include \\"riscv.h\\"\\n#include \\"spinlock.h\\"\\n#include \\"proc.h\\"\\n#include \\"defs.h\\"\\n#include \\"elf.h\\"\\n\\nstatic int loadseg(pde_t *pgdir, uint64 addr, struct inode *ip, uint offset, uint sz);\\n\\nint\\nexec(char *path, char **argv)\\n{\\n  char *s, *last;\\n  int i, off;\\n  uint64 argc, sz = 0, sp, ustack[MAXARG+1], stackbase;\\n  struct elfhdr elf;\\n  struct inode *ip;\\n  struct proghdr ph;\\n  pagetable_t pagetable = 0, oldpagetable;\\n  struct proc *p = myproc();\\n\\n  begin_op();\\n\\n  if((ip = namei(path)) == 0){\\n    end_op();\\n    return -1;\\n  }\\n  ilock(ip);\\n\\n  // Check ELF header\\n  if(readi(ip, 0, (uint64)&elf, 0, sizeof(elf)) != sizeof(elf))\\n    goto bad;\\n  if(elf.magic != ELF_MAGIC)\\n    goto bad;\\n\\n  if((pagetable = proc_pagetable(p)) == 0)\\n    goto bad;\\n\\n  // Load program into memory.\\n  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){\\n    if(readi(ip, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))\\n      goto bad;\\n    if(ph.type != ELF_PROG_LOAD)\\n      continue;\\n    if(ph.memsz < ph.filesz)\\n      goto bad;\\n    if(ph.vaddr + ph.memsz < ph.vaddr)\\n      goto bad;\\n    uint64 sz1;\\n    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0)\\n      goto bad;\\n    sz = sz1;\\n    if(ph.vaddr % PGSIZE != 0)\\n      goto bad;\\n    if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)\\n      goto bad;\\n  }\\n  iunlockput(ip);\\n  end_op();\\n  ip = 0;\\n\\n  p = myproc();\\n  uint64 oldsz = p->sz;\\n\\n  // Allocate two pages at the next page boundary.\\n  // Use the second as the user stack.\\n  sz = PGROUNDUP(sz);\\n  uint64 sz1;\\n  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE)) == 0)\\n    goto bad;\\n  sz = sz1;\\n  uvmclear(pagetable, sz-2*PGSIZE);\\n  sp = sz;\\n  stackbase = sp - PGSIZE;\\n\\n  // Push argument strings, prepare rest of stack in ustack.\\n  for(argc = 0; argv[argc]; argc++) {\\n    if(argc >= MAXARG)\\n      goto bad;\\n    sp -= strlen(argv[argc]) + 1;\\n    sp -= sp % 16; // riscv sp must be 16-byte aligned\\n    if(sp < stackbase)\\n      goto bad;\\n    if(copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)\\n      goto bad;\\n    ustack[argc] = sp;\\n  }\\n  ustack[argc] = 0;\\n\\n  // push the array of argv[] pointers.\\n  sp -= (argc+1) * sizeof(uint64);\\n  sp -= sp % 16;\\n  if(sp < stackbase)\\n    goto bad;\\n  if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)\\n    goto bad;\\n\\n  // arguments to user main(argc, argv)\\n  // argc is returned via the system call return\\n  // value, which goes in a0.\\n  p->trapframe->a1 = sp;\\n\\n  // Save program name for debugging.\\n  for(last=s=path; *s; s++)\\n    if(*s == \'/\')\\n      last = s+1;\\n  safestrcpy(p->name, last, sizeof(p->name));\\n\\n  // Commit to the user image.\\n  oldpagetable = p->pagetable;\\n  p->pagetable = pagetable;\\n  p->sz = sz;\\n  p->trapframe->epc = elf.entry;  // initial program counter = main\\n  p->trapframe->sp = sp; // initial stack pointer\\n  proc_freepagetable(oldpagetable, oldsz);\\n\\n  return argc; // this ends up in a0, the first argument to main(argc, argv)\\n\\n bad:\\n  if(pagetable)\\n    proc_freepagetable(pagetable, sz);\\n  if(ip){\\n    iunlockput(ip);\\n    end_op();\\n  }\\n  return -1;\\n}\\n\\n// Load a program segment into pagetable at virtual address va.\\n// va must be page-aligned\\n// and the pages from va to va+sz must already be mapped.\\n// Returns 0 on success, -1 on failure.\\nstatic int\\nloadseg(pagetable_t pagetable, uint64 va, struct inode *ip, uint offset, uint sz)\\n{\\n  uint i, n;\\n  uint64 pa;\\n\\n  if((va % PGSIZE) != 0)\\n    panic(\\"loadseg: va must be page aligned\\");\\n\\n  for(i = 0; i < sz; i += PGSIZE){\\n    pa = walkaddr(pagetable, va + i);\\n    if(pa == 0)\\n      panic(\\"loadseg: address should exist\\");\\n    if(sz - i < PGSIZE)\\n      n = sz - i;\\n    else\\n      n = PGSIZE;\\n    if(readi(ip, 0, (uint64)pa, offset+i, n) != n)\\n      return -1;\\n  }\\n\\n  return 0;\\n}\\n```\\n\\n\u5b83\u5148\u540e\u5e72\u4e86\u8fd9\u4e48\u51e0\u4ef6\u4e8b\\n\\n- \u4f7f\u7528`namei`\u548c\u6587\u4ef6\u7cfb\u7edf\u4ea4\u4e92\uff0c\u62ff\u5230\u4e86`path`\u6587\u4ef6\u7684`inode`\\n\\n- \u68c0\u67e5\u6587\u4ef6\u7684 ELF \u7f16\u7801\uff08\u4f7f\u7528 int\uff084 Byte\uff09 ELF magic number, \'0x7F\',\'E\',\'L\',\'F\'\uff09\uff0c\u5e76\u4ece\u6587\u4ef6\u4e4b\u4e2d\u5148\u8bfb\u53d6\u76f8\u5173\u6570\u636e\uff0c\u4f8b\u5982\u6587\u4ef6\u7684 offset \u548c\u7ed3\u675f\u4f4d\u7f6e\u3001\u7269\u7406\u5730\u5740\u7b49\\n\\n- \u7279\u522b\u5730\uff0c\u6709`if(ph.vaddr + ph.memsz < ph.vaddr) goto bad;`\u7684\u68c0\u67e5\uff1b\\n\\n- \u68c0\u67e5\u5b8c\u6bd5\u540e\uff0c\u4f7f\u7528`loadseg`\u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u8bfb\u5165\u5185\u6838\u6570\u636e\uff08\u8fdb\u7a0b\u76f8\u5173\uff09\u548c\u51c6\u5907\u7684\u9875\u8868\\n\\n- \u518d\u53bb\u6309\u7167 user space \u53bb\u5206\u914d user process \u7684\u4e00\u4e9b page\uff0c\u5e76\u5c06\u524d\u9762\u7ea6\u5b9a\u7684\u4e00\u4e9b args \u7684\u53c2\u6570\u4ee5\u7ea6\u5b9a\u987a\u5e8f\u586b\u5165\uff0c\u5e76\u586b\u597d\u8fdb\u7a0b\u65b0\u7684 sz,\u6309\u7167\u6587\u4ef6\u7684 elf \u7ed9\u7684\u6570\u636e\u586b\u7a0b\u5e8f\u7684\u5165\u53e3\uff08main\uff09\uff0c\u521d\u59cb\u5316\u7528\u6237\u6808\u6307\u9488\\n\\n- \u5982\u679c\u5230\u6700\u540e\u4e5f\u6ca1\u51fa\u9519\uff0c\u5c31\u66f4\u65b0\u6574\u4e2a\u8fdb\u7a0b\uff08commit image\uff09\uff1b\u5426\u5219\u64a4\u9500\u524d\u9762\u7684\u64cd\u4f5c\u3002\u8fd9\u4e5f\u5c31\u662f\u4fdd\u8bc1\u76f8\u5173\u64cd\u4f5c\u7684\u539f\u5b50\u6027\\n\\nps \u5173\u4e8e\u6709`if(ph.vaddr + ph.memsz < ph.vaddr) goto bad;`\u7684\u68c0\u67e5\uff0c\u4e66\u4e0a\u8bf4\u4e86\u4e0d\u5c11\\n\\n\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u68c0\u67e5\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a ph.vaddr \u548c ph.memsz\uff0c\u4f7f\u5f97\u5b83\u4eec\u52a0\u8d77\u6765**\u6ea2\u51fa**\uff0c\u4ece\u800c\u8fbe\u5230 0x1000 \u8fd9\u79cd kernel space\uff1b\u800c\u53c8\u56e0\u4e3a exec \u662f syscall\uff0c\u539f\u6765\u6ca1\u6709\u6743\u9650\u7684\u7528\u6237\u8fdb\u7a0b\u73b0\u5728\u6709\u4e86\u6743\u9650\uff0cexec \u4f1a\u4f7f\u7528 loadseg \u5c06 elf \u6587\u4ef6\u91cc\u9762\u7684\u5185\u5bb9\u5199\u5230\u7279\u5b9a\u7684 kernel space \u4e4b\u4e2d\uff0c\u5c31\u5b8c\u6210\u4e86\u653b\u51fb\\n\\n\u8fd9\u6bb5\u4ee3\u7801\u503c\u5f97\u591a\u770b\uff0c\u5f88\u6f02\u4eae\\n\\n#### 3.9 Real world\\n\\n\u73b0\u5b9e\u4e16\u754c\u7684 OS \u6709\u4ee5\u4e0b xv6 \u6ca1\u6709\u7684\u673a\u5236\uff1a\\n\\n- \u4f7f\u7528 pagefault \u914d\u5408 paging \u6765\u8fdb\u884c\u6743\u9650\u4fdd\u62a4\uff08xv6 \u53ea\u4f7f\u7528 paging\uff09\\n- kernel \u4f4d\u7f6e\u7684\u968f\u673a\u5316\u6765\u9632\u8303\u653b\u51fb\uff08xv6 \u7684 kernel \u662f direct-map+ 0x80000000 \u7684\u56fa\u5b9a RAM\uff09\\n- RISCV \u63d0\u4f9b\u7684\u7269\u7406\u9875\u7684\u786c\u4ef6\u4fdd\u62a4\\n- \u8d85\u7ea7\u9875\uff08super page\uff09\uff0c\u6765\u63d0\u9ad8\u5927\u5757\u9875\u7684\u9875\u8868\u76f8\u5173\u64cd\u4f5c\u6548\u7387\uff08\u6bd4\u5982\u5185\u6838\uff09\\n- \u66f4\u7cbe\u5de7\u7684\u5185\u5b58\u5206\u914d\u7b56\u7565\uff1a\u4f8b\u5982\u5904\u7406\u4e0d\u540c\u5927\u5c0f\u7684\u5185\u5b58\u8bf7\u6c42\uff0c\u7ed9\u4e0d\u540c\u5927\u5c0f\u7684\u5185\u5b58\u5757\uff1b\u800c\u4e0d\u662f xv6 \u59cb\u7ec8\u56fa\u5b9a\u7ed9 PAGESIZE \u7684\u500d\u6570\uff08\u8fd9\u6837\u5bf9\u4e8e\u9891\u7e41\u5c0f\u8bf7\u6c42\u8868\u73b0\u4e0d\u597d\uff09\\n\\n### Chapter 4: Traps and system calls\\n\\nps\uff08\u770b\u4ee3\u7801\u65f6\u53ef\u80fd\u6709\u7528\uff09\uff1ahartid \u662f hardware thread id \u7684\u7f29\u5199\uff0c\u5728 xv6 \u4e4b\u4e2d\u662f cpu \u7684 id\uff0ctp \u5bc4\u5b58\u5668\u91cc\u9762\u4f1a\u6709\u5b83\u7684\u503c\\n\\n\u63a7\u5236\u6d41\u5728\u4e09\u79cd\u60c5\u51b5\u4e0b\u53ef\u80fd\u53d1\u751f\u8f6c\u79fb\uff1a\\n\\n- syscall\\n- exception\uff1asomething illegeal\\n- device interrupt: indicate the device needs attention(like the finish of IO)\\n\\n\u7edf\u79f0\u8fd9\u4e09\u79cd\uff08\u7cfb\u7edf\u8c03\u7528\uff0c\u5f02\u5e38\uff0c\u4e2d\u65ad\uff09\u4e3a trap\uff0c\u5728 xv6 \u4e4b\u4e2d\uff0c\u6240\u6709\u7684 trap \u90fd\u662f kernel \u5904\u7406\u7684\\n\\n> [RISCV \u6587\u6863](https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf)\u7ed9\u51fa\u7684\u5b9a\u4e49\u89c1\u4e0b\uff1a\\n>\\n> We use the term **exception** to refer to **an unusual condition occurring at run time** associated with an instruction in the current RISC-V thread. We use the term **trap** to refer to the **synchronous transfer of control to a trap handler caused by an exceptional condition occurring** within a RISC-V thread. Trap handlers usually execute in a more privileged environment. We use the term **interrupt** to refer to **an external event that occurs asynchronously** to the current RISC-V thread. When an interrupt that must be serviced occurs, some instruction is selected to receive an interrupt exception and subsequently experiences a trap.\\n\\ntrap \u7684\u4e00\u822c\u6d41\u7a0b\u662f\uff1a\\n\\n1. \u8f6c\u79fb\u63a7\u5236\u6743\u5230 kernel\\n2. kernel \u4fdd\u5b58\u7528\u6237\u8fdb\u7a0b\u5bc4\u5b58\u5668\u72b6\u6001\u548c\u5176\u5b83\u72b6\u6001\u4ee5\u4fbf\u8fd4\u56de\\n3. \u8c03\u7528\u5408\u9002\u7684 handler code\\n4. \u8fd4\u56de\\n\\n\u4e0d\u540c\u7684 trap \u6700\u597d\u6709\u4e0d\u540c\u7684 handler code\uff0c\u6bd4\u5982 user space \u7684 trap\uff0c kernel \u7684 trap\uff0ctimer interrupt \u7b49\u7b49\\n\\n#### 4.1 RISC-V trap machinery\\n\\nkernel \u600e\u4e48\u77e5\u9053\u5982\u4f55\u5904\u7406 trap \u5462\uff1f\\n\\nRISCV \u6709\u8bb8\u591a\u7279\u6b8a\u7684\u5bc4\u5b58\u5668\uff08kernel/riscv.h\uff09\u7528\u4e8e\u8bb0\u5f55\u548c trap \u6709\u5173\u7684\u4fe1\u606f\u3001\\n\\n- stvec\uff1aThe kernel write **the address of its trap handler** here\\n- sepc: **When(pc) a trap occurs**\\n- scause: A number describe **the reason of trap**\\n- sscratch: \u7528\u4e8e\u4fdd\u5b58\u4e0a\u4e0b\u6587\u7684\u989d\u5916\u5bc4\u5b58\u5668\\n- sstatus: \u5176\u4e2d\u7684 SIE bit \u6807\u5fd7\u7740\u662f\u5426\u5141\u8bb8\u8bbe\u5907\u4e2d\u65ad\uff0c\u5176\u4e2d\u7684 SPP bit \u6807\u5fd7\u7740\u4e2d\u65ad\u662f\u4ece user mode \u8fd8\u662f super mode \u89e6\u53d1\u7684\uff08\u540c\u65f6\u8fd9\u4e5f\u51b3\u5b9a\u4e86 sret \u4f1a\u56de\u5230\u4ec0\u4e48 mode\uff09\\n\\n**\u5177\u4f53\u7ec6\u8282\uff1a**\\n\\n1. If the trap is a device interrupt and the sstatus SIE bit is clear, don\'t do any of the following\\\\*\\n2. Disable interrupts by clearing the SIE bit in sstatus\\n3. Copy the pc to sepc\\n4. Save the current mode (user or supervisor mode) in SPP bit in sstatus\\n5. Set scause to reflect the trap\'s cause\\n6. Set the mode to supervisor\\n7. Copy the stvec to the pc\\n8. Start executing at new pc\\n\\n\u6ce8\u610f CPU**\u6ca1\u505a\u5207\u6362\u5185\u6838\u9875\u8868\uff0c\u6ca1\u505a\u4f7f\u7528\u5185\u6838\u6808\uff0c\u6ca1\u505a\u4fdd\u5b58\u548c\u66f4\u65b0 pc \u4e4b\u5916\u7684\u5bc4\u5b58\u5668**\uff0c\u8fd9\u4e9b\u90fd\u7559\u7ed9 kernel software \u53bb\u5b8c\u6210\uff0c\u7b80\u5316\u8bbe\u8ba1\uff0c\u7559\u4e0b\u7075\u6d3b\u6027\\n\\n#### 4.2 Traps from user space\\n\\n> \u6211\u4eec\u4e0d\u60f3\u8ba9\u7528\u6237\u4ee3\u7801\u4ecb\u5165\u5230\u8fd9\u91cc\u7684 user/kernel \u5207\u6362\uff0c\u5426\u5219\u6709\u53ef\u80fd\u4f1a\u7834\u574f\u5b89\u5168\u6027\u3002\u6240\u4ee5\u8fd9\u610f\u5473\u7740\uff0ctrap \u4e2d\u6d89\u53ca\u5230\u7684\u786c\u4ef6\u548c\u5185\u6838\u673a\u5236\u4e0d\u80fd\u4f9d\u8d56\u4efb\u4f55\u6765\u81ea\u7528\u6237\u7a7a\u95f4\u4e1c\u897f\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u4e0d\u80fd\u4f9d\u8d56 32 \u4e2a\u7528\u6237\u5bc4\u5b58\u5668\uff0c\u5b83\u4eec\u53ef\u80fd\u4fdd\u5b58\u7684\u662f\u6076\u610f\u7684\u6570\u636e\uff0c\u6240\u4ee5\uff0cXV6 \u7684 trap \u673a\u5236\u4e0d\u4f1a\u67e5\u770b\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u800c\u53ea\u662f\u5c06\u5b83\u4eec\u4fdd\u5b58\u8d77\u6765\u3002\\n\\ntrap \u4ee3\u7801\u6267\u884c\u6d41\u7a0b\\n\\nsyscall:\u4ee5 write \u4e3a\u4f8b\\n\\nwrite-&gt;\u67e5\u627e\u8be5\u51fd\u6570-&gt;usys.pl \u4ea7\u751f\u7684\u6c47\u7f16(.global write)\\n\\n```perl\\n#!/usr/bin/perl -w\\n\\n# Generate usys.S, the stubs for syscalls.\\n\\nprint \\"# generated by usys.pl - do not edit\\\\n\\";\\n\\nprint \\"#include \\\\\\"kernel/syscall.h\\\\\\"\\\\n\\";\\n\\nsub entry {\\n    my $name = shift;   # shift\u662fperl\u811a\u672c\u4e4b\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u610f\u601d\\n    print \\".global $name\\\\n\\";\\n    print \\"${name}:\\\\n\\";\\n    print \\" li a7, SYS_${name}\\\\n\\";\\n    print \\" ecall\\\\n\\";\\n    print \\" ret\\\\n\\";\\n}\\nentry(\\"write\\");\\n// ......\\n```\\n\\n\\\\-&gt;ecall-&gt;trampoline.S\\n\\n---\\n\\nQ:\u8fd9\u4e00\u6b65\u662f\u600e\u4e48\u8fc7\u53bb\u7684\uff1f\uff08\u4e0b\u9762\u6574\u4e2a\u6d41\u7a0b\u633a\u957f\u7684\uff09\\n\\n\u6211\u67e5\u8be2\u4e86\u4e00\u4e0b RISC \u7279\u6743\u6307\u4ee4\u6587\u6863\\n\\n> The ECALL instruction is used to make a request to the supporting execution environment, which is usually an operating system. **The ABI for the system will define how parameters for the environment request are passed**, but usually these will be in defined locations in the integer register file.\\n\\n\u6587\u6863\u8bf4\u8ba9 OS \u8bbe\u8ba1\u8005\u81ea\u5df1\u51b3\u5b9a\u600e\u4e48\u4f20\u53c2\u6570\\n\\nlec4 \u91cc\u9762\u8bf4 ecall \u5e72\u4e86\u4e09\u4ef6\u4e8b\uff08\u8fd9\u662f\u786c\u4ef6\u652f\u6301\u7684\uff09\\n\\n- \u5c06\u4ee3\u7801\u4ece user mode \u6539\u5230 supervisor mode\\n- \u5c06 pc \u4fdd\u5b58\u5230 sepc\\n- \u8df3\u8f6c\u5230 stvec \u6307\u5411\u7684\u6307\u4ee4\\n\\n\u90a3 stvec \u6307\u5411\u54ea\u91cc\u5462\uff1f\\n\\n\u6839\u636e\u6211\u4eec Chapter 2 \u91cc\u9762\u8bb2\u7684\u90a3\u4e2a\u6d41\u7a0b\u5f80\u4e0b\u627e\uff0centry.S-&gt;start()-&gt;main-&gt;userinit (\u6ce8\u610f ecall \u9700\u8981\u5728 user space \u8c03\u7528)\\n\\n\\\\-&gt; allocproc-&gt;proc_pagetable\\n\\n```c\\n// Create a user page table for a given process,\\n// with no user memory, but with trampoline pages.\\npagetable_t proc_pagetable(struct proc *p) {\\n    pagetable_t pagetable;\\n\\n    // An empty page table.\\n    pagetable = uvmcreate();\\n    if (pagetable == 0)\\n        return 0;\\n\\n    // map the trampoline code (for system call return)\\n    // at the highest user virtual address.\\n    // only the supervisor uses it, on the way\\n    // to/from user space, so not PTE_U.\\n    if (mappages(pagetable, TRAMPOLINE, PGSIZE, (uint64)trampoline,\\n                 PTE_R | PTE_X) < 0) {\\n        uvmfree(pagetable, 0);\\n        return 0;\\n    }\\n\\n    // map the trapframe just below TRAMPOLINE, for trampoline.S.\\n    if (mappages(pagetable, TRAPFRAME, PGSIZE, (uint64)(p->trapframe),\\n                 PTE_R | PTE_W) < 0) {\\n        uvmunmap(pagetable, TRAMPOLINE, 1, 0);\\n        uvmfree(pagetable, 0);\\n        return 0;\\n    }\\n\\n    return pagetable;\\n}\\n```\\n\\n\u8fd9\u91cc\u5df2\u7ecf\u53d1\u73b0\u6bcf\u4e2a proc \u90fd\u4f1a\u5728 alloc \u7684\u65f6\u5019\u6709 TRAMPOLINE \u7684 PTE \u4e86\uff0c\u90a3\u5230\u5e95\u662f\u5728\u54ea\u91cc\u6539\u53d8\u4e86 stvec \u5462\uff1f\\n\\n```c\\nvoid trapinit(void) { initlock(&tickslock, \\"time\\"); }\\n\\n// set up to take exceptions and traps while in the kernel.\\nvoid trapinithart(void) { w_stvec((uint64)kernelvec); }\\n\\n//\\n// handle an interrupt, exception, or system call from user space.\\n// called from trampoline.S\\n//\\nvoid usertrap(void) {\\n    int which_dev = 0;\\n\\n    if ((r_sstatus() & SSTATUS_SPP) != 0)\\n        panic(\\"usertrap: not from user mode\\");\\n\\n    // send interrupts and exceptions to kerneltrap(),\\n    // since we\'re now in the kernel.\\n    w_stvec((uint64)kernelvec);\\n\\n    struct proc *p = myproc();\\n\\n    // save user program counter.\\n    p->trapframe->epc = r_sepc();\\n\\n    if (r_scause() == 8) {\\n        // system call\\n\\n        if (p->killed)\\n            exit(-1);\\n\\n        // sepc points to the ecall instruction,\\n        // but we want to return to the next instruction.\\n        p->trapframe->epc += 4;\\n\\n        // an interrupt will change sstatus &c registers,\\n        // so don\'t enable until done with those registers.\\n        intr_on();\\n\\n        syscall();\\n    } else if ((which_dev = devintr()) != 0) {\\n        // ok\\n    } else {\\n        printf(\\"usertrap(): unexpected scause %p pid=%d\\\\n\\", r_scause(), p->pid);\\n        printf(\\"            sepc=%p stval=%p\\\\n\\", r_sepc(), r_stval());\\n        p->killed = 1;\\n    }\\n\\n    if (p->killed)\\n        exit(-1);\\n\\n    // give up the CPU if this is a timer interrupt.\\n    if (which_dev == 2)\\n        yield();\\n\\n    usertrapret();\\n}\\n\\n//\\n// return to user space\\n//\\nvoid usertrapret(void) {\\n    struct proc *p = myproc();\\n\\n    // we\'re about to switch the destination of traps from\\n    // kerneltrap() to usertrap(), so turn off interrupts until\\n    // we\'re back in user space, where usertrap() is correct.\\n    intr_off();\\n\\n    // send syscalls, interrupts, and exceptions to trampoline.S\\n    w_stvec(TRAMPOLINE + (uservec - trampoline));\\n\\n    // set up trapframe values that uservec will need when\\n    // the process next re-enters the kernel.\\n    p->trapframe->kernel_satp = r_satp();         // kernel page table\\n    p->trapframe->kernel_sp = p->kstack + PGSIZE; // process\'s kernel stack\\n    p->trapframe->kernel_trap = (uint64)usertrap;\\n    p->trapframe->kernel_hartid = r_tp(); // hartid for cpuid()\\n\\n    // set up the registers that trampoline.S\'s sret will use\\n    // to get to user space.\\n\\n    // set S Previous Privilege mode to User.\\n    unsigned long x = r_sstatus();\\n    x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode\\n    x |= SSTATUS_SPIE; // enable interrupts in user mode\\n    w_sstatus(x);\\n\\n    // set S Exception Program Counter to the saved user pc.\\n    w_sepc(p->trapframe->epc);\\n\\n    // tell trampoline.S the user page table to switch to.\\n    uint64 satp = MAKE_SATP(p->pagetable);\\n\\n    // jump to trampoline.S at the top of memory, which\\n    // switches to the user page table, restores user registers,\\n    // and switches to user mode with sret.\\n    uint64 fn = TRAMPOLINE + (userret - trampoline);\\n    ((void (*)(uint64, uint64))fn)(TRAPFRAME, satp);\\n}\\n```\\n\\n\u5f88\u9634\u9669\u554a\uff0c\u8fd9\u4e2a stvec \u662f\u5728 forkret \u8c03\u7528\u7684 userret \u91cc\u9762\u6539\u6389\u7684\\n\\nuserinit \u5e76\u6ca1\u6709\u6539\u6389 stvec\\n\\n\u5177\u4f53\u5730\u8bf4\uff0c\u56de\u770b init.c \u7684\u4ee3\u7801\\n\\n```c\\nint main(void) {\\n    // ...\\n    for (;;) {\\n        printf(\\"init: starting sh\\\\n\\");\\n        pid = fork();\\n\\n        if (pid < 0) {\\n            printf(\\"init: fork failed\\\\n\\");\\n            exit(1);\\n        }\\n        if (pid == 0) {\\n            exec(\\"sh\\", argv);\\n            printf(\\"init: exec sh failed\\\\n\\");\\n            exit(1);\\n        }\\n // ...\\n```\\n\\nshell \u5b9e\u9645\u4e0a\u662f init \u8fdb\u7a0b fork \u7684\u5b50\u8fdb\u7a0b\\n\\n\u6709\u8da3\u7684\u662f\uff0c\u770b syscall.c \u53ef\u4ee5\u53d1\u73b0\uff0ckernel/proc \u91cc\u9762\u7684 fork \u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u201csys_fork\u201d\uff0c\u7528\u6237\u7684 syscall fork \u53ea\u4e0d\u8fc7\u662f\u76f4\u63a5\u518d\u8c03\u7528\u4e00\u6b21 fork \u7f62\u4e86\\n\\n```c\\n// A fork child\'s very first scheduling by scheduler()\\n// will swtch to forkret.\\nvoid forkret(void) {\\n    static int first = 1;\\n\\n    // Still holding p->lock from scheduler.\\n    release(&myproc()->lock);\\n\\n    if (first) {\\n        // File system initialization must be run in the context of a\\n        // regular process (e.g., because it calls sleep), and thus cannot\\n        // be run from main().\\n        first = 0;\\n        fsinit(ROOTDEV);\\n    }\\n\\n    usertrapret();\\n}\\n```\\n\\n\u8fd9\u4e2a forkret \u5728\u53ea\u5728 allocproc \u91cc\u9762\u88ab\u8c03\u7528\uff08fork \u548c uvminit \u8c03\u7528\u4e86 allocproc\uff09\\n\\n```c\\n    memset(&p->context, 0, sizeof(p->context));\\n    p->context.ra = (uint64)forkret;\\n    p->context.sp = p->kstack + PGSIZE;\\n```\\n\\ninit \u8fdb\u7a0b\u662f\u4e0d\u4f1a\u8fd4\u56de\u7684\uff0c\u4f46\u662f\u5728 scheduler \u91cc\u9762\uff0c\u4f1a\u8c03\u7528 swtch()\\n\\n```c\\n               p->state = RUNNING;\\n                c->proc = p;\\n                swtch(&c->context, &p->context);\\n```\\n\\n\u7136\u540e swtch \u4f1a\u8c03\u7528\u4e0b\u9762\u7684 swtch.S\\n\\n```c\\n# Context switch\\n#\\n#   void swtch(struct context *old, struct context *new);\\n#\\n# Save current registers in old. Load from new.\\n\\n\\n.globl swtch\\n# a0 \u662fc->context\u7684\u5730\u5740\uff0ca1\u662fp->context\u7684\u5730\u5740\\nswtch:\\n        # \u628a\u5f53\u524dcpu\u7684\u5bc4\u5b58\u5668\u6570\u636e\u5b58\u4e0b\u6765\\n        sd ra, 0(a0)\\n        sd sp, 8(a0)\\n        sd s0, 16(a0)\\n        sd s1, 24(a0)\\n        sd s2, 32(a0)\\n        sd s3, 40(a0)\\n        sd s4, 48(a0)\\n        sd s5, 56(a0)\\n        sd s6, 64(a0)\\n        sd s7, 72(a0)\\n        sd s8, 80(a0)\\n        sd s9, 88(a0)\\n        sd s10, 96(a0)\\n        sd s11, 104(a0)\\n\\n        # \u52a0\u8f7d\u8c03\u5ea6\u7684p\u7684\u5bc4\u5b58\u5668\u6570\u636e\\n        ld ra, 0(a1)\\n        ld sp, 8(a1)\\n        ld s0, 16(a1)\\n        ld s1, 24(a1)\\n        ld s2, 32(a1)\\n        ld s3, 40(a1)\\n        ld s4, 48(a1)\\n        ld s5, 56(a1)\\n        ld s6, 64(a1)\\n        ld s7, 72(a1)\\n        ld s8, 80(a1)\\n        ld s9, 88(a1)\\n        ld s10, 96(a1)\\n        ld s11, 104(a1)\\n\\n        ret\\n        # \u6b64\u65f6\uff0cra\u5df2\u7ecf\u88ab\u6539\u6389\uff01\uff01\uff01\\n        # \u56de\u53bb\u7684\u4f4d\u7f6e\u5c31\u662fforkret\u4e86\\n```\\n\\ninit \u8c03\u5ea6\u5230 shell \u65f6\uff0cswtch.S ret \u7684\u65f6\u5019\u5c31\u8df3\u8f6c\u5230\u4e86 forkret\\n\\n\u7136\u540e forkret-&gt;usertrapret-&gt;w_stvec\\n\\n**\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u6b21\u7684 usertrapret \u662f\u5728 usertrap \u524d\u9762\u6267\u884c\u7684\uff01**\\n\\n\u6240\u4ee5\uff0c\u7ed5\u4e86\u8fd9\u4e48\u5927\u4e00\u5708\u56de\u6765\\n\\n> lec4 \u91cc\u9762\u8bf4 ecall \u5e72\u4e86\u4e09\u4ef6\u4e8b\uff08\u8fd9\u662f\u786c\u4ef6\u652f\u6301\u7684\uff09\\n>\\n> - \u5c06\u4ee3\u7801\u4ece user mode \u6539\u5230 supervisor mode\\n> - \u5c06 pc \u4fdd\u5b58\u5230 sepc\\n> - \u8df3\u8f6c\u5230 stvec \u6307\u5411\u7684\u6307\u4ee4\\n\\n\u5728\u4e0b\u9762\u90a3\u4e2a usertrapret \u4e4b\u4e2d\uff0cstvec \u6539\u4e3a\u6307\u5411 trampoline.S \u7684 uservec\uff0c\u5e76\u4e14\u6307\u5b9a\u4e86 usertrap \u4f4d\u7f6e\u7b49\u4fe1\u606f\\n\\n```c\\n    // send syscalls, interrupts, and exceptions to trampoline.S\\n    w_stvec(TRAMPOLINE + (uservec - trampoline));\\n\\n    // set up trapframe values that uservec will need when\\n    // the process next re-enters the kernel.\\n    p->trapframe->kernel_satp = r_satp();         // kernel page table\\n    p->trapframe->kernel_sp = p->kstack + PGSIZE; // process\'s kernel stack\\n    p->trapframe->kernel_trap = (uint64)usertrap;\\n    p->trapframe->kernel_hartid = r_tp(); // hartid for cpuid()\\n```\\n\\n\u6240\u4ee5\u8fd9\u5c31\u662f\u6ce8\u91ca\u4e4b\u4e2d`re-enter`\u7684\u610f\u601d\\n\\n\u518d\u540e\u9762\u5c31\u662f lec \u91cc\u9762\u8bf4\u7684\uff0c\u518d\u540e\u9762\u7684 syscall\\n\\necall \u8df3\u8f6c\u5230 stvec\uff08uservec\uff09\uff0ctrampoline.S \u7684\u6700\u540e\u8df3\u8f6c\u5230 TRAMPOLINE + 16\\n\\n\u53c2\u8003 trapframe\\n\\n```c\\nstruct trapframe {\\n    /*   0 */ uint64 kernel_satp;   // kernel page table\\n    /*   8 */ uint64 kernel_sp;     // top of process\'s kernel stack\\n    /*  16 */ uint64 kernel_trap;   // usertrap(), \u5c31\u5728\u4e0a\u9762p->trapframe->kernel_trap = (uint64)usertrap;\\n    // ...\\n}\\n```\\n\\n\u5c31\u662f\u8df3\u8f6c\u5230\u4e86 usertrap\\n\\n\u7136\u540e usertrap-&gt;syscall()-&gt;\u6839\u636e a7 \u627e\u5230 sys_write()\\n\\n\u4e4b\u540e\u518d\u901a\u8fc7 usertrapret-&gt;userret-&gt;sret \u8fd4\u56de\u7528\u6237\u7a7a\u95f4\uff0c\u7ee7\u7eed\u6267\u884c\u6307\u4ee4\\n\\n> sret \u662f\u6211\u4eec\u5728 kernel \u4e2d\u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\uff0c\u5f53\u6211\u6267\u884c\u5b8c\u8fd9\u6761\u6307\u4ee4\uff1a\\n>\\n> - \u7a0b\u5e8f\u4f1a\u5207\u6362\u56de user mode\\n>\\n> - SEPC \u5bc4\u5b58\u5668\u7684\u6570\u503c\u4f1a\u88ab\u62f7\u8d1d\u5230 PC \u5bc4\u5b58\u5668\uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\uff09\\n>\\n> - \u91cd\u65b0\u6253\u5f00\u4e2d\u65ad\\n\\n---\\n\\nps1 \u5982\u679c\u5728 kernel space \u91cc\u9762\u8c03\u7528 ecall \u4f1a\u600e\u4e48\u6837\uff1f\\n\\n\u5728 lab3 \u4e4b\u4e2d\uff0c\u7ecf\u5e38\u80fd\u770b\u5230\u5728 userinit \u6210\u529f\u542f\u52a8\u4e4b\u524d\uff0c\u5185\u6838\u5c31\u51fa\u9519\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u4f9d\u7136\u80fd\u5f97\u5230\u4e00\u4e9b\u6253\u5370\u4fe1\u606f\\n\\n\u9996\u5148\u8bf4\u8bf4\u4e3a\u4ec0\u4e48\u80fd\u591f\u6253\u5370\uff0c\\n\\n\u4ece printf \u4e00\u6b65\u6b65\u5f80\u91cc\u9762\u770b\uff0c\u627e\u5230 console.c \u91cc\u9762\u7684\\n\\n```c\\n//\\n// send one character to the uart.\\n// called by printf, and to echo input characters,\\n// but not from write().\\n//\\n// \u6ce8\u610f\u6ca1\u6709\u7528write!!\\nvoid\\nconsputc(int c)\\n{\\n  if(c == BACKSPACE){\\n    // if the user typed backspace, overwrite with a space.\\n    uartputc_sync(\'\\\\b\'); uartputc_sync(\' \'); uartputc_sync(\'\\\\b\');\\n  } else {\\n    uartputc_sync(c);\\n  }\\n}\\n```\\n\\n\u4e5f\u5c31\u662f\u8bf4 xv6 \u53ea\u662f\u5c06\u6570\u636e\u53d1\u9001\u5230 UART \u7684 control register\uff08qemu \u6a21\u62df\u4e14\u7ea6\u5b9a\u4f4d\u7f6e\uff09\uff0c\u800c qemu \u8d1f\u8d23\u5c06 UART \u7684\u5730\u5740\u4e0a\u7684\u6570\u636e\u8f93\u51fa\u5230\u7ec8\u7aef\\n\\n> \u5728 xv6 \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6253\u5370\u64cd\u4f5c\u662f\u901a\u8fc7 UART\uff08Universal Asynchronous Receiver/Transmitter\uff0c\u901a\u7528\u5f02\u6b65\u6536\u53d1\u5668\uff09\u7684\u63a7\u5236\u5bc4\u5b58\u5668\u5b9e\u73b0\u7684\u3002\u5f53 xv6 \u9700\u8981\u6253\u5370\u5b57\u7b26\u65f6\uff0c\u5b83\u4f1a\u5c06\u5b57\u7b26\u5199\u5165 UART \u7684\u6570\u636e\u5bc4\u5b58\u5668\u3002UART \u786c\u4ef6\u4f1a\u81ea\u52a8\u5c06\u6570\u636e\u5bc4\u5b58\u5668\u4e2d\u7684\u5b57\u7b26\u53d1\u9001\u51fa\u53bb\u3002\\n>\\n> \u5728 QEMU \u6a21\u62df\u5668\u4e2d\uff0cUART \u88ab\u6a21\u62df\u4e3a\u4e00\u4e2a\u865a\u62df\u8bbe\u5907\u3002\u5f53 xv6 \u5c06\u5b57\u7b26\u5199\u5165 UART \u6570\u636e\u5bc4\u5b58\u5668\u65f6\uff0cQEMU \u4f1a\u6355\u83b7\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5e76\u5c06\u5b57\u7b26\u8f93\u51fa\u5230\u5bbf\u4e3b\u673a\u7684\u7ec8\u7aef\u6216\u8005\u5176\u4ed6\u8f93\u51fa\u8bbe\u5907\u3002\u8fd9\u6837\uff0c\u867d\u7136 xv6 \u8ba4\u4e3a\u5b83\u662f\u5728\u64cd\u4f5c UART \u786c\u4ef6\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u7684\u8f93\u51fa\u88ab QEMU \u91cd\u5b9a\u5411\u5230\u4e86\u5bbf\u4e3b\u673a\u7684\u7ec8\u7aef\\n\\n\u5728 kernel/main.c \u7684\\n\\n```c\\n    trapinit();      // trap vectors\\n    trapinithart();  // install kernel trap vector\\n```\\n\\n\u91cc\u9762\\n\\n```c\\nvoid trapinit(void) { initlock(&tickslock, \\"time\\"); }\\n\\n// set up to take exceptions and traps while in the kernel.\\nvoid trapinithart(void) { w_stvec((uint64)kernelvec); } // \u521d\u59cb\u5316stvec\u4e3akernelvec\\n```\\n\\nkernelvec \u91cc\u9762\u53c8\u6709\u5565\u5462\uff1f\\n\\n```assembly\\n.globl kerneltrap\\n.globl kernelvec\\n.align 4\\nkernelvec:\\n        // make room to save registers.\\n        addi sp, sp, -256\\n\\n        // save the registers.\\n        sd ra, 0(sp)\\n        sd sp, 8(sp)\\n        sd gp, 16(sp)\\n        sd tp, 24(sp)\\n        sd t0, 32(sp)\\n        sd t1, 40(sp)\\n        sd t2, 48(sp)\\n        sd s0, 56(sp)\\n        sd s1, 64(sp)\\n        sd a0, 72(sp)\\n        sd a1, 80(sp)\\n        sd a2, 88(sp)\\n        sd a3, 96(sp)\\n        sd a4, 104(sp)\\n        sd a5, 112(sp)\\n        sd a6, 120(sp)\\n        sd a7, 128(sp)\\n        sd s2, 136(sp)\\n        sd s3, 144(sp)\\n        sd s4, 152(sp)\\n        sd s5, 160(sp)\\n        sd s6, 168(sp)\\n        sd s7, 176(sp)\\n        sd s8, 184(sp)\\n        sd s9, 192(sp)\\n        sd s10, 200(sp)\\n        sd s11, 208(sp)\\n        sd t3, 216(sp)\\n        sd t4, 224(sp)\\n        sd t5, 232(sp)\\n        sd t6, 240(sp)\\n\\n\\t// call the C trap handler in trap.c\\n        call kerneltrap // \u8fd9\u91cccall,ret\u662f\u4f2a\u6307\u4ee4\uff0c\u88ab\u6c47\u7f16\u5668\u8f6c\u6362\u6210jal\u548cjalr\\n\\n        // restore registers.\\n        ld ra, 0(sp)\\n        ld sp, 8(sp)\\n        ld gp, 16(sp)\\n        // not this, in case we moved CPUs: ld tp, 24(sp)\\n        ld t0, 32(sp)\\n        ld t1, 40(sp)\\n        ld t2, 48(sp)\\n        ld s0, 56(sp)\\n        ld s1, 64(sp)\\n        ld a0, 72(sp)\\n        ld a1, 80(sp)\\n        ld a2, 88(sp)\\n        ld a3, 96(sp)\\n        ld a4, 104(sp)\\n        ld a5, 112(sp)\\n        ld a6, 120(sp)\\n        ld a7, 128(sp)\\n        ld s2, 136(sp)\\n        ld s3, 144(sp)\\n        ld s4, 152(sp)\\n        ld s5, 160(sp)\\n        ld s6, 168(sp)\\n        ld s7, 176(sp)\\n        ld s8, 184(sp)\\n        ld s9, 192(sp)\\n        ld s10, 200(sp)\\n        ld s11, 208(sp)\\n        ld t3, 216(sp)\\n        ld t4, 224(sp)\\n        ld t5, 232(sp)\\n        ld t6, 240(sp)\\n\\n        addi sp, sp, 256\\n\\n        // return to whatever we were doing in the kernel.\\n        sret\\n\\n        #\\n        # machine-mode timer interrupt.\\n        #\\n```\\n\\n\u5176\u4e2d kerneltrap\\n\\n```c\\n// interrupts and exceptions from kernel code go here via kernelvec,\\n// on whatever the current kernel stack is.\\nvoid kerneltrap() {\\n    int which_dev = 0;\\n    uint64 sepc = r_sepc();\\n    uint64 sstatus = r_sstatus();\\n    uint64 scause = r_scause();\\n\\n    if ((sstatus & SSTATUS_SPP) == 0)\\n        panic(\\"kerneltrap: not from supervisor mode\\");\\n    if (intr_get() != 0)\\n        panic(\\"kerneltrap: interrupts enabled\\");\\n\\n    if ((which_dev = devintr()) == 0) { // \u8fd9\u91cc\u662f\u6211\u4eec\u5e38\u89c1\u62a5\u9519\u7684\u5730\u65b9\\n        printf(\\"scause %p\\\\n\\", scause);\\n        printf(\\"sepc=%p stval=%p\\\\n\\", r_sepc(), r_stval());\\n        panic(\\"kerneltrap\\");\\n    }\\n\\n    // give up the CPU if this is a timer interrupt.\\n    if (which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)\\n        yield();\\n\\n    // the yield() may have caused some traps to occur,\\n    // so restore trap registers for use by kernelvec.S\'s sepc instruction.\\n    w_sepc(sepc);\\n    w_sstatus(sstatus);\\n}\\n```\\n\\ndevintr,\u7531\u4e8e\u6211\u4eec\u4ee3\u7801\u5199\u9519\u7684 scause \u6bd4\u5982\u9875\u8868\u7684\u9519\u8bef\uff080x000000000000000f\uff09\uff0c\u65e2\u4e0d\u662f 0x8 \u5f00\u5934\u7684\u5916\u90e8\u8bbe\u5907\u4e2d\u65ad\uff0c\u4e5f\u4e0d\u662f\u8ba1\u65f6\u5668\u4e2d\u65ad\uff0c\u5c31\u4f1a\u89e6\u53d1 panic\\n\\n```c\\n// check if it\'s an external interrupt or software interrupt,\\n// and handle it.\\n// returns 2 if timer interrupt,\\n// 1 if other device,\\n// 0 if not recognized.\\nint devintr() {\\n    uint64 scause = r_scause();\\n\\n    if ((scause & 0x8000000000000000L) && (scause & 0xff) == 9) {\\n        // this is a supervisor external interrupt, via PLIC.\\n\\n        // irq indicates which device interrupted.\\n        int irq = plic_claim();\\n\\n        if (irq == UART0_IRQ) {\\n            uartintr();\\n        } else if (irq == VIRTIO0_IRQ) {\\n            virtio_disk_intr();\\n        } else if (irq) {\\n            printf(\\"unexpected interrupt irq=%d\\\\n\\", irq);\\n        }\\n\\n        // the PLIC allows each device to raise at most one\\n        // interrupt at a time; tell the PLIC the device is\\n        // now allowed to interrupt again.\\n        if (irq)\\n            plic_complete(irq);\\n\\n        return 1;\\n    } else if (scause == 0x8000000000000001L) {\\n        // software interrupt from a machine-mode timer interrupt,\\n        // forwarded by timervec in kernelvec.S.\\n\\n        if (cpuid() == 0) {\\n            clockintr();\\n        }\\n\\n        // acknowledge the software interrupt by clearing\\n        // the SSIP bit in sip.\\n        w_sip(r_sip() & ~2);\\n\\n        return 2;\\n    } else {\\n        return 0;\\n    }\\n}\\n```\\n\\n\u800c\u5982\u679c devintr \u6ca1\u6709\u95ee\u9898\uff0c\u901a\u8fc7 sepc \u518d\u6b21\u6539\u53d8\u4e86\u63a7\u5236\u6d41\\n\\n\u90a3 sepc \u73b0\u5728\u5728\u54ea\u91cc\u5462\uff1f\u524d\u9762\u4fdd\u5b58\u7684\u539f\u6765\u7684 pc\uff0c\u4e5f\u5c31\u662f\u56de\u5230\u539f\u6765\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u4e86\\n\\n---\\n\\nps2 \uff08ecall \u7684\u65f6\u5019\uff09\u4e3a\u4ec0\u4e48\u662f a7?\\n\\n> The ECALL instruction is used to make a request to the supporting execution environment, which is usually an operating system. **The ABI for the system will define how parameters for the environment request are passed**, but usually these will be in defined locations in the integer register file.\\n\\n\u6587\u6863\u8bf4\u8ba9 OS \u8bbe\u8ba1\u8005\u81ea\u5df1\u51b3\u5b9a\u600e\u4e48\u4f20\u53c2\u6570\\n\\n\u800c riscv-gnu-toolchain \u548c Linux \u7684\u505a\u6cd5\uff08\u8bbe\u8ba1\uff09\u662f\\n\\na0\\\\~a5 \u53ef\u4ee5\u653e\u53c2\u6570\uff0ca7 \u653e syscall number\uff0c\u6240\u4ee5\u5355\u7eaf\u662f\u4e00\u4e2a\u7ea6\u5b9a\u95ee\u9898\\n\\n```c\\nstatic uint64 argraw(int n) {\\n    struct proc *p = myproc();\\n    switch (n) {\\n    case 0:\\n        return p->trapframe->a0;\\n    case 1:\\n        return p->trapframe->a1;\\n    case 2:\\n        return p->trapframe->a2;\\n    case 3:\\n        return p->trapframe->a3;\\n    case 4:\\n        return p->trapframe->a4;\\n    case 5:\\n        return p->trapframe->a5;\\n    }\\n    panic(\\"argraw\\");\\n    return -1;\\n}\\n```\\n\\n---\\n\\n\u7531\u4e8e riscv \u6ca1\u6709\u786c\u4ef6\u6307\u4ee4\u4e0a\u5f3a\u5236 ecall \u7684\u65f6\u5019\u66f4\u65b0\u9875\u8868\\n\\n\u4e5f\u5c31\u662f\u8bf4\u6267\u884c ecall \u524d\u540e\uff0c\u90fd\u8fd8\u662f user pagetable\\n\\n\u6240\u4ee5 stvec \u7684\u5730\u5740\u5fc5\u987b\u5728 user space \u7684\u9875\u8868\u4e0a\u5b58\u5728\\n\\n\u4f46 trap handler \u9700\u8981\u5728 kernel space \u8fd0\u884c\\n\\n\u6240\u4ee5 stvec \u7684\u5730\u5740\u5fc5\u987b\u5728 kernel space \u4e5f\u5b58\u5728\uff0c\u5e76\u4e14\u4e24\u8005\uff08user space && kernel space\uff09\u7edf\u4e00\\n\\n**\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 xv6 \u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5728 kernel space \u548c user space \u90fd\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u7684 TRAMPOLINE \u9875**\uff08\u770b Chapter 3 \u7684\u56fe\uff09\\n\\nlec6 \u7684\u5b66\u751f\u63d0\u95ee\u5f88\u6709\u610f\u601d\\n\\n> \u5b66\u751f\u63d0\u95ee\uff1a\u8fd9\u4e2a\u95ee\u9898\u6216\u8bb8\u5e76\u4e0d\u5b8c\u5168\u76f8\u5173\uff0cread \u548c write \u7cfb\u7edf\u8c03\u7528\uff0c\u76f8\u6bd4\u5185\u5b58\u7684\u8bfb\u5199\uff0c\u4ed6\u4eec\u7684\u4ee3\u4ef7\u90fd\u9ad8\u7684\u591a\uff0c\u56e0\u4e3a\u5b83\u4eec\u9700\u8981\u5207\u6362\u6a21\u5f0f\uff0c\u5e76\u6765\u56de\u6363\u817e\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u5f53\u4f60\u6267\u884c\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7684\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c \u76f4\u63a5\u5f97\u5230\u4e00\u4e2a page table \u6620\u5c04\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1f\u8fd9\u6837\u53ea\u9700\u8981\u5411\u5bf9\u5e94\u4e8e\u8bbe\u5907\u7684\u7279\u5b9a\u7684\u5730\u5740\u5199\u6570\u636e\uff0c\u7a0b\u5e8f\u5c31\u80fd\u901a\u8fc7 page table \u8bbf\u95ee\u7279\u5b9a\u7684\u8bbe\u5907\u3002\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u597d\u9650\u5236\uff0c\u5c31\u50cf\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ea\u5141\u8bb8\u4fee\u6539\u7279\u5b9a\u6587\u4ef6\u4e00\u6837\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u50cf\u7cfb\u7edf\u8c03\u7528\u4e00\u6837\u5728\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u6765\u56de\u6363\u817e\u4e86\u3002\\n>\\n> Robert \u6559\u6388\uff1a\u8fd9\u662f\u4e2a\u5f88\u597d\u7684\u60f3\u6cd5\u3002\u5b9e\u9645\u4e0a\u5f88\u591a\u64cd\u4f5c\u7cfb\u7edf\u90fd\u63d0\u4f9b\u8fd9\u79cd\u53eb\u505a\u5185\u5b58\u6620\u5c04\u6587\u4ef6\uff08Memory-mapped file access\uff09\u7684\u673a\u5236\uff0c\u5728\u8fd9\u4e2a\u673a\u5236\u91cc\u9762\u901a\u8fc7 page table\uff0c\u53ef\u4ee5\u5c06\u7528\u6237\u7a7a\u95f4\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5bf9\u5e94\u5230\u6587\u4ef6\u5185\u5bb9\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u76f4\u63a5\u8bfb\u5199\u6587\u4ef6\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u4eec\u5c06\u5728 mmap \u5b9e\u9a8c\u4e2d\u5b8c\u6210\u8fd9\u4e2a\u673a\u5236\u3002\u5bf9\u4e8e\u8bb8\u591a\u7a0b\u5e8f\u6765\u8bf4\uff0c\u8fd9\u4e2a\u673a\u5236\u7684\u786e\u4f1a\u6bd4\u76f4\u63a5\u8c03\u7528 read/write \u7cfb\u7edf\u8c03\u7528\u8981\u5feb\u7684\u591a\u3002\\n\\nlec6 \u5728\u8fd9\u91cc\u4e5f\u63d2\u5165\u4e86\u4e00\u6bb5\u8bbe\u8ba1\u76f8\u5173\u7684\\n\\n> \u6240\u4ee5\u4f60\u73b0\u5728\u5c31\u4f1a\u95ee\uff0c\u4e3a\u4ec0\u4e48 ecall \u4e0d\u591a\u505a\u70b9\u5de5\u4f5c\u6765\u5c06\u4ee3\u7801\u6267\u884c\u4ece\u7528\u6237\u7a7a\u95f4\u5207\u6362\u5230\u5185\u6838\u7a7a\u95f4\u5462\uff1f\u4e3a\u4ec0\u4e48 ecall \u4e0d\u4f1a\u4fdd\u5b58\u7528\u6237\u5bc4\u5b58\u5668\uff0c\u6216\u8005\u5207\u6362 page table \u6307\u9488\u6765\u6307\u5411 kernel page table\uff0c\u6216\u8005\u81ea\u52a8\u7684\u8bbe\u7f6e Stack Pointer \u6307\u5411 kernel stack\uff0c\u6216\u8005\u76f4\u63a5\u8df3\u8f6c\u5230 kernel \u7684 C \u4ee3\u7801\uff0c\u800c\u4e0d\u662f\u5728\u8fd9\u91cc\u8fd0\u884c\u590d\u6742\u7684\u6c47\u7f16\u4ee3\u7801\uff1f\\n>\\n> \u5b9e\u9645\u4e0a\uff0c\u6709\u7684\u673a\u5668\u5728\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u4f1a\u5728\u786c\u4ef6\u4e2d\u5b8c\u6210\u6240\u6709\u8fd9\u4e9b\u5de5\u4f5c\u3002\u4f46\u662f RISC-V \u5e76\u4e0d\u4f1a\uff0cRISC-V \u79c9\u6301\u4e86\u8fd9\u6837\u4e00\u4e2a\u89c2\u70b9\uff1aecall \u53ea\u5b8c\u6210\u5c3d\u91cf\u5c11\u5fc5\u987b\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5176\u4ed6\u7684\u5de5\u4f5c\u90fd\u4ea4\u7ed9\u8f6f\u4ef6\u5b8c\u6210\u3002\u8fd9\u91cc\u7684\u539f\u56e0\u662f\uff0cRISC-V \u8bbe\u8ba1\u8005\u60f3\u8981\u4e3a\u8f6f\u4ef6\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u7a0b\u5e8f\u5458\u63d0\u4f9b\u6700\u5927\u7684\u7075\u6d3b\u6027\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u80fd\u6309\u7167\u4ed6\u4eec\u60f3\u8981\u7684\u65b9\u5f0f\u5f00\u53d1\u64cd\u4f5c\u7cfb\u7edf\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u8fd9\u6837\u60f3\uff0c\u5c3d\u7ba1 XV6 \u5e76\u6ca1\u6709\u4f7f\u7528\u8fd9\u91cc\u63d0\u4f9b\u7684\u7075\u6d3b\u6027\uff0c\u4f46\u662f\u4e00\u4e9b\u5176\u4ed6\u7684\u64cd\u4f5c\u7cfb\u7edf\u7528\u5230\u4e86\u3002\\n>\\n> - \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684 ecall \u662f\u5982\u6b64\u7684\u7b80\u5355\uff0c\u6216\u8bb8\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u5728\u4e0d\u5207\u6362 page table \u7684\u524d\u63d0\u4e0b\uff0c\u6267\u884c\u90e8\u5206\u7cfb\u7edf\u8c03\u7528\u3002\u5207\u6362 page table \u7684\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\uff0c\u5982\u679c ecall \u6253\u5305\u5b8c\u6210\u4e86\u8fd9\u90e8\u5206\u5de5\u4f5c\uff0c\u90a3\u5c31\u4e0d\u80fd\u5bf9\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u6539\u8fdb\uff0c\u4f7f\u5176\u4e0d\u7528\u5728\u4e0d\u5fc5\u8981\u7684\u573a\u666f\u5207\u6362 page table\u3002\\n>\\n> - \u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u540c\u65f6\u5c06 user \u548c kernel \u7684\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u4e00\u4e2a page table \u4e2d\uff0c\u8fd9\u6837\u5728 user \u548c kernel \u4e4b\u95f4\u5207\u6362\u65f6\u6839\u672c\u5c31\u4e0d\u7528\u5207\u6362 page table\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u64cd\u4f5c\u7cfb\u7edf\u6765\u8bf4\uff0c\u5982\u679c ecall \u5207\u6362\u4e86 page table \u90a3\u5c06\u4f1a\u662f\u4e00\u79cd\u6d6a\u8d39\uff0c\u5e76\u4e14\u4e5f\u51cf\u6162\u4e86\u7a0b\u5e8f\u7684\u8fd0\u884c\u3002\\n>\\n> - \u6216\u8bb8\u5728\u4e00\u4e9b\u7cfb\u7edf\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e9b\u5bc4\u5b58\u5668\u4e0d\u7528\u4fdd\u5b58\uff0c\u800c\u54ea\u4e9b\u5bc4\u5b58\u5668\u9700\u8981\u4fdd\u5b58\uff0c\u54ea\u4e9b\u4e0d\u9700\u8981\uff0c\u53d6\u51b3\u4e8e\u4e8e\u8f6f\u4ef6\uff0c\u7f16\u7a0b\u8bed\u8a00\uff0c\u548c\u7f16\u8bd1\u5668\u3002\u901a\u8fc7\u4e0d\u4fdd\u5b58\u6240\u6709\u7684 32 \u4e2a\u5bc4\u5b58\u5668\u6216\u8bb8\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u7684\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\uff0c\u6240\u4ee5\u4f60\u4e0d\u4f1a\u60f3\u8981 ecall \u8feb\u4f7f\u4f60\u4fdd\u5b58\u6240\u6709\u7684\u5bc4\u5b58\u5668\u3002\\n>\\n> - \u6700\u540e\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u7b80\u5355\u7684\u7cfb\u7edf\u8c03\u7528\u6216\u8bb8\u6839\u672c\u5c31\u4e0d\u9700\u8981\u4efb\u4f55 stack\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e9b\u975e\u5e38\u5173\u6ce8\u6027\u80fd\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0cecall \u4e0d\u4f1a\u81ea\u52a8\u4e3a\u4f60\u5b8c\u6210 stack \u5207\u6362\u662f\u6781\u597d\u7684\u3002\\n>\\n> \u6240\u4ee5\uff0cecall \u5c3d\u91cf\u7684\u7b80\u5355\u53ef\u4ee5\u63d0\u5347\u8f6f\u4ef6\u8bbe\u8ba1\u7684\u7075\u6d3b\u6027\u3002\\n\\n\u63a5\u4e0b\u6765\u8be6\u7ec6\u8bb2 trap \u7684\u8fc7\u7a0b\\n\\n\u901a\u8fc7 ecall \u6211\u4eec\u8fbe\u5230\u4e86 trampoline.S\\n\\n> \u56de\u5230 XV6 \u548c RISC-V\uff0c\u73b0\u5728\u7a0b\u5e8f\u4f4d\u4e8e trampoline page \u7684\u8d77\u59cb\uff0c\u4e5f\u662f uservec \u51fd\u6570\u7684\u8d77\u59cb\u3002\u6211\u4eec\u73b0\u5728\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u5c31\u662f\u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u3002\u5728 RISC-V \u4e0a\uff0c\u5982\u679c\u4e0d\u80fd\u4f7f\u7528\u5bc4\u5b58\u5668\uff0c\u57fa\u672c\u4e0a\u4e0d\u80fd\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4fdd\u5b58\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u6709\u4ec0\u4e48\u6837\u7684\u9009\u62e9\u5462\uff1f\\n>\\n> \u5728\u4e00\u4e9b\u5176\u4ed6\u7684\u673a\u5668\u4e2d\uff0c**\u6211\u4eec\u6216\u8bb8\u76f4\u63a5\u5c31\u5c06 32 \u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u5185\u5bb9\u5199\u5230\u7269\u7406\u5185\u5b58\u4e2d\u67d0\u4e9b\u5408\u9002\u7684\u4f4d\u7f6e\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u5728 RISC-V \u4e2d\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5728 RISC-V \u4e2d\uff0csupervisor mode \u4e0b\u7684\u4ee3\u7801\u4e0d\u5141\u8bb8\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5185\u5b58**\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u4f7f\u7528 page table \u4e2d\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u4ece\u524d\u9762\u7684\u8f93\u51fa\u6765\u770b\uff0cpage table \u4e2d\u4e5f\u6ca1\u6709\u591a\u5c11\u5185\u5bb9\\n>\\n> \u867d\u7136 XV6 \u5e76\u6ca1\u6709\u4f7f\u7528\uff0c\u4f46\u662f\u53e6\u4e00\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u662f\uff0c\u76f4\u63a5\u5c06 SATP \u5bc4\u5b58\u5668\u6307\u5411 kernel page table\uff0c\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6240\u6709\u7684 kernel mapping \u6765\u5e2e\u52a9\u6211\u4eec\u5b58\u50a8\u7528\u6237\u5bc4\u5b58\u5668\u3002\u8fd9\u662f\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a supervisor mode \u53ef\u4ee5\u66f4\u6539 SATP \u5bc4\u5b58\u5668\u3002\u4f46\u662f\u5728 trap \u4ee3\u7801\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f trap \u673a\u5236\u7684\u6700\u5f00\u59cb\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 kernel page table \u7684\u5730\u5740\u3002\u5e76\u4e14\u66f4\u6539 SATP \u5bc4\u5b58\u5668\u7684\u6307\u4ee4\uff0c\u8981\u6c42\u5199\u5165 SATP \u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u6765\u81ea\u4e8e\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002\u6240\u4ee5\uff0c\u4e3a\u4e86\u80fd\u6267\u884c\u66f4\u65b0 page table \u7684\u6307\u4ee4\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u7a7a\u95f2\u7684\u5bc4\u5b58\u5668\uff0c\u8fd9\u6837\u6211\u4eec\u624d\u80fd\u5148\u5c06 page table \u7684\u5730\u5740\u5b58\u5728\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e2d\uff0c\u7136\u540e\u518d\u6267\u884c\u4fee\u6539 SATP \u5bc4\u5b58\u5668\u7684\u6307\u4ee4\u3002\\n\\n\u5173\u4e8e\u5bc4\u5b58\u5668\u5728 xv6 \u4e4b\u4e2d\u662f\u600e\u4e48\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\uff0c\u662f\u4f7f\u7528\u4e86 csrrw \u8fd9\u4e2a\u6307\u4ee4\u548c sscratch \u8fd9\u4e2a\u989d\u5916\u5bc4\u5b58\u5668\uff0c\u524d\u9762\u63d0\u8fc7\u4e00\u4e9b\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\\n\\n[\u8fd9\u91cc](https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/lec06-isolation-and-system-call-entry-exit-robert/6.5-uservec)\\n\\nlec6 \u4e4b\u4e2d\u8fd8\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u8ba8\u8bba\\n\\n> \u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4fdd\u5b58\u5728 trapframe\uff0c\u800c\u4e0d\u662f\u7528\u6237\u4ee3\u7801\u7684\u6808\u4e2d\uff1f\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f\uff0c\u6211\u4eec\u4e0d\u786e\u5b9a\u7528\u6237\u7a0b\u5e8f\u662f\u5426\u6709\u6808\uff0c\u5fc5\u7136\u6709\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u6808\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u7f16\u7a0b\u8bed\u8a00\u7684\u7a0b\u5e8f\uff0cStack Pointer \u4e0d\u6307\u5411\u4efb\u4f55\u5730\u5740\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u6709\u6808\uff0c\u4f46\u662f\u6216\u8bb8\u5b83\u7684\u683c\u5f0f\u5f88\u5947\u602a\uff0c\u5185\u6838\u5e76\u4e0d\u80fd\u7406\u89e3\u3002\u6bd4\u5982\uff0c\u7f16\u7a0b\u8bed\u8a00\u4ee5\u5806\u4e2d\u4ee5\u5c0f\u5757\u6765\u5206\u914d\u6808\uff0c\u7f16\u7a0b\u8bed\u8a00\u7684\u8fd0\u884c\u65f6\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u5c0f\u5757\u7684\u5185\u5b58\u6765\u4f5c\u4e3a\u6808\uff0c\u4f46\u662f\u5185\u6838\u5e76\u4e0d\u77e5\u9053\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u8fd0\u884c\u4efb\u610f\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u7684\u7528\u6237\u7a0b\u5e8f\uff0c\u5185\u6838\u5c31\u4e0d\u80fd\u5047\u8bbe\u7528\u6237\u5185\u5b58\u7684\u54ea\u90e8\u5206\u53ef\u4ee5\u8bbf\u95ee\uff0c\u54ea\u90e8\u5206\u6709\u6548\uff0c\u54ea\u90e8\u5206\u5b58\u5728\u3002\u6240\u4ee5\u5185\u6838\u9700\u8981\u81ea\u5df1\u7ba1\u7406\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u4fdd\u5b58\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5185\u6838\u5c06\u8fd9\u4e9b\u5185\u5bb9\u4fdd\u5b58\u5728\u5c5e\u4e8e\u5185\u6838\u5185\u5b58\u7684 trapframe \u4e2d\uff0c\u800c\u4e0d\u662f\u7528\u6237\u5185\u5b58\\n\\n\u7136\u540e lec6 \u5728\u8bb2 usertrap \u51fd\u6570\u7684\u65f6\u5019\u6709\u51e0\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u70b9\\n\\n> \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u4fdd\u5b58\u7528\u6237\u7a0b\u5e8f\u8ba1\u6570\u5668\uff0c\u5b83\u4ecd\u7136\u4fdd\u5b58\u5728 SEPC \u5bc4\u5b58\u5668\u4e2d\uff0c\u4f46\u662f\u53ef\u80fd\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff1a\u5f53\u7a0b\u5e8f\u8fd8\u5728\u5185\u6838\u4e2d\u6267\u884c\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u8fdb\u5165\u5230\u90a3\u4e2a\u7a0b\u5e8f\u7684\u7528\u6237\u7a7a\u95f4\uff0c\u7136\u540e\u90a3\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u518d\u8c03\u7528\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u8fdb\u800c\u5bfc\u81f4 SEPC \u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u88ab\u8986\u76d6\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u7684 SEPC \u5bc4\u5b58\u5668\u5230\u4e00\u4e2a\u4e0e\u8be5\u8fdb\u7a0b\u5173\u8054\u7684\u5185\u5b58\u4e2d\uff0c\u8fd9\u6837\u8fd9\u4e2a\u6570\u636e\u624d\u4e0d\u4f1a\u88ab\u8986\u76d6\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 trapframe \u6765\u4fdd\u5b58\u8fd9\u4e2a\u7a0b\u5e8f\u8ba1\u6570\u5668\u3002\\n>\\n> XV6 \u4f1a\u5728\u5904\u7406\u7cfb\u7edf\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u80fd\u4e2d\u65ad\uff0c\u8fd9\u6837\u4e2d\u65ad\u53ef\u4ee5\u66f4\u5feb\u7684\u670d\u52a1\uff0c\u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u9700\u8981\u8bb8\u591a\u65f6\u95f4\u5904\u7406\u3002\u4e2d\u65ad\u603b\u662f\u4f1a\u88ab RISC-V \u7684 trap \u786c\u4ef6\u5173\u95ed\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\uff0c\u6211\u4eec\u9700\u8981\u663e\u5f0f\u7684\u6253\u5f00\u4e2d\u65ad\u3002\\n\\n> \u6700\u540e\u603b\u7ed3\u4e00\u4e0b\uff0c\u7cfb\u7edf\u8c03\u7528\u88ab\u523b\u610f\u8bbe\u8ba1\u7684\u770b\u8d77\u6765\u50cf\u662f\u51fd\u6570\u8c03\u7528\uff0c\u4f46\u662f\u80cc\u540e\u7684 user/kernel \u8f6c\u6362\u6bd4\u51fd\u6570\u8c03\u7528\u8981\u590d\u6742\u7684\u591a\u3002\u4e4b\u6240\u4ee5\u8fd9\u4e48\u590d\u6742\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\u662f\u8981\u4fdd\u6301 user/kernel \u4e4b\u95f4\u7684\u9694\u79bb\u6027\uff0c\u5185\u6838\u4e0d\u80fd\u4fe1\u4efb\u6765\u81ea\u7528\u6237\u7a7a\u95f4\u7684\u4efb\u4f55\u5185\u5bb9\u3002\\n\\n> \u53e6\u4e00\u65b9\u9762\uff0cXV6 \u5b9e\u73b0 trap \u7684\u65b9\u5f0f\u6bd4\u8f83\u7279\u6b8a\uff0cXV6 \u5e76\u4e0d\u5173\u5fc3\u6027\u80fd\u3002\u4f46\u662f\u901a\u5e38\u6765\u8bf4\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u4eba\u5458\u548c CPU \u8bbe\u8ba1\u4eba\u5458\u975e\u5e38\u5173\u5fc3\u5982\u4f55\u63d0\u5347 trap \u7684\u6548\u7387\u548c\u901f\u5ea6\u3002\u5fc5\u7136\u8fd8\u6709\u8ddf\u6211\u4eec\u8fd9\u91cc\u4e0d\u4e00\u6837\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0 trap\uff0c\u5f53\u4f60\u5728\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\u51fa\u53d1\uff1a\\n>\\n> - \u786c\u4ef6\u548c\u8f6f\u4ef6\u9700\u8981\u534f\u540c\u5de5\u4f5c\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u8bbe\u8ba1 XV6\uff0c\u91cd\u65b0\u8bbe\u8ba1 RISC-V \u6765\u4f7f\u5f97\u8fd9\u91cc\u7684\u5904\u7406\u6d41\u7a0b\u66f4\u52a0\u7b80\u5355\uff0c\u66f4\u52a0\u5feb\u901f\u3002\\n>\\n> - \u53e6\u4e00\u4e2a\u9700\u8981\u65f6\u523b\u8bb0\u4f4f\u7684\u95ee\u9898\u662f\uff0c\u6076\u610f\u8f6f\u4ef6\u662f\u5426\u80fd\u6ee5\u7528\u8fd9\u91cc\u7684\u673a\u5236\u6765\u6253\u7834\u9694\u79bb\u6027\u3002\\n\\n#### 4.3 Code: Calling system calls\\n\\n#### 4.4 Code: System call arguments\\n\\n\u7531\u4e0a\u6240\u8ff0\uff0c\u8c03\u7528 syscall \u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u5185\u6838\u4e2d\u771f\u6b63\u6267\u884c\u903b\u8f91\u7684 sys_xxx \u51fd\u6570\u9700\u8981\u4ece trapframe \u800c\u4e0d\u662f\u5bc4\u5b58\u5668\u91cc\u9762\u53d6\u53c2\u6570\\n\\n\u8fd9\u5bf9\u5e94 syscall.c \u7684 argint, argaddr,argfd \u7b49\u8f85\u52a9\u51fd\u6570\\n\\n\u5bf9\u4e8e\u522b\u7684\u53c2\u6570\uff0c\u53ea\u662f\u7e41\u7410\u4e0e\u5426\u7684\u95ee\u9898\uff1b\u5bf9\u4e8e\u6307\u9488\u53c2\u6570\uff0c\u6709\u4e24\u4e2a\u6311\u6218\uff1a\\n\\n- kernel pagetable \u548c user pagetable \u4e0d\u540c\\n- \u5982\u4f55\u907f\u514d\u6076\u610f\u6307\u9488\uff08\u4f8b\u5982\uff0c\u6307\u5411\u67d0\u4e2a\u5185\u6838\u7279\u5b9a\u533a\u57df\uff1b\u7a7a\u6307\u9488\uff09\\n\\nfetchstr \u662f\u4e00\u4e2a\u5f88\u597d\u7684\u793a\u8303\\n\\n```c\\nint fetchstr(uint64 addr, char *buf, int max) {\\n    struct proc *p = myproc();\\n    int err = copyinstr(p->pagetable, buf, addr, max);\\n    // \u8fd9\u91cc\u4f20\u5165p->pagetable\u800c\u4e0d\u662f\u4f7f\u7528kernel->pagetable\\n    if (err < 0)\\n        return err;\\n    return strlen(buf);\\n}\\n```\\n\\n\u8fd9\u6837\u4ece user space \u91cc\u9762\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u7269\u7406\u5730\u5740 pa\\n\\n\u53c8\u56e0\u4e3a kernel \u662f direct-mapped \u5e76\u4e14\u5df2\u7ecf\u6620\u5c04\u4e86\u6240\u6709 pa\uff0c\u76f4\u63a5\u5f53\u4f5c kernel \u7684 va \u5c31\u884c\\n\\n#### 4.5 Traps from kernel space\\n\\n\u5728 kernel \u7684 trap \u6709\u4ee5\u4e0b\u7684\u4f18\u52bf\uff1a\\n\\n- \u6b64\u65f6\u7684\u9875\u8868\u5df2\u7ecf\u662f kernel pagetable\uff0c\u4e0d\u9700\u8981\u5207\u6362\\n- \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u786e\u4fe1\u6709\u4e00\u4e2a kernel stack(\u6b63\u5982\u4e0a\u9762\u8ba8\u8bba\u7684\uff0cuser process \u53ef\u80fd\u6ca1\u6709 stack\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u653e\u5728 trapframe \u8fd9\u4e2a\u5b9e\u9645\u4e0a\u662f kernel \u7684\u5185\u5b58\u91cc\u9762)\uff0c\u90a3\u4e48 trap \u7684\u8fc7\u7a0b\u4e4b\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06\u5bc4\u5b58\u5668\u5b58\u50a8\u5728\u5185\u6838\u6808\u4e0a\\n\\n\u4e0d\u540c\u7684\u786c\u4ef6\u7ebf\u7a0b\uff08cpu\uff09\u5f53\u7136\u6709\u4e0d\u540c\u7684 kernel stack\uff0c\u8fd9\u4f7f\u5f97 kernel trap \u7684\u8fdb\u7a0b\u8c03\u5ea6\u66f4\u52a0\u65b9\u4fbf\\n\\n\u9274\u4e8e kerneltrap \u4e4b\u4e2d yield \u653e\u5f03\u81ea\u5df1\u7684 cpu\uff08\u53d1\u751f\u8fdb\u7a0b\u8c03\u5ea6\uff09\u4e4b\u540e\uff0csepc \u53ef\u80fd\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5728 kerneltrap \u7684 local variable\uff08\u5728\u672c cpu \u7684 kernel stack \u91cc\u9762\uff09\u5b58\u50a8\u4e86`uint sepc;` yield()\u7ed3\u675f\u540e\u4f7f\u7528 w_sepc(sepc)\u91cd\u65b0\u52a0\u8f7d\u81ea\u5df1\u7684 trap \u8fd4\u56de\u503c\\n\\n\u5728 usertrap \u4e4b\u4e2d\uff0c\u5148\u662f ecall \u8fdb\u5165 trampoline.S \u7684 uservec,\u518d\u8fdb\u5165 usertrap\\n\\n```c\\nvoid usertrap(void) {\\n    int which_dev = 0;\\n\\n    if ((r_sstatus() & SSTATUS_SPP) != 0)\\n        panic(\\"usertrap: not from user mode\\");\\n\\n    // send interrupts and exceptions to kerneltrap(),\\n    // since we\'re now in the kernel.\\n    w_stvec((uint64)kernelvec);\\n\\n    struct proc *p = myproc();\\n\\n    // save user program counter.\\n    p->trapframe->epc = r_sepc();\\n\\n    if (r_scause() == 8) {\\n        // system call\\n\\n        if (p->killed)\\n            exit(-1);\\n\\n        // sepc points to the ecall instruction,\\n        // but we want to return to the next instruction.\\n        p->trapframe->epc += 4;\\n\\n        // an interrupt will change sstatus &c registers,\\n        // so don\'t enable until done with those registers.\\n        intr_on();\\n\\n        syscall();\\n    } else if ((which_dev = devintr()) != 0) {\\n        // ok\\n    } else {\\n        printf(\\"usertrap(): unexpected scause %p pid=%d\\\\n\\", r_scause(), p->pid);\\n        printf(\\"            sepc=%p stval=%p\\\\n\\", r_sepc(), r_stval());\\n        p->killed = 1;\\n    }\\n\\n    if (p->killed)\\n        exit(-1);\\n\\n    // give up the CPU if this is a timer interrupt.\\n    if (which_dev == 2)\\n        yield();\\n\\n    usertrapret();\\n}\\n```\\n\\n\u5728\u8fd9\u91cc\u6539\u6210`w_stvec((uint64)kernelvec);`\u5207\u6362\u6210 kernel \u7684 stvec \u662f\u56e0\u4e3a\u6b64\u65f6\u5728\u5185\u6838\u6001\u4e86\uff0c\u5982\u679c\u5728\u5904\u7406 trap \u7684\u4e2d\u95f4\u518d\u53d1\u751f trap\uff08\u867d\u7136\u8fd9\u91cc\u5173\u95ed\u4e86\u4e2d\u65ad\u4f46\u8fd8\u6709\u5176\u4ed6\u53ef\u80fd\u7684 trap\uff09,\u6b64\u65f6\u5e94\u8be5\u662f kernel trap\\n\\n\u7136\u540e\u540e\u9762 ret \u7684\u65f6\u5019\u518d\u6539\u56de uservec\uff0c\u8fd9\u6837\u53cd\u590d\u6a2a\u8df3\uff0c\u8fbe\u6210\u7a33\u5b9a\u7684\u5faa\u73af\\n\\n> \u5373\u4f7f\u5173\u95ed\u4e86\u4e2d\u65ad\uff0c\u5904\u7406\u5668\u4ecd\u7136\u53ef\u4ee5\u54cd\u5e94\u4e00\u4e9b\u7279\u5b9a\u7684 trap\u3002\u4f8b\u5982\uff0c\u5904\u7406\u5668\u53ef\u4ee5\u54cd\u5e94\u540c\u6b65\u5f02\u5e38\uff0c\u5982\u9664\u4ee5\u96f6\u3001\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u5730\u5740\u7b49\u3002\u8fd9\u4e9b\u5f02\u5e38\u662f\u7531\u6267\u884c\u6307\u4ee4\u672c\u8eab\u5f15\u8d77\u7684\uff0c\u4e0e\u662f\u5426\u5f00\u542f\u4e2d\u65ad\u65e0\u5173\u3002\u6b64\u5916\uff0c\u5904\u7406\u5668\u4e5f\u53ef\u4ee5\u54cd\u5e94\u4e00\u4e9b\u975e\u5c4f\u853d\u4e2d\u65ad\uff08non-maskable interrupts\uff09\uff0c\u8fd9\u4e9b\u4e2d\u65ad\u662f\u7531\u4e25\u91cd\u7684\u786c\u4ef6\u9519\u8bef\u5f15\u8d77\u7684\uff0c\u5982\u7535\u6e90\u6545\u969c\u6216\u5185\u5b58\u9519\u8bef\uff0c\u5b83\u4eec\u4e0d\u80fd\u88ab\u666e\u901a\u7684\u4e2d\u65ad\u5173\u95ed\u6307\u4ee4\u963b\u6b62\u3002\\n\\n\u800c\u5173\u95ed\u4e2d\u65ad\u662f\u56e0\u4e3a\u6b64\u65f6\u5728 kernel space\uff0c\u518d ecall \u7684\u8bdd\u5c31\u5bc4\u4e86\\n\\n#### 4.6 Page-fault exceptions\\n\\nxv6 \u5bf9 exception \u7684\u5904\u7406\u975e\u5e38\u7684\u7b80\u5355\u7c97\u66b4\uff1a\\n\\n\u5982\u679c\u662f user process \u89e6\u53d1\u7684 exception\uff0ckernel \u5c31\u4f1a\u6740\u6389\u8fd9\u4e2a process\\n\\n\u5982\u679c\u662f kernel \u89e6\u53d1\u7684 exception\uff0c\u5c31\u4f1a\u89e6\u53d1 panic\\n\\n\u6210\u719f\u7684 OS \u6709 COW\uff08Copy On Write\uff09\u7b49\u673a\u5236\uff0cRISCV \u5b9e\u9645\u4e0a\u80fd\u5206\u8fa8 page fault \u662f\u4ece load\uff0cstore \u8fd8\u662f instruction page fault\\n\\n\u5b9e\u73b0 COW \u8fd8\u9700\u8981\u6709 book keeping \u673a\u5236\uff0c\u6b64\u65f6\u5224\u65ad\u4e00\u4e2a\u7269\u7406\u9875\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5c31\u9700\u8981\u989d\u5916\u7684\u4e00\u4e9b\u8ba1\u6570\u673a\u5236\uff0c\u4e00\u4e2a\u7269\u7406\u9875\u53ef\u4ee5\u5728\u591a\u4e2a\u9875\u8868\u4e4b\u4e2d\u51fa\u73b0\uff08\u51fa\u73b0\u7684\u6570\u91cf\u4f9d\u8d56\u4e8e fork \u548c page fault,exec \u548c exit\uff09\\n\\n\u53e6\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u4f18\u5316\u662f COW \u673a\u5236\u4e0b\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a pagetable \u6301\u6709\u5bf9\u67d0\u4e2a\u7269\u7406\u9875\u7684\u5f15\u7528\u7684\u8bdd\uff0c\u5b8c\u5168\u53ef\u4ee5\u4e0d copy \u8fd9\u4e2a\u7269\u7406\u9875\u5230\u8fdb\u7a0b\u7684 user memory\\n\\npagetable \u548c pagefault \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u80fd\u6574\u51fa\u4e00\u4e9b\u6709\u8da3\u7684\u673a\u5236\uff0c\u6bd4\u5982 lazy allocation\\n\\n\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528 sbrk \u53bb\u5c1d\u8bd5\u53d6\u5f97\u66f4\u591a\u7684\u5185\u5b58\u7684\u65f6\u5019\uff0c\u5185\u6838\u53ea\u589e\u957f\u8fdb\u7a0b\u7684 size\uff0c\u4f46\u4e0d\u5b9e\u9645 alloc \u7269\u7406\u9875\uff0c\u4e5f\u4e0d\u66f4\u65b0 PTE\\n\\n\u5c31\u884c COW \u4e00\u6837\uff0c\u89e6\u53d1 page fault \u7684\u65f6\u5019\u624d\u53bb\u5b9e\u9645 alloc\\n\\n\u8fd9\u4e2a feature \u7684\u597d\u5904\u6bd4\u521d\u6b65\u8bbe\u60f3\u7684\u8fd8\u591a\uff1a\u6bd4\u5982\u5bf9\u4e8e\u5927\u7684\u5185\u5b58\u7533\u8bf7\uff0clazy allocation \u80fd\u4f7f\u5f97\u5185\u5b58\u7684\u589e\u957f\u662f\u968f\u65f6\u95f4\u6162\u6162\u589e\u957f\u7684\uff08\u800c\u4e0d\u662f\u4e00\u53e3\u6c14\u5206\u914d\u4e00\u4e2a\u5927\u5185\u5b58\uff09\uff1b\u53c8\u6bd4\u5982\u5bf9\u4e8e\u5927\u5185\u5b58\u7533\u8bf7\uff0cOS \u5b9e\u9645\u53ef\u4ee5\u4e00\u6b21 page fault \u7ed9 a batch of pages\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u4e00\u4e2a page alloc\\n\\n\u8fd8\u6709\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684 feature \u662f demand paging\\n\\nxv6 \u662f eagerly \u52a0\u8f7d\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f1a\u4e00\u53e3\u6c14\u52a0\u8f7d\u6574\u4e2a\u5185\u6838\u7684.text \u548c.data \u6bb5\u5230\u5185\u5b58\u4e4b\u4e2d\\n\\n\u800c\u73b0\u4ee3 OS \u4f7f\u7528 demand paging\uff0c\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u53ea\u662f\u7b80\u5355\u7684\u521b\u5efa pagetable\uff0c\u5e76\u5c06 PTE \u8bbe\u7f6e\u6210 invalid\uff0c\u7136\u540e\u7b49\u5230\u8bbf\u95ee\u4e86\u8fd9\u4e2a PTE\uff0c\u89e6\u53d1 page fault \u7684\u65f6\u5019\u624d\u4f1a\u52a0\u8f7d\u6570\u636e\\n\\n\u8fd8\u6709\u5c31\u662f paging in disk\uff0c\u53ea\u5728\u5185\u5b58\u91cc\u9762\u653e\u6700\u5e38\u7528\u7684\u6570\u636e\u548c\u4ee3\u7801\u6bb5\uff0c\u5269\u4e0b\u7684\u5b58\u5230 disk \u91cc\u9762\uff08\u79f0\u4e4b\u4e3a page out\uff09\u5e76\u8bbe\u7f6e PTE \u4e3a invalid\uff0c\u7136\u540e\u89e6\u53d1 page fault \u4e4b\u540e\u518d\u4ece disk \u91cc\u9762\u52a0\u8f7d\u56de\u6765\uff08page in\uff09\\n\\nLinux \u91cc\u9762\u8fd8\u6709\u6bd4\u5982\u5c06\u4e00\u4e2a\u7a00\u758f\u5927\u77e9\u9635\u5168\u90e8\u6620\u5c04\u5230\u51e0\u4e2a page \u7684 page fault trick\uff0c\u591a\u79cd trick \u7efc\u5408\u4f5c\u7528\u4e4b\u4e0b\uff0c\u4f7f\u5f97 Linux \u8fdb\u7a0b\u5360\u7528\u7684 VA \u5927\u5c0f\u53cd\u800c\u4e00\u822c\u8fdc\u8fdc\u5927\u4e8e\u5b9e\u9645\u7269\u7406\u5b9e\u9645\u7a7a\u95f4\\n\\n\u800c\u4f7f\u7528 demand paging,lazy alloction \u7b49\u7684\u53e6\u4e00\u4e2a\u597d\u5904\u662f\uff1a\u7531\u4e8e\u73b0\u4ee3\u8ba1\u7b97\u673a\u5e94\u7528\u57fa\u672c\u90fd\u4e0d\u662f\u7a7a\u95f4\u53cb\u597d\u7684\uff0c\u90fd\u4f1a\u5c3d\u53ef\u80fd\u53d6\u5f97\u66f4\u591a\u7684\u7b97\u529b\u548c\u7a7a\u95f4\u8d44\u6e90\u6765\u4fdd\u8bc1\u54cd\u5e94\u7b49\u7279\u6027\uff0c\u6240\u4ee5\u518d\u5927\u7684 RAM \u4e5f\u4f1a\u51fa\u73b0\u5185\u5b58\u4e0d\u8db3\uff0c\u9700\u8981\u9891\u7e41 evict \u5185\u5b58\u9875\u7684\u60c5\u51b5\uff0c\u800c evict \u662f\u4e00\u4e2a\u5f00\u9500\u4e0d\u5c0f\u7684\u64cd\u4f5c\uff0calloc \u7684\u66f4\u591a\uff0cevict \u7684\u4e5f\u66f4\u591a\uff0clazy \u800c\u4e0d\u662f eagar \u7684\u7b56\u7565\u4f18\u52bf\u5c31\u8d8a\u660e\u663e\\n\\n#### 4.7 Real World\\n\\nxv6 \u6574\u4e2a trapframe \u548c TRAMPOLINE \u7684\u590d\u6742\u8bbe\u8ba1\u5b9e\u9645\u662f RISCV \u201c\u6307\u4ee4\uff08ecall\uff09\u5c3d\u53ef\u80fd\u505a\u5c11\u7684\u5de5\u4f5c\u201d\u7684\u8bbe\u8ba1\u539f\u5219\u63a8\u52a8\u7684\\n\\n\u4f46\u5b9e\u9645\u4e0a\uff0c\u4e00\u4e2a\u6700\u7b80\u5355\u6d88\u9664\u8fd9\u4e2a\u590d\u6742\u8f6c\u6362\u7684\u673a\u5236\u5c31\u662f\u628a kernel pagetable \u590d\u5236\u5230\u6bcf\u4e00\u4e2a user pagetable\uff0c\u7136\u540e\u53ea\u662f\u7528\u6743\u9650\u4f4d\u6765\u63a7\u5236\u6743\u9650\\n\\n\u8fd9\u6837\u7684\u597d\u5904\u6709\u5f88\u591a\uff0csyscall \u7684\u4ee3\u7801\u5927\u5927\u7b80\u5316\uff0ckernel \u53ef\u4ee5\u76f4\u63a5\u89e3\u5f15\u7528 user pointer\uff0cetc\uff1b\u8bb8\u591a\u751f\u4ea7\u7ea7\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u4e86\u8fd9\u79cd\u8bbe\u8ba1\\n\\nxv6 \u4e4b\u6240\u4ee5\u8bbe\u8ba1\u6210 trapframe \u8fd9\u6837\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4ee3\u7801\u7684\u5b89\u5168\u6027\u4ee5\u53ca\u907f\u514d\u8003\u8651\u4e0a\u8ff0\u7684 kernel PTE \u548c user PTE \u5982\u4f55\u907f\u514d\u91cd\u53e0\u7684\u95ee\u9898\u3002\\n\\n\u751f\u4ea7\u7ea7\u7684 OS \u4e4b\u4e2d\uff0c\u4e0d\u4ec5\u8981\u6709\u524d\u9762\u7684 COW, demand paging, paging in disk,lazy allocation\uff0c\u8fd8\u8981\u6709 mmap, cache buffer \u7b49\u8bb8\u591a\u673a\u5236\uff0c\u4ee5\u53ca\u7206\u5185\u5b58\u65f6\u5019\u7684\u59a5\u5584\u5904\u7406\u65b9\u6cd5\uff08xv6 \u5982\u679c\u7206\u5185\u5b58\u4e86\u5c31\u76f4\u63a5\u8fd4\u56de error \u6216\u8005 kill \u5e94\u7528\u7a0b\u5e8f\uff09"},{"id":"/Go-Gin\u5b66\u4e60","metadata":{"permalink":"/blog/Go-Gin\u5b66\u4e60","source":"@site/blog/Go-Gin\u5b66\u4e60.md","title":"Go,Gin\u5b66\u4e60","description":"Go & Gin & Gorm \u5b66\u4e60","date":"2024-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"go","permalink":"/blog/tags/go"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":19.715,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"Go,Gin\u5b66\u4e60","date":"2024-07-11T00:00:00.000Z","author":"ayanami","tags":["go","web"],"keywords":["go","gin","gorm"]},"unlisted":false,"prevItem":{"title":"xv6book Notes(C1-4)","permalink":"/blog/xv6book-notes"},"nextItem":{"title":"godis\u6e90\u7801\u9605\u8bfb","permalink":"/blog/godis\u6e90\u7801\u9605\u8bfb"}},"content":"### Go & Gin & Gorm \u5b66\u4e60\\n\\n#### Go\\n\\nLearn go by test\\n\\n##### \u57fa\u672c\u8bed\u6cd5\\n\\n\x3c!-- more --\x3e\\n\\n`package`:\u7c7b\u4f3c`namespace`\u6216\u8005`module`\\n\\n\u5faa\u73af\\n\\n```go\\nfunc Repeat(character string) string {\\n\\tvar repeat string\\n\x3c!--truncate--\x3e\\tfor i:=1;i<=5;i++{\\n\\t\\trepeat = repeat + character\\n\\t}\\n\\treturn repeat\\n}\\n```\\n\\n\u5176\u4e2d`:=`\u662f\u5e26\u521d\u59cb\u503c\u5b9a\u4e49\u7684\u8bed\u6cd5\u7cd6\uff0c`var name type`\u662f\u4e0d\u5e26\u521d\u59cb\u503c\u7684\u5b9a\u4e49\uff1bgo \u7684\u5faa\u73af\u53ea\u6709 for\\n\\n\u6d4b\u8bd5\u793a\u4f8b\\n\\n```go\\nimport (\\n\\t\\"testing\\"\\n)\\nfunc TestRepeat(t *testing.T){\\n\\tgot:=Repeat(\\"a\\")\\n\\texpect:=\\"aaaaa\\"\\n\\tif got!=expect{\\n\\t\\tt.Errorf(\\"got %q, expect %q\\", got, expect)\\n\\t}\\n}\\n```\\n\\n\u4f7f\u7528\\n\\n```bash\\ngo test\\n```\\n\\n\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5982\u679c\u6709\u5b9a\u4e49 main \u51fd\u6570\uff08\u5728`package main`\u4e4b\u4e2d\uff09\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5`go run xx.go`\\n\\ngo \u5305\u5185\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u7684\u53ef\u89c1\u6027\u662f\u901a\u8fc7\u5927\u5c0f\u5199\u533a\u5206\u7684\uff0c\u5927\u5199\u5bf9\u5305\u5916\u53ef\u89c1\uff0c\u5c0f\u5199\u4e0d\u53ef\u89c1\\n\\ntest \u51fd\u6570\u9700\u8981\u5199\u6210`TestXXX`\u7684\u5f62\u5f0f\uff0c\u540c\u65f6\u6587\u4ef6\u540d\u4e5f\u8981\u5199\u6210`whatfiles_test`\\n\\n\u57fa\u51c6\u6d4b\u8bd5 benchmark\uff0c`BenchmarkXXX`\u51fd\u6570\u540d\\n\\nstrings \u5e93\u548c\u76f8\u5173\u51fd\u6570\\n\\nrange \u8fed\u4ee3\\n\\n```go\\nfunc Sum(arr []int) int {\\n\\tsum := 0\\n\\t// index, element\\n\\tfor _, ele := range arr{\\n\\t\\tsum += ele\\n\\t}\\n\\treturn sum\\n}\\n```\\n\\n```bash\\ngo test -cover # \u6d4b\u8bd5\u6d4b\u8bd5\u8986\u76d6\u7387\\n```\\n\\n\u53d8\u957f\u53c2\u6570\u548c append\\n\\n```go\\nfunc SumAll(arrs ...[]int) []int{\\n\\tans:=[]int{}\\n\\tfor _, arr := range arrs{\\n\\t\\tans = append(ans, Sum(arr))\\n\\t}\\n\\treturn ans\\n}\\n```\\n\\n\u51fd\u6570\u6307\u9488(\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u7ed9\u53d8\u91cf)\\n\\n```go\\n\\tcheckSums := func(t testing.TB, got, want []int) {\\n\\t\\tt.Helper()\\n\\t\\tif !reflect.DeepEqual(got, want) {\\n\\t\\t\\tt.Errorf(\\"got %v want %v\\", got, want)\\n\\t\\t}\\n\\t}\\n```\\n\\n\u96c6\u5408\u5207\u7247\uff1ago \u652f\u6301\u7c7b\u4f3c python \u7684\u5207\u7247\\n\\n\u7ed3\u6784\u548c\u65b9\u6cd5\uff08OOP\uff09\\n\\n```go\\nimport \\"math\\"\\ntype Rectangle struct {\\n   width float32\\n   height float32\\n}\\ntype Circle struct {\\n\\tradius float32\\n\\tcenter_x float32\\n\\tcenter_y float32\\n}\\nfunc (r Rectangle) Area() float32 {\\n\\treturn r.width * r.height\\n}\\nfunc (c Circle) Area() float32 {\\n\\treturn math.Pi * c.radius * c.radius\\n}\\n```\\n\\ngo \u4e0d\u5141\u8bb8\u51fd\u6570\u91cd\u8f7d\uff0c\u7c7b\u5b8c\u5168\u548c\u7ed3\u6784\u4f53\u7b49\u4ef7\uff0c\u7c7b\u5185\u51fd\u6570\uff08\u65b9\u6cd5\uff09\u5982\u4e0a\u5b9a\u4e49\\n\\n\u7ed3\u6784\u4f53\u53ef\u4ee5\u5d4c\u5957\uff0c\u5e76\u4e14\u652f\u6301\u6298\u53e0\u8c03\u7528\uff08\u4f8b\u5982 A.B.ccc, ccc \u662f B \u7684\u5c5e\u6027\uff0cB \u662f A \u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u76f4\u63a5 A.ccc\uff09\\n\\ngo \u6709 interface\\n\\n```go\\ntype Shape interface{\\n\\tArea() float32\\n}\\n```\\n\\n\u6d4b\u8bd5\u4e5f\u65b9\u4fbf\\n\\n```go\\nfunc TestArea(t *testing.T){\\n\\tcheckArea := func(t *testing.T, shape Shape, expect float32){\\n\\t\\tdiff := shape.Area() - expect\\n\\t\\tif math.Abs(float64(diff)) > 1e-6{\\n\\t\\t\\tt.Errorf(\\"expect %v, got %v, diff %v\\", expect, shape.Area(), diff)\\n\\t\\t}\\n\\t}\\n\\tt.Run(\\"rectangles\\", func(t *testing.T) {\\n\\t\\trectangle := Rectangle{12, 6}\\n\\t\\tcheckArea(t, rectangle, 72.0)\\n\\t})\\n\\n\\tt.Run(\\"circles\\", func(t *testing.T) {\\n\\t\\tcircle := Circle{10, 0, 0}\\n\\t\\tcheckArea(t, circle, 314.1592653589793)\\n\\t})\\n}\\n```\\n\\n**go \u4e4b\u4e2d\u63a5\u53e3\u89e3\u6790\u662f\u9690\u5f0f\u7684**\uff0c \u4e0d\u9700\u8981\u663e\u5f0f implements xxx\uff08interface\uff09\uff0c\u53ea\u9700\u8981\u786e\u5b9e\u6709\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5c31\u80fd\u6210\u529f\u7f16\u8bd1\\n\\nBest Practice:\u8868\u7ed3\u6784\u6d4b\u8bd5, \u4f7f\u7528`t.Run`\u548c\u6d4b\u8bd5\u8868\u548c`#%v(\u6253\u5370\u7ed3\u6784)`\u6765\u83b7\u5f97\u6e05\u6670\u7684\u6d4b\u8bd5\\n\\n```go\\nimport (\\n\\t\\"math\\"\\n\\t\\"testing\\"\\n)\\nfunc TestArea(t *testing.T){\\n\\tcheckArea := func(t *testing.T, name string, shape Shape, expect float32){\\n\\t\\tt.Run(name, func(t *testing.T){\\n\\t\\t\\tdiff := shape.Area() - expect\\n\\t\\t\\tif math.Abs(float64(diff)) > 1e-6{\\n\\t\\t\\t\\tt.Errorf(\\"in %#v, expect %v, got %v, diff %v\\", shape, expect, shape.Area(), diff)\\n\\t\\t\\t}\\n\\t\\t})\\n\\t}\\n\\ttestTable:= []struct{\\n\\t   name string\\n       shape Shape\\n\\t   expect float32\\n\\t}{\\n\\t\\t{name: \\"Rectangle\\",shape: Rectangle{width: 10, height: 10}, expect: 100},\\n\\t\\t{name:\\"Circle\\", shape: Circle{radius: 10}, expect: 314.1592653589793},\\n\\t}\\n\\n\\tfor _, test :=range testTable{\\n\\t\\tcheckArea(t, test.name, test.shape, test.expect)\\n\\t}\\n}\\n```\\n\\n\u6307\u9488\u548c\u9519\u8bef\\n\\ngo \u7684\u51fd\u6570\u9ed8\u8ba4\u90fd\u662f\u503c\u4f20\u9012\uff0c\u800c\u6307\u9488\u53c8\u7531\u4e8e\u8bed\u6cd5\u7cd6\u8868\u73b0\u5f97\u548c\u5f15\u7528\uff08\u7684\u8bed\u6cd5\uff09\u5dee\u4e0d\u591a\\n\\n```go\\nfunc (w *Wallet) Withdraw(amount Bitcoin) {\\n\\tw.balance -= amount\\n} // \u8fd9\u662fthis->balance -= amount\\nfunc (w Wallet) Withdraw(amount Bitcoin) {\\n\\tw.balance -= amount\\n} // \u8fd9\u662fw = (*this), w.balance -= amount\\n```\\n\\ngo \u7528\u8fd4\u56de\u503c\u6765\u8868\u793a\u4e00\u4e2a\u51fd\u6570\u53ef\u80fd\u629b\u51fa\u9519\u8bef\uff08\u5176\u4e2d\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e3a error\uff09\\n\\n\u5982\u679c\u8fd9\u4e2a error \u662f nil\uff08null \u7684\u53d8\u4f53\uff09\uff0c\u90a3\u5c31\u662f\u6b63\u5e38\uff0c\u5426\u5219\u662f\u9519\u8bef\uff0c\u4f8b\u5982\\n\\n```go\\nfunc (w *Wallet) Withdraw(amount Bitcoin) error {\\n\\tif amount > w.balance {\\n\\t\\treturn errors.New(\\"oh no\\")\\n\\t}\\n\\n\\tw.balance -= amount\\n\\treturn nil\\n}\\n```\\n\\n\u68c0\u6d4b\u4e00\u4e2a\u7c7b\u662f\u5426\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u5168\u90e8\u65b9\u6cd5\uff1a\\n\\n```go\\nvar _ Interface = (*Class)(nil) // \u5982\u679cClass\u7c7b\u7684\u6307\u9488\u4e0d\u80fd\u5f3a\u5236\u8f6c\u6362\u6210\u63a5\u53e3\uff0c\u5c31\u6ca1\u6709\u5168\u90e8\u5b9e\u73b0\\n```\\n\\n\u7a7a\u63a5\u53e3\uff1a\u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u7c7b\u578b\\n\\n```go\\nfunc main(){\\n    m := make(map[string]interface{})\\n    m[\\"name\\"]=\\"Tom\\"\\n    m[\\"age\\"]=18\\n    m[\\"parents\\"]=Persons{A, B}\\n}\\n```\\n\\nmap `map[key]value`\\n\\n1. \u4f20\u9012\u6307\u9488\uff08\u6240\u4ee5\u4e0d\u9700\u8981\u4f20\u9012 map \u7684\u5f15\u7528\uff0c\u76f4\u63a5\u4f20\u9012\u5c31\u884c\uff09\\n2. `var m map[string]string`\u540e\uff0cm \u662f nil\uff0c\u8fd9\u4e0d\u597d\u3002\u8fd9**\u4e0d\u662f**\u7a7a map\\n\\n```go\\nvar dictionary = map[string]string{}\\n// OR\\nvar dictionary = make(map[string]string)\\n```\\n\\n\u6cdb\u578b\\n\\n```go\\ntype List[T any] struct {\\n    head, tail *element[T]\\n}\\ntype element[T any] struct {\\n    next *element[T]\\n    val  T\\n}\\nfunc (lst *List[T]) Push(v T) {\\n    if lst.tail == nil {\\n        lst.head = &element[T]{val: v}\\n        lst.tail = lst.head\\n    } else {\\n        lst.tail.next = &element[T]{val: v}\\n        lst.tail = lst.tail.next\\n    }\\n}\\n```\\n\\n\u5e76\u53d1\\n\\n1. goroutine\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\"fmt\\"\\n\\t\\"sync\\"\\n\\t\\"time\\"\\n)\\n\\nfunc ConcurrentDownload(url string) {\\n\\tvar wg sync.WaitGroup\\n\\tdownload := func (name string) {\\n\\t\\tfmt.Printf(\\"Start Downloading %v.\\\\n\\", name)\\n\\t\\ttime.Sleep(time.Second) // simulate\\n\\t\\tfmt.Printf(\\"%v finished.\\\\n\\", name)\\n\\t\\twg.Done()\\n\\t}\\n\\tfor i:=0;i<10;i++{\\n\\t\\twg.Add(1)\\n\\t\\tgo download(\\"File\\"+fmt.Sprint(i))\\n\\t}\\n\\twg.Wait()\\n}\\n\\nfunc main(){\\n\\tConcurrentDownload(\\"http://example.com\\")\\n}\\n```\\n\\n\u5176\u4e2d\uff0c\\n\\n- `sync.WaitGroup`\u7528\u4e8e\u7b49\u5f85\u6240\u6709\u534f\u7a0b\u7ed3\u675f\uff08\u5176\u5b9e\u662f\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u5728\u8ba1\u6570\u4e3a 0 \u7684\u65f6\u5019 Wait()\u5c31\u4e0d\u5835\u585e\u4e86\uff0cAdd()\u52a0\u4e00\uff0cDone()\u51cf\u4e00\uff09\\n- `go <dosomething>`\u8d77\u4e00\u4e2a dosomething \u7684\u534f\u7a0b\\n\\n2. channel\\n\\n\u5e76\u53d1\u534f\u7a0b\u7684\u901a\u4fe1\u7ba1\u9053\\n\\n```go\\npackage main\\nimport (\\n\\t\\"fmt\\"\\n)\\nfunc PrintFib(n int) {\\n\\tfib_chan := make(chan int)\\n    go func(){\\n\\t\\tx := 0\\n\\t\\ty := 1\\n\\t\\tfor i:=0;i<n;i++{\\n\\t\\t\\tfib_chan <- x\\n\\t\\t\\tx, y = y, x + y\\n\\t\\t}\\n\\t\\tclose(fib_chan)\\n\\t}()\\n\\n\\tfor num := range fib_chan{\\n\\t\\tfmt.Printf(\\"%d \\", num)\\n\\t\\tfmt.Println()\\n\\t}\\n}\\n\\nfunc main(){\\n\\tPrintFib(10)\\n}\\n```\\n\\n\u5176\u4e2d\uff0c\\n\\n- make \u662f\u4e00\u4e2a\u7c7b\u4f3c malloc \u7684\u4e1c\u897f, \u4f46\u4ed6\u53ef\u4ee5\u81ea\u52a8 gc\uff0c\u5e76\u4e14\u53ef\u4ee5\u5206\u914d channel \u7ba1\u9053\\n- `<-`\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c \u5bf9 chan \u4f7f\u7528\uff0c\u4ee3\u8868\u628a\u53f3\u8fb9\u7684\u4e22\u8fdb chan\\n- \u7528 make \u521b\u5efa chan\uff0c\u53ef\u4ee5\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4ee3\u8868\u7f13\u51b2\u533a\u5927\u5c0f\\n  - \u5982\u679c\u6ca1\u6709\uff0c\u65e0\u7f13\u51b2\uff0c\u53ea\u6709\u5f53\u63a5\u53d7\u548c\u53d1\u9001\u7aef\u90fd\u5c31\u7eea\u624d\u4f1a\u5f00\u59cb\u53d1\u9001\\n  - \u5982\u679c\u6709\uff0csize \u4e3a n\uff0c\u610f\u5473\u7740\u6709\u4e00\u4e2a n \u4e2a\u5143\u7d20\u5927\u5c0f\u7684\u7f13\u51b2\u533a\uff0c\u53d1\u9001\u7aef\u53ef\u4ee5\u63d0\u524d\u53d1\u9001\uff0c\u7f13\u51b2\u533a\u6ee1\u4e4b\u524d\u4e0d\u9700\u8981\u7b49\u5f85\u63a5\u6536\u7aef\\n- chan \u652f\u6301 range \u8bed\u6cd5\uff0crange \u4f1a\u6cbf\u7740\u7ba1\u9053\u8fed\u4ee3\u76f4\u81f3\u5173\u95ed\u2014\u2014\u7ba1\u9053\u53ea\u80fd\u88ab\u53d1\u9001\u65b9\u5173\u95ed\uff0c\u63a5\u6536\u65b9\u5173\u95ed\u7ba1\u9053\u540e\u7ee7\u7eed\u53d1\u9001\u4f1a panic\\n\\n\u7528 channel \u4e5f\u53ef\u4ee5\u8fdb\u884c\u8fd9\u6837\u7684\u540c\u6b65\uff1a\\n\\n```go\\npackage main\\nimport (\\n    \\"fmt\\"\\n    \\"time\\"\\n)\\nfunc worker(done chan bool) {\\n    fmt.Print(\\"working...\\")\\n    time.Sleep(time.Second)\\n    fmt.Println(\\"done\\")\\n\\n    done <- true\\n}\\nfunc main() {\\n    done := make(chan bool, 1)\\n    go worker(done)\\n    <-done // \u5728\u8fd9\u91cc\u8d77\u5230\u4e86\u7c7b\u4f3cwait()\u6216\u8005join()\u7684\u6548\u679c\\n}\\n```\\n\\n\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a channel \u53ea\u53ef\u4ee5\u63a5\u53d7/\u53d1\u9001\\n\\n```go\\nfunc pong(pings <-chan string, pongs chan<- string) {\\n    // pings\u53ea\u80fd\u53d1\u9001\uff0cpongs\u53ea\u80fd\u63a5\u53d7\\n    msg := <-pings\\n    pongs <- msg\\n}\\n```\\n\\n3. select\\n\\n\u53ef\u4ee5\u540c\u65f6\u7b49\u5f85\u591a\u4e2a channel \u4e0a\u7684\u6d88\u606f\\n\\n```go\\npackage main\\nimport (\\n    \\"fmt\\"\\n    \\"time\\"\\n)\\nfunc main() {\\n\\n    c1 := make(chan string)\\n    c2 := make(chan string)\\n\\n    go func() {\\n        time.Sleep(1 * time.Second)\\n        c1 <- \\"one\\"\\n    }()\\n    go func() {\\n        time.Sleep(2 * time.Second)\\n        c2 <- \\"two\\"\\n    }()\\n\\n    for i := 0; i < 2; i++ {\\n        select {\\n        case msg1 := <-c1:\\n            fmt.Println(\\"received\\", msg1)\\n        case msg2 := <-c2:\\n            fmt.Println(\\"received\\", msg2)\\n        }\\n    }\\n}\\n```\\n\\nselect \u5b9e\u73b0\u8d85\u65f6\u2014\u2014\u4e00\u4e2a\u534f\u7a0b\u5e72\u6d3b\uff0c\u4e00\u4e2a\u534f\u7a0b Sleep timeout \u79d2\uff0c\u7136\u540e select \u4e24\u4e2a\u534f\u7a0b\\n\\nselect \u5b9e\u73b0\u975e\u5835\u585e\u7ba1\u9053\u2014\u2014\u4e00\u4e2a default case\uff0c\u4e0d\u63a5\u6536\u4e1c\u897f\\n\\n\u534f\u7a0b\u7406\u89e3\uff1a\\n\\n- \u8f7b\u91cf\u7ea7\u7ebf\u7a0b\uff0c\u8f7b\u91cf\u7ea7\u4f53\u73b0\u5728\u662f\u5728\u7528\u6237\u6001\u7684\u5806\u4e0a\u53bb\u6a21\u62df\u6808\u7ed3\u6784\uff0c\u5728\u4ee3\u7801\u4e4b\u4e2d\u81ea\u5df1\u8c03\u5ea6\uff0c\u800c\u4e0d\u662f\u901a\u8fc7 syscall \u9677\u5165\u5185\u6838\u8c03\u5ea6\u2014\u2014\u5176\u4e2d\u975e\u62a2\u5360\u5f0f\u7684\u5b9e\u73b0\uff08\u4f8b\u5982 python \u7684 asyncio\uff09\uff0c\u901a\u8fc7 yield \u7b49\u5728\u963b\u585e\u65f6\u4e3b\u52a8\u8ba9\u51fa\uff1b\u62a2\u5360\u5f0f\u7684\u5b9e\u73b0\u53ef\u4ee5\u76f4\u63a5\u88ab\u8c03\u5ea6\u5668\u8c03\u5ea6\uff08\u4f8b\u5982 goroutine\uff09\\n- \u4e5f\u56e0\u4e3a\u662f\u5728\u7528\u6237\u6001\u7684\u8c03\u5ea6\uff0c**\u534f\u7a0b\u5b9e\u9645\u4e0a\u6ca1\u6709\u5e76\u884c\u7684\u529f\u80fd\uff0c\u53ea\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u963b\u585e\u7684\u6267\u884c\u6d41**\uff0c\u591a\u4e2a\u534f\u7a0b\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e0a\u6267\u884c\uff0c\u4e5f\u53ea\u5360\u636e cpu \u7684\u4e00\u4e2a\u6838\u5fc3\\n- \u534f\u7a0b\u7684\u7528\u5904\u5728\u4e8e\uff0c\u4ee5\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u65b9\u5f0f\u53bb\u5b8c\u6210\u5835\u585e\u7684\u529f\u80fd\uff08\u4f8b\u5982 IO\uff0c network\uff09\uff0c\u6267\u884c\u4e24\u4e2a IO \u8bf7\u6c42\uff0ccpu \u5de5\u4f5c 1ms\uff0cIO \u5de5\u4f5c 1s\uff0c\u5982\u679c\u662f\u4e24\u4e2a\u7ebf\u7a0b\uff0ccpu \u7684 1ms \u53ef\u4ee5\u5e76\u884c\uff0c\u4f46\u53d7\u9650\u4e8e\u7ebf\u7a0b\u521b\u5efa\u56de\u6536\u8c03\u5ea6\u5f00\u9500\u548c\u7cfb\u7edf\u6700\u5927\u7ebf\u7a0b\u8d44\u6e90\u9650\u5236\uff0c\u5b9e\u9645\u635f\u8017\u7684\u65f6\u95f4\u5f88\u53ef\u80fd\u5927\u4e8e ms \u7ea7\u522b\u3002\u800c\u534f\u7a0b\u5728 cpu \u4e0a\u9700\u8981\u4f9d\u6b21\u8fd0\u884c\u4e24\u4e2a 1ms,\u4f46\u662f\u540c\u6837\u4e0d\u9700\u8981\u88ab IO \u5835\u585e\\n- \u5177\u4f53\u7684\u5b9e\u73b0\u65b9\u5f0f\u800c\u8a00\uff0c\u5206\u4e3a\u6709\u6808\u534f\u7a0b\u548c\u65e0\u6808\u534f\u7a0b\uff0c\u6709\u6808\u534f\u7a0b\u6709\u81ea\u5df1\u7684\u4e00\u6bb5\u6a21\u62df\u7684\u6808\u7a7a\u95f4\uff0c\u5728\u5207\u6362\u65f6\u4fdd\u5b58\u5bc4\u5b58\u5668\u5230\u6808\u91cc\u9762\uff1b\u65e0\u6808\u534f\u7a0b\u4f7f\u7528\u72b6\u6001\u673a\u5b9e\u73b0\uff0c\u5728\u5207\u6362\u65f6\u8bb0\u5f55\u72b6\u6001\u673a\u7684\u72b6\u6001\u3002\u6709\u6808\u534f\u7a0b\u5f00\u9500\u66f4\u5927\uff0c\u4f46\u8868\u8fbe\u529b\u66f4\u5f3a\\n- ts \u91cc\u9762\u7684 async/await \u5c31\u662f\u534f\u7a0b\u7684\u5305\u88c5\uff0cawait \u5c31\u662f\u8bb0\u5f55\u72b6\u6001\u7684\u70b9\uff0c\u7a0b\u5e8f\u5411\u4e0b\u6267\u884c\u5230 await \u5904\u6682\u505c\u534f\u7a0b\uff0c\u7b49\u5f85 await \u4e8b\u4ef6\u5b8c\u6210\\n\\ntimer&ticker \u5185\u7f6e\u8ba1\u65f6\u5668, \u53ef\u7528\u4e8e\u9650\u6d41\u7b49\\n\\ndefer \u5ef6\u8fdf\u505a\u67d0\u4ef6\u4e8b\uff0c\u5e38\u89c1\u4e8e\u6a21\u62df\u4e00\u79cd RAII\uff0c\u65e0\u8bba\u662f\u4f55\u79cd\u65b9\u5f0f\u9000\u51fa\u90fd\u80fd\u6b63\u5e38\u6267\u884c\\n\\n```go\\nfunc writeToFile(filename string, data []byte) error {\\n    file, err := os.Create(filename)\\n    if err != nil {\\n        return err\\n    }\\n    defer file.Close() // \u786e\u4fdd\u6587\u4ef6\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u88ab\u5173\u95ed,defer\u540e\u7684\u8c03\u7528\u4f1a\u5728defer\u6240\u5728\u7684\u51fd\u6570\u7ed3\u675f\u540e\u6267\u884c\\n\\n    _, err = file.Write(data)\\n    return err\\n}\\n```\\n\\n```go\\n \\tvar wg sync.WaitGroup\\n    for i := 1; i <= 5; i++ {\\n        wg.Add(1)\\n        go func() {\\n            defer wg.Done()\\n            worker(i)\\n        }()\\n    }\\n```\\n\\n5. \u539f\u5b50\u64cd\u4f5c\\n\\n```go\\npackage main\\nimport (\\n    \\"fmt\\"\\n    \\"sync\\"\\n    \\"sync/atomic\\"\\n)\\nfunc main() {\\n    var ops atomic.Uint64\\n    var wg sync.WaitGroup\\n    for i := 0; i < 50; i++ {\\n        wg.Add(1)\\n        go func() {\\n            for c := 0; c < 1000; c++ {\\n                ops.Add(1)\\n            }\\n            wg.Done()\\n        }()\\n    }\\n    wg.Wait()\\n\\n    fmt.Println(\\"ops:\\", ops.Load()) //50000\\n}\\n```\\n\\n6. mutex \u9501\\n\\n```go\\ntype Container struct {\\n    mu       sync.Mutex\\n    counters int\\n}\\nfunc (c *Container) inc(name string) {\\n    c.mu.Lock()\\n    defer c.mu.Unlock()\\n    c.counters++\\n}\\n```\\n\\nUseful API\\n\\nSort \u6392\u5e8f(`slices`) \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8c13\u8bcd\\n\\n\u81ea\u5b9a\u4e49\u6392\u5e8f\u4e4b\u4e2d\u7684\u5185\u7f6e\u7c7b\u578b\u7684\u6bd4\u8f83\u7528`cmp.Compare()`\\n\\n\u4f8b\u5982\\n\\n```go\\nPersonCmp := func(a *Person, b *Person){\\n    return cmp.Compare(a.name, b.name)\\n}\\nslices.SortFunc(Persons, PersonCmp)\\nslices.Sort(ints)\\nslices.isSorted(ints)\\n```\\n\\ngo \u6709\u5185\u7f6e`panic(msg string)`\u548c`recover`(\u5728 defer \u5185\u90e8\uff0ccatch panic)\\n\\n```go\\n// recover \u7684\u8fd4\u56de\u503c\u662f\u8c03\u7528 panic \u65f6\u5f15\u53d1\u7684\u9519\u8bef\u3002\\n    defer func() {\\n        if r := recover(); r != nil {\\n            fmt.Println(\\"Recovered. Error:\\\\n\\", r)\\n        }\\n    }()\\n\\tmayPanic()\\n```\\n\\n\u5b57\u7b26\u4e32\u76f8\u5173\u51fd\u6570\\n\\n```go\\npackage main\\nimport (\\n    \\"fmt\\"\\n    s \\"strings\\"\\n)\\nvar p = fmt.Println\\nfunc main() {\\n    p(\\"Contains:  \\", s.Contains(\\"test\\", \\"es\\"))\\n    p(\\"Count:     \\", s.Count(\\"test\\", \\"t\\"))\\n    p(\\"HasPrefix: \\", s.HasPrefix(\\"test\\", \\"te\\"))\\n    p(\\"HasSuffix: \\", s.HasSuffix(\\"test\\", \\"st\\"))\\n    p(\\"Index:     \\", s.Index(\\"test\\", \\"e\\"))\\n    p(\\"Join:      \\", s.Join([]string{\\"a\\", \\"b\\"}, \\"-\\"))\\n    p(\\"Repeat:    \\", s.Repeat(\\"a\\", 5))\\n    p(\\"Replace:   \\", s.Replace(\\"foo\\", \\"o\\", \\"0\\", -1))\\n    p(\\"Replace:   \\", s.Replace(\\"foo\\", \\"o\\", \\"0\\", 1))\\n    p(\\"Split:     \\", s.Split(\\"a-b-c-d-e\\", \\"-\\"))\\n    p(\\"ToLower:   \\", s.ToLower(\\"TEST\\"))\\n    p(\\"ToUpper:   \\", s.ToUpper(\\"test\\"))\\n}\\n```\\n\\n\u6b63\u5219\uff1a`regexp`\u5305\\n\\nJSON \u5305\uff0crand \u5305\\n\\nparse \u6570\u5b57\uff0c\\n\\n```go\\npackage main\\n\\nimport (\\n    \\"fmt\\"\\n    \\"strconv\\"\\n)\\n\\nfunc main() {\\n    f, _ := strconv.ParseFloat(\\"1.234\\", 64)\\n    i, _ := strconv.ParseInt(\\"123\\", 0, 64) // 0:\u4ece\u5b57\u7b26\u4e32\u63a8\u65ad\u57fa\u6570\uff0c 64:int64\\n    d, _ := strconv.ParseInt(\\"0x1c8\\", 0, 64)\\n    u, _ := strconv.ParseUint(\\"789\\", 0, 64)\\n    k, _ := strconv.Atoi(\\"135\\")\\n    _, e := strconv.Atoi(\\"wat\\")\\n}\\n```\\n\\n\u6587\u4ef6 IO\uff0c\u5b8c\u5168\u7c7b\u4f3c c\\n\\nReadFile \u8bfb\u53d6\u6574\u4e2a\u6587\u4ef6\uff0cRead \u8bfb\u53d6\u51e0\u4e2a\u5b57\u8282\uff08\u7528`make([]byte, size)`\u88c5),Seek \u6709\u4e09\u79cd\u65b9\u5f0f io.SeekStart, io.SeekCurrent, io.SeekEnd,bufio \u63d0\u4f9b\u5e26\u7f13\u51b2 IO\\n\\nWrite, WriteFile, Create, Flush, Sync, WriteString(in bufio)\u540c\u7406\\n\\n\u5220\u9664\u6587\u4ef6 os.Remove\\n\\n\u6587\u4ef6\u8def\u5f84`path/filepath`\u5305\uff0cfilepath.Join \u8fde\u63a5\u8def\u5f84 Ext \u5f97\u5230\u62d3\u5c55\u540d\uff0c Dir \u5f97\u5230\u6587\u4ef6\u76ee\u5f55\uff0cBase \u5f97\u5230\u6587\u4ef6\u540d\\n\\n\u6587\u4ef6\u5939 os.Mkdir, os.RemoveAll \uff08\u7b49\u6548\u4e8e`rm -rf`\uff09, os.Chdir, os.ReadDir(\u5f97\u5230\u6587\u4ef6\u7684\u96c6\u5408)\\n\\nWalkDir \u9012\u5f52\u904d\u5386\\n\\n```go\\nerr = filepath.WalkDir(\\"subdir\\", visit)\\nfunc visit(path string, d fs.DirEntry, err error) error {\\n    if err != nil {\\n        return err\\n    }\\n    fmt.Println(\\" \\", path, d.IsDir())\\n    return nil\\n}\\n```\\n\\n//go:embed \u5728\u7f16\u8bd1\u51fa\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e4b\u4e2d\u5305\u542b\\n\\n```go\\n//go:embed folder/single_file.txt\\nvar fileString string  // \u5c06folder/single_file.txt\u7684\u5185\u5bb9\u653e\u5230fileString\u91cc\u9762\uff0c\u5e76\u5728\u7f16\u8bd1\u65f6\u5e26\u4e0a\u8be5txt\\n```\\n\\nos.Args \u547d\u4ee4\u884c\u53c2\u6570\\n\\nos.Getenv / Setenv \u73af\u5883\u53d8\u91cf\\n\\n---\\n\\n#### Gin\\n\\nstart\\n\\nr \u6307\u5b9a\u4e00\u4e2a wsgi \u5e94\u7528\u5b9e\u4f8b\\n\\nGET \u8def\u7531\u54cd\u5e94\\n\\nRun() \u53ef\u4ee5\u5e26\u4e00\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982`Run(\\":9090\\")`\u8fd9\u91cc\u4f7f\u7528\u9ed8\u8ba4 8080\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\"github.com/gin-gonic/gin\\"\\n)\\n\\nfunc main(){\\n\\tr := gin.Default()\\n\\tr.GET(\\"/ping\\", func(c *gin.Context) {\\n\\t\\tc.JSON(200, gin.H{\\n\\t\\t\\t\\"message\\": \\"pong\\",\\n\\t\\t})\\n\\t})\\n\\tr.Run() // \u76d1\u542c\u5e76\u5728 0.0.0.0:8080 \u4e0a\u542f\u52a8\u670d\u52a1\\n}\\n```\\n\\n\u8def\u7531\uff0cGET\uff0cPOST\uff0cPUT\uff0cDELETE\uff0c...\\n\\n\u52a8\u6001\u8def\u7531\uff0c\\n\\n```go\\nr.GET(\\"/user/:name\\", func(c *gin.Context) {\\n\\tname := c.Param(\\"name\\")\\n\\tc.String(http.StatusOK, \\"Hello %s\\", name)\\n}) // \u5339\u914d/user/ayanami\\n\\n\\n```\\n\\nQuery\\n\\n```go\\n// \u5339\u914dusers?name=xxx&role=xxx\uff0crole\u53ef\u9009\\nr.GET(\\"/users\\", func(c *gin.Context) {\\n\\tname := c.Query(\\"name\\")\\n\\trole := c.DefaultQuery(\\"role\\", \\"admin\\")\\n\\tc.String(http.StatusOK, \\"%s is a %s\\", name, role)\\n})\\n```\\n\\nPOST\\n\\n```go\\nr.POST(\\"/form\\", func(c *gin.Context) {\\n\\tusername := c.PostForm(\\"username\\")\\n\\tpassword := c.DefaultPostForm(\\"password\\", \\"000000\\") // \u53ef\u8bbe\u7f6e\u9ed8\u8ba4\u503c\\n\\n\\tc.JSON(http.StatusOK, gin.H{\\n\\t\\t\\"username\\": username,\\n\\t\\t\\"password\\": password,\\n\\t})\\n})\\n```\\n\\n\u70ed\u66f4\u65b0\uff1a\u4f7f\u7528 air (https://github.com/air-verse/air/blob/master/README-zh_cn.md)\\n\\n\u91cd\u5b9a\u5411\\n\\n```go\\nr.GET(\\"/redirect\\", func(c *gin.Context) {\\n    c.Redirect(http.StatusMovedPermanently, \\"/index\\")\\n})\\n```\\n\\n\u4e0a\u4f20\u6587\u4ef6\\n\\n```go\\nr.POST(\\"/upload1\\", func(c *gin.Context) {\\n\\tfile, _ := c.FormFile(\\"file\\")\\n\\t// c.SaveUploadedFile(file, dst)\\n\\tc.String(http.StatusOK, \\"%s uploaded!\\", file.Filename)\\n})\\n```\\n\\nShouldBindJson, ShouldBindQuery, ShouldBindUri \u5c06\u4f20\u5165\u7684 json, xml, uri \u7b49\u5c1d\u8bd5\u89e3\u6790\u5230\u67d0\u4e2a\u7ed3\u6784\u4f53, \u89e3\u6790\u5931\u8d25\u8fd4\u56de err\\n\\n```go\\n\\tvar request dto.CourseDetailRequest\\n\\tif err := c.ShouldBindUri(&request); err != nil {\\n\\t\\tc.JSON(http.StatusNotFound, dto.BaseResponse{Message: \\"\u53c2\u6570\u9519\u8bef\\"})\\n\\t\\treturn\\n\\t}\\n\\tcourse, err := service.GetCourseDetail(c, request.CourseID) // \u6210\u529f\u89e3\u6790\u5c31\u53ef\u4ee5\u7528\u6210\u5458\u53d8\u91cf\u4e86\\n\\ntype CourseDetailRequest struct {\\n\\tCourseID int64 `uri:\\"courseID\\" binding:\\"required\\"`\\n}\\n```\\n\\n\u6307\u5b9a binding:\\"required\\"\u4f1a\u62d2\u7edd\u7a7a\u53c2\u6570\uff0c\u81ea\u52a8\u6821\u9a8c\\n\\n\u8fd8\u53ef\u4ee5\u5728 binding \u91cc\u9762\u6307\u5b9a\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\uff0c\u5177\u4f53\u770b\u5b98\u65b9\u6587\u6863\uff0c\u53c2\u6570\u6bd4\u8f83\u591a\uff0c\u5b8c\u6210\u8868\u5355\u9a8c\u8bc1\u529f\u80fd\uff0c\u901a\u8fc7\u53cd\u5c04\\n\\n\u6587\u4ef6\u4e0a\u4f20\u548c\u8fd4\u56de\uff1a FormFile \u548c SaveUploadFile, \u8fd8\u6709 MaxMultipartMemory\\n\\n```go\\nfunc main() {\\n\\trouter := gin.Default()\\n\\t// \u4e3a multipart forms \u8bbe\u7f6e\u8f83\u4f4e\u7684\u5185\u5b58\u9650\u5236 (\u9ed8\u8ba4\u662f 32 MiB)\\n\\trouter.MaxMultipartMemory = 8 << 20  // 8 MiB\\n\\trouter.POST(\\"/upload\\", func(c *gin.Context) {\\n\\t\\t// \u5355\u6587\u4ef6, \u8fd9\u91cc\u7684file\u5b9e\u9645\u4e0a\u662fFileHeader\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u6709file.Filename .Size\u5f97\u5230\u4e00\u4e9b\u57fa\u7840\u4fe1\u606f\\n\\t\\tfile, _ := c.FormFile(\\"file\\")\\n\\t\\tlog.Println(file.Filename)\\n\\n\\t\\tdst := \\"./\\" + file.Filename\\n\\t\\t// \u4e0a\u4f20\u6587\u4ef6\u81f3\u6307\u5b9a\u7684\u5b8c\u6574\u6587\u4ef6\u8def\u5f84\\n\\t\\tc.SaveUploadedFile(file, dst)\\n\\n\\t\\tc.String(http.StatusOK, fmt.Sprintf(\\"\'%s\' uploaded!\\", file.Filename))\\n\\t})\\n\\trouter.Run(\\":8080\\")\\n}\\n```\\n\\n\u4e2d\u95f4\u4ef6\u548c\u5206\u7ec4\u8def\u7531\\n\\n\u5206\u7ec4\uff1a\u7ba1\u7406\u8def\u7531\\n\\n```go\\nv1 := r.Group(\\"/v1\\").Use(publicHandler)\\n{\\n\\tv1.GET(\\"/posts\\", defaultHandler1)\\n\\tv1.GET(\\"/series\\", defaultHandler2)\\n}\\n```\\n\\n**\u4e2d\u95f4\u4ef6\uff1a\u5728\u8bf7\u6c42\u5230\u8fbe\u8def\u7531\u7684\u524d\u540e\u8fdb\u884c\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\uff08\u4f8b\u5982 jwt \u9274\u6743\uff09** `Use()`api\\n\\n\u5c31\u662f\u4e00\u4e2a\u8fd4\u56de `c *gin.Context`\u7684 func\\n\\nContext\uff1a\u67d0\u79cd\u952e\u503c\u5bf9\\n\\n```go\\nfunc Logger() gin.HandlerFunc {\\n\\treturn func(c *gin.Context) {\\n\\t\\tt := time.Now()\\n\\n\\t\\t// \u8bbe\u7f6e example \u53d8\u91cf\\n\\t\\tc.Set(\\"example\\", \\"12345\\")\\n\\n        // \u8bf7\u6c42\u524d\uff0cNext()\u524d\\n\\n\\t\\tc.Next() // \u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6\\n\\n        // \u8bf7\u6c42\u540e\uff0c\u56de\u6765\u7684\u65f6\u5019\\n\\t\\tlatency := time.Since(t)\\n\\t\\tlog.Print(latency)\\n\\n\\t\\t// \u83b7\u53d6\u53d1\u9001\u7684 status\\n\\t\\tstatus := c.Writer.Status()\\n\\t\\tlog.Println(status)\\n\\t}\\n}\\n```\\n\\n\u5b9e\u9645\u4e0a\u662f\u6d0b\u8471\u6a21\u5f0f\\n\\n\u4e2d\u95f4\u4ef6\u5d4c\u5957 m1 before -> m2 before -> core -> m2 after -> m1 after\\n\\n\u8fd8\u6709\u4e00\u4e2a api \u662f c.Abort() \u4f8b\u5982\u7528\u6237\u9a8c\u8bc1\u5931\u8d25\u65f6\uff0c\u8c03\u7528\u5b83\u963b\u6b62\u7ee7\u7eed\u5411\u4e0b\u4e00\u5c42\u4e2d\u95f4\u4ef6\u4f20\u9012\\n\\n\u4e0a\u4e00\u5c42 Set \u4e86\u4e4b\u540e\uff0c\u4e0b\u4e00\u5c42\u5c31\u53ef\u4ee5\u4ece Context \u91cc\u9762 Get\\n\\n\u65e5\u5fd7\uff1a\\n\\n```go\\nfunc main() {\\n    // \u7981\u7528\u63a7\u5236\u53f0\u989c\u8272\uff0c\u5c06\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\u65f6\u4e0d\u9700\u8981\u63a7\u5236\u53f0\u989c\u8272\u3002\\n    gin.DisableConsoleColor()\\n\\n    // \u8bb0\u5f55\u5230\u6587\u4ef6\u3002\\n    f, _ := os.Create(\\"gin.log\\")\\n    gin.DefaultWriter = io.MultiWriter(f)\\n\\n    // \u5982\u679c\u9700\u8981\u540c\u65f6\u5c06\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\u548c\u63a7\u5236\u53f0\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u3002\\n    // gin.DefaultWriter = io.MultiWriter(f, os.Stdout)\\n\\n    router := gin.Default()\\n    router.GET(\\"/ping\\", func(c *gin.Context) {\\n        c.String(200, \\"pong\\")\\n    })\\n\\n    router.Run(\\":8080\\")\\n}\\n```\\n\\n\u81ea\u5b9a\u4e49\u65e5\u5fd7\uff1a\u770b\u6587\u6863\\n\\n\u7075\u6d3b\u5ea6\u4e0d\u591f\u3001\u65e5\u5fd7\u62c6\u5206 go-logging, logrus(recommended)\\n\\n\u6210\u54c1\u65e5\u5fd7\u5305\\n\\n### gorm\\n\\n\u8fd9\u4e2a\u66f4\u662f\u4f9d\u6258\uff0c\u5168\u770b\u6587\u6863\u5c31\u884c\uff0c\u91cc\u9762\u4e00\u5806\u6307\u9488\u4e71\u98de\u548c\u795e\u5947\u8bed\u4e49\u548c\u7c7b\u4f3c Any \u7684\u5b57\u7b26\u4e32\u53cd\u5c04\u90fd\u662f\u4f9d\u6258\\n\\n\u5efa\u8bae\u59cb\u7ec8\u5f00\u6587\u6863\u5f00\u53d1\\n\\nOpen \u94fe\u63a5\uff0cAutoMigrate \u5efa\u8868\\n\\n\u589e\u5220\u6539 Create Delete Update\u3001Updates\uff08Update key value, Updates map/struct\uff09 (Save)\\n\\n\u67e5 First Find \u6839\u636e\u6709\u65e0 ID\uff08\u4e3b\u952e\uff09\u51b3\u5b9a\u67e5\u5168\u8868\u8fd8\u662f\u67e5\u4e00\u4e2a\u5177\u4f53\u7684\uff0c\u5982\u679c\u67e5\u5168\u8868\u4f20\u4e00\u4e2a\u7a7a\u5bf9\u8c61\u7684\u6307\u9488\u5c31\u884c\uff0cFirst \u5355\u4e2a\uff0cFind \u67e5\u5207\u7247\\n\\n\u6761\u4ef6 Where Or \u586b\u7b80\u5355 sql\\n\\n```go\\n// Get first matched record\\ndb.Where(\\"name = ?\\", \\"jinzhu\\").First(&user)\\n// SELECT * FROM users WHERE name = \'jinzhu\' ORDER BY id LIMIT 1;\\n\\n// Get all matched records\\ndb.Where(\\"name <> ?\\", \\"jinzhu\\").Find(&users)\\n// SELECT * FROM users WHERE name <> \'jinzhu\';\\n\\n// IN\\ndb.Where(\\"name IN ?\\", []string{\\"jinzhu\\", \\"jinzhu 2\\"}).Find(&users)\\n// SELECT * FROM users WHERE name IN (\'jinzhu\',\'jinzhu 2\');\\n\\n// LIKE\\ndb.Where(\\"name LIKE ?\\", \\"%jin%\\").Find(&users)\\n// SELECT * FROM users WHERE name LIKE \'%jin%\';\\n\\n// AND\\ndb.Where(\\"name = ? AND age >= ?\\", \\"jinzhu\\", \\"22\\").Find(&users)\\n// SELECT * FROM users WHERE name = \'jinzhu\' AND age >= 22;\\n\\n// Time\\ndb.Where(\\"updated_at > ?\\", lastWeek).Find(&users)\\n// SELECT * FROM users WHERE updated_at > \'2000-01-01 00:00:00\';\\n\\n// BETWEEN\\ndb.Where(\\"created_at BETWEEN ? AND ?\\", lastWeek, today).Find(&users)\\n// SELECT * FROM users WHERE created_at BETWEEN \'2000-01-01 00:00:00\' AND \'2000-01-08 00:00:00\';\\n\\n```\\n\\nDelete \u9ed8\u8ba4\u8f6f\u5220\u9664\uff08\u5982\u679c\u6a21\u578b\u6709 DeleteAt \u5b57\u6bb5\uff0c\u4f8b\u5982\u4f7f\u7528 gorm.Modal\uff09\\n\\n\u7528 Unscoped().Delete()\u786c\u5220\u9664\\n\\n\u7ed3\u6784\u4f53 tag + \u4e00\u5bf9\u4e00\u3001\u4e00\u5bf9\u591a\u3001\u591a\u5bf9\u591a\uff1a\u770b\u6587\u6863\\n\\n\u6709 django \u4e00\u8109\u76f8\u627f\u7684\u624b\u52a8 Preload()\\n\\nJWT: jwt-go \u6587\u6863\\n\\n---\\n\\n### \u5b9e\u6218\uff1ajcourse_go\\n\\nmain.go\\n\\n- Init() godotenv \u4ece`.env`\u6587\u4ef6\u4e4b\u4e2d\u8bfb\u73af\u5883\u53d8\u91cf\\n- \u94fe\u63a5 Redis, DB, OpenAI api\\n- registerRouter, \u542f\u52a8 gin Engine\\n\\nrouter.go\\n\\n- InitSession() \u4ece\u73af\u5883\u53d8\u91cf SESSION_SECRET \u83b7\u53d6\u5bc6\u94a5\u540e tcp \u94fe\u63a5 Redis\uff0c\u96c6\u6210\u8fdb\u5165 gin (Sessions API \u6307\u5b9a\u5b58\u7684\u5730\u65b9 NewRedisStore \u5c31\u884c)\\n\\n- \u8def\u7531\u7ec4\uff1a\\n\\n  - authGroup \u767b\u9646\u76f8\u5173\uff0c\u4e0d\u9700\u8981 auth\\n  - needAuthGroup \u5176\u4ed6\u975e Admin(teacher, course, review, user) \u8fc7\u4e2d\u95f4\u4ef6 RequireAuth() \u5224\u65ad Session()\u91cc\u9762\u6709\u6ca1\u6709 Use\\n\\n  ```go\\n  func RequireAuth() gin.HandlerFunc {\\n  \\treturn func(c *gin.Context) {\\n  \\t\\tsession := sessions.Default(c)\\n  \\t\\tuser := session.Get(constant.SessionUserAuthKey)\\n  \\t\\tif user == nil {\\n  \\t\\t\\tc.JSON(http.StatusUnauthorized, dto.BaseResponse{Message: \\"\u672a\u6388\u6743\u7684\u8bf7\u6c42\\"})\\n  \\t\\t\\tc.Abort()\\n  \\t\\t}\\n  \\t\\tc.Next()\\n  \\t}\\n  }\\n\\n  ```\\n\\n  - adminGroup \u8fc7\u4e2d\u95f4\u4ef6 RequireAdmin() \u5c31\u662f\u518d\u52a0\u4e86\u4e00\u4e2a\u5224\u65ad User \u7684 Role\\n\\nhandlers(\u67d0\u79cd\u610f\u4e49\u4e0a\u7684 Controllers in java)\\n\\n- auth: \u5f88\u91cd\u590d\u7684\u4e1c\u897f\\n- course:\\n\\n  - Get\\n    - \u4ece\u8bbe\u7f6e\u91cc\u9762\u62ff\u5230 page \u548c pageSize \u53c2\u6570\u6784\u9020 request\\n    - \u5c06 Query \u7ed1\u5b9a\u5230 request(\u8bfb\u53d6\u53c2\u6570)\\n    - \u505a\u4e00\u4e2a\u4ece request \u7684,,,\u7684 json \u5f62\u5f0f\u8f6c\u6362\u4e3a\u6570\u7ec4\u518d\u6784\u9020 filter \u7ed3\u6784\\n    - \u4f20\u7ed9 service \u7684 api\\n    - \u8fd4\u56de\u7ed3\u679c\u8fc7 DTO\uff0cTotal, Data, Page, PageSize \u7edf\u4e00 BasePaginateResponse \u7ed3\u6784\\n  - \u63a8\u8350\\n  - \u5173\u6ce8\u548c\u53d6\u6d88\u5173\u6ce8\\n\\n- ReviewReaction \u70b9\u8d5e\u3001\u8e29\\n- ReviewReply \u56de\u590d\\n- Review\\n  - CRUD + \u63a8\u8350\uff0c \u540c course\\n- Teacher\\n- User"},{"id":"/godis\u6e90\u7801\u9605\u8bfb","metadata":{"permalink":"/blog/godis\u6e90\u7801\u9605\u8bfb","source":"@site/blog/godis\u6e90\u7801\u9605\u8bfb.md","title":"godis\u6e90\u7801\u9605\u8bfb","description":"tcp","date":"2024-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"go","permalink":"/blog/tags/go"},{"inline":true,"label":"redis","permalink":"/blog/tags/redis"},{"inline":true,"label":"godis","permalink":"/blog/tags/godis"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":32.76,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"godis\u6e90\u7801\u9605\u8bfb","date":"2024-07-11T00:00:00.000Z","author":"ayanami","tags":["go","redis","godis","web"],"keywords":["godis"]},"unlisted":false,"prevItem":{"title":"Go,Gin\u5b66\u4e60","permalink":"/blog/Go-Gin\u5b66\u4e60"},"nextItem":{"title":"hibernate&jpa","permalink":"/blog/hibernate-jpa"}},"content":"### tcp\\n\\n#### echo\\n\\n\u4e00\u4e2a\u4f18\u96c5\u8d85\u65f6\u5173\u95ed\u7684\u65b9\u6cd5\\n\\n```go\\n// WaitWithTimeout blocks until the WaitGroup counter is zero or timeout\\n// returns true if timeout\\nfunc (w *Wait) WaitWithTimeout(timeout time.Duration) bool {\\n\\tc := make(chan struct{}, 1)\\n\\tgo func() {\\n\\t\\tdefer close(c)\\n\x3c!--truncate--\x3e\\t\\tw.Wait()\\n\\t\\tc <- struct{}{}\\n\\t}()\\n\\tselect {\\n\\tcase <-c:\\n\\t\\treturn false // completed normally\\n\\tcase <-time.After(timeout):\\n\\t\\treturn true // timed out\\n\\t}\\n}\\n\\n```\\n\\n\\n\\n\u6838\u5fc3\u6570\u636e\u7ed3\u6784\\n\\n```go\\ntype EchoHandler struct {\\n\\tactiveConn sync.Map\\n\\tclosing    atomic.Boolean\\n}\\n```\\n\\n\\n\\n\u7136\u540e\u662ftcp server\\n\\n\u8fd9\u4e2a\u5904\u7406signal\u7684\u503c\u5f97\u5b66\u4e60\\n\\n`Notify`\u76f8\u5f53\u4e8e\u8d77\u4e86\u4e00\u4e2a\u65b0\u7684goroutine\u53bb\u76d1\u542c\\n\\n```go\\n// ListenAndServeWithSignal binds port and handle requests, blocking until receive stop signal\\nfunc ListenAndServeWithSignal(cfg *Config, handler tcp.Handler) error {\\n\\tcloseChan := make(chan struct{})\\n\\tsigCh := make(chan os.Signal)\\n\\tsignal.Notify(sigCh, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)\\n\\tgo func() {\\n\\t\\tsig := <-sigCh\\n\\t\\tswitch sig {\\n\\t\\tcase syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:\\n\\t\\t\\tcloseChan <- struct{}{}\\n\\t\\t}\\n\\t}()\\n\\tlistener, err := net.Listen(\\"tcp\\", cfg.Address)\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\t//cfg.Address = listener.Addr().String()\\n\\tlogger.Info(fmt.Sprintf(\\"bind: %s, start listening...\\", cfg.Address))\\n\\tListenAndServe(listener, handler, closeChan)\\n\\treturn nil\\n}\\n\\n// ListenAndServe binds port and handle requests, blocking until close\\nfunc ListenAndServe(listener net.Listener, handler tcp.Handler, closeChan <-chan struct{}) {\\n\\t// listen signal\\n\\terrCh := make(chan error, 1)\\n\\tdefer close(errCh)\\n\\tgo func() {\\n\\t\\tselect {\\n\\t\\tcase <-closeChan:\\n\\t\\t\\tlogger.Info(\\"get exit signal\\")\\n\\t\\tcase er := <-errCh:\\n\\t\\t\\tlogger.Info(fmt.Sprintf(\\"accept error: %s\\", er.Error()))\\n\\t\\t}\\n\\t\\tlogger.Info(\\"shutting down...\\")\\n\\t\\t_ = listener.Close() // listener.Accept() will return err immediately\\n\\t\\t_ = handler.Close()  // close connections\\n\\t}()\\n\\n\\tctx := context.Background()\\n\\tvar waitDone sync.WaitGroup\\n\\tfor {\\n\\t\\tconn, err := listener.Accept()\\n\\t\\tif err != nil {\\n\\t\\t\\t// learn from net/http/serve.go#Serve()\\n\\t\\t\\tif ne, ok := err.(net.Error); ok && ne.Timeout() {\\n\\t\\t\\t\\tlogger.Infof(\\"accept occurs temporary error: %v, retry in 5ms\\", err)\\n\\t\\t\\t\\ttime.Sleep(5 * time.Millisecond)\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\terrCh <- err\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\t// handle\\n\\t\\tlogger.Info(\\"accept link\\")\\n\\t\\tClientCounter++\\n\\t\\t// atomic.AddInt32(&ClientCounter, 1)\\n\\t\\twaitDone.Add(1)\\n\\t\\tgo func() {\\n\\t\\t\\tdefer func() {\\n\\t\\t\\t\\twaitDone.Done()\\n\\t\\t\\t\\tatomic.AddInt32(&ClientCounter, -1)\\n\\t\\t\\t\\tlogger.Info(\\"counter: \\", ClientCounter)\\n\\t\\t\\t}()\\n\\t\\t\\thandler.Handle(ctx, conn)\\n\\t\\t}()\\n\\t}\\n\\twaitDone.Wait()\\n}\\n```\\n\\n\\n\\n### redis\\n\\n#### client\\n\\n\u5982\u4f55\u505a\u5fc3\u8df3\\n\\n```go\\n// Client is a pipeline mode redis client\\ntype Client struct {\\n\\tconn        net.Conn\\n\\tpendingReqs chan *request // wait to send\\n\\twaitingReqs chan *request // waiting response\\n\\tticker      *time.Ticker\\n\\taddr        string\\n\\n\\tstatus  int32\\n\\tworking *sync.WaitGroup // its counter presents unfinished requests(pending and waiting)\\n}\\nfunc (client *Client) heartbeat() {\\n\\tfor range client.ticker.C {\\n\\t\\tclient.doHeartbeat()\\n\\t}\\n}\\nfunc (client *Client) doHeartbeat() {\\n\\trequest := &request{\\n\\t\\targs:      [][]byte{[]byte(\\"PING\\")},\\n\\t\\theartbeat: true,\\n\\t\\twaiting:   &wait.Wait{},\\n\\t}\\n\\trequest.waiting.Add(1)\\n\\tclient.working.Add(1)\\n\\tdefer client.working.Done()\\n\\tclient.pendingReqs <- request\\n\\trequest.waiting.WaitWithTimeout(maxWait)\\n}\\n```\\n\\n\\n\\n#### protocol\\n\\nredis \u7684\u5b57\u8282\u6d41\u534f\u8baeRESP\\n\\n> Redis \u81ea 2.0 \u7248\u672c\u8d77\u4f7f\u7528\u4e86\u7edf\u4e00\u7684\u534f\u8bae RESP (REdis Serialization Protocol)\\n\\n\u4e8c\u8fdb\u5236\u5b89\u5168\uff1a\u5141\u8bb8\u534f\u8baepayload\u4e2d\u51fa\u73b0\u4efb\u610f\u5b57\u7b26\u800c\u4e0d\u4f1a\u5bfc\u81f4\u6545\u969c\\n\\nhttps://www.cnblogs.com/Finley/p/11923168.html\\n\\nRESP \u5b9a\u4e49\u4e865\u79cd\u683c\u5f0f\uff1a\\n\\n- \u7b80\u5355\u5b57\u7b26\u4e32(Simple String): \u670d\u52a1\u5668\u7528\u6765\u8fd4\u56de\u7b80\u5355\u7684\u7ed3\u679c\uff0c\u6bd4\u5982\\"OK\\"\u3002\u975e\u4e8c\u8fdb\u5236\u5b89\u5168\uff0c\u4e14\u4e0d\u5141\u8bb8\u6362\u884c\u3002\\n- \u9519\u8bef\u4fe1\u606f(Error): \u670d\u52a1\u5668\u7528\u6765\u8fd4\u56de\u7b80\u5355\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u6bd4\u5982\\"ERR Invalid Synatx\\"\u3002\u975e\u4e8c\u8fdb\u5236\u5b89\u5168\uff0c\u4e14\u4e0d\u5141\u8bb8\u6362\u884c\u3002\\n- \u6574\u6570(Integer): llen\u3001scard \u7b49\u547d\u4ee4\u7684\u8fd4\u56de\u503c, 64\u4f4d\u6709\u7b26\u53f7\u6574\u6570\\n- \u5b57\u7b26\u4e32(Bulk String): \u4e8c\u8fdb\u5236\u5b89\u5168\u5b57\u7b26\u4e32, \u6bd4\u5982 get \u7b49\u547d\u4ee4\u7684\u8fd4\u56de\u503c\\n- \u6570\u7ec4(Array, \u53c8\u79f0 Multi Bulk Strings): Bulk String \u6570\u7ec4\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u6307\u4ee4\u4ee5\u53ca lrange \u7b49\u547d\u4ee4\u54cd\u5e94\u7684\u683c\u5f0f\\n\\nRESP \u901a\u8fc7\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6765\u8868\u793a\u683c\u5f0f\uff1a\\n\\n- \u7b80\u5355\u5b57\u7b26\u4e32\uff1a\u4ee5\\"+\\" \u5f00\u59cb\uff0c \u5982\uff1a\\"+OK\\\\r\\\\n\\"\\n- \u9519\u8bef\uff1a\u4ee5\\"-\\" \u5f00\u59cb\uff0c\u5982\uff1a\\"-ERR Invalid Synatx\\\\r\\\\n\\"\\n- \u6574\u6570\uff1a\u4ee5\\":\\"\u5f00\u59cb\uff0c\u5982\uff1a\\":1\\\\r\\\\n\\"\\n- \u5b57\u7b26\u4e32\uff1a\u4ee5 `$` \u5f00\u59cb, \u4e24\u884c\uff0c\u7b2c\u4e00\u884c`$`+\u6b63\u6587\u957f\u5ea6\uff0c\u7b2c\u4e8c\u884c\u5b9e\u9645\u5185\u5bb9+\u6362\u884c\uff0c\u5b9e\u9645\u5185\u5bb9\u53ef\u4ee5\u6709\u6362\u884c\u7b49\u7279\u6b8a\u7b26\u53f7\uff0c\u4e8c\u8fdb\u5236\u5b89\u5168\\n- \u6570\u7ec4\uff1a\u4ee5 `*` \u5f00\u59cb\uff0c\u7b2c\u4e00\u884c`*` + \u6570\u7ec4\u957f\u5ea6len\uff0c\u540e\u9762\u662flen\u7ec4bulk string\\n\\n\\n\\n### datastruct\\n\\n- bitmap \u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\\n- dict\\n\\nwildcard\u7684\u7b80\u5355\u901a\u914d\u7b26\u652f\u6301\\n\\n```go\\nfunc (dict *SimpleDict) DictScan(cursor int, count int, pattern string) ([][]byte, int) {\\n\\tresult := make([][]byte, 0)\\n\\tmatchKey, err := wildcard.CompilePattern(pattern)\\n\\tif err != nil {\\n\\t\\treturn result, -1\\n\\t}\\n\\tfor k := range dict.m {\\n\\t\\tif pattern == \\"*\\" || matchKey.IsMatch(k) {\\n\\t\\t\\traw, exists := dict.Get(k)\\n\\t\\t\\tif !exists {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\tresult = append(result, []byte(k))\\n\\t\\t\\tresult = append(result, raw.([]byte))\\n\\t\\t}\\n\\t}\\n\\treturn result, 0\\n}\\n```\\n\\ncapacity \u5f97\u5230\u5927\u4e8eparam\u7684\u6700\u5c0f2\u5e42\u6570, \u5728c++\u53ef\u80fd\u662fgcc builtin,\u8fd9\u91cc\u5c31\u81ea\u5df1\u5b9e\u73b0\u4f4d\u8fd0\u7b97\u4e86\\n\\n```go\\nfunc computeCapacity(param int) (size int) {\\n\\tif param <= 16 {\\n\\t\\treturn 16\\n\\t}\\n\\tn := param - 1\\n\\tn |= n >> 1\\n\\tn |= n >> 2\\n\\tn |= n >> 4\\n\\tn |= n >> 8\\n\\tn |= n >> 16\\n\\tif n < 0 {\\n\\t\\treturn math.MaxInt32\\n\\t}\\n\\treturn n + 1\\n}\\n```\\n\\n\\n\\nconcurrent dict\u7c7b\u662f\u4e00\u4e2a\u6709\u8f93\u5165\u6307\u5b9a\u7684`shardCount`\u4e2a\u69fd\u7684table, \u6bcf\u4e2a\u683c\u5b50\u91cc\u9762\u662f\u4e00\u4e2amap+RWlock,\u901a\u8fc7\u5bf9\u5b57\u7b26\u4e32hash\u5f97\u5230\u683c\u5b50\\n\\n\u8fd9\u662fhashmap**\u5206\u7247**\\n\\nredis\u6ca1\u6709\u505ajava\u90a3\u6837\u7684\u94fe\u8868-\u7ea2\u9ed1\u6811\u5347\u7ea7,\u4f30\u8ba1\u662f\u89c9\u5f97\u5927\u96c6\u5408\u6216\u8005\u5927map\u624d\u662f\u5e38\u6001\\n\\n**\u4f18\u70b9\uff1a\u51cf\u5c11\u8bfb\u5199\u9501\u7684\u7ade\u4e89\uff0c\u63d0\u9ad8\u8bfb\u5199\u6548\u7387**\\n\\n**\u7f3a\u70b9: \u9700\u8981\u4e24\u6b21hash, \u5206\u7247\u5bfc\u81f4scan\u6548\u7387\u4e0b\u964d, \u5f25\u8865\u65b9\u6cd5\u662f\u9700\u8981\u987a\u5e8f\u7b49\u7684scan\u4f7f\u7528sortedset\u8df3\u8868\u7ed3\u6784**\\n\\n\\n\\n> KV \u5185\u5b58\u6570\u636e\u5e93\u7684\u6838\u5fc3\u662f\u5e76\u53d1\u5b89\u5168\u7684\u54c8\u5e0c\u8868\uff0c\u5e38\u89c1\u7684\u8bbe\u8ba1\u6709\u51e0\u79cd\uff1a\\n>\\n> - sync.map: golang \u5b98\u65b9\u63d0\u4f9b\u7684\u5e76\u53d1\u54c8\u5e0c\u8868, \u9002\u5408\u8bfb\u591a\u5199\u5c11\u7684\u573a\u666f\u3002\u4f46\u662f\u5728 m.dirty \u521a\u88ab\u63d0\u5347\u540e\u4f1a\u5c06 m.read \u590d\u5236\u5230\u65b0\u7684 m.dirty \u4e2d\uff0c\u5728\u6570\u636e\u91cf\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\u590d\u5236\u64cd\u4f5c\u4f1a\u963b\u585e\u6240\u6709\u534f\u7a0b\uff0c\u5b58\u5728\u8f83\u5927\u7684\u9690\u60a3\u3002\u5173\u4e8e sync.map \u7684\u8be6\u7ec6\u8ba8\u8bba\u63a8\u8350\u9605\u8bfb[\u9e1f\u7a9d:sync.Map\u63ed\u79d8](https://colobu.com/2017/07/11/dive-into-sync-Map/)\\n> - juc.ConcurrentHashMap: java \u7684\u5e76\u53d1\u54c8\u5e0c\u8868\u91c7\u7528\u5206\u6bb5\u9501\u5b9e\u73b0\u3002\u5728\u8fdb\u884c\u6269\u5bb9\u65f6\u8bbf\u95ee\u54c8\u5e0c\u8868\u7ebf\u7a0b\u90fd\u5c06\u534f\u52a9\u8fdb\u884c rehash \u64cd\u4f5c\uff0c\u5728 rehash \u7ed3\u675f\u524d\u6240\u6709\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4f1a\u963b\u585e\u3002\u56e0\u4e3a\u7f13\u5b58\u6570\u636e\u5e93\u4e2d\u952e\u503c\u5bf9\u6570\u91cf\u5de8\u5927\u4e14\u5bf9\u8bfb\u5199\u64cd\u4f5c\u54cd\u5e94\u65f6\u95f4\u8981\u6c42\u8f83\u9ad8\uff0c\u4f7f\u7528juc\u7684\u7b56\u7565\u662f\u4e0d\u5408\u9002\u7684\u3002\\n> - memcached hashtable: \u5728\u540e\u53f0\u7ebf\u7a0b\u8fdb\u884c rehash \u64cd\u4f5c\u65f6\uff0c\u4e3b\u7ebf\u7a0b\u4f1a\u5224\u65ad\u8981\u8bbf\u95ee\u7684\u54c8\u5e0c\u69fd\u662f\u5426\u5df2\u88ab rehash \u4ece\u800c\u51b3\u5b9a\u64cd\u4f5c old_hashtable \u8fd8\u662f\u64cd\u4f5c primary_hashtable\u3002\\n>\\n> memcached hashtable \u7684\u6e10\u8fdb\u5f0f Rehash \u7b56\u7565\u4f7f\u4e3b\u7ebf\u7a0b\u548crehash\u7ebf\u7a0b\u4e4b\u95f4\u7684 data race \u9650\u5236\u5728\u54c8\u5e0c\u69fd\u5185\uff0c\u6700\u5c0f\u5316rehash\u64cd\u4f5c\u5bf9\u8bfb\u5199\u64cd\u4f5c\u7684\u5f71\u54cd\uff0c\u8fd9\u662f\u6700\u7406\u60f3\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u4f46\u7531\u4e8e\u4f5c\u8005\u624d\u758f\u5b66\u6d45\u65e0\u6cd5\u4f7f\u7528 golang \u5b9e\u73b0\u8be5\u7b56\u7565\u6545\u5fcd\u75db\u653e\u5f03\uff08\u4e3b\u8981\u539f\u56e0\u5728\u4e8e golang \u6ca1\u6709 volatile \u5173\u952e\u5b57, \u4fdd\u8bc1\u53ef\u89c1\u6027\u7684\u64cd\u4f5c\u975e\u5e38\u590d\u6742\uff09\uff0c\u6b22\u8fce\u5404\u4f4d\u8bfb\u8005\u8ba8\u8bba\u3002\\n>\\n> \u672c\u6587\u91c7\u7528 golang \u793e\u533a\u5e7f\u6cdb\u4f7f\u7528\u7684\u5206\u6bb5\u9501\u7b56\u7565\u3002\u6211\u4eec\u5c06 key \u5206\u6563\u5230\u56fa\u5b9a\u6570\u91cf\u7684 shard \u4e2d\u907f\u514d rehash \u64cd\u4f5c\u3002shard \u662f\u6709\u9501\u4fdd\u62a4\u7684 map, \u5f53 shard \u8fdb\u884c rehash \u65f6\u4f1a\u963b\u585eshard\u5185\u7684\u8bfb\u5199\uff0c\u4f46\u4e0d\u4f1a\u5bf9\u5176\u4ed6 shard \u9020\u6210\u5f71\u54cd\u3002\\n>\\n> \u8fd9\u79cd\u7b56\u7565\u7b80\u5355\u53ef\u9760\u6613\u4e8e\u5b9e\u73b0\uff0c\u4f46\u7531\u4e8e\u9700\u8981\u4e24\u6b21 hash \u6027\u80fd\u7565\u5dee\u3002\\n\\n\\n\\n\\n\\n>Redis \u7684\u6e10\u8fdb\u5f0f rehash \u662f\u4e00\u79cd\u7528\u4e8e\u5728\u4e0d\u963b\u585e\u6570\u636e\u5e93\u7684\u60c5\u51b5\u4e0b\u8c03\u6574\u54c8\u5e0c\u8868\u5927\u5c0f\u7684\u673a\u5236\u3002\u5f53 Redis \u7684\u54c8\u5e0c\u8868\uff08\u4f8b\u5982\u7528\u4e8e\u5b9e\u73b0\u5b57\u5178\u7684\u6570\u636e\u7ed3\u6784\uff09\u5df2\u6ee1\u6216\u63a5\u8fd1\u6ee1\u65f6\uff0c\u9700\u8981\u8fdb\u884c rehash \u64cd\u4f5c\uff0c\u5373\u91cd\u65b0\u5206\u914d\u54c8\u5e0c\u8868\u4e2d\u7684\u952e\u503c\u5bf9\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u54c8\u5e0c\u8868\u4e2d\u3002\\n>\\n>\u4f20\u7edf\u7684 rehash \u65b9\u6cd5\u4f1a\u4e00\u6b21\u6027\u5c06\u6240\u6709\u952e\u503c\u5bf9\u4ece\u65e7\u54c8\u5e0c\u8868\u590d\u5236\u5230\u65b0\u54c8\u5e0c\u8868\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6570\u636e\u5e93\u5728 rehash \u671f\u95f4\u88ab\u963b\u585e\uff0c\u5f71\u54cd\u6027\u80fd\u3002\u800c\u6e10\u8fdb\u5f0f rehash \u5219\u91c7\u7528\u4e86\u4e00\u79cd\u66f4\u4f18\u96c5\u7684\u65b9\u5f0f\uff0c\u5b83\u5c06 rehash \u64cd\u4f5c\u5206\u6563\u5230\u591a\u4e2a\u6b65\u9aa4\u4e2d\uff0c\u5728\u4e0d\u5f71\u54cd\u6570\u636e\u5e93\u6b63\u5e38\u8bfb\u5199\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u3002\\n>\\n>\u4ee5\u4e0b\u662f\u6e10\u8fdb\u5f0f rehash \u7684\u5de5\u4f5c\u539f\u7406\uff1a\\n>\\n>1. **\u5206\u914d\u65b0\u54c8\u5e0c\u8868:** Redis \u4e3a\u65b0\u7684\u54c8\u5e0c\u8868\u5206\u914d\u4e24\u500d\u4e8e\u65e7\u54c8\u5e0c\u8868\u5927\u5c0f\u7684\u7a7a\u95f4\u3002\\n>2. **\u6e10\u8fdb\u8fc1\u79fb:** Redis \u4e0d\u4f1a\u4e00\u6b21\u6027\u5c06\u6240\u6709\u952e\u503c\u5bf9\u8fc1\u79fb\u5230\u65b0\u54c8\u5e0c\u8868\u3002\u6bcf\u6b21\u6267\u884c\u4e00\u4e2a\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0cRedis \u4f1a\u5c06\u4e00\u90e8\u5206\u952e\u503c\u5bf9\u4ece\u65e7\u54c8\u5e0c\u8868\u8fc1\u79fb\u5230\u65b0\u54c8\u5e0c\u8868\u3002\u5177\u4f53\u6765\u8bf4\uff0cRedis \u4f1a\u9009\u62e9\u65e7\u54c8\u5e0c\u8868\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6876\uff08bucket\uff09\uff0c\u5c06\u6876\u4e2d\u7684\u6240\u6709\u952e\u503c\u5bf9\u8fc1\u79fb\u5230\u65b0\u54c8\u5e0c\u8868\u4e2d\u3002\\n>3. **\u66f4\u65b0\u54c8\u5e0c\u8868\u6307\u9488:** Redis \u4f1a\u7ef4\u62a4\u4e00\u4e2a `rehashidx` \u6307\u9488\uff0c\u6307\u5411\u65e7\u54c8\u5e0c\u8868\u4e2d\u6b63\u5728\u8fc1\u79fb\u7684\u6876\u7684\u7d22\u5f15\u3002\u6bcf\u6b21\u8fc1\u79fb\u5b8c\u6210\u540e\uff0c`rehashidx` \u6307\u9488\u90fd\u4f1a\u66f4\u65b0\u3002\\n>4. **\u5e76\u53d1\u8bfb\u5199:** \u5728 rehash \u8fc7\u7a0b\u4e2d\uff0cRedis \u4ecd\u7136\u53ef\u4ee5\u5904\u7406\u8bfb\u5199\u64cd\u4f5c\u3002\u8bfb\u64cd\u4f5c\u4f1a\u540c\u65f6\u67e5\u8be2\u65e7\u54c8\u5e0c\u8868\u548c\u65b0\u54c8\u5e0c\u8868\uff1b\u5199\u64cd\u4f5c\u5219\u4f1a\u76f4\u63a5\u5199\u5165\u65b0\u54c8\u5e0c\u8868\u3002\\n>5. **\u5b8c\u6210\u8fc1\u79fb:** \u5f53 `rehashidx` \u6307\u9488\u8fbe\u5230\u65e7\u54c8\u5e0c\u8868\u7684\u672b\u5c3e\u65f6\uff0crehash \u64cd\u4f5c\u5b8c\u6210\u3002\u6b64\u65f6\uff0c\u65e7\u54c8\u5e0c\u8868\u5c06\u88ab\u91ca\u653e\uff0c\u65b0\u54c8\u5e0c\u8868\u6210\u4e3a\u5f53\u524d\u7684\u54c8\u5e0c\u8868\u3002\\n>\\n>**\u6e10\u8fdb\u5f0f rehash \u7684\u4f18\u52bf:**\\n>\\n>- **\u907f\u514d\u963b\u585e:** rehash \u64cd\u4f5c\u4e0d\u4f1a\u963b\u585e\u6570\u636e\u5e93\uff0c\u4fdd\u8bc1\u4e86\u6570\u636e\u5e93\u7684\u53ef\u7528\u6027\u3002\\n>- **\u5e73\u6ed1\u8fc7\u6e21:** rehash \u64cd\u4f5c\u5e73\u6ed1\u5730\u8fdb\u884c\uff0c\u4e0d\u4f1a\u5bf9\u6570\u636e\u5e93\u6027\u80fd\u9020\u6210\u7a81\u53d1\u6027\u7684\u5f71\u54cd\u3002\\n>- **\u9ad8\u6548\u5229\u7528\u8d44\u6e90:** rehash \u64cd\u4f5c\u5728\u591a\u4e2a\u6b65\u9aa4\u4e2d\u5b8c\u6210\uff0c\u4e0d\u4f1a\u5360\u7528\u8fc7\u591a\u7684\u7cfb\u7edf\u8d44\u6e90\u3002\\n\\n\\n\\nrehash\u7684\u6761\u4ef6\\n\\n> 1\u3001\u670d\u52a1\u5668\u76ee\u524d\u6ca1\u6709\u5728\u6267\u884c BGSAVE \u547d\u4ee4\u6216\u8005 BGREWRITEAOF \u547d\u4ee4\uff0c\u5e76\u4e14\u54c8\u5e0c\u8868\u7684\u8d1f\u8f7d\u56e0\u5b50\u5927\u4e8e\u7b49\u4e8e 1\u3002\\n>\\n> 2\u3001\u670d\u52a1\u5668\u76ee\u524d\u6b63\u5728\u6267\u884c BGSAVE \u547d\u4ee4\u6216\u8005 BGREWRITEAOF \u547d\u4ee4\uff0c\u5e76\u4e14\u54c8\u5e0c\u8868\u7684\u8d1f\u8f7d\u56e0\u5b50\u5927\u4e8e\u7b49\u4e8e 5\u3002\\n>\\n> **\u6839\u636e BGSAVE \u547d\u4ee4\u6216 BGREWRITEAOF \u547d\u4ee4\u662f\u5426\u6b63\u5728\u6267\u884c\uff0c\u670d\u52a1\u5668\u6267\u884c\u6269\u5c55\u64cd\u4f5c\u6240\u9700\u7684\u8d1f\u8f7d\u56e0\u5b50\u5e76\u4e0d\u76f8\u540c**\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u6267\u884c BGSAVE \u547d\u4ee4\u6216 BGREWRITEAOF\u547d\u4ee4\u7684\u8fc7\u7a0b\u4e2d\uff0c Redis\u4f1afork\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u800c\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u90fd\u91c7\u7528\u5199\u65f6\u590d\u5236\uff08copy-on-write\uff09\u6280\u672f\u6765\u4f18\u5316\u5b50\u8fdb\u7a0b\u7684\u4f7f\u7528\u6548\u7387\uff0c**\u6240\u4ee5\u5728\u5b50\u8fdb\u7a0b\u5b58\u5728\u671f\u95f4\uff0c\u670d\u52a1\u5668\u4f1a\u63d0\u9ad8\u6267\u884c\u6269\u5c55\u64cd\u4f5c\u6240\u9700\u7684\u8d1f\u8f7d\u56e0\u5b50\uff0c\u4ece\u800c\u5c3d\u53ef\u80fd\u5730\u907f\u514d\u5728\u5b50\u8fdb\u7a0b\u5b58\u5728\u671f\u95f4\u8fdb\u884c\u54c8\u5e0c\u8868\u6269\u5c55\u64cd\u4f5c\uff0c\u8fd9\u53ef\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5199\u5165\u64cd\u4f5c\uff0c \u6700\u5927\u9650\u5ea6\u5730\u8282\u7ea6\u5185\u5b58**\u3002\\n\\n> **\u89e6\u53d1\u6536\u7f29\u64cd\u4f5c\u6761\u4ef6\uff1a**\u5f53\u54c8\u5e0c\u8868\u7684\u8d1f\u8f7d\u56e0\u5b50\u5c0f\u4e8e0.1\u65f6\uff0c\u7a0b\u5e8f\u81ea\u52a8\u5f00\u59cb\u5bf9\u54c8\u5e0c\u8868\u6267\u884c\u6536\u7f29\u64cd\u4f5c\\n\\n\\n\\nredis rehash\\n\\n\uff08\u6ce8\u610f\u4e3b\u8fdb\u7a0b\u59cb\u7ec8\u662f\u5355\u7ebf\u7a0b\u7684\uff09\\n\\n\u4f1a\u521b\u5efa\u4e24\u4e2a\u8868\uff0c\u5f53\u7b2c\u4e00\u4e2a\u8d1f\u8f7d\u56e0\u5b50\u8fbe\u5230\u9608\u503c\u65f6\u89e6\u53d1rehash, \u7ed9\u7b2c\u4e8c\u4e2a\u8868\u5206\u914d\u4e24\u500d\u5185\u5b58\uff0c\u66f4\u65b0rehash\u72b6\u6001\uff0c\u7136\u540e\u8fd4\u56de\\n\\n\u5c06rehash idx\u8bbe\u7f6e\u4e3a0\\n\\n\u4e4b\u540e\u6bcf\u6b21\u5bf9\u5b57\u5178\u6267\u884c\u6dfb\u52a0\u3001\u5220\u9664\u3001\u67e5\u627e\u3001\u66f4\u65b0\u65f6\uff0c\u9664\u4e86\u5df2\u6709\u7684\u64cd\u4f5c\u5916\uff0c\u8fd8\u4f1a\u5c06\u539f\u59cb\u8868\u5728rehashidx\u7d22\u5f15\u4e0a\u7684\u6240\u6709kv rehash\u5230\u65b0\u8868\\n\\n\u540c\u65f6\u5728rehash\u8fc7\u7a0b\u4e4b\u4e2d, \u5199\u503c\u4f1a\u5199\u5230\u65b0\u7684\u8868\u4e0a\\n\\n\u5f53rehash idx\u4e3a\u539f\u8868\u957f\u5ea6\u65f6\uff0c\u7ed3\u675frehash\\n\\n\\n\\nrehash\u8fc7\u7a0b\u4e2d\u7684scan\u4f18\u5316\\n\\n\u5728scan\u8fdb\u884c\u4e2d\uff0c\u89e6\u53d1rehash, \u5982\u4f55\u8ba9\u5176\u4e0d\u91cd\u590d\u626b\u63cf\uff1f\\n\\n\u4f7f\u7528\u4e86**\u9ad8\u4f4d\u5e8fscan(\u53cd\u5411\u4e8c\u8fdb\u5236\u8fed\u4ee3)\u7684\u4f18\u5316\u624b\u6cd5**\\n\\n\u5177\u4f53\u800c\u8a00\uff0c\u5047\u8bbe\u539f\u6765\u7684hash key\u662fk, index = k % size\\n\\n\u65b0\u8868\u4e0a\u5c31\u662f k % 2 * size = index \u6216 index + size\\n\\n\u5373\u4e00\u4e2a \u4e8c\u8fdb\u5236\u4e3a`0b00..0XXX`\u7684index, `0b00...1000`\u7684size, \u5728\u65b0\u8868\u4e0a\u8981\u4e48\u662f`00b00..0XXX`,\u8981\u4e48\u662f`0b00..1XXX`\\n\\n\u8fd9\u6837\u6211\u4f7f\u7528\u4ece\u9ad8\u5230\u4f4e\u4f4d\u904d\u5386\\n\\n![img](https://s2.loli.net/2024/11/01/YI7lqx5neBkpO9z.png)\\n\\n\u628arehash\u540e\u53ef\u80fd\u7684\u4e24\u4e2aindex\u653e\u5230\u4e00\u8d77\u4e86\uff0c\u4e0d\u6539\u53d8\u987a\u5e8f\\n\\n**\u65e0\u8bba\u5728\u4f55\u65f6\u4e2d\u9014\u53d1\u751f\u6269\u5bb9\uff0c\u90fd\u53ea\u8981\u626b\u63cf\u4e00\u904d**\\n\\n\u786e\u5b9e\u662fmagic\\n\\n\\n\\n\\n\\n- lockmap \\n\\n\u8fd9\u4e2aconcurrentmap\u8fd8\u6709\u4e00\u4e9b\u529f\u80fd\u6ca1\u6709\u652f\u6301\\n\\n\u4f8b\u5982 **\u9501key**, \u5373\u5bf9N\u4e2akey\u4e0a\u5bf9\u8c61\u7684\u539f\u5b50\u64cd\u4f5c`MSETNX`, `incr`\u7b49\u7b49\\n\\n1. \u5982\u679c\u6bcf\u4e2akey\u90fd\u5206\u914d\u9501, \u5982\u679c\u4e0d\u56de\u6536\u5185\u5b58\u5f00\u9500\u4e0d\u5c0f; \u5982\u679c\u56de\u6536, \u9700\u8981\u67d0\u79cd\u5f62\u5f0f\u7684\u5f15\u7528\u8ba1\u6570\u6765\u56de\u6536, \u6211\u80fd\u60f3\u5230\u7684\u662f\u7528CAS\u770b\u4ed6\u7684ref\u662f\u4e0d\u662f0\u6765\u63d0\u4f9b\u5e76\u53d1\u5b89\u5168, \u5982\u679c\u662f0,\u8bf4\u660e\u6709\u5176\u4ed6goroutine\u5e94\u8be5\u518d\u5220\u9664,\u65b0\u5efa\u9501\u3002\u4f46godis\u4f5c\u8005\u89c9\u5f97\u592a\u590d\u6742\u6ca1\u505a\\n2. \u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4ed6\u9501\u4e86key\u5bf9\u5e94\u7684\u69fd\uff0c\u8fd9\u6027\u80fd\u4e0b\u964d\u80af\u5b9a\u662f\u4e0d\u5c11\u7684, \u56e0\u4e3a\u4e0d\u540c\u7684key\u5b9e\u9645\u4e0a\u5747\u5300\u5206\u914d\u5230\u4e86\u4e0d\u540c\u7684\u69fd\\n\\n\\n\\n- sortedset \u7b80\u5355\u8df3\u8868\\n\\n\\n\\n\\n\\n### database backup\\n\\naof, rdb\\n\\nredis\u63d0\u4f9b\u7684\u4e24\u79cdbackup\u65b9\u5f0f\uff0caof\u662f\u5728\u6267\u884c\u5199\u547d\u4ee4\u524d\u5199\u65e5\u5fd7\uff0c\u4ece\u800c\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2aredis\u4e0a\u91cd\u653e; rdb\u662f\u628a\u6240\u6709\u6570\u636e\u6301\u4e45\u5316\u540e\u538b\u7f29\u4e3a\u4e8c\u8fdb\u5236\\n\\naof\u6709\u4e09\u79cd\u7b56\u7565\\n\\n- `appendfsync always` \u603b\u662f\u7acb\u523b\u843d\u76d8, \u6bcf\u6b21\u8c03\u7528`fsync()`\\n- `appendfsync everysec` \u8fd9\u4e2a\u5728go\u91cc\u9762\u975e\u5e38\u7b80\u5355\uff0c\u8d77\u4e00\u4e2aticker\u8ba1\u65f6\u5668\u5b9a\u65f6`fsync`\\n- `appendfsync no`: \u4e0d\u8c03\u7528`fsync()`\\n\\n\\n\\n#### aof \u6301\u4e45\u5316\\n\\n\u8d77\u4e00\u4e2aaof\u534f\u7a0b\\n\\n\u4e3b\u534f\u7a0b\u4e0d\u65ad\u628a\u6267\u884c\u7684\u5199cmd\u901a\u8fc7chan\u53d1\u9001\u7ed9aof\u534f\u7a0b\\n\\n```go\\ntype DB struct {\\n\\t// \u4e3b\u7ebf\u7a0b\u4f7f\u7528\u6b64channel\u5c06\u8981\u6301\u4e45\u5316\u7684\u547d\u4ee4\u53d1\u9001\u5230\u5f02\u6b65\u534f\u7a0b\\n\\taofChan\\t chan *reply.MultiBulkReply \\n\\t// append file \u6587\u4ef6\u63cf\u8ff0\u7b26\\n\\taofFile\\t *os.File  \\n\\t// append file \u8def\u5f84\\n\\taofFilename string \\n\\n\\t// aof \u91cd\u5199\u9700\u8981\u7684\u7f13\u51b2\u533a\uff0c\u5c06\u5728AOF\u91cd\u5199\u4e00\u8282\u8be6\u7ec6\u4ecb\u7ecd\\n\\taofRewriteChan chan *reply.MultiBulkReply \\n\\t// \u5728\u5fc5\u8981\u7684\u65f6\u5019\u4f7f\u7528\u6b64\u5b57\u6bb5\u6682\u505c\u6301\u4e45\u5316\u64cd\u4f5c\\n\\tpausingAof\\t sync.RWMutex \\n}\\n```\\n\\n\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\\n\\n> expire \u547d\u4ee4\u8981\u7528\u7b49\u6548\u7684 expireat \u547d\u4ee4\u66ff\u6362\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c10:00 \u6267\u884c `expire a 3600` \u8868\u793a\u952e a \u5728 11:00 \u8fc7\u671f\uff0c\u5728 10:30 \u8f7d\u5165AOF\u6587\u4ef6\u65f6\u6267\u884c `expire a 3600` \u5c31\u6210\u4e86 11:30 \u8fc7\u671f\u4e0e\u539f\u6570\u636e\u4e0d\u7b26\u3002\\n\\n```go\\nfunc (handler *Handler) handleAof() {\\n\\thandler.currentDB = 0\\n\\tfor p := range handler.aofChan {\\n\\t\\t// \u4f7f\u7528\u9501\u4fdd\u8bc1\u6bcf\u6b21\u90fd\u4f1a\u5199\u5165\u4e00\u6761\u5b8c\u6574\u7684\u547d\u4ee4\\n\\t\\thandler.pausingAof.RLock() \\n\\t\\t// \u6bcf\u4e2a\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u7684\u6570\u636e\u5e93\uff0c\u6240\u4ee5 payload \u4e2d\u8981\u4fdd\u5b58\u5ba2\u6237\u7aef\u9009\u62e9\u7684\u6570\u636e\u5e93\\n\\t\\t// \u9009\u62e9\u7684\u6570\u636e\u5e93\u4e0e aof \u6587\u4ef6\u4e2d\u6700\u65b0\u7684\u6570\u636e\u5e93\u4e0d\u4e00\u81f4\u65f6\u5199\u5165\u4e00\u6761 Select \u547d\u4ee4\\n\\t\\tif p.dbIndex != handler.currentDB {\\n\\t\\t\\t// select db\\n\\t\\t\\tdata := reply.MakeMultiBulkReply(utils.ToCmdLine(\\"SELECT\\", strconv.Itoa(p.dbIndex))).ToBytes()\\n\\t\\t\\t_, err := handler.aofFile.Write(data)\\n\\t\\t\\tif err != nil {\\n\\t\\t\\t\\tlogger.Warn(err)\\n\\t\\t\\t\\tcontinue // skip this command\\n\\t\\t\\t}\\n\\t\\t\\thandler.currentDB = p.dbIndex\\n\\t\\t}\\n\\t\\t// \u5199\u5165\u547d\u4ee4\u5185\u5bb9\\n\\t\\tdata := reply.MakeMultiBulkReply(p.cmdLine).ToBytes()\\n\\t\\t_, err := handler.aofFile.Write(data)\\n\\t\\tif err != nil {\\n\\t\\t\\tlogger.Warn(err)\\n\\t\\t}\\n\\t\\thandler.pausingAof.RUnlock()\\n\\t}\\n\\t// \u5173\u95ed\u8fc7\u7a0b\u4e2d\u4e3b\u534f\u7a0b\u4f1a\u5148\u5173\u95ed handler.aofChan\uff0c\u7136\u540e\u4f7f\u7528 <-handler.aofFinished \u7b49\u5f85\u7f13\u51b2\u533a\u4e2d\u7684\u547d\u4ee4\u843d\u76d8\\n\\t// \u901a\u8fc7 handler.aofFinished \u901a\u77e5\u4e3b\u534f\u7a0b aof \u7f13\u51b2\u533a\u5904\u7406\u5b8c\u6bd5\\n\\thandler.aofFinished <- struct{}{}\\n}\\n```\\n\\n\u8bfb\u53d6\u65f6\u7528\u540c\u6837\u7684\u547d\u4ee4\u89e3\u6790\u5668\u5373\u53ef\\n\\n\u6df7\u5408\u6301\u4e45\u5316:\\n\\nredis\u53ef\u4ee5\u8bbe\u7f6e\\n\\n```redis\\naof-use-rdb-preamble yes\\n```\\n\\n\u6765\u5f00\u542f\u6df7\u5408\u6301\u4e45\u5316, \u6d41\u7a0b\u4e3a\\n\\n- fork\\n- \u7531\u4e8eCOW, fork\u7684\u5b50\u8fdb\u7a0b\u81ea\u7136\u7684\u5177\u5907\u4e86\u5185\u5b58\u201c\u5feb\u7167\u201d, \u4e3b\u8fdb\u7a0b\u7167\u5e38\u8bfb\u5199\u5c31\u884c, \u5b50\u8fdb\u7a0b\u628a\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5b58\u4e3ardb\u6587\u4ef6\\n- \u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\u4e4b\u540e\u7684\u65b0\u589e\u547d\u4ee4\u518d\u4f5c\u4e3aaof\u6587\u4ef6\u5b58\u50a8\\n\\n\u6df7\u5408\u6301\u4e45\u5316\u6709\u4e0d\u5c11\u4f18\u70b9\uff0c\u65e2\u5f25\u8865\u4e86aof\u91cd\u505a\u8017\u65f6\u957f\u7684\u7f3a\u70b9\uff0c\u53c8\u5f25\u8865\u4e86rdb\u4fdd\u5b58\u5f00\u9500\u5927\uff0c\u5b9e\u65f6\u6027\u4e0d\u9ad8\u7684\u7f3a\u70b9\\n\\n\\n\\n\u4f46\u4ee5\u4e0a\u6d41\u7a0b\u57fa\u4e8e`fork`,\u5728go\u91cc\u9762\u6ca1\u6709\u539f\u751f\u7684`fork`\uff0c\u751a\u81f3\u4e0d\u592a\u80fd\u6a21\u62df\u4e00\u4e2afork\\n\\n- syscall.ForkExec: \u53ea\u80fdfork\u4e4b\u540e\u7acb\u523bexec\u8c03\u7528\u4e00\u4e2a\u5df2\u6709\u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\\n- \u5f3a\u884c\u8c03\u7528\u539f\u751fsyscall: \u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3ago\u4f1a\u8d77\u4e00\u5806os thread\u7528\u6765\u670d\u52a1goruntine, GC, ...; \u800c\u539f\u751f\u7684fork\u53ea\u6709\u4e00\u4e2afork\u7684thread\uff0c\u4e0d\u80fd\u6307\u671b\u4efb\u4f55go\u7a0b\u5e8f\u5728\u4e0a\u9762\u5de5\u4f5c\\n- \u4f7f\u7528reexec\u7b49\u57fa\u4e8enamespace\u7684\u5077\u5929\u6362\u65e5\u6280\u6cd5: \u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u6837\u7684, \u5e76\u4e0d\u771f\u6b63\u53d1\u751f\u4e86fork, \u4e5f\u4e0d\u5171\u4eab\u5185\u5b58\u7b49, \u9700\u8981\u81ea\u5df1\u62f7\u8d1d\\n\\n\u6240\u4ee5\u770b\u8d77\u6765\u6ca1\u5b9e\u73b0\u8fd9\u4e2a\\n\\n\\n\\naof\u91cd\u5199:\\n\\n\u538b\u7f29aof\u6587\u4ef6\uff08\u901a\u8fc7\u6d88\u9664\u65e0\u7528\u7684\u5bf9\u76f8\u540ckey\u7684\u64cd\u4f5c\uff09\\n\\nredis\u8fd8\u662f\u7528fork\u7684\\n\\ngodis\u60f3\u4e86\u4e2a\u57fa\u4e8efs\u7684\u66ff\u4ee3\u65b9\u6cd5\\n\\n> \u56e0\u6b64\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u5957\u6bd4\u8f83\u590d\u6742\u7684\u6d41\u7a0b\uff1a\\n>\\n> 1. \u6682\u505cAOF\u5199\u5165 -> \u66f4\u6539\u72b6\u6001\u4e3a\u91cd\u5199\u4e2d -> \u51c6\u5907\u91cd\u5199 -> \u6062\u590dAOF\u5199\u5165\\n> 2. \u91cd\u5199\u534f\u7a0b\u8bfb\u53d6 AOF \u6587\u4ef6\u4e2d\u7684\u524d\u4e00\u90e8\u5206\uff08\u91cd\u5199\u5f00\u59cb\u524d\u7684\u6570\u636e\uff0c\u4e0d\u5305\u62ec\u8bfb\u5199\u8fc7\u7a0b\u4e2d\u5199\u5165\u7684\u6570\u636e\uff09\u5e76\u91cd\u5199\u5230\u4e34\u65f6\u6587\u4ef6\uff08tmp.aof\uff09\u4e2d\\n> 3. \u6682\u505cAOF\u5199\u5165 -> \u5c06\u91cd\u5199\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u65b0\u6570\u636e\u5199\u5165tmp.aof -> \u4f7f\u7528\u4e34\u65f6\u6587\u4ef6tmp.aof\u8986\u76d6AOF\u6587\u4ef6\uff08\u4f7f\u7528\u6587\u4ef6\u7cfb\u7edf\u7684mv\u547d\u4ee4\u4fdd\u8bc1\u5b89\u5168 -> \u6062\u590dAOF\u5199\u5165\\n\\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u91cd\u5199\u5f00\u59cb\u65f6\u53bb\u5f97\u5230\u5f53\u524daof\u7684offset(size)\\n\\n\u5229\u7528aof\u662f\u8ffd\u52a0\u7684\u6027\u8d28, \u8fd9\u90e8\u5206\u4e0d\u4f1a\u88ab\u6539\u53d8, \u5bf9 0-offset\u7684\u90e8\u5206\u91cd\u5199\u5230\u65b0\u6587\u4ef6tmp, godis\u6b63\u5e38\u6267\u884c\u547d\u4ee4\u5199\u5230\u539f\u6765\u7684\u6587\u4ef6\\n\\n\u91cd\u5199\u5b8c\u6210\u540e, \u6682\u505c\u6267\u884c\u547d\u4ee4, \u628aoffset\u5230\u6700\u65b0\u7684\u5c11\u91cf\u6570\u636e\u5199\u5165tmp, \u518d\u7528`mv`\u628atmp\u8986\u76d6\u539f\u59cbaof\uff0c\u6700\u540e\u6062\u590d\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u547d\u4ee4\\n\\nmv\u5b9e\u9645\u4e0a\u662fmeta data\u7684\u4fee\u6539\uff0c\u56e0\u800c\u53ef\u4ee5\u4fdd\u8bc1\u6548\u7387\\n\\n\\n\\nredis\u5185\u5b58\u538b\u7f29\\n\\n\u5143\u7d20\u8f83\u5c11\u65f6: ziplist\\n\\n\u5176\u7ed3\u6784\u4e3a\\n\\n```\\n<zlbytes> <zltail> <zllen> <entry> <entry> ... <entry> <zlend>\\n```\\n\\n> - zlbytes: uint32 \u578b, \u5b58\u50a8\u6574\u4e2aziplist\u5f53\u524d\u88ab\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u5305\u542b\u81ea\u8eab\u5360\u7528\u76844\u4e2a\u5b57\u8282\u3002\\n> - zltail: uint32 \u578b, \u5b58\u50a8ziplist\u4e2d\u6700\u540e\u4e00\u4e2aentry\u76f8\u5bf9\u5934\u90e8\u7684\u504f\u79fb\u91cf, \u7528\u4e8e\u76f4\u63a5\u8bbf\u95ee\u5c3e\u7aef\u5143\u7d20\u907f\u514d\u904d\u5386\u3002\\n> - zllen: uint16 \u578b, \u8bb0\u5f55 ziplist \u4e2d\u5143\u7d20\u7684\u4e2a\u6570\\n> - entry: \u5b9e\u9645\u5b58\u50a8\u5143\u7d20\u7684\u5355\u5143\\n> - zlend:  0xff \u6807\u8bb0 ziplist \u7684\u7ed3\u5c3e, \u6ca1\u6709 entry \u4ee5 0xff \u5f00\u5934\u4e0d\u4f1a\u51fa\u73b0\u8bef\u5224\u7684\u95ee\u9898\\n\\nziplist\u4e0d\u4f1a\u9884\u7559\u62d3\u5c55\u7a7a\u95f4, \u63d2\u5165\u65b0\u5143\u7d20\u9700\u8981realloc\\n\\n\u5728\u5143\u7d20\u5c0f\u4e8e\u9608\u503c\u4e14value\u5b57\u8282\u6570\u5c0f\u4e8e\u9608\u503c\u7684\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528ziplist\\n\\n\\n\\nquicklist\uff1a\u8282\u70b9\u662fziplist\u7684\u53cc\u5411\u94fe\u8868\\n\\nziplist\u8d8a\u5c0f\uff0c\u8d8a\u63a5\u8fd1linkedlist, \u5b58\u50a8\u6548\u7387\u4e0b\u964d\uff0c\u4fee\u6539\u6548\u7387\u4e0a\u5347\\n\\nziplist\u8d8a\u5927, \u8d8a\u63a5\u8fd1ziplist, \u5b58\u50a8\u6548\u7387\u4e0a\u5347\uff0c\u4fee\u6539\u6548\u7387\u4e0b\u964d\\n\\n\u9ed8\u8ba4\u662f8kb, \u4f46\u53ef\u8c03\\n\\n\\n\\n\u538b\u7f29\u4e2d\u95f4\u8282\u70b9\uff08\u4e00\u822c\u5bf9\u4e8e\u957f\u96c6\u5408, \u4e24\u8fb9\u8bbf\u95ee\u9891\u7387\u8f83\u9ad8\uff09: \u9ed8\u8ba4\u4e0d\u538b\u7f29\uff0c\u53ef\u8bbe\u7f6e\\n\\nintset\\n\\n> \u5f53\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u5747\u4e3a\u6574\u6570\u4e14\u5143\u7d20\u6570\u5c11\u4e8e `set-max-intset-entries` \u65f6\uff0credis \u91c7\u7528 inset \u7f16\u7801\u5b58\u50a8\u96c6\u5408\u3002\u5f53\u63d2\u5165\u975e\u6574\u6570\u5143\u7d20\u6216\u5143\u7d20\u6570\u8d85\u8fc7\u9608\u503c\u540e\uff0cintset \u4f1a\u5347\u7ea7\u4e3a hashtable \u7f16\u7801\u8fdb\u884c\u5b58\u50a8\u3002\\n>\\n> intset \u7684\u6e90\u7801\u53ef\u4ee5\u5728: [redis/intset.c](https://github.com/redis/redis/blob/unstable/src/intset.c) \u4e2d\u627e\u5230\u3002\\n>\\n> intset \u662f\u6574\u6570\u5143\u7d20\u7ec4\u6210\u7684\u6709\u5e8f\u6570\u7ec4, \u53ef\u4ee5\u652f\u6301 O(logn) \u7ea7\u522b\u7684\u67e5\u8be2\u3002\\n>\\n> intset \u7684\u5185\u5b58\u7ed3\u6784\u4e0e ziplist \u7c7b\u4f3c\u662f\u4e00\u6bb5\u7684\u5185\u5b58\u3002\u5b83\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210:\\n>\\n> - encoding: \u8868\u793aintset\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u5143\u7d20\u7528\u51e0\u4e2a\u5b57\u8282\u6765\u5b58\u50a8\u3002\u5b83\u6709\u4e09\u79cd\u53ef\u80fd\u7684\u53d6\u503c\uff1a\\n>   - INTSET_ENC_INT16\u8868\u793a\u6bcf\u4e2a\u5143\u7d20\u75282\u4e2a\u5b57\u8282\u5b58\u50a8\\n>   - INTSET_ENC_INT32\u8868\u793a\u6bcf\u4e2a\u5143\u7d20\u75284\u4e2a\u5b57\u8282\u5b58\u50a8\\n>   - INTSET_ENC_INT64\u8868\u793a\u6bcf\u4e2a\u5143\u7d20\u75288\u4e2a\u5b57\u8282\u5b58\u50a8\u3002\\n> - length: \u8868\u793aintset\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u3002encoding\u548clength\u4e24\u4e2a\u5b57\u6bb5\u6784\u6210\u4e86intset\u7684\u5934\u90e8\uff08header\uff09\u3002\\n> - contents: \u8868\u793a\u5b9e\u9645\u5b58\u50a8\u7684\u5185\u5bb9\u3002\u5b83\u662f\u4e00\u4e2aC\u8bed\u8a00\u7684[\u67d4\u6027\u6570\u7ec4(flexible array member)](https://en.wikipedia.org/wiki/Flexible_array_member)\u3002\\n>\\n> \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u6b21\u6dfb\u52a0\u5143\u7d20 intset \u90fd\u4f1a\u68c0\u67e5\u662f\u5426\u9700\u8981\u5c06 INTSET_ENCODING \u5347\u7ea7\u4e3a\u66f4\u957f\u7684\u6574\u6570\u3002\u4e0e\u6bcf\u4e2a entry \u62e5\u6709\u72ec\u7acb encoding \u7684 ziplist \u4e0d\u540c\uff0cinset \u4e2d\u6240\u6709\u6210\u5458\u4f7f\u7528\u7edf\u4e00\u7684 encoding\u3002\\n\\n\\n\\n\\n\\n### \u5206\u5e03\u5f0f\u4e8b\u52a1\\n\\n\u4e24\u9636\u6bb5\u63d0\u4ea4(2-Phase Commit, 2PC)\u7b97\u6cd5\u662f\u89e3\u51b3\u6211\u4eec\u9047\u5230\u7684\u4e00\u81f4\u6027\u95ee\u9898\u6700\u7b80\u5355\u7684\u7b97\u6cd5\u3002\u5728 2PC \u7b97\u6cd5\u4e2d\u5199\u64cd\u4f5c\u88ab\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u6765\u6267\u884c:\\n\\n1. Prepare \u9636\u6bb5\\n2. \u534f\u8c03\u8005\u5411\u6240\u6709\u53c2\u4e0e\u8005\u53d1\u9001\u4e8b\u52a1\u5185\u5bb9\uff0c\u8be2\u95ee\u662f\u5426\u53ef\u4ee5\u6267\u884c\u4e8b\u52a1\u64cd\u4f5c\u3002\u5728 Godis \u4e2d\u6536\u5230\u5ba2\u6237\u7aef MSET \u547d\u4ee4\u7684\u8282\u70b9\u662f\u4e8b\u52a1\u7684\u534f\u8c03\u8005\uff0c\u6240\u6709\u6301\u6709\u76f8\u5173 key \u7684\u8282\u70b9\u90fd\u8981\u53c2\u4e0e\u4e8b\u52a1\u3002\\n3. \u5404\u53c2\u4e0e\u8005\u9501\u5b9a\u4e8b\u52a1\u76f8\u5173 key \u9632\u6b62\u88ab\u5176\u5b83\u64cd\u4f5c\u4fee\u6539\u3002\u5404\u53c2\u4e0e\u8005\u5199 undo log \u51c6\u5907\u5728\u4e8b\u52a1\u5931\u8d25\u540e\u8fdb\u884c\u56de\u6eda\u3002\uff08\u8fd9\u91cc\u7684undo log\u5728godis\u91cc\u9762\u53ea\u662f\u5185\u5b58\u4e2d\u7684cmdline\u800c\u5df2, \u56e0\u4e3a\u4e5f\u4e0d\u843d\u76d8, \u6240\u4ee5\u6ca1\u6709\u5bf9\u5b95\u673a\u8d1f\u8d23\u7684\u4e49\u52a1\uff09\\n4. \u53c2\u4e0e\u8005\u56de\u590d\u534f\u8c03\u8005\u53ef\u4ee5\u63d0\u4ea4\u3002\u82e5\u534f\u8c03\u8005\u6536\u5230\u6240\u6709\u53c2\u4e0e\u8005\u7684YES\u56de\u590d\uff0c\u5219\u51c6\u5907\u8fdb\u884c\u4e8b\u52a1\u63d0\u4ea4\u3002\u82e5\u6709\u53c2\u4e0e\u8005\u56de\u590dNO\u6216\u8005\u8d85\u65f6\uff0c\u5219\u51c6\u5907\u56de\u6eda\u4e8b\u52a1\\n5. Commit \u9636\u6bb5\\n   1. \u534f\u8c03\u8005\u5411\u6240\u6709\u53c2\u4e0e\u8005\u53d1\u9001\u63d0\u4ea4\u8bf7\u6c42\\n   2. \u53c2\u4e0e\u8005\u6b63\u5f0f\u63d0\u4ea4\u4e8b\u52a1\uff0c\u5e76\u5728\u5b8c\u6210\u540e\u91ca\u653e\u76f8\u5173 key \u7684\u9501\u3002\\n   3. \u53c2\u4e0e\u8005\u534f\u8c03\u8005\u56de\u590dACK\uff0c\u534f\u8c03\u8005\u6536\u5230\u6240\u6709\u53c2\u4e0e\u8005\u7684ACK\u540e\u8ba4\u4e3a\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\u3002\\n6. Rollback \u9636\u6bb5\\n   1. \u5728\u4e8b\u52a1\u8bf7\u6c42\u9636\u6bb5\u82e5\u6709\u53c2\u4e0e\u8005\u56de\u590dNO\u6216\u8005\u8d85\u65f6\uff0c\u534f\u8c03\u8005\u5411\u6240\u6709\u53c2\u4e0e\u8005\u53d1\u51fa\u56de\u6eda\u8bf7\u6c42\\n   2. \u5404\u53c2\u4e0e\u8005\u6267\u884c\u4e8b\u52a1\u56de\u6eda\uff0c\u5e76\u5728\u5b8c\u6210\u540e\u91ca\u653e\u76f8\u5173\u8d44\u6e90\u3002\\n   3. \u53c2\u4e0e\u8005\u534f\u8c03\u8005\u56de\u590dACK\uff0c\u534f\u8c03\u8005\u6536\u5230\u6240\u6709\u53c2\u4e0e\u8005\u7684ACK\u540e\u8ba4\u4e3a\u4e8b\u52a1\u56de\u6eda\u6210\u529f\u3002\\n\\n2PC\u662f\u4e00\u79cd\u7b80\u5355\u7684\u4e00\u81f4\u6027\u534f\u8bae\uff0c\u5b83\u5b58\u5728\u4e00\u4e9b\u95ee\u9898:\\n\\n- \u5355\u70b9\u670d\u52a1: \u82e5\u534f\u8c03\u8005\u7a81\u7136\u5d29\u6e83\u5219\u4e8b\u52a1\u6d41\u7a0b\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u6216\u8005\u9020\u6210\u72b6\u6001\u4e0d\u4e00\u81f4\\n- \u65e0\u6cd5\u4fdd\u8bc1\u4e00\u81f4\u6027: \u82e5\u534f\u8c03\u8005\u7b2c\u4e8c\u9636\u6bb5\u53d1\u9001\u63d0\u4ea4\u8bf7\u6c42\u65f6\u5d29\u6e83\uff0c\u53ef\u80fd\u90e8\u5206\u53c2\u4e0e\u8005\u53d7\u5230COMMIT\u8bf7\u6c42\u63d0\u4ea4\u4e86\u4e8b\u52a1\uff0c\u800c\u53e6\u4e00\u90e8\u5206\u53c2\u4e0e\u8005\u672a\u53d7\u5230\u8bf7\u6c42\u800c\u653e\u5f03\u4e8b\u52a1\u9020\u6210\u4e0d\u4e00\u81f4\u73b0\u8c61\u3002\\n- \u963b\u585e: \u4e3a\u4e86\u4fdd\u8bc1\u4e8b\u52a1\u5b8c\u6210\u63d0\u4ea4\uff0c\u5404\u53c2\u4e0e\u8005\u5728\u5b8c\u6210\u7b2c\u4e00\u9636\u6bb5\u4e8b\u52a1\u6267\u884c\u540e\u5fc5\u987b\u9501\u5b9a\u76f8\u5173\u8d44\u6e90\u76f4\u5230\u6b63\u5f0f\u63d0\u4ea4\uff0c\u5f71\u54cd\u7cfb\u7edf\u7684\u541e\u5410\u91cf\u3002\\n\\n\\n\\n```go\\nfunc MSet(cluster *Cluster, c redis.Connection, args [][]byte) redis.Reply {\\n    //  \u89e3\u6790\u53c2\u6570\\n    argCount := len(args) - 1\\n    if argCount%2 != 0 || argCount < 1 {\\n        return reply.MakeErrReply(\\"ERR wrong number of arguments for \'mset\' command\\")\\n    }\\n\\n    size := argCount / 2\\n    keys := make([]string, size)\\n    valueMap := make(map[string]string)\\n    for i := 0; i < size; i++ {\\n        keys[i] = string(args[2*i+1])\\n        valueMap[keys[i]] = string(args[2*i+2])\\n    }\\n\\n    // \u627e\u5230\u76f8\u5173 key \u6240\u5c5e\u7684\u8282\u70b9\\n    groupMap := cluster.groupBy(keys)\\n    if len(groupMap) == 1 { // do fast\\n        // \u82e5\u6240\u6709\u7684 key \u90fd\u5728\u540c\u4e00\u4e2a\u8282\u70b9\u76f4\u63a5\u6267\u884c\uff0c\u4e0d\u4f7f\u7528\u8f83\u6162\u7684 2pc \u7b97\u6cd5\\n        for peer := range groupMap {\\n            return cluster.Relay(peer, c, args)\\n        }\\n    }\\n\\n    // \u5f00\u59cb\u51c6\u5907\u9636\u6bb5\\n    var errReply redis.Reply\\n    txId := cluster.idGenerator.NextId() // \u4f7f\u7528 snowflake \u7b97\u6cd5\u51b3\u5b9a\u4e8b\u52a1 ID\\n    txIdStr := strconv.FormatInt(txId, 10)\\n    rollback := false\\n    // \u5411\u6240\u6709\u53c2\u4e0e\u8005\u53d1\u9001 prepare \u8bf7\u6c42\\n    for peer, group := range groupMap {\\n        peerArgs := []string{txIdStr}\\n        for _, k := range group {\\n            peerArgs = append(peerArgs, k, valueMap[k])\\n        }\\n        var resp redis.Reply\\n        if peer == cluster.self {\\n            resp = PrepareMSet(cluster, c, makeArgs(\\"PrepareMSet\\", peerArgs...))\\n        } else {\\n            resp = cluster.Relay(peer, c, makeArgs(\\"PrepareMSet\\", peerArgs...))\\n        }\\n        if reply.IsErrorReply(resp) {\\n            errReply = resp\\n            rollback = true\\n            break\\n        }\\n    }\\n    if rollback {\\n        // \u82e5 prepare \u8fc7\u7a0b\u51fa\u9519\u5219\u6267\u884c\u56de\u6eda\\n        RequestRollback(cluster, c, txId, groupMap)\\n    } else {\\n        // prepare \u6210\u529f\uff0c\u8981\u6c42\u6240\u6709\u8282\u70b9\u63d0\u4ea4\\n        _, errReply = RequestCommit(cluster, c, txId, groupMap)\\n        rollback = errReply != nil\\n    }\\n    if !rollback {\\n        return &reply.OkReply{}\\n    }\\n    return errReply\\n}\\n\\nfunc requestCommit(cluster *Cluster, c redis.Connection, txID int64, peers map[string][]string) ([]redis.Reply, reply.ErrorReply) {\\n\\tvar errReply reply.ErrorReply\\n\\ttxIDStr := strconv.FormatInt(txID, 10)\\n\\trespList := make([]redis.Reply, 0, len(peers))\\n    // \u8981\u6c42\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u63d0\u4ea4\\n\\tfor peer := range peers {\\n\\t\\tvar resp redis.Reply\\n\\t\\tif peer == cluster.self {\\n\\t\\t\\tresp = execCommit(cluster, c, makeArgs(\\"commit\\", txIDStr))\\n\\t\\t} else {\\n\\t\\t\\tresp = cluster.relay(peer, c, makeArgs(\\"commit\\", txIDStr))\\n\\t\\t}\\n\\t\\tif reply.IsErrorReply(resp) {\\n\\t\\t\\terrReply = resp.(reply.ErrorReply)\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\trespList = append(respList, resp)\\n\\t}\\n    // \u82e5\u6709\u8282\u70b9\u63d0\u4ea4\u5931\u8d25\u5219\u8981\u6c42\u6240\u6709\u8282\u70b9\u56de\u6eda\\n\\tif errReply != nil {\\n\\t\\trequestRollback(cluster, c, txID, peers)\\n\\t\\treturn nil, errReply\\n\\t}\\n\\treturn respList, nil\\n}\\n\\n```\\n\\n\\n\\n> \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u5b9e\u73b0\u65b9\u6848\u6709 TCC(try-confirm-catch)\u4e8b\u52a1\u3001MQ \u4e8b\u52a1\u6d88\u606f\u3001Saga \u4e8b\u52a1\u7b49\u3002\u5206\u5e03\u5f0f\u4e8b\u52a1\u4e3b\u8981\u6709\u4e24\u79cd\u5b9e\u73b0\u601d\u8def\uff0c\u7b2c\u4e00\u79cd\u7684\u5178\u578b\u4ee3\u8868\u662f **TCC \u4e8b\u52a1**\uff0cTCC \u4e8b\u52a1\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1a\\n>\\n> 1. Try \u9636\u6bb5\uff1a \u4e8b\u52a1\u534f\u8c03\u5668\u8981\u6c42\u53c2\u4e0e\u65b9**\u9884\u7559\u5e76\u9501\u5b9a**\u4e8b\u52a1\u6240\u9700\u8d44\u6e90\uff1b\\n> 2. Confirm \u9636\u6bb5\uff1a \u82e5\u6240\u6709\u53c2\u4e0e\u65b9\u90fd\u8868\u793a\u8d44\u6e90\u5145\u8db3\u53ef\u4ee5\u63d0\u4ea4\uff0c\u4e8b\u52a1\u534f\u8c03\u5668\u4f1a\u5411\u6240\u6709\u53c2\u4e0e\u65b9\u53d1\u51fa Confirm \u6307\u4ee4\uff0c\u8981\u6c42\u5b9e\u9645\u6267\u884c\u4e8b\u52a1\u3002\\n> 3. Cancel \u9636\u6bb5\uff1a \u82e5 Try \u6216 Confirm \u9636\u6bb5\u4efb\u4e00\u53c2\u4e0e\u8005\u8868\u793a\u65e0\u6cd5\u7ee7\u7eed\u4e8b\u52a1\u534f\u8c03\u5668\u4f1a\u5411\u6240\u6709\u53c2\u4e0e\u65b9\u53d1\u51fa Cancel \u6307\u4ee4\u89e3\u9501\u9884\u7559\u8d44\u6e90\u5e76\u56de\u6eda\u4e8b\u52a1\u3002\\n>\\n> \u7b2c\u4e8c\u79cd\u5b9e\u73b0\u601d\u8def\u7684\u5178\u578b\u4ee3\u8868\u662f **Saga \u4e8b\u52a1**\uff0cSaga \u4e8b\u52a1\u5c06\u4e00\u4e2a\u5927\u4e8b\u52a1\u62c6\u5206\u6210\u591a\u4e2a\u6709\u5e8f\u7684\u5b50\u4e8b\u52a1\u5e76\u4e14\u6bcf\u4e2a\u5b50\u4e8b\u52a1\u90fd\u51c6\u5907\u4e86\u64a4\u9500\u64cd\u4f5c\uff0c\u4e8b\u52a1\u534f\u8c03\u5668\u4f1a\u987a\u5e8f\u7684\u6267\u884c\u5b50\u4e8b\u52a1\uff0c\u5982\u679c\u67d0\u4e2a\u6b65\u9aa4\u5931\u8d25\uff0c\u5219\u6839\u636e\u76f8\u53cd\u987a\u5e8f\u4e00\u6b21\u6267\u884c\u4e00\u6b21\u64a4\u9500\u64cd\u4f5c\u3002\\n>\\n> **\u4e0a\u9762\u6211\u4eec\u53ea\u7b80\u5355\u4ecb\u7ecd\u4e86\u5206\u5e03\u5f0f\u4e8b\u52a1\u4fdd\u8bc1\u539f\u5b50\u6027\u7684\u673a\u5236\uff0c\u5728\u5b9e\u9645\u5b9e\u73b0\u4e2d\u8fd8\u8981\u8003\u8651\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u4e00\u81f4\u6027(\u5f3a\u4e00\u81f4\u8fd8\u662f\u6700\u7ec8\u4e00\u81f4)\u3001\u9694\u79bb\u6027(Saga \u4e8b\u52a1\u4f1a\u66b4\u9732\u4e8b\u52a1\u6267\u884c\u5230\u4e00\u534a\u65f6\u7684\u72b6\u6001)\u3001\u5bf9\u4e1a\u52a1\u7684\u4fb5\u5165\u6027\u3001\u5e76\u53d1\u91cf\u7b49\u5404\u79cd\u95ee\u9898\uff0c\u7b80\u8a00\u4e4b\u5206\u5e03\u5f0f\u4e8b\u52a1\u662f\u4e00\u79cd\u975e\u5e38\u590d\u6742\u3001\u6210\u672c\u5f88\u9ad8\u7684\u6280\u672f\u3002**\\n>\\n> \u7531\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u9ad8\u6210\u672c\uff0c**\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u7ecf\u5e38\u4f7f\u7528\u300c\u5bf9\u8d26\u300d\u7684\u65b9\u5f0f\u6765\u4fdd\u8bc1\u591a\u6a21\u5757\u4e8b\u52a1\u7684\u6700\u7ec8\u4e00\u81f4\u6027\uff0c\u5373\u7528\u79bb\u7ebf\u4efb\u52a1\u5b9a\u65f6\u626b\u63cf\u6570\u636e\u5e93\u627e\u51fa\u672a\u6b63\u786e\u5904\u7406\u7684\u4e8b\u52a1\uff0c\u7136\u540e\u6309\u7167\u9884\u5b9a\u7b56\u7565\u8fdb\u884c\u8865\u507f(\u6bd4\u5982\u64a4\u9500\u672a\u6210\u529f\u4ed8\u6b3e\u7528\u6237\u7684\u4f1a\u5458\u8eab\u4efd)\u6216\u8005\u8981\u6c42\u4eba\u5de5\u4ecb\u5165\u4fee\u590d**\\n\\n\\n\\n### geohash\\n\\n\u4e00\u76f4\u56db\u7b49\u5206\u77e9\u5f62\u5e76\u7f16\u7801\uff0c\u6b64\u65f6\u7f16\u7801\u524d\u7f00\u76f8\u540c\u610f\u5473\u7740\u5728\u76f8\u540c\u7684\u77e9\u5f62\u5185\u90e8\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u67d0\u4e2a\u77e9\u5f62\u5185\u90e8\u53ef\u4ee5\u8f6c\u5316\u6210\u5750\u6807\u7f16\u7801\u5728\u4e00\u4e2a\u533a\u95f4\u5185\\n\\n\u7528SortedSet\u8fdb\u884c\u7d22\u5f15\u5c31\u53ef\u4ee5\u5728\u5bf9\u6570\u65f6\u95f4\u5185\u67e5\u627e\\n\\n\u5173\u4e8e\u8bef\u5dee\u8303\u56f4\u548c\u6295\u5f71\u8bef\u5dee\u767e\u79d1\u5427\uff08\\n\\n\\n\\n\\n\\n### \u5355\u673a\u4e8b\u52a1\\n\\n> Redis \u547d\u4ee4\u53ea\u4f1a\u56e0\u4e3a\u9519\u8bef\u7684\u8bed\u6cd5\u800c\u5931\u8d25\uff08\u5e76\u4e14\u8fd9\u4e9b\u95ee\u9898\u4e0d\u80fd\u5728\u5165\u961f\u65f6\u53d1\u73b0\uff09\uff0c\u6216\u662f\u547d\u4ee4\u7528\u5728\u4e86\u9519\u8bef\u7c7b\u578b\u7684\u952e\u4e0a\u9762\uff1a\u8fd9\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u5b9e\u7528\u6027\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u5931\u8d25\u7684\u547d\u4ee4\u662f\u7531\u7f16\u7a0b\u9519\u8bef\u9020\u6210\u7684\uff0c\u800c\u8fd9\u4e9b\u9519\u8bef\u5e94\u8be5\u5728\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u88ab\u53d1\u73b0\uff0c\u800c\u4e0d\u5e94\u8be5\u51fa\u73b0\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u3002\\n> \u56e0\u4e3a\u4e0d\u9700\u8981\u5bf9\u56de\u6eda\u8fdb\u884c\u652f\u6301\uff0c\u6240\u4ee5 Redis \u7684\u5185\u90e8\u53ef\u4ee5\u4fdd\u6301\u7b80\u5355\u4e14\u5feb\u901f\u3002\\n> \u6709\u79cd\u89c2\u70b9\u8ba4\u4e3a Redis \u5904\u7406\u4e8b\u52a1\u7684\u505a\u6cd5\u4f1a\u4ea7\u751f bug\uff0c\u7136\u800c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u56de\u6eda\u5e76\u4e0d\u80fd\u89e3\u51b3\u7f16\u7a0b\u9519\u8bef\u5e26\u6765\u7684\u95ee\u9898\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4f60\u672c\u6765\u60f3\u901a\u8fc7 INCR \u547d\u4ee4\u5c06\u952e\u7684\u503c\u52a0\u4e0a 1 \uff0c\u5374\u4e0d\u5c0f\u5fc3\u52a0\u4e0a\u4e86 2 \uff0c\u53c8\u6216\u8005\u5bf9\u9519\u8bef\u7c7b\u578b\u7684\u952e\u6267\u884c\u4e86 INCR \uff0c\u56de\u6eda\u662f\u6ca1\u6709\u529e\u6cd5\u5904\u7406\u8fd9\u4e9b\u60c5\u51b5\u7684\u3002\u9274\u4e8e\u6ca1\u6709\u4efb\u4f55\u673a\u5236\u80fd\u907f\u514d\u7a0b\u5e8f\u5458\u81ea\u5df1\u9020\u6210\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u8fd9\u7c7b\u9519\u8bef\u901a\u5e38\u4e0d\u4f1a\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u51fa\u73b0\uff0c\u6240\u4ee5 Redis \u9009\u62e9\u4e86\u66f4\u7b80\u5355\u3001\u66f4\u5feb\u901f\u7684\u65e0\u56de\u6eda\u65b9\u5f0f\u6765\u5904\u7406\u4e8b\u52a1\u3002\\n\\n\u5982\u679c\u8981\u5728godis\u91cc\u9762\u652f\u6301\u5355\u673a\u4e8b\u52a1\\n\\n> \u4e3a\u4e86\u5728\u9047\u5230\u8fd0\u884c\u65f6\u9519\u8bef\u65f6\u4e8b\u52a1\u53ef\u4ee5\u56de\u6eda\uff08\u539f\u5b50\u6027\uff09\uff0c\u53ef\u7528\u7684\u56de\u6eda\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a\\n>\\n> - \u4fdd\u5b58\u4fee\u6539\u524d\u7684value, \u5728\u56de\u6eda\u65f6\u7528\u4fee\u6539\u524d\u7684value\u8fdb\u884c\u8986\u76d6\\n> - \u4f7f\u7528\u56de\u6eda\u547d\u4ee4\u6765\u64a4\u9500\u539f\u547d\u4ee4\u7684\u5f71\u54cd\u3002\u4e3e\u4f8b\u6765\u8bf4\uff1a\u952eA\u539f\u503c\u4e3a1\uff0c\u8c03\u7528\u4e86`Incr A` \u4e4b\u540e\u53d8\u4e3a\u4e862\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6267\u884c\u4e00\u6b21`Set A 1`\u547d\u4ee4\u6765\u64a4\u9500 incr \u547d\u4ee4\u3002\\n\\n\u7531\u4e8e\u4e0d\u843d\u76d8+\u547d\u4ee4\u7b80\u5355\u53ef\u9006,\u6240\u4ee5godis\u91c7\u7528\u4e86\u7b2c\u4e8c\u79cd\\n\\ngodis\u80fd\u5b9e\u73b0\u9694\u79bb\u7ea7\u522b\\n\\n\u810f\u8bfb - \u4e0d\u53ef\u91cd\u590d\u8bfb - \u5e7b\u8bfb\\n\\nkv\u6ca1\u6709\u5e7b\u8bfb, \u56e0\u4e3a\u6e90\u7801\u4e2d\u4e00\u76f4\u7528\u7684\u662f\u8bfb\u5199\u9501\uff0c\u5e76\u4e14\u9075\u5faa2PL\u7684\u52a0\u653e\u9501\u7ea6\u5b9a\\n\\n\u6240\u4ee5\u4e00\u65e6\u4e00\u4e2aT1\u4e8b\u52a1\u89e6\u53d1\u4e86\u5199, \u90a3\u5176\u4ed6\u4e8b\u52a1\u76f4\u63a5\u963b\u585e, \u6bd4timestamp\u7684occ\u66b4\u529b\u4e00\u4e9b, watch\u4e5f\u662f\u5982\u679c\u65f6\u95f4\u6233\u4e0d\u5bf9\uff08\u6709\u5176\u4ed6goroutine\u5199\u8fc7\uff09\u5c31\u56de\u6eda"},{"id":"/hibernate-jpa","metadata":{"permalink":"/blog/hibernate-jpa","source":"@site/blog/hibernate-jpa.md","title":"hibernate&jpa","description":"jdbc: java database connectivity","date":"2024-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":12.495,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"hibernate&jpa","date":"2024-07-11T00:00:00.000Z","author":"ayanami","tags":["java","spring","web"]},"unlisted":false,"prevItem":{"title":"godis\u6e90\u7801\u9605\u8bfb","permalink":"/blog/godis\u6e90\u7801\u9605\u8bfb"},"nextItem":{"title":"linking \u590d\u4e60","permalink":"/blog/linking-\u590d\u4e60"}},"content":"jdbc: java database connectivity\\n\\njdbc \u8981\u5148\u52a0\u8f7d\u9a71\u52a8\uff0c\u7531\u5404\u4e2a\u6570\u636e\u5e93\u5b9e\u73b0\\n\\njpa \u901a\u8fc7 orm \u6846\u67b6\u751f\u6210 sql\uff0c\u518d\u7ecf\u8fc7 jdbc \u64cd\u4f5c\u6570\u636e\u5e93\\n\\n`getBean` \u65b9\u6cd5\uff1a\\n\\n\x3c!-- more --\x3e\\n\\n- `getBean` \u662f `ApplicationContext` \u63a5\u53e3\u4e2d\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u7528\u4e8e\u4ece Spring \u7684 IoC \u5bb9\u5668\u4e2d\u663e\u5f0f\u5730\u83b7\u53d6 Bean \u5b9e\u4f8b\u3002\\n\\n- \u5b83\u901a\u5e38\u5728\u9700\u8981\u624b\u52a8\u83b7\u53d6 Bean \u65f6\u4f7f\u7528\uff0c\u6bd4\u5982\u5728\u975e Spring \u7ba1\u7406\u7684\u7c7b\u4e2d\u6216\u8005\u5728\u67d0\u4e9b\u7279\u5b9a\u7684\u573a\u666f\u4e0b\uff0c\u4f60\u60f3\u8981\u76f4\u63a5\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6 Bean \u800c\u4e0d\u662f\u901a\u8fc7\u6ce8\u5165\u3002\\n\\n- \u4f7f\u7528 `getBean` \u65b9\u6cd5\u65f6\uff0c\u4f60\u9700\u8981\u77e5\u9053 Bean \u7684\u540d\u79f0\u6216\u7c7b\u578b\uff0c\u5e76\u5728\u8c03\u7528\u65f6\u6307\u5b9a\u8fd9\u4e9b\u4fe1\u606f\u3002\\n\\n- \u793a\u4f8b\u4ee3\u7801\uff1a\\n\\n  ```\\n\x3c!--truncate--\x3e  ApplicationContext context = ...; // \u83b7\u53d6ApplicationContext\u5b9e\u4f8b\\n  MyBean myBean = context.getBean(MyBean.class); // \u901a\u8fc7\u7c7b\u578b\u83b7\u53d6Bean\\n  ```\\n\\nhibernate orm \u6846\u67b6,jpql \u4ee5\u53ca JpaRepository\\n\\nlombok \u4e5f\u5f88\u5e38\u7528\uff0c@Data @NoArgsConstructor\\n\\nSpring Data\\n\\n\u7edf\u4e00\u548c\u7b80\u5316\u4e0d\u540c\u7c7b\u578b\u7684\u6301\u4e45\u5316\u5b58\u50a8\uff08Relational & noSQL\uff09\u7684\u8bbf\u95ee\\n\\nJPA \u901a\u8fc7\u9762\u5411\u5bf9\u8c61\u65b9\u5f0f\u548c ORM \u6846\u67b6\u751f\u6210 SQL\\n\\nJPA: java persistence API\uff0c \u662f\u4e00\u79cd ORM \u89c4\u8303\\n\\n\u8be5\u89c4\u8303\u63d0\u4f9b\u4e86\uff1a\\n\\n- ORM \u6620\u5c04\u5143\u6570\u636e\uff0c XML/\u6ce8\u89e3\uff0c\u4f8b\u5982@Table, @Id\uff0c @Column\\n- JPA \u7684 API\uff0c\u7528\u4e8e\u64cd\u4f5c\u5b9e\u4f53\u5bf9\u8c61 CRUD\\n- JPQL \u67e5\u8be2\u8bed\u8a00\uff08\u9762\u5411\u5bf9\u8c61\uff09\\n\\nhibernate \u662f JPA \u89c4\u8303\u7684\u4e00\u79cd\u5b9e\u73b0\\n\\n> As we discussed in an earlier article, [the DAO layer](https://www.baeldung.com/simplifying-the-data-access-layer-with-spring-and-java-generics) usually consists of a lot of boilerplate code that can and should be simplified. The advantages of such a simplification are many: a decrease in the number of artifacts that we need to define and maintain, consistency of data access patterns, and consistency of configuration.\\n>\\n> Spring Data takes this simplification one step further and **makes it possible to remove the DAO implementations entirely**. The interface of the DAO is now the only artifact that we need to explicitly define.\\n>\\n> In order to start leveraging the Spring Data programming model with JPA, a DAO interface needs to extend the JPA specific _Repository_ interface, _JpaRepository_. This will enable Spring Data to find this interface and automatically create an implementation for it.\\n\\n### **Automatic Custom Queries**\\n\\nWhen Spring Data creates a new _Repository_ implementation, it analyses all the methods defined by the interfaces and tries to **automatically generate queries from the method names**. While this has some limitations, it\u2019s a very powerful and elegant way of defining new custom access methods with very little effort.\\n\u5f53 Spring Data \u521b\u5efa\u65b0\u7684 Repository \u5b9e\u73b0\u65f6\uff0c\u5b83\u4f1a\u5206\u6790\u63a5\u53e3\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u5e76\u5c1d\u8bd5\u6839\u636e\u65b9\u6cd5\u540d\u79f0\u81ea\u52a8\u751f\u6210\u67e5\u8be2\u3002\u867d\u7136\u8fd9\u6709\u4e00\u4e9b\u9650\u5236\uff0c\u4f46\u5b83\u662f\u4e00\u79cd\u975e\u5e38\u5f3a\u5927\u4e14\u4f18\u96c5\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u8f7b\u677e\u5b9a\u4e49\u65b0\u7684\u81ea\u5b9a\u4e49\u8bbf\u95ee\u65b9\u6cd5\u3002\\n\\nLet\u2019s look at an example. If the entity has a _name_ field (and the Java Bean standard _getName_ and _setName_ methods), **we\u2019ll define the \\\\*findByName\\\\* method in the DAO interface.** This will automatically generate the correct query:\\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u3002\u5982\u679c\u5b9e\u4f53\u6709\u540d\u79f0\u5b57\u6bb5\uff08\u4ee5\u53ca Java Bean \u6807\u51c6 getName \u548c setName \u65b9\u6cd5\uff09\uff0c\u6211\u4eec\u5c06\u5728 DAO \u63a5\u53e3\u4e2d\u5b9a\u4e49 findByName \u65b9\u6cd5\u3002\u8fd9\u5c06\u81ea\u52a8\u751f\u6210\u6b63\u786e\u7684\u67e5\u8be2\uff1a\\n\\n```java\\npublic interface IFooDAO extends JpaRepository<Foo, Long> {\\n\\n    Foo findByName(String name);\\n\\n}\\n```\\n\\n### **Manual Custom Queries**\\n\\nNow let\u2019s look at a custom query that we\u2019ll define via the _@Query_ annotation:\\n\\n```java\\n@Query(\\"SELECT f FROM Foo f WHERE LOWER(f.name) = LOWER(:name)\\")\\nFoo retrieveByName(@Param(\\"name\\") String name);\\n```\\n\\n## **Spring Data JPA Repository Configuration**\\n\\nTo activate the Spring JPA repository support, we can use the _@EnableJpaRepositories_ annotation and specify the package that contains the DAO interfaces:\\n\u8981\u6fc0\u6d3b Spring JPA \u5b58\u50a8\u5e93\u652f\u6301\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 @EnableJpaRepositories \u6ce8\u91ca\u5e76\u6307\u5b9a\u5305\u542b DAO \u63a5\u53e3\u7684\u5305\uff1a\\n\\n```java\\n@EnableJpaRepositories(basePackages = \\"com.baeldung.spring.data.persistence.repository\\")\\npublic class PersistenceConfig {\\n    ...\\n}\\n```\\n\\nMaven \u4f9d\u8d56\\n\\n```xml\\n<dependency>\\n   <groupId>org.springframework.data</groupId>\\n   <artifactId>spring-data-jpa</artifactId>\\n   <version>2.4.0</version>\\n</dependency>\\n```\\n\\n\u4e00\u5bf9\u591a\u6620\u5c04\\n\\n> Simply put, **\\\\*one-to-many\\\\* mapping means that one row in a table is mapped to multiple rows in another table.**\\n\\n> For this example, we\u2019ll implement a cart system where we have a table for each cart and another table for each item. **One cart can have many items, so here we have a \\\\*one-to-many\\\\* mapping.**\\n> \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u8d2d\u7269\u8f66\u7cfb\u7edf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8d2d\u7269\u8f66\u90fd\u6709\u4e00\u4e2a\u8868\uff0c\u6bcf\u4e2a\u9879\u76ee\u90fd\u6709\u53e6\u4e00\u4e2a\u8868\u3002\u4e00\u8f86\u8d2d\u7269\u8f66\u53ef\u4ee5\u6709\u5f88\u591a\u5546\u54c1\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u6709\u4e00\u4e2a\u4e00\u5bf9\u591a\u7684\u6620\u5c04\u3002\\n>\\n> The way this works at the database level is we have a _cart_id_ as a primary key in the _cart_ table and also a _cart_id_ as a foreign key in _items_.\\n> \u5728\u6570\u636e\u5e93\u7ea7\u522b\u7684\u5de5\u4f5c\u65b9\u5f0f\u662f\uff0c\u6211\u4eec\u5c06 cart_id \u4f5c\u4e3a\u8d2d\u7269\u8f66\u8868\u4e2d\u7684\u4e3b\u952e\uff0c\u5e76\u5c06 cart_id \u4f5c\u4e3a\u9879\u76ee\u4e2d\u7684\u5916\u952e\u3002\\n>\\n> The way we do it in code is with _@OneToMany_.\\n> \u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u65b9\u5f0f\u662f\u4f7f\u7528@OneToMany\u3002\\n>\\n> Let\u2019s map the _Cart_ class to the collection of _Item_ objects in a way that reflects the relationship in the database:\\n> \u8ba9\u6211\u4eec\u4ee5\u53cd\u6620\u6570\u636e\u5e93\u4e2d\u5173\u7cfb\u7684\u65b9\u5f0f\u5c06 Cart \u7c7b\u6620\u5c04\u5230 Item \u5bf9\u8c61\u7684\u96c6\u5408\uff1a\\n>\\n> ```java\\n> public class Cart {\\n>\\n>     //...\\n>\\n>     @OneToMany(mappedBy=\\"cart\\")\\n>     private Set<Item> items;\\n>\\n>     //...\\n> }\\n> ```\\n>\\n> We can also add a reference to _Cart_ in each _Item_ using _@ManyToOne_, making this a [bidirectional](https://docs.jboss.org/hibernate/orm/4.1/manual/en-US/html/ch07.html#collections-bidirectional) relationship. Bidirectional means that **we are able to access \\\\*items\\\\* from \\\\*carts\\\\*, and also \\\\*carts\\\\* from \\\\*items\\\\***.\\n> \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 @ManyToOne \u5728\u6bcf\u4e2a\u9879\u76ee\u4e2d\u6dfb\u52a0\u5bf9 Cart \u7684\u5f15\u7528\uff0c\u4f7f\u5176\u6210\u4e3a\u53cc\u5411\u5173\u7cfb\u3002\u53cc\u5411\u610f\u5473\u7740\u6211\u4eec\u80fd\u591f\u4ece\u8d2d\u7269\u8f66\u8bbf\u95ee\u5546\u54c1\uff0c\u4e5f\u53ef\u4ee5\u4ece\u5546\u54c1\u8bbf\u95ee\u8d2d\u7269\u8f66\u3002\\n>\\n> The _mappedBy_ property is what we use to tell Hibernate which variable we are using to represent the parent class in our child class.\\n> mappedBy \u5c5e\u6027\u662f\u6211\u4eec\u7528\u6765\u544a\u8bc9 Hibernate \u6211\u4eec\u4f7f\u7528\u54ea\u4e2a\u53d8\u91cf\u6765\u8868\u793a\u5b50\u7c7b\u4e2d\u7684\u7236\u7c7b\u7684\u5c5e\u6027\u3002\\n\\nHibernate SessionFactory for database intersection\\n\\n```java\\npublic static SessionFactory getSessionFactory() {\\n\\n    ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()\\n      .applySettings(dbSettings())\\n      .build();\\n\\n    Metadata metadata = new MetadataSources(serviceRegistry)\\n      .addAnnotatedClass(Cart.class)\\n      // other domain classes\\n      .buildMetadata();\\n\\n    return metadata.buildSessionFactory();\\n}\\n\\nprivate static Map<String, Object> dbSettings() {\\n    // return Hibernate settings\\n}\\n```\\n\\n\u6a21\u677f\u5236\u4f5c\\n\\nconnect java and db\\n\\nOOP object and relational table how to connect?\\n\\nORM: object relational db mapping\\n\\n\u96c6\u6210\u8fdb IDEA\\n\\npom.xml\\n\\n```xml\\n<dependency>\\n    <groupId>org.hibernate</groupId>\\n    <artifactId>hibernate-core</artifactId>\\n    <version>6.1.2.Final</version>\\n</dependency>\\n```\\n\\n@Entity \u5411 hibernate \u6307\u660e\u67d0\u4e2a class \u9700\u8981\u6620\u5c04\u5230 db\\n\\n@Table(\\"tbname\\") \u5411 hibernate \u6307\u660e\u8fde\u63a5\u5230 tbname \u8fd9\u5f20\u8868\\n\\n@Id\\n\\n@GeneratedValue(strategy=GenerationType.IDENTITY)\\n\\n\u4e24\u4e2a\u8fde\u7528\uff0c\u6307\u660e id \u4e3b\u952e\\n\\n\u5982\u679c\u7c7b\u5185\u7684\u5c5e\u6027\u548c\u8868\u7684\u5217\u662f\u76f8\u540c\u7684\u540d\u5b57\uff0c\u4f1a\u81ea\u52a8\u586b\u5145\uff1b\u5982\u679c\u4e0d\u540c\uff0c\u4f7f\u7528`@Column(name=\\"...\\")`\u6307\u5b9a\u5bf9\u5e94\u7684\u540d\u5b57\\n\\n\u7136\u540e\u8981\u6c42\u8fd9\u4e2a\u7c7b\u62e5\u6709\u4e00\u4e2a\u7a7a\u6784\u9020\u51fd\u6570\uff08\u53ef\u4ee5\u6709\u522b\u7684\u8f85\u52a9\u6784\u9020\u51fd\u6570\uff0c\u4f46\u8981\u6709\u4e00\u4e2a\u7a7a\u7684\u91cd\u8f7d\uff1a \u53c2\u6570\u548c\u51fd\u6570\u4f53\u90fd\u4e3a\u7a7a\uff09\\n\\n---\\n\\nhttps://spring.io/guides/gs/accessing-data-jpa\\n\\n\u672a\u6ce8\u89e3\u7684\u5c5e\u6027\u9ed8\u8ba4\u6620\u5c04\u5230\u540c\u540d\u5217\\n\\n> The other two properties, `firstName` and `lastName`, are left unannotated. It is assumed that they are mapped to columns that share the same names as the properties themselves.\\n\\nReposity Interface\uff1a\\n\\n\u901a\u8fc7\u5b58\u50a8\u5e93\u63a5\u53e3\u52a8\u6001\u5730\u521b\u5efa java\\\\<-\\\\>db \u6620\u5c04\u7684 JPA \u5b9e\u73b0\\n\\nextends CrudRepository \u63a5\u53e3\\n\\n> In a typical Java application, you might expect to write a class that implements `CustomerRepository`. However, that is what makes Spring Data JPA so powerful: You need not write an implementation of the repository interface. Spring Data JPA creates an implementation when you run the application.\\n\\n\u7406\u89e3\u793a\u4f8b\u4ee3\u7801\u4e4b\u4e2d\u6700\u62bd\u8c61\u7684\u4e00\u6bb5\uff1a\\n\\n```java\\n\\n@SpringBootApplication\\npublic class AccessingDataJpaApplication {\\n    private static final Logger log = LoggerFactory.getLogger(AccessingDataJpaApplication.class);\\n\\n    public static void main(String[] args) {\\n        SpringApplication.run(AccessingDataJpaApplication.class, args);\\n    }\\n\\n    @Bean\\n    public CommandLineRunner demo(CustomerRepository repo) {\\n        return args -> {\\n            repo.save(new Customer(\\"Jack\\", \\"Bauer\\"));\\n            repo.save(new Customer(\\"Chloe\\", \\"O\'Brian\\"));\\n            repo.save(new Customer(\\"Kim\\", \\"Bauer\\"));\\n            repo.save(new Customer(\\"David\\", \\"Palmer\\"));\\n            repo.save(new Customer(\\"Michelle\\", \\"Dessler\\"));\\n\\n            // fetch all customers\\n            log.info(\\"Customers found with findAll():\\");\\n            log.info(\\"-------------------------------\\");\\n            repo.findAll().forEach(customer -> {\\n                log.info(customer.toString());\\n            });\\n            log.info(\\"\\");\\n\\n            // fetch an individual customer by ID\\n            Customer customer = repo.findById(1L);\\n            log.info(\\"Customer found with findById(1L):\\");\\n            log.info(\\"--------------------------------\\");\\n            log.info(customer.toString());\\n            log.info(\\"\\");\\n\\n            // fetch customers by last name\\n            log.info(\\"Customer found with findByLastName(\'Bauer\'):\\");\\n            log.info(\\"--------------------------------------------\\");\\n            repo.findByLastName(\\"Bauer\\").forEach(bauer -> {\\n                log.info(bauer.toString());\\n            });\\n            log.info(\\"\\");\\n        };\\n    }\\n}\\n\\n```\\n\\nQ1: \u6b64\u5904\u7684@Bean \u662f\u8c01\u6765\u586b\u5165\u7684\uff1fCustomerRepo \u662f\u54ea\u91cc\u83b7\u53d6\u7684\u6570\u636e\uff1f\\n\\nA1:\\n\\n1. **\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5d4c\u5165\u5f0f\u6570\u636e\u5e93\uff08\u5982 H2\uff09\uff0c\u5219\u4e0d\u9700\u8981\u63d0\u4f9b\u4e3b\u673a\u548c\u7aef\u53e3\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u662f\u76f4\u63a5\u5d4c\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u3002**\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u5916\u90e8\u6570\u636e\u5e93\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u6570\u636e\u5e93\u670d\u52a1\u5668\u6b63\u5728\u8fd0\u884c\uff0c\u5e76\u4e14\u7f51\u7edc\u8bbe\u7f6e\u5141\u8bb8\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c\u5728\u914d\u7f6e\u6587\u4ef6\u4e4b\u4e2d\u8bbe\u7f6e\u914d\u7f6e\u3002\u800c\u793a\u4f8b\u7a0b\u5e8f\u662f\u4f7f\u7528 h2 \u6570\u636e\u5e93\\n2. H2 \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5d4c\u5165\u5f0f\u6570\u636e\u5e93\uff0c\u5b83\u53ef\u4ee5\u88ab\u76f4\u63a5\u5d4c\u5165\u5230 Java \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u8fd9\u610f\u5473\u7740\u4f60\u4e0d\u9700\u8981\u5b89\u88c5\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u5e93\u670d\u52a1\u5668\u6765\u4f7f\u7528 H2\uff1b\u5b83\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u5728\u4f60\u7684 Java \u865a\u62df\u673a\uff08JVM\uff09\u4e2d\u3002\u8fd9\u4f7f\u5f97 H2 \u975e\u5e38\u9002\u5408\u7528\u4e8e\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u539f\u578b\u8bbe\u8ba1\uff0c\u56e0\u4e3a\u5b83\u7b80\u5316\u4e86\u5f00\u53d1\u73af\u5883\u7684\u8bbe\u7f6e\u548c\u7ba1\u7406\u3002**\u901a\u5e38\u4e0d\u9700\u8981\u989d\u5916\u7684\u914d\u7f6e\uff0c\u56e0\u4e3a`spring-boot-starter-data-jpa`\u542f\u52a8\u5668\u5df2\u7ecf\u5305\u542b\u4e86\u5bf9 H2 \u7684\u652f\u6301\u3002\u5982\u679c\u4f60\u7684`application.properties`\u6216`application.yml`\u6587\u4ef6\u4e2d\u6ca1\u6709\u6307\u5b9a\u5176\u4ed6\u7684\u6570\u636e\u5e93\uff0cSpring Boot \u5c06\u9ed8\u8ba4\u4f7f\u7528 H2\uff0c\u5e76\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5185\u5d4c\u7684 H2 \u6570\u636e\u5e93**\\n\\nQ2\uff1aCommandLineRunner \u548c args->\u90fd\u662f\u5565\u73a9\u610f\\n\\nA2\uff1a\\n\\n1. `CommandLineRunner` \u7684\u4f5c\u7528\uff1a `CommandLineRunner` **\u662f Spring Boot \u63d0\u4f9b\u7684\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b83\u5141\u8bb8\u4f60\u5728\u5e94\u7528\u542f\u52a8\u540e\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u7684\u7c7b\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u65b9\u6cd5(\u4e5f\u5c31\u662f`public static void main(String[] args)`)**`run(String... args)`\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5728 Spring Boot \u5e94\u7528\u542f\u52a8\u5b8c\u6210\u540e\u6267\u884c\u3002`CommandLineRunner`\u901a\u5e38\u7528\u4e8e\u6267\u884c\u5e94\u7528\u542f\u52a8\u540e\u7684\u521d\u59cb\u5316\u4efb\u52a1\uff0c\u6bd4\u5982\u6570\u636e\u52a0\u8f7d\u3001\u53d1\u9001\u6b22\u8fce\u90ae\u4ef6\u3001\u8fd0\u884c\u4e00\u4e9b\u542f\u52a8\u65f6\u7684\u68c0\u67e5\u7b49\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c`CommandLineRunner`\u88ab\u7528\u6765\u6f14\u793a\u5982\u4f55\u4f7f\u7528 Spring Data JPA \u6765\u64cd\u4f5c\u6570\u636e\u5e93\u3002\\n\\n2. ->\u662f java \u7684 lambda \u8868\u8fbe\u5f0f\\n\\nbuild executable JAR:\\n\\n> If you use Maven, you can run the application by using `./mvnw spring-boot:run`. Alternatively, you can build the JAR file with `./mvnw clean package` and then run the JAR file, as follows:\\n>\\n> ```bash\\n> java -jar target/gs-accessing-data-jpa-0.1.0.jar\\n> ```\\n\\n> jar \u5230\u5e95\u662f\u4ec0\u4e48\uff1aJava Archive, \u662f\u6253\u5305 java \u7c7b\u6587\u4ef6\u7684**\u5f52\u6863\u6587\u4ef6**\uff0c\u57fa\u4e8e zip \u683c\u5f0f\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u6709 java \u8fd0\u884c\u65f6\u7684\u73af\u5883\u4e0b\u8fd0\u884c\\n\\n\u4f7f\u7528 RESTapi \u548c JPA\\n\\nhttps://spring.io/guides/gs/accessing-data-rest#scratch\\n\\n\u5173\u952e\u793a\u4f8b\u4ee3\u7801\\n\\n```java\\n@RepositoryRestResource(collectionResourceRel = \\"people\\", path = \\"people\\")\\npublic interface PersonRepository extends PagingAndSortingRepository<Person, Long>, CrudRepository<Person,Long> {\\n\\n  List<Person> findByLastName(@Param(\\"name\\") String name);\\n\\n}\\n```\\n\\nQ: \u7b2c\u4e00\u884c\u7684\u6ce8\u89e3\u662f\u4ec0\u4e48\u610f\u601d\uff1f\\n\\nA\uff1a\\n\\n1. `@RepositoryRestResource` \u662f Spring Data REST \u63d0\u4f9b\u7684\u4e00\u4e2a\u6ce8\u89e3\uff0c\u7528\u4e8e\u5c06 Spring Data \u7684 Repository \u63a5\u53e3\u66b4\u9732\u4e3a RESTful \u7aef\u70b9\u3002\u8fd9\u4e2a\u6ce8\u89e3\u5141\u8bb8\u4f60\u81ea\u5b9a\u4e49\u5982\u4f55\u5c06 Repository \u7684\u65b9\u6cd5\u6620\u5c04\u5230 HTTP \u8bf7\u6c42\u4e0a\\n\\n2. `path = \\"people\\"`\u6307\u5b9a\u4e86\u8fd9\u4e2a repo \u6620\u5c04\u5230\u7684\u8def\u7531(`/people`)\\n\\n3. `collectionResourceRel=\\"people\\"`\u4f1a\u81ea\u52a8\u5904\u7406\u57fa\u672c\u7684\uff08\u9075\u5b88 JPA \u547d\u540d\u7ea6\u5b9a\u7684\uff09\u65b9\u6cd5\u6620\u5c04\uff08\u66ff\u4ee3\u4e86@RequestMapping\uff09\uff0c\u4f8b\u5982\u6b64\u65f6\u53d1\u9001`DELETE /people/:id`\u7684\u8bf7\u6c42\uff0c\u5373\u4f7f\u6ca1\u6709\u624b\u52a8\u5b9e\u73b0\uff0c\u4e5f\u4f1a\u88ab\u9ed8\u8ba4 mapping \u548c\u5b8c\u6210\u5220\u9664\\n\\n4. \u81ea\u5b9a\u4e49\u65b9\u6cd5\uff1a\\n\\n   \u5982\u679c\u4f60\u9700\u8981\u6267\u884c\u66f4\u590d\u6742\u7684\u67e5\u8be2\uff0c\u4f60\u53ef\u4ee5\u5728 Repository \u63a5\u53e3\u4e2d\u5b9a\u4e49\u81ea\u5df1\u7684\u65b9\u6cd5\uff0c\u5e76\u4f7f\u7528`@Query`\u6ce8\u89e3\u6765\u63d0\u4f9b JPQL\uff08Java Persistence Query Language\uff09\u6216\u672c\u5730\u67e5\u8be2\uff08\u5982 JDOQL \u6216 Hibernate HQL\uff09\u3002\u4f8b\u5982\uff1a\\n\\n   ```java\\n   public interface CustomerRepository extends JpaRepository<Customer, Long> {\\n       @Query(\\"SELECT c FROM Customer c WHERE c.email = :email\\")\\n       Customer findByEmail(String email);\\n   }\\n   ```\\n\\n5. **\u5728\u8fd0\u884c\u65f6\uff0cSpring Data REST \u81ea\u52a8\u521b\u5efa\u8be5\u63a5\u53e3\u7684\u5b9e\u73b0**\u3002\u7136\u540e\u5b83\u4f7f\u7528 @RepositoryRestResource \u6ce8\u91ca\u6765\u6307\u793a Spring MVC \u5728 `/people` \u5904\u521b\u5efa RESTful \u7aef\u70b9\u3002"},{"id":"/linking-\u590d\u4e60","metadata":{"permalink":"/blog/linking-\u590d\u4e60","source":"@site/blog/linking-\u590d\u4e60.md","title":"linking \u590d\u4e60","description":"linking \u590d\u4e60","date":"2024-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"linking","permalink":"/blog/tags/linking"},{"inline":true,"label":"system","permalink":"/blog/tags/system"}],"readingTime":16.03,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"linking \u590d\u4e60","date":"2024-07-11T00:00:00.000Z","author":"ayanami","tags":["linking","system"],"keywords":["linking","linker"]},"unlisted":false,"prevItem":{"title":"hibernate&jpa","permalink":"/blog/hibernate-jpa"},"nextItem":{"title":"ts\u57fa\u7840","permalink":"/blog/ts\u57fa\u7840"}},"content":"linking \u590d\u4e60\\n\\n#### No linker **Problems**\\n\\n\u2022 efficiency: small change requires complete recompilation\\n\\n\u2022 modularity: hard to share common functions (e.g. printf)\\n\\n\x3c!-- more --\x3e\\n\\n\\nseperate compilation: *separately compiled relocatable object files*\\n\\nreloc object files -> executable object file \\n\\n\\n\\n#### What is linker\\n\\n- Linking is the process of: collecting and combining various pieces of code and data into a single executable file\\n\\n- Executable file: Can be loaded (copied) into memory and executed\\n\x3c!--truncate--\x3e\\nLinking can be performed\\n\\n- at compile time, when the source code is translated into machine code by the linker\\n\\n- at load time, when the program is loaded into memory and executed by the loader\\n\\n- at run time, by application programs\\n\\n\\n\\n\u7f16\u8bd1\u8fc7\u7a0b\uff1apreprocessor -> compiler -> assembler -> linker\\n\\n\\n\\n\\n\\n#### Static Linking\\n\\nInput:\\n\\nA relocatable object files and command line arguments\\n\\nOutput:\\n\\n**Fully linked** executable object file that can be loaded and run\\n\\n\\n\\n##### Relocatable object file\\n\\nContain binary code and data in a form that can be combined with other relocatable object files to create an executable file\\n\\n##### Sections\\n\\n- Various code and data sections\\n\\n- Instructions are in one section\\n\\n- Initialized global variables are in one section\\n\\n- Uninitialized global variables are in one section \\n\\n\\n\\n##### External reference\\n\\n- Reference to a symbol defined in another object file\\n\\n- The external references are **value 0** in the relocatable object files in the previous example\\n\\nSymbol resolution: Resolves external references\\n\\n\\n\\nRelocates *symbols*\\n\\n- from their relative locations in the .o files \\n\\n- to new absolute positions in the executable\\n\\n\\n\\n#### Object files\\n\\n- Relocatable object file\\n\\n- Executable object file\\n\\n- Shared object file(A special type of relocatable object file that **can be loaded into memory and linked dynamically, at either load time or run time**)\\n\\n\\n\\n#### **Executable and Linkable Format (ELF)**\\n\\n- Standard binary format for object files\\n\\n- Derives from AT&T System V Unix\\n\\n- later adopted by BSD Unix variants and Linux\\n\\n- One unified format for relocatable object files (.o), executable object files, and shared object files (.so)\\n\\n- generic name: ELF binaries\\n\\n- Better support for shared libraries than old a.out formats.\\n\\n![image-20240618152139316](https://s2.loli.net/2024/06/18/mqs1U3JAKW27EFi.png)\\n\\n##### ELF Header\\n\\nThe first part is very important,used to store meta data usually\\n\\nmagic number, type (.o, exec, .so), machine, byte ordering, Beginning of the section header table (as well as the program header table), etc\\n\\n```c\\ntypedef uint64_t\\tElf64_Addr;\\ntypedef uint16_t\\tElf64_Half;\\ntypedef uint64_t\\tElf64_Off;\\ntypedef int32_t\\tElf64_Sword;\\ntypedef int64_t\\tElf64_Sxword;\\ntypedef uint32_t\\tElf64_Word;\\ntypedef uint64_t\\tElf64_Lword;\\ntypedef uint64_t\\tElf64_Xword;\\n\\ntypedef  struct{\\n\\tunsigned char \\te_ident[16]; \\t/* ELF identification */  \\n\\tElf64_Half \\t\\te_type; \\t/* Object file type ET_REL(1)\u3001ET_EXEC(2)\u3001ET_DYN(3)(shared) */\\n\\tElf64_Half \\t\\te_machine; \\t/* Machine type EM_386(3)\u3001EM_IA_64(50)*/\\n\\tElf64_Word \\te_version; \\t/* Object file version */\\n\\tElf64_Addr \\te_entry; \\t/* Entry point address */\\n\\tElf64_Off \\t\\te_phoff; \\t/* Program header offset */\\n\\tElf64_Off \\t\\te_shoff; \\t/* Section header offset */\\n\\tElf64_Word \\te_flags; \\t/* Processor-specific flags */\\n\\tElf64_Half \\t\\te_ehsize; \\t/* ELF header size */\\n\\tElf64_Half \\t\\te_phentsize; \\t/* Size of program header entry */\\n\\tElf64_Half \\t\\te_phnum; \\t/* Number of program header entries */\\n\\tElf64_Half \\t\\te_shentsize; \\t/* Size of section header entry */\\n\\tElf64_Half \\t\\te_shnum; \\t/* Number of section header entries */\\n\\tElf64_Half \\t\\te_shstrndx; \\t/* Section name string table index */\\n} Elf64_Ehdr;\\n```\\n\\ne_ident[0-3] \u20180x7f\u2019 \u2018E\u2019 \u2018L\u2019 \u2018F\u2019    magic number\\n\\ne_ident[4] 1(32-bit) / 2(64-bit)\\n\\ne_ident[5] 1(little) / 2(big)\\n\\ne_ident[15] size of e_ident[]\\n\\n```c\\ntypedef struct {\\n\\tElf64_Word    sh_name;\\t/* Section name (index into the section header string table). */ \\n\\tElf64_Word    sh_type;\\t/* Section type. SHT_PROGBITS\u3001SHT_SYMTAB \u3001SHT_STRTAB\u3001SHT_REL\u3001SHT_NOBITS \\n*/\\n\\tElf64_Xword  sh_flags;\\t/* Section flags. */\\n\\tElf64_Addr\\t    sh_addr;\\t/* Address in memory image.(If the section will be copied into the memory to execute, this member gives the address at which the section\u2019s first byte should reside \\n) */\\n\\tElf64_Off\\t    sh_offset;\\t/* Offset in file. (the byte offset from the beginning of the file to the first byte in the section) */\\n\\tElf64_Xword  sh_size;\\t/* Size in bytes. */\\n\\tElf64_Word    sh_link;\\t/* Index of a related section. */\\n\\tElf64_Word    sh_info;\\t/* Depends on section type. */\\n\\tElf64_Xword  sh_addralign;\\t/* Alignment in bytes. */\\n\\tElf64_Xword  sh_entsize;\\t  /* Size of each entry in section. (Some sections hold a table of fixed-size entries, this member gives the size in bytes of each entry)*/ \\n} Elf64_Shdr;\\n```\\n\\n##### ELF String Table\\n\\n- Hold null-terminated character sequences (strings) \\n\\n- The object file uses these strings to represent symbol and section names\\n\\n- One references a string as an index into the string table section\\n\\n![image-20240618153451314](https://s2.loli.net/2024/06/18/eha1s3qotpK5vXM.png)\\n\\n##### Other Sections\\n\\n- debug section: debugging symbol table, local variables and typedefs, global variables, original C source file (gcc -g)\\n\\n- .line: Mapping between line numbers in the original C source program and machine code instructions in the .text section.\\n\\n##### Sections in ELF obj file\\n\\n- .text section: code \u4ee3\u7801\\n\\n- .rodata section: Read-only data\\n\\n- .data section: initialized global and static C variables\\n\\n- .bss section (\u201cBlock Started by Symbol\u201d or \u201cBetter Save Space\u201d)\\n\\n\u2013**uninitialized** global and static C variables, along with any global or static variables that are **initialized to zero**\\n\\n\u2013**has section header but occupies no disk space**\\n\\n\u2013at run time, these variables are allocated in memory with initial value zero\\n\\n\\n\\n#### Symbol\\n\\n- Defined global symbols\\n\\n- Referenced global symbols\\n\\n- Local symbols(C functions and global variables with static attribute)\\n\\n\u5c40\u90e8\u975e\u9759\u6001\u53d8\u91cf\u4e0d\u662fsymbol, \u4e0d\u5728.symtab\u6bb5\u5360\u6709\u7a7a\u95f4\\n\\n**Each relocatable object file has a symbol table in .symtab section**\\n\\nSymbol Table\u5305\u542b\u4e86\uff1a\\n\\n1. the module\uff08file\uff09 that defines the symbol \\n\\n2. the symbol type (local,global,extern)\\n\\n3. the section (.text,.data,.bss)\\n\\n```c\\n typedef struct {\\n \\tint \\tname ;\\t\\t/* the name in string table\'s (byte) offset */\\n\\tchar \\ttype:4;\\t/* function or data (4 bits) (usually\uff0c\u8fd8\u6709\u4e00\u4e9b\u522b\u7684)*/\\n \\t   \\tbinding:4 ;\\t/* local or global  (4 bits) */\\n \\tchar \\treserved ;\\t/* unused */\\n \\tshort \\tsection ;\\t/* section header index */\\n  \\tlong \\tvalue ;\\t\\t/* section offset(for relocatable), or abs address(for executable) */\\n \\tlong\\tsize ;\\t\\t/* Object size in bytes */\\n} Elf64_Symbol ;\\n```\\n\\n\\n\\n**Each symbol is assigned to some section of the object file, denoted by the section field, which is an index into the section header table.**Symbol\u548c\u67d0\u4e2aSection\u7ed1\u5b9a\uff0c\u5177\u4f53\u65b9\u6cd5\u662fSymbol\u8bb0\u5f55\u5bf9\u5e94Section\u5728Section Header Table\u4e4b\u4e2d\u7684index \\n\\nThere are three special pseudosections that **don\u2019t have entries in the section header table**\\n\\n- ABS: symbols that should not be relocated \\n\\n- UNDEF: symbols that are referenced in this object module but defined elsewhere\\n\\n- COMMON: uninitialized data objects\\n\\nThey only exist only in relocatable object files and do not exist in executable object files\\n\\n\\n\\nFor COMMON symbols\\n\\n- value gives the alignment requirement\\n\\n- size gives the minimum size\\n\\n**\u91cd\u8981**:**The difference between COMMON and .bss**\\n\\nCOMMON\uff1a**Uninitialized global** variables\\n\\n.bss\uff1a**Uninitialized static** variables, **global or static** variables that are **initialized to zero**\\n\\n\\n\\n##### \u91cd\u8981\uff01\uff01\uff01\uff01\uff01\\n\\n![image-20240618160330533](https://s2.loli.net/2024/06/18/AKg2mf34LIXlDr7.png)\\n\\n\\n\\n##### \u91cd\u540d\u95ee\u9898\\n\\n\u5f3a\u7b26\u53f7\uff1a \u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u51fd\u6570\\n\\n\u5f31\u7b26\u53f7\uff1a \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\\n\\n\u91cd\u540d\uff1a\u5f3a+\u5f3a\uff0c\u62a5\u9519\uff1b\u5f3a+\u5f31\uff0c\u8986\u76d6\uff1b\u5f31+\u5f31\uff0c\u4efb\u610f\\n\\n\\n\\n#### \u9759\u6001\u94fe\u63a5\\n\\n- **concatenate related relocatable object files into a single file with an index (called an archive\uff0c .a)**\\n\\n- enhance linker so that it tries to resolve unresolved external references by looking for the symbols in one or more archives\\n\\n- **If an archive member file resolves reference, link into executable**\\n\\n\u4f7f\u7528\u9759\u6001\u94fe\u63a5\uff1a\u7ecf\u5178EUD\\n\\n> 1. Scan .o files and .a files in the **command line order.**\\n>\\n> 2. When scan an object file f, \\n>\\n> - Add f to E\\n>\\n> - Updates U, D\\n>\\n> 3. When scan an archive file f,\\n>\\n> - Resolve U\\n>\\n> - If m is used to resolve symbol, m is added to E\\n>\\n> - Update U, D using m \\n>\\n> 4. If any entries in the unresolved list at end of scan, then error\\n\\n\u95ee\u9898\uff1acommand line order matters! \\n\\n\u539f\u5219\uff1a\u603b\u662f\u628a\u94fe\u63a5\u7684\u5e93\u653e\u5728\u6700\u540e\u9762\uff0c\u5e76\u4e14\u53ef\u4ee5\u91cd\u590d\\n\\n\\n\\n\\n\\n#### Relocation\\n\\nFor each **reference to an object with unknown location**\\n\\n- Assembler generates a relocation entry\\n\\n- Relocation **entries for code** are placed in **.rel.text**\\n\\n- Relocation **entries for data** are placed in **.rel.data**\\n\\n\u4f8b\u5982\\n\\n```assembly\\n09      e8 00 00 00 00\\tcallq e<main+0xe> swap();\\n/* There is a relocation entry in rel.text */\\n\\noffset   symbol\\ttype\\t\\t\\taddend\\n    0a   swap\\tR_X86_64_PC32   \\t-4  /* PC32: PC-relative */\\n\\n```\\n\\n.rel.text section\\n\\n- **relocation info for .text section**\\n\\n- **addresses of instructions** that will need to be modified in the merged executable object file\\n\\n.rel.data section\\n\\n- relocation info for .data section\\n- addresses of **pointer data** that will need to be modified in the merged executable object file\\n\\n```c\\ntypedef struct {\\n\\t\\tlong  offset ;\\n   long  type:32 ,\\n         symbol:32 ;\\n   long  addend;\\n } Elf64_Rela ;\\n```\\n\\n```c\\nint *bufp0 = &buf[0] ;\\n00000000 <bufp0>:\\n\\t0: 00 00 00 00 00 00 00 00\\n/* There is a relocation entry in rel.data */\\noffset   symbol\\ttype\\t\\t\\taddend\\n    0\\t   buf\\tR_X86_64_64   \\t0\\n```\\n\\n`addend`\u662f\u91cd\u5b9a\u4f4d\u6761\u76ee\u4e2d\u7684\u4e00\u4e2a\u6570\u503c\uff0c\u5b83\u5728\u94fe\u63a5\u65f6\u4e0e\u7b26\u53f7\u7684\u5730\u5740\u76f8\u52a0\uff0c\u4ee5\u786e\u5b9a\u6700\u7ec8\u7684\u5185\u5b58\u5730\u5740\u3002\u8fd9\u4e2a\u53c2\u6570\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u5141\u8bb8\u7f16\u8bd1\u5668\u751f\u6210\u66f4\u7075\u6d3b\u548c\u53ef\u79fb\u690d\u7684\u4ee3\u7801\u3002\\n\\n**Two steps**\\n\\n- **Relocating sections and symbol definitions**\\n\\n- **Relocating symbol references within sections**\\n\\nreloc\u8fc7\u7a0b\u7684\u4f2a\u4ee3\u7801\uff1a\\n\\n```c\\nforeach section s {\\n    foreach relocation entry r {\\n        refptr = s + r.offset ; /* ptr to reference to be relocated */\\n\\n        /* relocate a PC-relative reference */\\n        if (r.type == R_X86_64_PC32) {\\n            refaddr = ADDR(s) + r.offset ; /* ref\u2019s runtime address */\\n            *refptr=(unsigned) (ADDR(r.symbol)+r.addend\u2013refaddr) ;\\n         }\\n\\n         /* relocate an absolute reference */\\n         if ( r.type == R_X86_64_64 || r.type == R_X86_64_32||\u2026)\\n              *refptr = (unsigned) (ADDR(r.symbol) + r.addend) ;\\n     }\\n }\\n\\n```\\n\\n\\n\\n#### Executable ELF Object\\n\\n![image-20240618163520190](https://s2.loli.net/2024/06/18/ejWVEqtyn9YJbzi.png)\\n\\n```c\\ntypedef  struct{\\n\\tunsigned char \\te_ident[16]; \\t/* ELF identification */\\n\\tElf64_Half \\t\\te_type; \\t/* Object file type */\\n\\tElf64_Half \\t\\te_machine; \\t/* Machine type */\\n\\tElf64_Word \\te_version; \\t/* Object file version */\\n\\tElf64_Addr \\te_entry; \\t/* Entry point address */\\n\\tElf64_Off \\t\\te_phoff; \\t/* Program header offset */\\n\\tElf64_Off \\t\\te_shoff; \\t/* Section header offset */\\n\\tElf64_Word \\te_flags; \\t/* Processor-specific flags */\\n\\tElf64_Half \\t\\te_ehsize; \\t/* ELF header size */\\n\\tElf64_Half \\t\\te_phentsize; \\t/* Size of program header entry */\\n\\tElf64_Half \\t\\te_phnum; \\t/* Number of program header entries */\\n\\tElf64_Half \\t\\te_shentsize; \\t/* Size of section header entry */\\n\\tElf64_Half \\t\\te_shnum; \\t/* Number of section header entries */\\n\\tElf64_Half \\t\\te_shstrndx; \\t/* Section name string table index */\\n} Elf64_Ehdr;\\n\\ntypedef struct {\\n\\tElf64_Word    p_type;       /* Entry type.(PT_LOAD (1): loadable segment) */\\n\\tElf64_Word    p_flags;      /* Access permission flags. Run time permissions (rwx)*/\\n\\tElf64_Off        p_offset;    /* File offset of contents. (Offset from the beginning of the file to the first byte in the segment)*/\\n\\tElf64_Addr     p_vaddr;    /* Virtual address in memory image. (The virtual address of the first byte in the segment)*/\\n\\tElf64_Addr     p_paddr;    /* Physical address (not used). */\\n\\tElf64_Xword  p_filesz;     /* Size of contents in file.Segment size in the object file (>=p_memsz)\\n */\\n\\tElf64_Xword  p_memsz;\\t/* Size of contents in memory. */\\n\\tElf64_Xword  p_align;\\t/* Alignment in memory and file.Usually 4KB or 2MB*/\\n} Elf64_Phdr;\\n\\n```\\n\\n![image-20240618164607421](https://s2.loli.net/2024/06/18/k7w5fiYPAHRjOCE.png)\\n\\n**Difference between filesz and memsz means the uninitialized data in .bss**\\n\\n.init section contains a small function _init called by program\u2019s initialization code\\n\\n\\n\\n> startup code\\n>\\n> _start: the entry point of the program. Defined in the crt1.o, Same for all C program, Calls system startup function\\n>\\n> __libc_start_main: Defined in libc.so, Initializes the execution environment, Calls the main function, Handles return value, Returns control to OS (if necessary)\\n\\n\\n\\n#### Loader\\n\\n**Memory-resident** operating system code\\n\\n- **Invoked by call the execve function**\\n\\n- Copy the code and data in the executable object file from disk into memory\\n\\n- Jump to the entry point\\n\\n- Run the program \\n\\n\\n\\n#### Dynamic Link \u52a8\u6001\u94fe\u63a5\\n\\n- Dynamic Linking\\n\\n- Position Independent Code (PIC)\\n\\n- Loading and Linking Shared Libraries from applications \\n\\n\u9759\u6001\u94fe\u63a5\u7f3a\u70b9\uff1a\u5e95\u5c42\u5e93\u4fee\u6539\u9700\u8981\u6240\u6709\u5e94\u7528\u91cd\u7f16\u8bd1\uff0c\u5e94\u7528\u4f53\u79ef\u8fc7\u5927\uff0c\u5197\u4f59\u4ee3\u7801\\n\\n**Shared Libraries** \\n\\n.so(shared obj) on Linux, .dll(dynamic linking lib) on Windows\\n\\n```shell\\ngcc \u2013shared \u2013fPIC \u2013o libvector.so addvec.c multvec.c\\n# \u2013shared: creating a shared object\\n# \u2013fPIC:  creating the position independent code\\n```\\n\\nPartial Linking\\n\\n\u5728\u7f16\u8bd1\u65f6\uff0c.so\u6587\u4ef6**\u6ca1\u6709\u5c06.data\uff0c.text\u6bb5\u7b49copy**\uff0c\u800c\u53ea\u662fcopy\u4e86\u4e00\u4e9brelocation and symbol table info\\n\\ncode and data\u662f\u5728memory\u4e4b\u4e2d`execve() & ld-linux.so`\u94fe\u63a5\u7684\\n\\n> After linking, the locations of the shared libraries are fixed and do not change during the execution time\\n>\\n> How to find the ld-linux.so \\n>\\n> - The **pathname of the ld-linux.so is contained in the .interp segment** of p2\\n\\n\u4e0a\u9762\u90a3\u5f20\u56fe\uff0cmemory-mapped region for shared libs\\n\\n\\n\\n#### \u8fd0\u884c\u65f6Linking\\n\\n- Done explicitly by user with dlopen() in Linux \\n\\n`gcc \u2013rdynamic \u2013O2 \u2013o p3 dll.c -ldl`\\n\\nAPI\uff1a\\n\\n```c\\n #include <dlfcn.h>\\n void *dlopen(const char *filename, int flag);\\n\\t\\t\\t// returns: ptr to handle if OK, NULL on error\\n void *dlsym(void *handle, char *symbol) ;\\n\\t\\t\\t// returns: ptr to symbol if OK, NULL on error\\n int  dlclose(void *handle) ;\\n\\t\\t\\t// returns: 0 if OK, -1 on error\\n const char dlerror(void) ;\\n\\t\\t\\t/* returns: errormsg if previous call to\\n \\t\\t\\tdlopen, dlysym, or dlclose failed,\\n \\t\\t\\tNULL if previous call was OK */\\n```\\n\\n\u8fd0\u884c\u65f6Linking\u793a\u4f8b\u7a0b\u5e8f\\n\\n```c\\n #include <stdio.h>\\n #include <dlfcn.h>\\n \\n int x[2] = { 1, 2} ;\\n int y[2] = { 3, 4} ;\\n int z[2];\\n \\nint main()\\n{\\n \\tvoid *handle;\\n \\tvoid (*addvec)(int *, int *, int *, int ) ;\\n \\tchar *error;\\n\\t/*dynamically load the shared library that contains addvec() */\\n \\thandle = dlopen(\u201c./libvector.so\u201d, RTLD_LAZY) ;\\n \\tif (!handle) {\\n \\t\\tfprintf(stderr, \u201c%s\\\\n\u201d, dlerror()) ;\\n \\t\\texit(1) ;\\n \\t} \\n \\n \\t/*get a pointer to the addvec() function we just loaded */\\n \\taddvec = dlsym(handle, \u201caddvec\u201d) ;\\n \\tif ( (error = dlerror()) != NULL ) {\\n \\t\\tfprintf(stderr, \u201c%s\\\\n\u201d, error) ;\\n \\t\\texit(1) ;\\n \\t}\\n/* Now we can call addvec() just like any other function */\\n \\taddvec(x, y, z, 2)\\n \\tprintf(\u201cz=[%d, %d]\\\\n\u201d, z[0], z[1]) ;\\n \\n \\t/* unload the shared library */\\n \\tif (dlclose(handle) <0) {\\n \\t\\tfprintf(stderr, \u201c%s\\\\n\u201d, dlerror()) ;\\n \\t\\texit(1) ;\\n \\t}\\n \\treturn 0 ;\\n }\\n\\n```\\n\\n\u7528\u5904\uff1a\\n\\n- \u5206\u53d1\u7cfb\u7edf\u66f4\u65b0\uff0c\u66f4\u65b0dll\u91cd\u65b0\u8fd0\u884c\u65f6\u81ea\u52a8\u52a0\u8f7d\\n- \u9ad8\u6027\u80fdweb server, \u5bf9\u4e0d\u540c\u7684\u5e93\u52a8\u6001\u52a0\u8f7d\u5378\u8f7d\uff0c\u4f7f\u7528\u7f13\u5b58\u6765\u4fdd\u8bc1\u51fd\u6570\u7ea7\u522b\u7684\u6700\u5c0f\u5185\u5b58\u5360\u7528\uff0c**\u4e5f\u662f\u652f\u6301\u70ed\u66f4\u65b0\u7684\u6765\u6e90**\\n\\n\\n\\n#### PIC\uff1a\u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801\\n\\nnaive: \u5212\u5206\u4e00\u5757\u533a\u57df\u4e13\u95e8\u653e\\n\\nactual: \u8ba9\u4ee3\u7801\u90fd\u662fPC-relative\uff0c\u4ece\u800c\u53ef\u4ee5\u88ab\u4efb\u610f\u5730\u5740\u52a0\u8f7d\\n\\n- \u6587\u4ef6\u5185\u90e8\u51fd\u6570\uff0c\u53d8\u91cf\uff1a\u7b80\u5355\uff0c\u76f4\u63a5\u53d8\u6210PC-relative\\n- \u6587\u4ef6\u5916\u90e8\u5f15\u7528\uff0c\u5168\u5c40\u53d8\u91cf\uff1a\u95f4\u63a5\u8df3\u8f6c\uff0c\u4ee5\u4e00\u4e2a**Private\u7684.data\u6bb5\u5f00\u5934\u7684GOT**(\u5168\u5c40\u504f\u79fb\u91cf\u8868)\u4f5c\u4e3a\u8df3\u677f\\n\\n\\n\\n\u8c03\u7528\u5916\u90e8\u5168\u5c40\u53d8\u91cf\u7684\u89e3\u51b3\u65b9\u6848\uff1a\\n\\n1. \u4fdd\u8bc1.data\u6bb5\u548c.text\u6bb5\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u4e0d\u5206\u5f00\uff0c\u4e00\u8d77\u52a0\u8f7d\\n\\n2. \u5229\u75281\uff0c.data\u6bb5\u548c.text\u6bb5\u73b0\u5728\u7684\u8ddd\u79bb\u548c\u52a0\u8f7d\u5230\u7684\u5730\u65b9\u6ca1\u6709\u5173\u7cfb\u4e86\uff0c\u5728.data\u6bb5\u5f00\u5934\u7684GOT\u91cc\u9762\u8bb0\u5f55\u5404\u4e2a\u5168\u5c40\u7684data\u7684offset\uff0c\u7136\u540e\u5728.text\u6bb5\u8bb0\u5f55GOT\u7684entry_index, \u8bbf\u95ee\u65f6 .text -> .data -> GOT[idx] -> global data\\n\\nGOT 012\u9884\u7559\u7ed9dynamic linker\\n\\n\\n\\n\u8c03\u7528\u5916\u90e8\u51fd\u6570\u7684\u89e3\u51b3\u65b9\u6848\uff1aPLT\uff08Procedure Linkage Table\uff09\\n\\n1. \u5728.text\u6bb5\u524d\u9762\u52a0\u4e00\u6bb5plt\u6bb5\uff0c\u7559\u4e0b\u5916\u90e8\u51fd\u6570\u7684\u5730\u5740\u7684\u6807\u8bb0\uff0c\u5bf9\u5730\u5740\u6682\u65f6\u7559\u7a7a\\n\\n2. \u628a.text\u6bb5\u5185\u90e8\u7684\u4ee3\u7801\u4e4b\u4e2d\u6240\u6709\u5916\u90e8\u51fd\u6570\u7684\u5730\u5740\u8be5\u5916plt\u6bb5\u4e4b\u4e2d\u6807\u8bb0\u7684\u5730\u5740\uff08\u76f8\u5bf9\u5730\u5740\uff09\\n3. \u5f53\u8fd0\u884c\u65f6.text->plt-> \u5982\u679c\u6ca1\u6709\uff0c\u518d\u52a0\u8f7d\u5b9e\u9645\u5730\u5740\u5230\u6807\u8bb0\u7559\u7a7a\u7684\u5730\u65b9\uff0c\u4e4b\u540e\u518d\u6b21\u8bbf\u95ee\u4e0d\u9700\u8981\u5b9e\u9645\u5730\u5740\uff0c\u53ea\u9700\u8981\u628aplt\u5f53\u8df3\u677f\u5c31\u884c\\n\\nPLT\uff1a16-byte entry array\\n\\nPLT[0] \u4e3adynamic linker\u9884\u7559\\n\\n\\n\\n![image-20240618203706209](https://s2.loli.net/2024/06/18/DMFEe4dyZOcGLl8.png)\\n\\n\u7b2c\u4e00\u6b21\u8c03\u7528addvec\\n\\njmpq `*GOT[4]`\u53d1\u73b0\u6ca1\u6709\uff0c\u56de\u6765(*GOT[4]\u5b580x4005c6\u4e0b\u4e00\u6761\u6307\u4ee4\u7684relative\uff0cjmp\u76f8\u5f53\u4e8e\u6ca1jmp)\uff0cpushq $0x1 \u628aaddvec\u7684entry ID\u4f5c\u4e3a\u6808\u4e0a\u7684\u53c2\u6570\u7ed9dynamic linker, \u7136\u540ejmpq \u5230PLT[0]\uff0cPLT[0]\u538b\u6808`*GOT[1]`\u53c2\u6570\u540e\uff0c\u8df3\u8f6c\u5230dynamic linker\uff0cdynamic linker\u6839\u636e`*GOT[1]`\u548c`ID`\u627e\u5230\u5bf9\u5e94\u51fd\u6570\uff0c\u540c\u65f6\u66f4\u65b0GOT[4]\uff0c\u586b\u4e0a\u5730\u5740\\n\\n\u540e\u9762\u8c03\u7528addvec\u90fd\u662f\u76f4\u63a5jmpq\u5230`*GOT[4]`,\u5b9e\u9645\u4e0a\u662f\u51fd\u6570\u8c03\u7528\\n\\n#### \u5e93\u6253\u6869\\n\\n\u6784\u9020\u201c\u4e8c\u4f20\u624b\u201d\u51fd\u6570, \u622a\u83b7\u8f6c\u53d1\u4e00\u4e9b\u5df2\u7ecf\u5199\u597d\u7684\u5e93\u51fd\u6570\uff0c\u4f8b\u5982malloc\uff0c\u53ef\u4ee5\u7528\u4e8e\u65e5\u5fd7\uff0c\u7edf\u8ba1\u7b49\u7b49\\n\\n\u7f16\u8bd1\u65f6\u6253\u6869\uff1a\u6838\u5fc3\u5728\u4e8e\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5df1\u7684\u540c\u540d\u51fd\u6570\uff0c\u5728\u81ea\u5df1\u7684\u51fd\u6570\u53bb\u8c03\u7528\u5e93\u51fd\u6570\uff0c\u4f8b\u5982\u5229\u7528\u5b8f\u5b9a\u4e49malloc\u4e3amymalloc\uff0c\u518d\u5728mymalloc\u91cc\u9762\u53bb\u8c03\u7528\u7cfb\u7edf\u7684malloc\\n\\n\u8fd0\u884c\u65f6\u6253\u6869\uff1a\u6bd4\u8f83\u590d\u6742\uff0c\u4e0d\u592a\u91cd\u8981\\n\\n\\n\\n#### \u91cd\u5b9a\u5411\u6df1\u5165\\n\\n[\u6df1\u5165\u7406\u89e3\u76f8\u5bf9\u91cd\u5b9a\u5411 - Anatas Luo\'s Blog](https://anatasluo.github.io/\u6df1\u5165\u7406\u89e3\u76f8\u5bf9\u91cd\u5b9a\u5411.html)\\n\\n\u603b\u7ed3\uff1a 1. \u6d41\u6c34\u7ebf\u7684\u8bbe\u8ba1\uff0c\u4f7f\u5f97IP\u5bc4\u5b58\u5668\u603b\u662f\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u8ba1\u7b97offset\u65f6\uff0c\u9700\u8981\u8003\u8651\u5f53\u524d\u6307\u4ee4\u7684\u957f\u5ea6 **2. \u76f8\u5bf9\u504f\u79fb\u5982\u679c\u786e\u5b9a\uff08\u901a\u5e38\u662fstatic data\uff09\uff0c\u5219\u4ee5section\u4e3a\u57fa\u5740\u8fdb\u884c\u91cd\u5b9a\u5411\uff0c\u53ef\u4ee5\u51cf\u5c11\u7b26\u53f7\u8868\u5927\u5c0f\uff0c Addend = symbol_offset - relocation_len 3. \u76f8\u5bf9\u504f\u79fb\u5982\u679c\u4e0d\u786e\u5b9a\uff0c\u5219\u4ee5symbol\u4e3a\u57fa\u5740\u8fdb\u884c\u91cd\u5b9a\u5411\uff0cAddend = - relocation_len**\\n\\n\u9700\u8981\u91cd\u5b9a\u5411\u7684\u4ee3\u7801\u5728\u6c47\u7f16\u4e0a\u4ee5`0x0(%rip)`\u7ed9\u51fa\uff0c`%rip`\u662fPC\uff0c`0x0`\u5219\u610f\u5473\u7740\u5f85\u586b\u5145"},{"id":"/ts\u57fa\u7840","metadata":{"permalink":"/blog/ts\u57fa\u7840","source":"@site/blog/ts\u57fa\u7840.md","title":"ts\u57fa\u7840","description":"ts: \u5e26\u9759\u6001\u7c7b\u578b\u7684 js","date":"2024-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"typescript","permalink":"/blog/tags/typescript"}],"readingTime":5.59,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"ts\u57fa\u7840","date":"2024-07-11T00:00:00.000Z","author":"ayanami","tags":["typescript"]},"unlisted":false,"prevItem":{"title":"linking \u590d\u4e60","permalink":"/blog/linking-\u590d\u4e60"},"nextItem":{"title":"react practice:mosh gamehub","permalink":"/blog/\u5b9e\u62182-mosh-gamehub"}},"content":"ts: \u5e26\u9759\u6001\u7c7b\u578b\u7684 js\\n\\n#### \u914d\u7f6e ts\\n\\ntsc --init\\n\\ntsconfig.json\\n\\n\x3c!-- more --\x3e\\n\\n\u91cd\u8981\u914d\u7f6e\\n\\n```ts\\n{\\n\\n \\"compilerOptions\\": {\\n\\n  \\"target\\": \\"es2016\\",   // \u6307\u5b9a\u7f16\u8bd1\u5668\\n\x3c!--truncate--\x3e\\n  \\"module\\": \\"commonjs\\",\\n\\n  \\"rootDir\\": \\"./\\",\\n\\n  ......\\n\\n  \\"outDir\\": \\"./\\", // \u7f16\u8bd1\u5b8c\u6210\u7684js\u6587\u4ef6\u4f4d\u7f6e\\n\\n  \\"removeComments\\": true,\\n\\n  \\"noEmitOnError\\": true,\\n\\n}\\n```\\n\\ntsc \u9ed8\u8ba4\u884c\u4e3a\u662f\u7f16\u8bd1 root \u4e0b\u9762\u7684\u6240\u6709.ts \u6587\u4ef6\uff0c\u5982\u679c\u4e0a\u9762\u6539\u4e86 tsconfig.json\uff0c\u7f16\u8bd1 rootDir\\n\\n\u53ea\u9700\u8981<code>tsc</code>\u5373\u53ef\\n\\n#### debug ts\\n\\n1. \u53d6\u6d88 tsconfig.json \u4e2d\u7684 sourceMap\uff08\u6e90\u4ee3\u7801\u6620\u5c04\uff09\u7684\u6ce8\u91ca\\n2. \u914d\u7f6e debug \u91cc\u9762 launch.json\uff0c\u6ce8\u610f<code>tsc\\\\: build</code>\u5982\u679c\u5f00\u4e86\u4e2d\u6587\u5305\u9700\u8981\u6539\u6210<code>tsc: \u6784\u5efa</code>(\u9006\u5929)\\n\\n#### ts \u7684\u4f18\u70b9\\n\\n\u9650\u5b9a\u65b9\u6cd5\u4e4b\u540e\u53ef\u4ee5\u51cf\u5c11\u9519\u8bef\\n\\n\u8fd8\u53ef\u4ee5\u65b9\u4fbf\u7684\u548c IntelliSense \u96c6\u6210\uff0c\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u63d0\u4f9b\u4e0d\u540c\u7684\u4ee3\u7801\u8865\u5168\\n\\n\u6253\u5f00\\n\\n```json\\n{\\n  \\"compilerOptions\\": {\\n    \\"target\\": \\"ES5\\",\\n    \\"module\\": \\"CommonJS\\",\\n    \\"outDir\\": \\"out\\",\\n    \\"rootDir\\": \\"./src\\",\\n    \\"sourceMap\\": true,\\n    \\"noImplicitAny\\": true,\\n    \\"noUnusedParameters\\": true,\\n    \\"noImplicitReturns\\": true,\\n    \\"noUnusedLocals\\": true\\n  }\\n}\\n```\\n\\nts \u652f\u6301\u5bf9\u51fd\u6570\u53c2\u6570\u4e2a\u6570\u7684\u68c0\u67e5\uff0c\u4e5f\u652f\u6301\u9ed8\u8ba4\u503c\\n\\nts \u7684\u5bf9\u8c61\\n\\n```typescript\\nlet s1: {\\n  readonly id: number;\\n  name: string;\\n  enroll: (date: Date) => void;\\n} = {\\n  id: 1,\\n  name: \\"Ayanami\\",\\n  enroll: (date: Date) => {\\n    console.log(date);\\n  },\\n};\\n```\\n\\n**\u4f7f\u7528 tpye alias**\\n\\n```typescript\\nlet s1: student = {\\n  id: 1,\\n  name: \\"Ayanami\\",\\n  enroll: (date: Date) => {\\n    console.log(date);\\n  },\\n};\\n\\ntype student = {\\n  readonly id: number;\\n  name: string;\\n  enroll: (date: Date) => void;\\n};\\n```\\n\\n**type narrowing**\\n\\n```typescript\\nfunction LogWeight(weight: number | string) {\\n  if (typeof weight === \\"number\\") {\\n    console.log(weight.toString() + \\"kg\\");\\n  }\\n  if (typeof weight === \\"string\\") {\\n    console.log(weight);\\n  }\\n}\\n```\\n\\n**type intersection**\\n\\n```typescript\\ntype dragble = {\\n  drag: () => void;\\n};\\ntype resizeble = {\\n  resize: () => void;\\n};\\ntype UIwidget = dragble & resizeble;\\nlet textbox: UIwidget = {\\n  drag: () => {},\\n  resize: () => {},\\n};\\n```\\n\\ntype \u4e5f\u53ef\u4ee5\u662f\u6307\u5b9a\u7684\u503c(literal type)\\n\\n```typescript\\ntype percent = 50 | 100;\\ntype Metric = \\"cm\\" | \\"inch\\";\\n```\\n\\n#### ts null/undefined\\n\\nnull \u4e0d\u80fd\u76f4\u63a5\u4f20\u9012\u7ed9\u7c7b\u4f3c string \u7c7b\u578b\u7684\u53c2\u6570, \u9700\u8981\u7528\u5230\u7684\u65f6\u5019\u8981\u7528\u4ea4\u96c6\\n\\n```typescript\\nfunction f(str: string | null): void {\\n  if (str) console.log(str);\\n  else {\\n    console.log(\\"Null\\");\\n  }\\n}\\n```\\n\\n#### \u53ef\u9009\u8fd0\u7b97\u7b26\uff1f\\n\\n```typescript\\ntype user = { name: string; age: number };\\ntype disgust = user | null | undefined;\\nfunction handle(dis: disgust): void {\\n  console.log(dis?.name); // \u53ea\u6709\u5f53dis\u4e0d\u662fnull\u548cundefined\u7684\u65f6\u5019\u624d\u4f1a\u6267\u884c.\\n}\\n```\\n\\n#### type assert\\n\\n\u7528\u4e8e\u5411\u7f16\u8bd1\u5668\u8868\u660e\u201c\u6211\u6bd4\u4f60\u66f4\u61c2\u5b83\u662f\u4ec0\u4e48\u7c7b\u578b\u201d\u548c\u5f97\u5230\u5bf9\u5e94\u7c7b\u578b\u7684\u65b9\u6cd5\u8865\u5168\\n\\n```typescript\\nlet phone = document.getElementById(\\"phone\\") as HTMLInputElement;\\nconsole.log(phone.value);\\n```\\n\\n> using **\'unknown\'** type && type narrowing instead of using **\'any\'** type\\n\\ninstanceof \u7684\u4f7f\u7528\\n\\n#### OOP\\n\\n```typescript\\nclass account {\\n  readonly id: number;\\n  private _balance: number;\\n  name: string;\\n  constructor(id: number, balance: number, name: string) {\\n    this.id = id;\\n    this._balance = balance;\\n    this.name = name;\\n  }\\n  withdraw(amount: number) {\\n    this._balance -= amount;\\n  }\\n  getBalance() {\\n    return this._balance;\\n  }\\n}\\nlet acc: account = new accout(1, 100, \\"Ayanami\\");\\nacc.withdraw(10);\\nconsole.log(acc instanceof account);\\n\\n// \u6216\u8005\\nclass account {\\n  constructor(\\n    public readonly: number,\\n    private _balance: number,\\n    public name: string\\n  ) {}\\n  withdraw(amount: number): void {\\n    this._balance -= amount;\\n  }\\n  getBalance(): number {\\n    return this._balance;\\n  }\\n}\\nlet acc: account = new account(1, 100, \\"Ayanami\\");\\nacc.withdraw(10);\\nconsole.log(acc instanceof account);\\n```\\n\\n```typescript\\n// \u66f4\u597d\u7684getBalance\\n  get balance():{\\n      return this._balance;\\n  }\\n}\\n\\n// \u7136\u540e\u5916\u9762\u53ef\u4ee5\u76f4\u63a5\\nlet b = acc.balance; // \u53ef\u4ee5\\nacc.balancew = 2; // \u4e0d\u884c\\n```\\n\\n#### Index signature\\n\\n```typescript\\nclass seatsAssign {\\n  [seats: string]: string;\\n}\\nlet s = new seatsAssign();\\ns[\\"A1\\"] = \\"Ayanami\\";\\ns[\\"A2\\"] = \\"Nimi Sora\\";\\n```\\n\\n\u9759\u6001\u6210\u5458\uff1a\u7c7b\u4f3c java \u7684\u8bed\u6cd5\\n\\n\u7ee7\u627f\u8bed\u6cd5 class A extends B\\n\\n\u91cd\u8f7d\u8bed\u6cd5 override function(){}\\n\\n\u62bd\u8c61\u7c7b abstract class A, \u62bd\u8c61\u65b9\u6cd5\u4e5f\u662f\u524d\u9762\u52a0 abstract\\n\\n\u63a5\u53e3 interface \u57fa\u672c\u540c java \u7684\u63a5\u53e3\\n\\n#### \u6cdb\u578b Generic \u57fa\u672c\u540c java \u6cdb\u578b\\n\\n```typescript\\n// \u6cdb\u578b\u793a\u4f8b\\nfunction echo<T extends string | null>(value: T): T {\\n  return value;\\n}\\necho(\\"1\\");\\n```\\n\\nkeyof \u5173\u952e\u5b57\\n\\n```typescript\\nclass Store<T> {\\n  protected _items: T[] = [];\\n  constructor(items: T[]) {\\n    this._items = items;\\n  }\\n  addItem(item: T) {\\n    this._items.push(item);\\n  }\\n  // NOTE: if property is not present in T, it will return undefined. So use keyof T to make sure property is present in T\\n  find(property: keyof T, value: unknown): T | undefined {\\n    return this._items.find((item) => item[property] === value);\\n  }\\n}\\n```\\n\\ntype mapping\\n\\n```typescript\\n// type readOnlyProduct = Readonly<Product>;\\ntype readOnlyProduct = {\\n  readonly [P in keyof Product]: Product[P];\\n};\\ntype ReadOnly<T> = {\\n  readonly [P in keyof T]: T[P];\\n};\\ntype Optional<T> = {\\n  [P in keyof T]?: T[P];\\n};\\ntype Nullable<T> = {\\n  [P in keyof T]: T[P] | null;\\n};\\n```\\n\\n#### decorators\\n\\n\u6846\u67b6\uff1a\u5185\u7f6e decorator\uff0c\u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u5c5e\u6027\\n\\n\u7c7b\u4f3c\u7c7b\u7684\u7ee7\u627f\\n\\n```typescript\\nfunction decorator(constructor: Function) {\\n  console.log(\\"decorator called\\");\\n  constructor.prototype.myID = new Date().getTime();\\n  constructor.prototype.someFunction = () => {\\n    console.log(\\"someFunction called\\");\\n  };\\n}\\n@decorator\\nclass MyClass {}\\n```\\n\\nclass decorator\\n\\n```typescript\\ntype Option = {\\n  selection: string;\\n};\\n// NOTE: decorator factory\\nfunction paramDecorator(op: Option) {\\n  return (constructor: Function) => {\\n    console.log(`decorator with ${op.selection} called`);\\n    constructor.prototype.profile = op;\\n    constructor.prototype.myID = new Date().getTime();\\n  };\\n}\\n@paramDecorator({ selection: \\"some string\\" })\\nclass MyClass {}\\n```\\n\\nmethod decorator\uff1a\u4f5c\u7528\u4e00\u822c\u662f\u589e\u5f3a\u67d0\u4e2a\u65b9\u6cd5\\n\\n```typescript\\nfunction Log(target: any, methodName: string, descriptor: PropertyDescriptor) {\\n  const originalMethod = descriptor.value as Function;\\n  descriptor.value = function (...args: any) {\\n    console.log(\\"Before\\");\\n    originalMethod.call(this, ...args);\\n    console.log(\\"After\\");\\n  };\\n}\\nclass Person {\\n  @Log\\n  say(message: string) {\\n    console.log(message);\\n  }\\n}\\nlet person = new Person();\\nperson.say(\\"Hello\\");\\n```\\n\\n#### module\\n\\n`import` and `export`\\n\\n`wildcard import`\uff1a\\n\\n```typescript\\nimport * as Shapes from \\"./shapes\\";\\n```\\n\\nuse JSDoc to add basic type checking in js\\n\\n```javascript\\n/**\\n * the description of function\\n * @param {string} str - the description of str\\n * @returns {void}\\n */\\nfunction test(str) {\\n  console.log(\\"test \\" + str);\\n}\\n```\\n\\n\u4e5f\u53ef\u4ee5\u4f7f\u7528 .d.ts \u58f0\u660e\u6587\u4ef6"},{"id":"/\u5b9e\u62182-mosh-gamehub","metadata":{"permalink":"/blog/\u5b9e\u62182-mosh-gamehub","source":"@site/blog/\u5b9e\u62182-mosh-gamehub.md","title":"react practice:mosh gamehub","description":"\u89c2\u524d\u63d0\u793a\uff1a","date":"2024-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"react","permalink":"/blog/tags/react"},{"inline":true,"label":"ts","permalink":"/blog/tags/ts"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":65.76,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"react practice:mosh gamehub","date":"2024-07-11T00:00:00.000Z","author":"ayanami","tags":["react","ts","web"]},"unlisted":false,"prevItem":{"title":"ts\u57fa\u7840","permalink":"/blog/ts\u57fa\u7840"},"nextItem":{"title":"\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668","permalink":"/blog/\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668"}},"content":"> \u89c2\u524d\u63d0\u793a\uff1a\\n>\\n> 1. \u9ed8\u8ba4\u8bfb\u8005\u6709\u57fa\u7840\u7684 js, ts, html \u57fa\u7840, \u5176\u4e2d html \u548c js \u5728[MDN Web Docs](https://developer.mozilla.org/zh-CN/)\u4e0a\u770b\u5165\u95e8\u6559\u7a0b\u5373\u53ef,ts \u53ef\u4ee5\u770b[mosh \u7684\u89c6\u9891](https://www.bilibili.com/video/BV1s3411T7jL/?share_source=copy_web&vd_source=60f8c73d5ef551168e0bbb088ac46073)\u6216\u8005 google \u4e00\u4e0b typescript tutorial \u5373\u53ef;\\n> 2. \u672c\u4eba\u6c34\u5e73\u6709\u9650\uff0c\u9519\u6f0f\u548c\u4e0d\u8db3\u4e4b\u5904\u656c\u8bf7\u8c05\u89e3\\n> 3. \u672c\u7b14\u8bb0\u5bf9\u5e94\u7684\u89c6\u9891\uff1a [CodeWithMosh - React 18 for Beginners](https://www.bilibili.com/video/BV1su4y1f7mz/?share_source=copy_web&vd_source=60f8c73d5ef551168e0bbb088ac46073)\u5bf9\u5e94\u521d\u7ea7\u90e8\u5206\uff1b[code with mosh - React: Intermediate Topics](https://www.bilibili.com/video/BV1Ph4y1V7jF/?share_source=copy_web&vd_source=60f8c73d5ef551168e0bbb088ac46073)\u5bf9\u5e94\u8fdb\u9636\u90e8\u5206\uff1b\u76f8\u5173\u4ee3\u7801\u53ef\u4ee5\u5728 github \u627e\u5230\u3002\\n\\n\x3c!-- more --\x3e\\n\\ngamehub: react + ts + ...\\n\\n## \u521d\u7ea7\u90e8\u5206\\n\\n### \u524d\u7aef\u90e8\u5206\\n\\n#### \u4e00\u5207\u7684\u5f00\u59cb:\u521d\u8bc6 React\\n\x3c!--truncate--\x3e\\nvite\uff1a \u4e00\u4e2a\u6bd4 create-react-app \u66f4\u8f7b\u91cf\u7ea7\u7684\u521b\u5efa\u5e94\u7528\u5de5\u5177\\n\\n```bash\\nnpm create vite@latest\\n```\\n\\n\u7136\u540e\u9009\u62e9 react, ts\\n\\n\u4e4b\u540e npm install, npm run dev\\n\\n> ps: \u7b14\u8005\u5728\u540e\u7eed\u53d1\u73b0\uff0c\u5982\u679c npm \u7684\u955c\u50cf\u6e90\u9ed8\u8ba4\u6539\u6210\u4e86 cnpm, \uff08\u6709\u65f6\u5019\uff09\u4f1a\u627e\u4e0d\u5230 dev \u800c\u62a5\u9519\uff0c\u7591\u4f3c\u548c vite \u6709\u51b2\u7a81\\n\\nreact,\u542f\u52a8\uff01\\n\\n![image-20240116224507307](C:\\\\Users\\\\Ayanami\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20240116224507307.png)\\n\\n---\\n\\nreact \u4f7f\u7528 JSX, JSX \u88ab\u7f16\u8bd1\u6210 pure js\uff08with react\uff09\\n\\n\u7f16\u5199 react \u7684\u65f6\u5019\u9700\u8981\u9075\u5b88 PascalCasting, \u5373\u7ec4\u4ef6\u540d\u4e3a AppName \u800c\u4e0d\u662f app_name \u6216\u8005 appName\\n\\n`export` \u548c `export default` \u7684\u533a\u522b\uff1a`export default` \u662f\u552f\u4e00\u7684\uff0c\u4f7f\u5f97\u5bfc\u5165\u7684\u65f6\u5019\u4e0d\u53d7\u547d\u540d\u7a7a\u95f4\u51b2\u7a81\u5f71\u54cd\uff0c\u53ef\u4ee5\u8d77\u522b\u540d\\n\\nvite \u81ea\u52a8\u6709\u70ed\u542f\u52a8\\n\\n.tsx \u4e3a\u540e\u7f00\u7684\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528 JSX \u8bed\u6cd5\uff08tsx: ts+ jsx\uff09\uff0c.ts \u4e3a\u540e\u7f00\u7684\u6587\u4ef6\u4e0d\u884c\\n\\nJSX \u66b4\u6253\u539f\u59cb\u4eba\uff08\u66b4\u8bba\uff09\uff1a\u56de\u60f3\u8d77\u5b9e\u6218 1 \u91cc\u9762\uff0c\u9700\u8981\u5b9a\u4e49 pug \u6587\u4ef6\uff0c\u5f80 pug \u91cc\u9762\u4f20\u53c2\u6570\uff08\u63d0\u524d\u60f3\u597d\u4f20\u54ea\u4e9b\uff09\uff0c\u5728 pug \u91cc\u9762\u5199\u4e71\u4e03\u516b\u7cdf\u7684\u8bed\u6cd5\uff0c\u76f8\u5bf9\u4e0d\u65b9\u4fbf\u590d\u7528......\\n\\nhow react works?\\n\\nreact \u7ef4\u62a4\u4e00\u4e2a virtual dom\uff08document object model\uff09\u6811\uff0c\u4ee3\u7801\u4f1a\u66f4\u65b0\u8fd9\u68f5\u6811\uff0c\u7136\u540e react \u5c06\u8fd9\u68f5\u6811\u548c\u6d4f\u89c8\u5668\u7684\u771f\u5b9e DOM \u6811\u6bd4\u8f83\uff0c\u5e76\u66f4\u65b0\u6d4f\u89c8\u5668\u4e0a\u7684 DOM\\n\\nwhat is react?\\n\\nreact \u662f\u201c\u5e93 lib\u201d\u5f0f\u7684\u5355\u4e2a\u5de5\u5177\uff0c\u800c\u4e0d\u662f\u201c\u6846\u67b6 framework\u201d\u4e00\u7ec4\u5b8c\u5584\u7684\u5efa\u7acb\u7f51\u7ad9\u7684\u5de5\u5177\\n\\nreact \u4e13\u6ce8\u4e8e\u5efa\u7acb**\u7ec4\u4ef6\u5f0f\u53ef\u4ea4\u4e92 UI**\\n\\n\u4f46 react \u4e0d\u89e3\u51b3 router, http, form validation, internationalization... \u7b49\u7b49\u95ee\u9898\\n\\n\u8fd9\u4e9b\u5728\u4e0b\u9762\u7684\u5185\u5bb9\u4e4b\u4e2d\uff08\u7b11\\n\\nbootstrap\uff1a \u73b0\u4ee3\u611f UI\uff0c css \u5e93\\n\\n\u5728\u6587\u6863\u5185\u641c\u7d22\u540e\u590d\u5236\u793a\u4f8b\u4ee3\u7801\u5373\u53ef\\n\\n\u8fd4\u56de\u591a\u4e2a\u5757\\n\\n\u5dee\u7684\u65b9\u6cd5\uff1a\u4f7f\u7528`<div></div>`\u5305\u88f9\uff0c\u8bed\u6cd5\u4e0a\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u5728 react \u7684 DOM \u4e0a\u591a\u52a0\u4e86\u4e00\u4e2a\u7ec4\u4ef6 div\\n\\n\u597d\u7684\u65b9\u6cd5\uff1a\u4f7f\u7528`<fragment></fragment>`\u5305\u88f9\\n\\n\u7b80\u5199\uff0c\u4f7f\u7528`<></>`\u5305\u88f9\\n\\ncomponent \u5feb\u6377\u952e\uff1a React ES7+\u63d2\u4ef6\uff0crafce\\n\\nJSX\uff1a \u91cc\u9762\u53ea\u80fd\u6709 html \u5143\u7d20/React \u7ec4\u4ef6/{}\u5305\u88f9\u7684\u8868\u8fbe\u5f0f\\n\\n\\"for loop in JSX\\"? \u4e0d\u80fd\u8fd9\u4e48\u5e72\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7 map \u65b9\u6cd5\u5b9e\u73b0\\n\\n```typescript\\nfunction ListGroup() {\\n  const items = [\\"SJTU\\", \\"PKU\\", \\"THU\\", \\"FDU\\"];\\n  return (\\n    <>\\n      <h1>List Title</h1>\\n      <ul className=\\"list-group\\">\\n        {items.map((item) => (\\n          <li className=\\"list-group-item\\">{item}</li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\nexport default ListGroup;\\n```\\n\\n\u201cif else in JSX\u201d?\u4e5f\u4e0d\u884c\uff0c\u4f46\u53ef\u4ee5\u7528\u8868\u8fbe\u5f0f\u4ee3\u66ff\\n\\n```typescript\\nfunction ListGroup() {\\n  let items = [\\"SJTU\\", \\"PKU\\", \\"THU\\", \\"FDU\\"];\\n  items = [];\\n  // const Message = items.length === 0 ? <p>No items found</p> : null;\\n  // \u53e6\u4e00\u79cd\u65b9\u6cd5\\n  const Message = items.length === 0 && <p>No items found</p>; // true && something === something\\n  return (\\n    <>\\n      <h1>List Title</h1>\\n      {Message}\\n      <ul className=\\"list-group\\">\\n        {items.map((item) => (\\n          <li className=\\"list-group-item\\" key={item}>\\n            {item}\\n          </li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\nexport default ListGroup;\\n```\\n\\n\u5728\u4f7f\u7528 map \u65b9\u6cd5\u65f6\uff0c\u9700\u8981\u7ed9 item \u4e00\u4e2a\u552f\u4e00\u7684 key\uff0c\u4ee5\u4fbf\u4e8e React \u8ffd\u8e2a\\n\\nmap \u53ef\u4ee5\u6709\u7b2c\u4e8c\u4e2a\u53ef\u9009\u53c2\u6570 index, \u4ee3\u8868\u8fed\u4ee3\u65f6\u7684\u5e8f\u53f7\\n\\n\u5904\u7406\u5355\u51fb\u4e8b\u4ef6\uff1a\u6bcf\u4e00\u4e2a React \u5143\u7d20\u90fd\u6709\u5185\u7f6e\u7684 onClick \u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 event\\n\\n\u5904\u7406\u51fd\u6570\u547d\u540d\u89c4\u8303 handleClick\\n\\n\u8ba9 react \u610f\u8bc6\u5230\u7ec4\u4ef6\u6709\u5185\u90e8\u72b6\u6001\uff0c\u53ef\u80fd\u968f\u65f6\u95f4\u53d8\u5316\uff0c\u53d8\u5316\u65f6\u9700\u8981\u66f4\u65b0\uff08\u91cd\u65b0\u6e32\u67d3\uff09\uff1auseState\\n\\n\u53c8\u53eb stateHook, \u901a\u8fc7 Hook\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u76f4\u63a5\u63a5\u89e6 DOM\uff0c\u800c\u4e13\u6ce8\u4e8e\u7ec4\u4ef6\u548c\u5b83\u7684\u72b6\u6001\\n\\n\u628a\u4e0a\u9762\u7684\u77e5\u8bc6\u7ec4\u5408\u8d77\u6765\u7684\u5e94\u7528\uff1a**\u52a8\u6001\u6dfb\u52a0\u7c7b**\uff0c\u9f20\u6807\u6fc0\u6d3b\u6548\u679c\u5b9e\u73b0\\n\\n> ps: \u52a8\u6001\u6dfb\u52a0\u7c7b\u662f\u89e3\u91ca\u6027\u8bed\u8a00\uff0c\u5982 js,python \u7684\u4e13\u5c5e; \u8fd9\u6837\u6dfb\u52a0 active \u6548\u679c\u5b9e\u9645\u4e0a\u4e5f\u7b97\u662f\u81ea\u5b9a\u4e49 active \u5b9e\u73b0\u7684\u65b9\u6cd5\\n\\n```typescript\\nimport { useState } from \\"react\\";\\nfunction ListGroup() {\\n  let items = [\\"SJTU\\", \\"PKU\\", \\"THU\\", \\"FDU\\"];\\n  const [selectIndex, setSelectIndex] = useState(-1);\\n  const Message = items.length === 0 ? <p>No items found</p> : null;\\n\\n  return (\\n    <>\\n      <h1>List Title</h1>\\n      {Message}\\n      <ul className=\\"list-group\\">\\n        {items.map((item, index) => (\\n          <li\\n            className={\\n              selectIndex === index\\n                ? \\"list-group-item active\\"\\n                : \\"list-group-item\\"\\n            }\\n            key={item}\\n            onClick={() => setSelectIndex(index)}\\n          >\\n            {item}\\n          </li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\nexport default ListGroup;\\n```\\n\\n\u8ba9\u7ec4\u4ef6\u53ef\u91cd\u7528\uff1aprops\\n\\n\u521a\u597d\u53ef\u4ee5\u5199\u6210 ts \u7684 interface\\n\\n**props is immutable**\uff1a \u4f20\u5165\u7684\u53c2\u6570\u53ef\u4ee5\u8ba4\u4e3a\u662f\u67d0\u79cd\u201d\u590d\u5236\\"\uff0c\u4e0d\u5e94\u8be5\u76f4\u63a5\u5728\u5b50\u7ec4\u4ef6\u4e4b\u4e2d\u4fee\u6539 Props\uff0c\uff08\u76f4\u63a5\u6539\u4e86\u4e5f\u4e0d\u4f1a\u53cd\u6620\u5230\u7236\u7ec4\u4ef6\u4e0a\uff09\uff0c\u5982\u679c\u8981\u6839\u636e\u5b50\u7ec4\u4ef6\u6539\u7236\u7ec4\u4ef6\u72b6\u6001\uff0c\u628a\u7236\u7ec4\u4ef6\u7684 setState \u4f5c\u4e3a\u56de\u8c03\u51fd\u6570\u4f20\u4e0b\u6765\\n\\n\u5982\u679c\u7236\u7ec4\u4ef6\u60f3\u4ece\u5b50\u7ec4\u4ef6\u5f97\u5230\u4fe1\u606f\uff1f\u4f8b\u5982\uff0c\u9009\u62e9\uff1f\\n\\nReact \u5e76\u6ca1\u6709\u63d0\u4f9b\u7ec4\u4ef6\u4e66\u201c\u81ea\u5e95\u5411\u4e0a\u201d\u4f20\u9012\u4fe1\u606f\u7684\u65b9\u6cd5\uff0c\u8fd9\u6837\u7684\u201c\u5c06\u9876\u5c42\u903b\u8f91\u4e0b\u653e\u5230\u53ef\u91cd\u7528\u7684\u5b50\u7ec4\u4ef6\u201d\u4e5f\u7834\u574f\u4e86\u5b50\u7ec4\u4ef6\u7684\u91cd\u7528\u6027\uff1b\u5b9e\u73b0\u65b9\u6cd5\u5e94\u8be5\u653e\u5728\u7236\u7ec4\u4ef6\uff0c\u5728\u4f20\u9012\u7684 props \u91cc\u9762\u591a\u52a0\u4e00\u4e2a\u51fd\u6570\u53c2\u6570\uff0c\u8ba9\u5b50\u7ec4\u4ef6\u5f97\u5230\u4fe1\u606f\u4e4b\u540e\u8c03\u7528\u8fd9\u4e2a\u7236\u7ec4\u4ef6\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u8fd8\u662f\u81ea\u9876\u5411\u4e0b\u4f20\u9012\u3002\\n\\n\u793a\u4f8b\uff1a\\n\\nApp.tsx\\n\\n```typescript\\nimport { useState } from \\"react\\";\\nimport ListGroup from \\"./components/ListGroup\\";\\n\\nimport \\"./App.css\\";\\n\\nfunction App() {\\n  let schools = [\\"PKU\\", \\"FDU\\", \\"THU\\", \\"ZJU\\", \\"SJTU\\"];\\n  let cities = [\\"Beijing\\", \\"Shanghai\\", \\"Hangzhou\\", \\"Nanjing\\", \\"Wuhan\\"];\\n  const onSelectItem = (item: string) => {\\n    console.log(item);\\n  };\\n  return (\\n    <div>\\n      <ListGroup title=\\"Schools\\" items={schools} onSelectItem={onSelectItem} />\\n      <ListGroup title=\\"Cities\\" items={cities} onSelectItem={onSelectItem} />\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n```\\n\\nListGroup.tsx\\n\\n```typescript\\nimport { useState } from \\"react\\";\\ninterface ListGroupProps {\\n  title: string;\\n  items: string[];\\n  onSelectItem: (item: string) => void;\\n}\\nfunction ListGroup({ items, title, onSelectItem }: ListGroupProps) {\\n  const [selectIndex, setSelectIndex] = useState(-1);\\n  const Message = items.length === 0 ? <p>No items found</p> : null;\\n\\n  return (\\n    <>\\n      <h1>{title}</h1>\\n      {Message}\\n      <ul className=\\"list-group\\">\\n        {items.map((item, index) => (\\n          <li\\n            className={\\n              selectIndex === index\\n                ? \\"list-group-item active\\"\\n                : \\"list-group-item\\"\\n            }\\n            key={item}\\n            onClick={() => {\\n              setSelectIndex(index);\\n              onSelectItem(item);\\n            }}\\n          >\\n            {item}\\n          </li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\nexport default ListGroup;\\n```\\n\\n\u4f20\u9012\u6587\u672c\u548c html?\\n\\n\u76f4\u63a5 props\uff1a\u7565\u4e11\\n\\n**\u4f7f\u7528 children:ReactNode \u7684 interface**\\n\\n\u4f8b\uff1a\\n\\nApp.tsx\\n\\n```typescript\\nimport Alert from \\"./components/Alert\\";\\nfunction App() {\\n  return (\\n    <Alert>\\n      <p>Note:</p>This is a Alert\\n    </Alert>\\n  );\\n}\\n\\nexport default App;\\n```\\n\\nAlert.tsx\\n\\n```typescript\\nimport { ReactNode } from \\"react\\";\\ninterface AlertProps {\\n  children: ReactNode;\\n}\\nconst Alert = ({ children }: AlertProps) => {\\n  return <div className=\\"alert alert-danger\\">{children}</div>;\\n};\\n\\nexport default Alert;\\n```\\n\\nreact-developer-tool\\n\\n\u7ec4\u4ef6\u91cd\u7528\u793a\u4f8b 2\\n\\nButton.tsx\\n\\n```typescript\\ninterface ButtonProps {\\n  children: string;\\n  color?:\\n    | \\"primary\\"\\n    | \\"secondary\\"\\n    | \\"success\\"\\n    | \\"warning\\"\\n    | \\"danger\\"\\n    | \\"info\\"\\n    | \\"light\\"\\n    | \\"dark\\";\\n  onClick?: () => void;\\n}\\nconst Button = ({\\n  children,\\n  color = \\"primary\\",\\n  onClick = () => {\\n    console.log(\\"Clicked\\");\\n  },\\n}: ButtonProps) => {\\n  return (\\n    <div className={\\"btn btn-\\" + color} onClick={onClick}>\\n      {children}\\n    </div>\\n  );\\n};\\n\\nexport default Button;\\n```\\n\\nApp.tsx\\n\\n```typescript\\nimport Button from \\"./components/Button\\";\\nfunction App() {\\n  return (\\n    <>\\n      <Button children=\\"a\\" />\\n      <Button children=\\"b\\" />\\n      <Button children=\\"c\\" />\\n    </>\\n  );\\n}\\n\\nexport default App;\\n```\\n\\n---\\n\\n#### Styling: \u66f4\u8fdb\u4e00\u6b65\u7684 CSS\\n\\nplain css: not recommended\\n\\ncss module:\u7528\u4e8e\u89e3\u51b3\u591a\u4e2a css \u540c\u540d\u7c7b\u7684\u51b2\u7a81\u8986\u76d6\u95ee\u9898\u3002 .css \u6587\u4ef6\u53d8\u6210 .module.css \u6587\u4ef6\uff0c\u91cc\u9762\u5b9a\u4e49\u7684 css \u7c7b\u53d8\u6210\u6574\u4e2a module \u5bf9\u8c61\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7 import \\\\{style\\\\} from \\"./sth.module.css\\" \u4e4b\u540e style[\\"some-css-class\\"]\u4f7f\u7528\\n\\n\u5982\u679c\u9700\u8981\u4e00\u4e2a\u6a21\u5757\u7684\u591a\u4e2a css \u7c7b\uff0c\u4f7f\u7528 [style[\'classA\'], style[\'classB\']].join(\' \')\u8bed\u6cd5\\n\\nCSS in JS\uff1a styled-component\\n\\nSeperation of Concerns \u539f\u5219\uff1a\u628a\u590d\u6742\u5ea6\u9690\u85cf\u5728\u63a5\u53e3\u4e4b\u4e0b\uff0c\u4e00\u4e2a\u6a21\u5757\u7684\u590d\u6742\u5ea6\u4e0d\u5e94\u8be5\u66b4\u9732\u5728\u5916\u9762\\n\\ninline CSS: not recommended also\\n\\n**\u6709\u7528\u7684\u70ed\u95e8 CSS \u5e93(\u4e2a\u4eba\u53ea\u4f1a\u8c03\u5e93\uff0c\u7b11)**\\n\\n- bootstrap\\n- Material UI\\n- tailwind\\n- chakra UI\\n- ......\\n\\n\u6dfb\u52a0 icon: react-icon \u5e93, font awesome icon\\n\\n---\\n\\n#### Managing Component State\\n\\nNOTE\uff1a\\n\\n1. React \u66f4\u65b0 State \u662f\u5f02\u6b65\u7684 async\\n2. state \u5b9e\u9645\u5b58\u50a8\u5728\u7ec4\u4ef6\u4e4b\u5916\\n3. only use hook at the top level of function: Hook \u4e0d\u80fd\u88ab\u653e\u5728 \u6761\u4ef6\uff0c\u5faa\u73af\u7b49\u7b49\u4e4b\u4e2d\\n\\nBEST PRACTICE\uff1a\\n\\n1. \u907f\u514d\u5197\u4f59 state\\n2. **\u4f7f\u7528\u5bf9\u8c61\u5c06\u76f8\u5173\u7684 state \u5957\u8d77\u6765**\u662f\u597d\u7684\uff0c\u4f46\u4e0d\u8981\u6df1\u5ea6\u5d4c\u5957\\n\\n> ps: \u540e\u8865:\u7b2c\u4e8c\u70b9\u53ef\u80fd\u6bd4\u8f83\u62bd\u8c61\uff0c\u8be6\u7ec6\u8bf4\u5c31\u662f\uff0c\u5982\u679c\u6211\u7684\u7ec4\u4ef6\u53d6\u51b3\u4e8e\u4e00\u4e2a state game, \u7136\u540e game \u53ef\u80fd\u6709\u591a\u4e2a\u9700\u8981\u7ef4\u62a4\u7684 state \u4f8b\u5982 price\uff0cid, ... \u4e0e\u5176\u628a price\uff0c id,...\u5206\u522b\u4f7f\u7528 setState\uff0c\u4e0d\u5982\u53ea\u8bbe\u4e00\u4e2a State\uff0c\u5c31\u662f game, \u4e5f\u5c31\u662f\u8bf4 useState \u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u590d\u5236\u7684\u5bf9\u8c61\u4f5c\u4e3a state \u800c\u4e0d\u5c40\u9650\u4e8e\u57fa\u672c\u7c7b\u578b\u3002\\n>\\n> \u800c\u201c\u4e0d\u8981\u6df1\u5ea6\u5d4c\u5957\u201d\u662f\u56e0\u4e3a\uff0c\u8fd9\u6837\u5305\u542b\u4e86\u591a\u4e2a\u5c5e\u6027\u7684 state \u6bcf\u6b21\u66f4\u65b0\u90fd\u8981 \u7528`...`\u590d\u5236\u4e00\u6b21\uff08React \u68c0\u6d4b\u4f5c\u4e3a\u5bf9\u8c61\u7684 State \u53d8\u5316\u5e76\u4e0d\u4f1a\u6df1\u5165\u4e0b\u53bb\u6bd4\u8f83\u5bf9\u8c61\u5185\u90e8\u7684\u6bcf\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5\u4f20\u5165\u65b0\u7684 State \u7684\u65f6\u5019\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff09\uff0c\u4f8b\u5982`useState([...game, newPrice: 20])`, \u800c game \u5982\u679c\u662f\u5bf9\u8c61\u5957\u5bf9\u8c61\uff0c\u90a3\u5c31\u8981\u518d\u591a\u4e00\u5c42`...` ......\u6df1\u8d77\u6765\u65e2\u6d6a\u8d39\uff0c\u53c8\u4e0d\u597d\u7ef4\u62a4\\n\\nKEEPING COMPONENT PURE:\\n\\nReactDOM \u7684 strictMode \u4f1a\u68c0\u6d4b\u4e0d\u7eaf\u7684\u7ec4\u4ef6\uff0c\u5e76\u6267\u884c\u4e24\u6b21\\n\\n\u5728 state \u662f\u4e00\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0cReact \u5e76\u4e0d\u4f1a\u5b9e\u65f6\u68c0\u6d4b\u8fd9\u4e2a\u5bf9\u8c61\u7684\u53d8\u5316\uff0c\u89c6\u4e3a immutable\\n\\n\u6240\u4ee5\u5982\u679c\u8981\u5c06\u4e00\u4e2a drink \u5bf9\u8c61\u7684 price \u5c5e\u6027\u6539\u53d8\\n\\n```typescript\\nconst Incorrect = () => {\\n  drink.price = 6;\\n  setDrink(drink); // false: React\u4e0d\u4f1a\u6bd4\u5bf9drink\u5bf9\u8c61\u7684\u5c5e\u6027\u6709\u6539\u53d8\uff0c\u5f53\u4f20\u9012\u7684\u8fd8\u662f\u539f\u6765\u7684drink\u5bf9\u8c61\u7684\u65f6\u5019\uff0cReactDOM\u5c31\u4e0d\u4f1a\u91cd\u65b0\u6e32\u67d3\\n};\\nconst Correct = () => {\\n  let newDrink = {\\n    ...drink, // \u590d\u5236\u539f\u5148drink\u5bf9\u8c61\u7684\u5c5e\u6027\\n    price: 6,\\n  };\\n  setDrink(newDrink); //\u8fd9\u6837drink\u5bf9\u8c61\u672c\u8eab\u6539\u53d8\u4e86\uff0cReactDOM\u91cd\u65b0\u6e32\u67d3\\n};\\n```\\n\\n**ATTENTION\uff1a**\\n\\n**\u5982\u679c\u5bf9\u8c61\u91cc\u9762\u5d4c\u5957\u5bf9\u8c61\uff0c\u7531\u4e8e...\u590d\u5236\u5bf9\u8c61\u5c5e\u6027\u7684\u65f6\u5019\u5bf9\u5bf9\u8c61\u5143\u7d20\u9ed8\u8ba4\u662f\u6d45\u590d\u5236\uff0c\u9700\u8981\u5728\u5d4c\u5957\u7684\u5bf9\u8c61\u91cc\u9762\u4e5f\u4f7f\u7528...\u6765\u907f\u514d\u4fee\u6539\u539f\u6765\u5bf9\u8c61\u7684\u503c**\\n\\n\u5bf9\u4e8e state \u662f\u6570\u7ec4\u7684\u60c5\u51b5\u540c\u7406\\n\\n```typescript\\nconst [arr, setArr] = useState([0, 1]);\\nconst handleClick = () => {\\n  // \u4e0d\u4f7f\u7528arr.push()\u65b9\u6cd5\\n  let newEle = 2;\\n  // Add\\n  setArr([...arr, newEle]);\\n  // Remove\\n  serArr([arr.filter((ele) => ele !== 0)]);\\n  // Update\\n  setArr([arr.map((ele) => (ele === 0 ? 1 : ele))]);\\n};\\n```\\n\\nsharing state between component: \u628a\u9700\u8981\u5728\u7ec4\u4ef6\u4e2d\u5171\u4eab\u7684 state \u5728\u7ec4\u4ef6\u5c42\u6b21\u67b6\u6784\u91cc\u9762\u5411\u4e0a\u63d0\u5347\u4e00\u7ea7\\n\\n\u7ec3\u4e60\uff0c\u53ef\u6298\u53e0\u6587\u5b57\\n\\n\u751f\u6210\u968f\u673a\u5b57\u7b26\u4e32 lorem + \u4e00\u4e2a\u6570\uff0c \u6bd4\u5982 lorem200\uff0c\u751f\u6210\u957f\u4e3a 200 \u4e2a\u5b57\u7b26\u7684\u968f\u673a\u5b57\u7b26\u4e32\\n\\n---\\n\\n#### Forms \u8868\u5355\\n\\nReact Hook Forms && Zod\\n\\n##### \u57fa\u7840\u8868\u5355\\n\\n\u8868\u5355\u7684\u57fa\u7840\u548c bootstrap \u91cc\u9762\u7684\u8868\u5355, div.md-3>lable.form-label+input.form-control + [TAB]\u7684\u7b80\u5199\u683c\u5f0f\\n\\n\uff08`.`\u662f\u7c7b`className`\uff0c`+`\u662f\u5e76\u5217\uff0c `>`\u662f\u5305\u542b\uff08\u5b50\u7ec4\u4ef6\uff09\uff0c`*`\u662f\u591a\u4e2a\uff09\\n\\n> \u5728 React \u4e2d\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06`<button>`\u5143\u7d20\u653e\u5165`<form>`\u5143\u7d20\u5185\u90e8\uff0c\u5e76\u8bbe\u7f6e`type=\\"submit\\"`\uff0c\u6765\u5c06\u6309\u94ae\u7684\u70b9\u51fb\u4e8b\u4ef6\u4e0e\u8868\u5355\u7684\u63d0\u4ea4\u4e8b\u4ef6\u7ed1\u5b9a\u3002\u5f53\u70b9\u51fb\u8fd9\u4e2a\u6309\u94ae\u65f6\uff0c\u8868\u5355\u7684`onSubmit`\u4e8b\u4ef6\u5c06\u88ab\u89e6\u53d1\u3002\\n>\\n> \u4f60\u9700\u8981\u5728`<form>`\u5143\u7d20\u4e0a\u6dfb\u52a0\u4e00\u4e2a`onSubmit`\u4e8b\u4ef6\u5904\u7406\u5668\u6765\u5904\u7406\u8868\u5355\u63d0\u4ea4\\n\\n`React useRef`\\n\\nuseRef \u4ea7\u751f\u4e00\u4e2a React \u5143\u7d20\uff08DOM Node\uff09\u7684\u5f15\u7528\\n\\n\u76f4\u63a5\u770b\u5177\u4f53\u4ee3\u7801\\n\\n```typescript\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport \\"../index.css\\";\\nimport { useRef } from \\"react\\";\\nconst Form = () => {\\n  const nameRef = useRef<HTMLInputElement>(null);\\n  return (\\n    <>\\n      <form\\n        onSubmit={(event) => {\\n          event.preventDefault();\\n          console.log(nameRef.current?.value);\\n        }}\\n      >\\n        <div className=\\"mb-3\\">\\n          <label htmlFor=\\"name\\" className=\\"form-label\\">\\n            Name\\n          </label>\\n          <input ref={nameRef} id=\\"name\\" type=\\"text\\" className=\\"form-control\\" />\\n          <div className=\\"mb-3\\">\\n            <label htmlFor=\\"age\\" className=\\"form-lable\\">\\n              Age\\n            </label>\\n            <input id=\\"age\\" type=\\"number\\" className=\\"form-control\\" />\\n          </div>\\n        </div>\\n        <button className=\\"btn btn-primary\\" type=\\"submit\\">\\n          Submit\\n        </button>\\n      </form>\\n    </>\\n  );\\n};\\n\\nexport default Form;\\n```\\n\\n\u4f46\u4e0a\u8ff0\u4ee3\u7801\u6709\u4e00\u4e2a\u95ee\u9898\\n\\n> \u5728 React \u4e2d\uff0c`useRef`\u521b\u5efa\u7684\u5f15\u7528\uff08reference\uff09\u7684\u53d8\u5316\u4e0d\u4f1a\u89e6\u53d1\u7ec4\u4ef6\u7684\u91cd\u65b0\u6e32\u67d3\u3002\u8fd9\u662f\u56e0\u4e3a`useRef`\u8fd4\u56de\u7684\u5bf9\u8c61\u5728\u7ec4\u4ef6\u7684\u6240\u6709\u6e32\u67d3\u4e2d\u4fdd\u6301\u4e0d\u53d8\uff0c\u6240\u4ee5 React \u4e0d\u4f1a\u77e5\u9053\u5f15\u7528\u7684\u503c\u5df2\u7ecf\u6539\u53d8\u3002\\n\\n\u6240\u4ee5\u8981\u662f\u9700\u8981\u91cd\u65b0\u6e32\u67d3\uff0c\u8fd8\u5f97\u662f useState,\u5f15\u51fa\u4e86\u4e0b\u9762\u7684\u6280\u672f\\n\\ncontrolled components\\n\\n\u4e3b\u8981\u89e3\u51b3\u4f7f\u7528 useState \u548c onChange \u65b9\u6cd5\u6765\u63a7\u5236 state \u65f6\u5019\uff0c\u4e0d\u540c\u7ec4\u4ef6\u540c\u65f6\u4fee\u6539\u4e00\u4e2a state \u7684\u5f02\u6b65\u95ee\u9898\\n\\n\u89e3\u51b3\u65b9\u6cd5\uff0c\u5728\u7ec4\u4ef6\u52a0\u4e00\u4e2a `value={obj.value}`,\u6bcf\u6b21\u8c03\u7528\u524d\u5148\u540c\u6b65\uff0c\u628a\u7ec4\u4ef6\u72b6\u6001\u7684\u7ba1\u7406\u8f6c\u4ea4\u7ed9 React\\n\\n> const [state, setState]=useState(...);\\n>\\n> ...\\n>\\n> \\\\<Component value=\\\\{state\\\\}\\n>\\n> onChange=\\\\{handleStateChange\\\\} /\\\\>\\n\\n\u66f4\u7b80\u5355\uff1a\u4f7f\u7528 react-hook-form \u5e93\\n\\n```ts\\nimport { FieldValues, useForm } from \\"react-hook-form\\";\\nconst Form = () => {\\n  const { register, handleSubmit } = useForm();\\n  const onSubmit = (data: FieldValues) => console.log(data);\\n  return (\\n    <>\\n      <form onSubmit={handleSubmit(onSubmit)}>\\n        <div className=\\"mb-3\\">\\n          <label htmlFor=\\"name\\" className=\\"form-label\\">\\n            Name\\n          </label>\\n          <input\\n            {...register(\\"name\\")}\\n            id=\\"name\\"\\n            type=\\"text\\"\\n            className=\\"form-control\\"\\n          />\\n          <div className=\\"mb-3\\">\\n            <label htmlFor=\\"age\\" className=\\"form-lable\\">\\n              Age\\n            </label>\\n            <input\\n              {...register(\\"age\\")}\\n              id=\\"age\\"\\n              type=\\"number\\"\\n              className=\\"form-control\\"\\n            />\\n          </div>\\n        </div>\\n        <button className=\\"btn btn-primary\\" type=\\"submit\\">\\n          Submit\\n        </button>\\n      </form>\\n    </>\\n  );\\n};\\n\\nexport default Form;\\n```\\n\\n##### Validation\\n\\nreact-hook-form \u7684 register \u53ef\u4ee5\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u5bf9\u8c61\\n\\n```typescript\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport \\"../index.css\\";\\nimport { useRef } from \\"react\\";\\nimport { FieldValues, useForm } from \\"react-hook-form\\";\\nconst Form = () => {\\n  const {\\n    register,\\n    handleSubmit,\\n    formState: { errors },\\n  } = useForm();\\n  console.log(errors);\\n  const onSubmit = (data: FieldValues) => console.log(data);\\n  return (\\n    <>\\n      <form onSubmit={handleSubmit(onSubmit)}>\\n        <div className=\\"mb-3\\">\\n          <label htmlFor=\\"name\\" className=\\"form-label\\">\\n            Name\\n          </label>\\n          <input\\n            {...register(\\"name\\", { required: true, minLength: 3 })} // \u8fd9\u91cc\\n            id=\\"name\\"\\n            type=\\"text\\"\\n            className=\\"form-control\\"\\n          />\\n          {errors.name?.type === \\"required\\" && <p>You must give a name.</p>}\\n          {errors.name?.type === \\"minLength\\" && (\\n            <p>The length of name must be longer than 3 characters.</p>\\n          )}\\n          <div className=\\"mb-3\\">\\n            <label htmlFor=\\"age\\" className=\\"form-lable\\">\\n              Age\\n            </label>\\n            <input\\n              {...register(\\"age\\")}\\n              id=\\"age\\"\\n              type=\\"number\\"\\n              className=\\"form-control\\"\\n            />\\n          </div>\\n        </div>\\n        <button className=\\"btn btn-primary\\" type=\\"submit\\">\\n          Submit\\n        </button>\\n      </form>\\n    </>\\n  );\\n};\\n\\nexport default Form;\\n```\\n\\n\u57fa\u4e8e\u6a21\u5f0f\u7684\u9a8c\u8bc1\uff1aZod + @hookhome/resolvers \u770b\u4ee3\u7801\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u5e76\u4e0d\u662f\u5b9e\u65f6\u7684\uff0c\u9700\u8981 submit \u624d\u4f1a\u6709 error\uff0c\u5982\u679c\u540c\u65f6\u542f\u7528\u4e86\u4e0b\u9762\u7684 invalid \u4e0d submit \u548c\u8fd9\u4e2a, \u8fd9\u4e2a\u76f8\u5f53\u4e8e\u6ca1\u8bbe\u7f6e\\n\\n```ts\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport \\"../index.css\\";\\nimport { FieldValues, useForm } from \\"react-hook-form\\";\\nimport { z } from \\"zod\\";\\nimport { zodResolver } from \\"@hookform/resolvers/zod\\";\\nconst schema = z.object({\\n  name: z.string().min(3, { message: \\"Name must be at least 3 characters\\" }),\\n  age: z.number({ invalid_type_error: \\"Age field is required\\" }).min(18),\\n});\\ntype FormData = z.infer<typeof schema>;\\nconst Form = () => {\\n  const {\\n    register,\\n    handleSubmit,\\n    formState: { errors, isValid },\\n  } = useForm<FormData>({\\n    resolver: zodResolver(schema),\\n  });\\n  console.log(errors);\\n  const onSubmit = (data: FieldValues) => console.log(data);\\n  return (\\n    <>\\n      <form onSubmit={handleSubmit(onSubmit)}>\\n        <div className=\\"mb-3\\">\\n          <label htmlFor=\\"name\\" className=\\"form-label\\">\\n            Name\\n          </label>\\n          <input\\n            {...register(\\"name\\")}\\n            id=\\"name\\"\\n            type=\\"text\\"\\n            className=\\"form-control\\"\\n          />\\n          {errors.name && <p>{errors.name.message}</p>}\\n          <div className=\\"mb-3\\">\\n            <label htmlFor=\\"age\\" className=\\"form-label\\">\\n              Age\\n            </label>\\n            <input\\n              {...(register(\\"age\\"), { valueAsNumber: true })}\\n              id=\\"age\\"\\n              type=\\"number\\"\\n              className=\\"form-control\\"\\n            />\\n          </div>\\n          {errors.age && <p>{errors.age.message}</p>}\\n        </div>\\n        <button className=\\"btn btn-primary\\" type=\\"submit\\">\\n          Submit\\n        </button>\\n      </form>\\n    </>\\n  );\\n};\\n\\nexport default Form;\\n```\\n\\n\u7528\u6dd8\u5b9d\u6e90\uff0cSJTUG \u6ca1\u6709\uff1b \u88c5@hookhome/resolvers \u7684\u65f6\u5019\u8bb0\u5f97\u6253\\"\\"\uff08` npm --registry https://registry.npm.taobao.org install \\"@hookform/resolvers\\"`\uff09,\u907f\u514d\u548c\u624b\u52a8\u6307\u5b9a\u6e90\u7684 \u201c/\u201d \u6df7\u4e00\u8d77\\n\\n\u7981\u7528 submit,\\n\\n```ts\\nconst {\\n    register,\\n    handleSubmit,\\n    formState: { errors, isValid },\\n  } = useForm();\\n<button disabled={!isValid} className=\\"btn btn-primary\\" type=\\"submit\\">\\n```\\n\\n\u7ed9 useState \u52a0\u7c7b\u578b\\n\\n`useState\\\\<Type\\\\>`\\n\\n\u5bfc\u51fa\u7c7b\u578b export type\\n\\n##### \u7ec3\u4e60\uff1a\u8bb0\u8d26\u672c\\n\\n\u975e\u5e38\u597d\u7684\u7ec3\u4e60\uff0c\u548c TodoList \u4e00\u4e2a\u5b9e\u73b0\u9053\u7406\uff0c\u6700\u597d\u81ea\u5df1\u8bd5\u7740\u505a\u4e00\u505a\\n\\n\u4e2a\u4eba\u5b9e\u73b0\uff08\u540e\u9762\u56de\u6765\u770b\u611f\u89c9\u5f88\u591a\u5730\u65b9\u6ca1\u5199\u597d\uff09\uff1a\\n\\n```tsx\\n//FormDataType.tsx\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport { z } from \\"zod\\";\\ntype Category = \\"All Categories\\" | \\"Groceries\\" | \\"Utilities\\" | \\"Entertainment\\";\\n\\nconst schema = z.object({\\n  description: z.string().min(3),\\n  amount: z\\n    .number({ invalid_type_error: \\"Amount field is required\\" })\\n    .positive(),\\n  category: z.enum([\\n    \\"All Categories\\",\\n    \\"Groceries\\",\\n    \\"Utilities\\",\\n    \\"Entertainment\\",\\n  ]),\\n});\\ntype ExpenseFormData = z.infer<typeof schema>;\\n\\nexport { schema };\\nexport type { ExpenseFormData, Category };\\n```\\n\\n```tsx\\n// index.tsx\\nimport ExpenseForm from \\"./ExpenseForm\\";\\nimport { ExpenseFormData } from \\"./FormDataType\\";\\nimport { useState } from \\"react\\";\\nimport FilterTable from \\"./FilterTable\\";\\nconst ExpenseTracker = () => {\\n  const [dataArr, setDataArr] = useState<ExpenseFormData[]>([]);\\n  const pushCallback = (newData: ExpenseFormData) => {\\n    setDataArr([...dataArr, newData]);\\n  };\\n  const deleteCallback = (index: number) => {\\n    setDataArr(dataArr.filter((_, i) => i !== index));\\n  };\\n  return (\\n    <>\\n      <ExpenseForm dataArr={dataArr} pushCallback={pushCallback} />\\n      <FilterTable dataArr={dataArr} callback={deleteCallback} />\\n    </>\\n  );\\n};\\n\\nexport default ExpenseTracker;\\n```\\n\\n```tsx\\n// FilterTable.tsx\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport { ExpenseFormData, Category } from \\"./FormDataType\\";\\nimport { useState } from \\"react\\";\\ninterface FilterTableProps {\\n  dataArr: ExpenseFormData[];\\n  callback: (index: number) => void;\\n}\\nconst FilterTable = ({ dataArr, callback }: FilterTableProps) => {\\n  const [filterSelection, setFilter] = useState<Category>(\\"All Categories\\");\\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\\n    setFilter(event.target.value as Category);\\n  };\\n  return (\\n    <>\\n      <select\\n        value={filterSelection}\\n        onChange={handleFilterChange}\\n        className=\\"form-select\\"\\n        aria-label=\\"Category\\"\\n      >\\n        <option selected>All Categories</option>\\n        <option value=\\"Groceries\\">Groceries</option>\\n        <option value=\\"Utilities\\">Utilities</option>\\n        <option value=\\"Entertainment\\">Entertainment</option>\\n      </select>\\n      <table className=\\"table\\">\\n        <thead>\\n          <tr>\\n            <th scope=\\"col\\">#</th>\\n            <th scope=\\"col\\">Description</th>\\n            <th scope=\\"col\\">Amount</th>\\n            <th scope=\\"col\\">Categories</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          {dataArr.map((data: ExpenseFormData, index) => {\\n            return (\\n              (filterSelection === \\"All Categories\\" ||\\n                data.category === filterSelection) && (\\n                <tr>\\n                  <th scope={\\"row\\"}>{index + 1}</th>\\n                  <td>{data.description}</td>\\n                  <td>{data.amount}</td>\\n                  <td>{data.category}</td>\\n                  <td>\\n                    <button\\n                      onClick={() => callback(index)}\\n                      className=\\"btn btn-warning\\"\\n                    >\\n                      Delete\\n                    </button>\\n                  </td>\\n                </tr>\\n              )\\n            );\\n          })}\\n          <tr>\\n            <th scope={\\"row\\"}>Total</th>\\n            <td>\\n              {dataArr.reduce((total, cur) => {\\n                if (\\n                  filterSelection === \\"All Categories\\" ||\\n                  cur.category === filterSelection\\n                ) {\\n                  return total + cur.amount;\\n                }\\n                return total;\\n              }, 0)}\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </>\\n  );\\n};\\n\\nexport default FilterTable;\\n```\\n\\n```tsx\\n// ExpenseForm.tsx\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport { FieldValues, useForm } from \\"react-hook-form\\";\\nimport { zodResolver } from \\"@hookform/resolvers/zod\\";\\nimport { schema } from \\"./FormDataType\\";\\nimport { ExpenseFormData } from \\"./FormDataType\\";\\ninterface ExpenseFormProps {\\n  dataArr: ExpenseFormData[];\\n  pushCallback: (newData: ExpenseFormData) => void;\\n}\\nconst ExpenseForm = ({ dataArr, pushCallback }: ExpenseFormProps) => {\\n  const {\\n    register,\\n    handleSubmit,\\n    formState: { errors, isValid },\\n  } = useForm<ExpenseFormData>({ resolver: zodResolver(schema) });\\n  const onSubmit = (data: FieldValues) => {\\n    if (isValid) {\\n      pushCallback(data as ExpenseFormData);\\n      console.log(dataArr);\\n    }\\n  };\\n\\n  return (\\n    <>\\n      <form onSubmit={handleSubmit(onSubmit)}>\\n        <div className=\\"mb-3\\">\\n          <label htmlFor=\\"Description\\" className=\\"form-label\\">\\n            Description\\n          </label>\\n          <input\\n            {...register(\\"description\\")}\\n            id=\\"Description\\"\\n            type=\\"text\\"\\n            className=\\"form-control\\"\\n          />\\n        </div>\\n        {errors.description && <p>{errors.description.message}</p>}\\n        <div className=\\"mb-3\\">\\n          <label htmlFor=\\"Amount\\" className=\\"form-label\\">\\n            Amount\\n          </label>\\n          <input\\n            {...register(\\"amount\\", { valueAsNumber: true })}\\n            id=\\"Amount\\"\\n            type=\\"number\\"\\n            className=\\"form-control\\"\\n          />\\n        </div>\\n        {errors.amount && <p>{errors.amount.message}</p>}\\n        <select\\n          {...register(\\"category\\")}\\n          className=\\"form-select\\"\\n          aria-label=\\"Category\\"\\n        >\\n          <option selected>All Categories</option>\\n          <option value=\\"Groceries\\">Groceries</option>\\n          <option value=\\"Utilities\\">Utilities</option>\\n          <option value=\\"Entertainment\\">Entertainment</option>\\n        </select>\\n        {errors.category && <p>{errors.category.message}</p>}\\n        <button type=\\"submit\\" className=\\"btn btn-primary\\">\\n          Submit\\n        </button>\\n      </form>\\n    </>\\n  );\\n};\\n\\nexport default ExpenseForm;\\n```\\n\\n\u770b\u89c6\u9891\uff0c\u4e0a\u9762\u7684\u4e00\u4e9b\u7f3a\u70b9\uff1a\\n\\n- type \u8fd8\u662f\u6709\u4e00\u4e9b\u8026\u5408\uff0ccategory \u5e94\u8be5\u72ec\u7acb\u51fa\u6765\u6210\u4e3a\u5355\u72ec\u7684\u6a21\u5757\\n- \u53ef\u4ee5\u7ee7\u7eed\u8c03 css, \u7f8e\u89c2\u5ea6\u4e0d\u8db3\uff08e.g \u4f7f\u7528 mb-3 mb-5 class \u52a0\u8fb9\u6846\uff0c\u6539 validation text \u989c\u8272\u7b49\u7b49\uff09\\n\\n---\\n\\n### \u540e\u7aef\u90e8\u5206\\n\\n- Express\\n- Django\\n- Ruby on Rail\\n- Spring\\n- ASP.NET\\n- ......\\n\\n#### \u94fe\u63a5 React \u548c\u540e\u7aef\\n\\n##### useEffect \u548c Effect Hook\\n\\n\u4e3a\u4ec0\u4e48\u9700\u8981 useEffect\uff1a\\n\\n> React \u5f15\u5165`useEffect`\u662f\u4e3a\u4e86\u5728\u51fd\u6570\u7ec4\u4ef6\u4e2d\u5904\u7406\u526f\u4f5c\u7528\u3002\u5728 React \u4e2d\uff0c\u526f\u4f5c\u7528\u5305\u62ec\u6570\u636e\u83b7\u53d6\u3001\u8ba2\u9605\u6216\u624b\u52a8\u4fee\u6539 DOM \u7b49\u64cd\u4f5c\u3002\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u4f1a\u5728\u7ec4\u4ef6\u6e32\u67d3\u4e4b\u540e\u6267\u884c\uff0c\u53ef\u80fd\u4f1a\u5f71\u54cd\u7ec4\u4ef6\u4e4b\u5916\u7684\u4e8b\u7269\u3002\\n\\n\u4f8b\u5982\u4e00\u4e2a\u7a97\u53e3\u7ec4\u4ef6\uff0c\u9700\u8981\u68c0\u6d4b\u5b83\u662f\u5426\u83b7\u53d6\u5230\u7126\u70b9\uff0c\u5982\u679c\u6211\u624b\u52a8\u5904\u7406\uff0c\u5c31\u5fc5\u987b\u5728\u7a97\u53e3\u51fd\u6570\u4e4b\u4e2d\u8bb0\u5f55\u548c\u7ef4\u62a4\u7126\u70b9\u4fe1\u606f\uff0c\u800c\u8fd9\u548c React \u7684\u8bbe\u8ba1\u903b\u8f91\u2014\u2014\u4e00\u4e2a\u53ea\u5173\u6ce8\u6e32\u67d3\u7684\u7ec4\u4ef6\u76f8\u8fdd\u80cc\\n\\n\u800c\u4f7f\u7528\u4e86 useEffect \u4e4b\u540e\uff0c\u7126\u70b9\u76f8\u5173\u7684\u4ee3\u7801\u5b9e\u8d28\u4e0a\u88ab\u72ec\u7acb\u51fa ReactDOM, \u800c\u7a97\u53e3\u7ec4\u4ef6\u91cd\u65b0\u6210\u4e3a\u7eaf\u51fd\u6570\uff0c**\u5728 DOM \u6e32\u67d3\u5b8c\u6bd5\u4e4b\u540e\uff0cReact \u68c0\u6d4b useEffect \u751f\u6548\u4e0e\u5426\uff0c\u6700\u540e\u6267\u884c\u526f\u4f5c\u7528**\uff0c\u4fdd\u8bc1\u4e86\u526f\u4f5c\u7528\u7684\u6267\u884c\u987a\u5e8f\uff0c\u4f7f\u5f97\u6574\u4e2a App \u6700\u540e\u4f9d\u7136\u662f\u7eaf\u51fd\u6570\\n\\n\u4f8b\uff1a\uff08\u8fd9\u4e2a\u4f8b\u5b50\u5e76\u4e0d\u5b9e\u9645\uff0c\u56e0\u4e3a\u6d4f\u89c8\u5668\u9ed8\u8ba4\u6709\u805a\u7126\u884c\u4e3a\u8986\u76d6\u4e86\u8fd9\u4e2a\u4ee3\u7801\uff0c\u4e0d\u9700\u8981\u8fd9\u6837\u624b\u52a8\u52a0\uff0c\u5e76\u4e14\u8fd9\u6837\u4e5f\u53ea\u662f\u5728\u7b2c\u4e00\u6b21\u70b9\u51fb\u7684\u65f6\u5019\u6709\u805a\u7126\uff09\\n\\n```tsx\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport { useRef, useEffect } from \\"react\\";\\nconst FocusInput = () => {\\n  const ref = useRef<HTMLInputElement>(null);\\n  useEffect(() => {\\n    ref.current?.focus();\\n  }, []);\\n  return (\\n    <div className=\\"md-3\\">\\n      <input ref={ref} type=\\"text\\" className=\\"form-control\\" />\\n    </div>\\n  );\\n};\\n\\nexport default FocusInput;\\n```\\n\\nuseEffect \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u56de\u8c03\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u63a7\u5236\u4f55\u65f6\u6267\u884c\u7684\u5bf9\u8c61\u2014\u2014\u53ea\u6709\u5f53\u8be5\u5bf9\u8c61\u6539\u53d8\u65f6\uff0cuseEffect \u624d\u4f1a\u6267\u884c\u56de\u8c03\u51fd\u6570\\n\\n\u5982\u679c\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u4f20\u5165\u4e00\u4e2a\u7a7a\u6570\u7ec4\\n\\n\u5982\u679c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4ec0\u4e48\u90fd\u4e0d\u4f20\u9012\uff0c\u90a3\u4e48\u6bcf\u6b21\u7ec4\u4ef6\u91cd\u65b0\u6e32\u67d3\u7684\u65f6\u5019\uff0creact \u90fd\u4f1a\u8c03\u7528\u56de\u8c03\u51fd\u6570\uff0c\u5982\u679c\u56de\u8c03\u51fd\u6570\u4e4b\u4e2d\u53c8\u6709 setState\uff0c\u5c31\u6210\u529f\u7684\u65e0\u9650\u5faa\u73af\u4e86\uff08\\n\\nuseEffect Clean up: useEffect \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff08\u56de\u8c03\u51fd\u6570 f\uff09\u53ef\u4ee5\u6709\u975e\u7a7a\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570 g \u65f6\uff0c\u5f53\u5c4f\u5e55\u4e0a unmount \u8be5\u7ec4\u4ef6\u65f6\uff0c\u8be5\u51fd\u6570(g)\u4f1a\u88ab\u8c03\u7528\uff0c\u4e00\u822c\u7528\u4e8e\u6e05\u7406\\n\\n##### Fetching Data\\n\\nJSON Place Holder\\n\\nSending HTTP Request:\\n\\n- \u539f\u751f Fetch \u65b9\u6cd5\\n- **Axios \u5e93 [recommended]**\\n\\n**Promise: A promise is an object that holds the eventual result or failure of an asynchronous operation**\\n\\npromise \u6709\u4e00\u4e2a then() \u65b9\u6cd5\uff0c\u7528\u4e8e\u6267\u884c\u56de\u8c03\u51fd\u6570\\n\\n**Handling Errors**\\n\\npromise \u6709\u4e00\u4e2a catch()\u65b9\u6cd5\uff0c\u6355\u83b7\u9519\u8bef\uff0c\u6267\u884c\u56de\u8c03\\n\\n\u793a\u4f8b\u4ee3\u7801\uff1a\\n\\n```tsx\\nimport axios from \\"axios\\";\\nimport { useEffect, useState } from \\"react\\";\\ninterface User {\\n  id: number;\\n  name: string;\\n}\\nfunction App() {\\n  const [users, setUsers] = useState<User[]>([]);\\n  const [err, setError] = useState(\\"\\");\\n  useEffect(() => {\\n    axios\\n      .get(\\"https://jsonplaceholder.typicode.com/users\\")\\n      .then((res) => setUsers(res.data))\\n      .catch((err) => setError(err.message));\\n  }, []);\\n  return (\\n    <>\\n      {err && <p className=\\"text-danger\\"> {err}</p>}\\n      <ul>\\n        {users.map((user) => (\\n          <li key={user.id}>{user.name}</li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\n\\nexport default App;\\n```\\n\\n\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 async \u548c await\uff0c\u4f46\u7565\u7e41\u7410\\n\\n> ps:\u5b9e\u9645\u4e0a then \u548c catch \u597d\u50cf\u662f\u540e\u9762\u624d\u63d0\u51fa\u6765\u7684\u8bed\u6cd5\u7cd6\uff08\\n\\n```tsx\\nuseEffect(() => {\\n  const fetchUsers = async () => {\\n    try {\\n      const res = await axios.get(\\"https://jsonplaceholder.typicode.com/users\\");\\n      setUsers(res.data);\\n    } catch (err) {\\n      setError((err as AxiosError).message);\\n    }\\n  };\\n  fetchUsers();\\n}, []);\\n```\\n\\n\u5f53\u7528\u6237\u79bb\u5f00\u6b64\u9875\u600e\u4e48\u529e\uff1f\u4e0d\u518d\u9700\u8981 Fetch data\uff0c\u4f7f\u7528\u5148\u524d\u63d0\u5230\u7684 useEffect Clean up\\n\\n\u4f7f\u7528 Controller\\n\\nAbortController class\uff0c\u6d4f\u89c8\u5668\u5185\u7f6e\uff0c\u5141\u8bb8\u53d6\u6d88\u6216\u4e2d\u6b62\u5f02\u6b65\u64cd\u4f5c\\n\\n```tsx\\n  const controller = new AbortController();\\n  useEffect(() => {\\n    axios\\n      .get(\\"https://jsonplaceholder.typicode.com/users\\"\uff0c {signal: controller.signal})\\n      .then((res) => setUsers(res.data))\\n      .catch((err) => {\\n        if (err instanceof CanceledError) return;\\n        setError(err.message);\\n      });\\n    return () => controller.abort();\\n  }, []);\\n```\\n\\nLoading \u6548\u679c\uff1a\u6d4b\u8bd5\uff0c\u5728 network \u9009\u9879\u5361\u91cc\u9762\u52a0 throtting \u6a21\u62df\u6162\u901f\u60c5\u51b5\\n\\n\u5728\u4e24\u4e2a\u7ec4\u4ef6\u4e4b\u95f4\u52a0\u70b9\u7a7a\u767d\\n\\n```tsx\\n<ComponentA />{\\" \\"}<ComponentB />\\n```\\n\\n\u66f4\u4f18\u7684\u5904\u7406\uff0c\u4f7f\u7528 ListGroup \u7c7b\u548c flex \u7c7b\u6765\u8c03\u6574\u7a7a\u95f4\u5e03\u5c40\\n\\n##### CRUD\\n\\n\u5220\u9664 Delete\uff1adelete\\n\\n\u4e50\u89c2\u66f4\u65b0/\u60b2\u89c2\u66f4\u65b0\uff1a\u5148\u66f4\u65b0 UI \u54cd\u5e94\uff08\u9884\u8ba1 Server \u66f4\u65b0\u4f1a\u6210\u529f\uff09\u8fd8\u662f\u5148\u66f4\u65b0 Server \u6570\u636e\uff08\u9884\u8ba1 Server \u66f4\u65b0\u4f1a\u5931\u8d25\uff09\\n\\n**\u4e00\u822c\u4e3a\u4e86\u7528\u6237\u4f53\u9a8c\u4f1a\u9009\u62e9\u4e50\u89c2\u66f4\u65b0**\\n\\n```tsx\\nconst onDelete = (id: number) => {\\n  const originalUsers = [...users];\\n  setUsers(users.filter((user) => user.id !== id));\\n  // \u5148setUsers\u518d\u8ba9server delete\uff0c\u4e50\u89c2\u66f4\u65b0\\n  axios\\n    .delete(`https://jsonplaceholder.typicode.com/xusers/${id}`)\\n    .catch((err) => {\\n      setError(err.message);\\n      setUsers(originalUsers); // \u9519\u8bef\u65f6\u8981\u56de\u5230\u539f\u59cb\u72b6\u6001\\n    });\\n};\\n```\\n\\n\u521b\u5efa Create: post\\n\\n```tsx\\naxios.post(\\"https://jsonplaceholder.typicode.com/users\\", newUser).then((res)=>setUsers[res.data, ...users]).catch((err)=>{\\n    setError(err.message);\\n    setUsers(originalUsers);\\n})\\n```\\n\\n\u66f4\u65b0 Update: put/patch\\n\\n```tsx\\nconst onUpdate = (User: User) => {\\n  const originalUsers = [...users];\\n  const newUser = { ...User, name: User.name + \\"!\\" };\\n  setUsers(users.map((user) => (user.id === User.id ? newUser : user)));\\n  axios\\n    .patch(\\"https://jsonplaceholder.typicode.com/users/\\" + User.id, newUser)\\n    .catch((err) => {\\n      setError(err.message);\\n      setUsers(originalUsers);\\n    });\\n};\\n```\\n\\nA reusable API client\uff1a \u601d\u8003\u600e\u4e48\u91cd\u6784\u89e3\u8026\\n\\n\u5c06 axios \u548c baseURL \u653e\u5230 service \u6587\u4ef6\u5939\u91cc\u9762\u53bb\\n\\n\u8fdb\u4e00\u6b65\uff0c\u518d\u628a\u6574\u4e2a HTTPRequest \u7684\u903b\u8f91\u653e\u5230 userService \u91cc\u9762\u53bb\\n\\n\u518d\u8fdb\u4e00\u6b65\uff0c\u4f7f\u7528\u6cdb\u578b\u628a userService \u7684\u903b\u8f91\u653e\u5230 HTTPService \u91cc\u9762\u53bb\\n\\n\u518d\u8fdb\u4e00\u6b65\uff0c\u4e00\u5806 Hook \u53ef\u4ee5\u653e\u5230\u4e00\u4e2a\u5927\u7684\u81ea\u5b9a\u4e49 Hook \u91cc\u9762\u53bb\\n\\n\u4e00\u4e2a Hook \u6ca1\u4ec0\u4e48\u795e\u5947\u7684\uff0c\u5c31\u662f\u4e00\u4e2a\u5bfc\u51fa\\\\{obj, setObj, ...\\\\}\u7684\u51fd\u6570\u7ec4\u4ef6\uff0c\u53ea\u8981\u5b83\u7684\u5185\u90e8\u8fd8\u662f useState \u4e4b\u7c7b\uff0c\u5c31\u4e0d\u9700\u8981\u63a2\u77e5\u5230 React \u7684\u5e95\u5c42 DOM\\n\\n---\\n\\n### Build A Project!\\n\\n#### \u6d41\u7a0b\u5b9e\u5f55\\n\\n**\u5982\u679c\u60f3\u505a\u7684\u6700\u597d\u5bf9\u7740 mosh \u7684\u89c6\u9891\u505a\uff0c\u8fd9\u91cc\u53ea\u662f\u6742\u4e71\u7684\u4e00\u70b9\u505a\u7684\u7b14\u8bb0**\\n\\nchakra UI: \u5b98\u7f51\u627e vite \u4e0b\u8f7d\u7248\u672c\uff0c\u7136\u540e ChakraProvider \u5305\u88f9 App\\n\\n> ps: \u5982\u679c chakra UI \u5f15\u5165\u7684\u7ec4\u4ef6\u62a5\u9519 \\"Expression produces a union type that is too complex to represent.\\"\uff0c \u522b\u614c\uff0c\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u8fd9\u662f ts \u7248\u672c\u4e0d\u5339\u914d\u5bfc\u81f4\u7684\uff0c \u53c2\u89c1[\u6b64\u5904](https://stackoverflow.com/questions/74847053/how-to-fix-expression-produces-a-union-type-that-is-too-complex-to-represent-t)\uff0c \u5c06 ts \u7248\u672c\u964d\u4e3a\u5de5\u4f5c\u533a\u7248\u672c\u5373\u53ef\\n\\n\u524d\u7aef\u90e8\u5206\uff1a\\n\\n[Grid](https://chakra-ui.com/docs/components/grid/usage)\\n\\n1fr\uff1a \u4e00\u4e2a\u5206\u6570\u5355\u4f4d\\n\\n> \u5728 CSS Grid \u4e2d\uff0c`fr` \u662f\u4e00\u4e2a\u5355\u4f4d\uff0c\u4ee3\u8868 \\"fractional unit\\"\uff08\u5206\u6570\u5355\u4f4d\uff09\u3002\u5b83\u7528\u4e8e\u5206\u914d\u53ef\u7528\u7a7a\u95f4\u3002\\n>\\n> \u5982\u679c\u4f60\u8bbe\u7f6e `grid-template-columns: repeat(5, 1fr);`\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u60f3\u8981\u521b\u5efa\u4e94\u5217\uff0c\u6bcf\u5217\u7684\u5bbd\u5ea6\u90fd\u662f\u53ef\u7528\u7a7a\u95f4\u7684\u4e00\u4e2a\u7b49\u4efd\u3002\u4f8b\u5982\uff0c\u5982\u679c\u53ef\u7528\u7a7a\u95f4\u662f 500px\uff0c\u90a3\u4e48\u6bcf\u5217\u7684\u5bbd\u5ea6\u5c31\u662f 100px\u3002\\n\\n\u9488\u5bf9\u79fb\u52a8\u7aef\u548c\u5927\u5c4f\u5e55\u8bbe\u8ba1 UI\uff0c F12 \u6a21\u62df\u79fb\u52a8\u7aef\\n\\n```tsx\\nimport { useState } from \\"react\\";\\nimport reactLogo from \\"./assets/react.svg\\";\\nimport \\"./App.css\\";\\nimport { Grid, GridItem, Show } from \\"@chakra-ui/react\\";\\nfunction App() {\\n  const templateAreas = {\\n    base: `\\"nav\\" \\"main\\"`, // \u79fb\u52a8\u7aef\u5c0f\u5c4f\u5e55\u6ca1\u6709aside\u4fa7\u8fb9\u680f\\n    lg: `\\"nav nav\\" \\"aside main\\"`, // > 1000px\\n  };\\n  return (\\n    <div className=\\"App\\">\\n      <Grid templateAreas={templateAreas}>\\n        <GridItem area=\\"nav\\" bg=\\"coral\\">\\n          Nav\\n        </GridItem>\\n        <Show above=\\"lg\\">\\n          <GridItem area=\\"aside\\" bg=\\"gold\\">\\n            Aside\\n          </GridItem>\\n        </Show>\\n\\n        <GridItem area=\\"main\\" bg=\\"dodgerblue\\">\\n          Main\\n        </GridItem>\\n      </Grid>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n```\\n\\ntheme\uff1acolormode\\n\\n\u4f7f\u7528 colorMode \u6765\u5b9e\u73b0\u6697\u8272\u6a21\u5f0f\u548c\u4eae\u8272\u6a21\u5f0f\u7684\u5207\u6362\uff08\u5207\u5b8c F12-> App-> storage\uff0c\u6e05\u9664 local storage \u7684\u989c\u8272 mode \u9a8c\u8bc1\uff09\\n\\n\u4f7f\u7528 useColorMode \u548c Switch \u6765\u505a\u5f00\u5173\\n\\n\u4f7f\u7528 Hstack \u548c justify-content \u6765\u8c03\u6574\u4f4d\u7f6e\\n\\nFetchGames:\\n\\n\u67e5\u5b98\u65b9 api \u6587\u6863\uff0caxios \u5efa\u4e00\u4e2a api-client (create \u65b9\u6cd5\uff0c baseURL + key), \u7136\u540e\u518d\u7528 get \u65b9\u6cd5 fetch \u6570\u636e\\n\\nGameCard && GameGrid: \u4f7f\u7528 SimpleGrid && Card \u7ec4\u4ef6\\n\\n\u79fb\u52a8\u7aef\u9002\u914d\uff1a\u4e0d\u786c\u7f16\u7801 column\uff0c\u4f20\u5165\u4e00\u4e2a\u5bf9\u8c61\\\\{sm: 1, md: 2, lg: 3, xl: 5\\\\}\\n\\n\u6dfb\u52a0\u56fe\u6807\uff1a\u4f7f\u7528\u7b2c\u4e09\u65b9\u56fe\u6807\u5e93 https://chakra-ui.com/docs/components/icon/usage#using-a-third-party-icon-library\\n\\n\u5148\u4ece API \u62ff\u5230 slug\uff08\u5168\u5c0f\u5199\u540d\u5b57\uff09\uff0c\u518d\u5199\u4e00\u4e2a map \u51fd\u6570\u6765\u5bf9\u5e94\u56fe\u6807\\n\\n```tsx\\nconst IconMap: { [key: string]: IconType } = {\\n  pc: FaWindows,\\n  playstation: FaPlaystation,\\n  xbox: FaXbox,\\n  nintendo: SiNintendo,\\n  mac: FaApple,\\n  ios: MdPhoneIphone,\\n  linux: FaLinux,\\n};\\n```\\n\\n\u6ce8\u610f=\u548c...\u5728\u4f20\u9012 props \u65f6\u5019\u7684\u533a\u522b\\n\\nprops=\\\\{\\\\} \uff0c\u4f20\u9012\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\uff1b ...\u4f20\u9012\u7684\u662f\u5bf9\u8c61\u91cc\u9762\u6240\u6709\u7684\u5c5e\u6027\\n\\n```tsx\\n        <PlatformIconList\\n          {...(game.platforms.map((item) => item.platform) as Platform[])}\\n        /> // \u4f20\u9012\u7684\u662f\u8868\u8fbe\u5f0f\u5bf9\u8c61\u91cc\u9762\u7684\u6570\u7ec4\u5c55\u5f00\u540e\u7684\u7ed3\u679c\\n        <PlatformIconList\\n          platforms={(game.platforms.map((item) => item.platform) as Platform[])}\\n        /> // \u4f20\u9012\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\u7528{}\u5305\u88f9\u540e\u7684\u5bf9\u8c61\\n// \u7528\u90a3\u79cd\u53d6\u51b3\u4e8e\u5b50\u7ec4\u4ef6\u63a5\u53d7\u7684\u662f\u4e00\u4e2a\u5bf9\u8c61\u8fd8\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e00\u822c\u662f\u5728\u5b50\u7ec4\u4ef6\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u7136\u540e\u63a5\u53d7\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u7528\u89e3\u6784\u63a5\u6536\\ninterface PlatformIconListProps {\\n  platforms: Platform[];\\n}\\nconst PlatformIconList = ({ platforms }: PlatformIconListProps) => {\\n    // \u7c7b\u4f3c\u8fd9\u6837\uff0c\u8fd9\u6837\u5728\u4f20\u9012\u7684\u65f6\u5019\u5c31\u662f\u4f20\u4e00\u4e2a\u6570\u7ec4\u7528{}\u5305\u88f9\u540e\u7684\u5bf9\u8c61\uff0c\u5373=\u8bed\u6cd5\\n```\\n\\n\u6dfb\u52a0\u8bc4\u5206\\n\\nBadge(\u5fbd\u7ae0)\u7c7b\\n\\n\u6dfb\u52a0\u52a0\u8f7d\u65f6\u9aa8\u67b6\\n\\n[skeleton \u7c7b](https://chakra-ui.com/docs/components/skeleton/usage)\\n\\nrefactor\uff1a\u5c06\u91cd\u590d\u7684\u6837\u5f0f\u63d0\u51fa\u6210\u4e3a\u4e00\u4e2a GameCardContainer \u7ec4\u4ef6\\n\\nfetch the genres\uff1a \u7c7b\u4f3c useGames \u7684 custom hook\uff0c\u53d6\u6765\u6570\u636e\u4e4b\u540e\u518d\u653e\u5230 Aside \u4f4d\u7f6e\u4e0a\u5373\u53ef\\n\\n\u4fa7\u8fb9\u680f\u52a0 Icon: \u8c03 padding(\u5185\u95f4\u8ddd)\u548c spacing(\u5916\u95f4\u8ddd) , \u5229\u7528 Grid \u7c7b\u7684 templateColumn 200px 1fr \u6765\u8fbe\u5230\u81ea\u9002\u5e94\\n\\n\u5b8c\u5584\u6839\u636e genre \u9009\u62e9\u5448\u73b0\u5217\u8868\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u4f55\u4fee\u6539 useEffect\uff0c\u5982\u4f55\u4e0a\u63d0\u63a7\u5236\u72b6\u6001\u548c\u4e0b\u653e\u63a7\u5236\u903b\u8f91\u548c axios \u4e4b\u4e2d\u65b9\u6cd5\u6240\u5e26\u7684 AxiosRequestConfig \u53c2\u6570\u7684\u4f7f\u7528(\u5728\u8bf7\u6c42\u4f53\u4e4b\u4e2d\u7528\u6765\u643a\u5e26\u6570\u636e)\\n\\n\u8fd9\u91cc\u7684\u903b\u8f91\u662f\u6bcf\u6b21\u5207\u6362 selectedGenre \u90fd\u91cd\u65b0\u5411 API\uff08\u6a21\u62df\u7684\u540e\u7aef\uff09\u8bf7\u6c42\u4e00\u6b21\u6570\u636e\uff0c\u800c\u4e0d\u662f\u7528\u5148\u524d\u8bf7\u6c42\u7684\u6570\u636e\u505a filter,filter \u7684\u903b\u8f91\u653e\u7ed9\u540e\u7aef\u505a\u4e86\\n\\n```tsx\\nconst useGames = (selectedGenre: Genre | null) => {\\n  return useData<Game>(\\"/games\\", { params: { genres: selectedGenre?.id } }, [\\n    selectedGenre,\\n  ]);\\n};\\n```\\n\\nuseData \u7684\u5904\u7406\u65b9\u6cd5\\n\\n```tsx\\nimport { useEffect, useState } from \\"react\\";\\nimport ApiClient from \\"./Api-Client\\";\\nimport { AxiosRequestConfig, CanceledError } from \\"axios\\";\\ninterface dataResponse<T> {\\n  count: number;\\n  results: T[];\\n}\\nconst useData = <T,>(\\n  endpoint: string,\\n  config?: AxiosRequestConfig,\\n  dep?: any[]\\n) => {\\n  const [data, setData] = useState<T[]>([]);\\n  const [err, setError] = useState<string>(\\"\\");\\n  const [loading, setLoading] = useState(true);\\n  const controller = new AbortController();\\n  const FetchGames = useEffect(\\n    () => {\\n      setLoading(true); // \u6bcf\u6b21\u91cd\u65b0\u53d6\u6570\u636e\u91cd\u7f6eloading\\n      ApiClient.get<dataResponse<T>>(endpoint, {\\n        signal: controller.signal,\\n        ...config,\\n      })\\n        .then((res) => {\\n          setData(res.data.results);\\n          setLoading(false);\\n        })\\n        .catch((err) => {\\n          if (err instanceof CanceledError) return;\\n          setError(err.message);\\n          setLoading(false);\\n        });\\n    },\\n    dep ? [...dep] : []\\n  );\\n  return { data, err, loading };\\n};\\nexport default useData;\\n```\\n\\nhighlight selectedGenre: fontweight \u5c5e\u6027\u5373\u53ef\\n\\n```tsx\\nfontWeight={genre.id === selectedGenre?.id ? \\"bold\\" : \\"normal\\"}\\n```\\n\\nfilterByPlatform\\n\\nMenu \u7c7b \u4e0b\u62c9\u5217\u8868\uff0c \u5982\u679c\u6709\u9519\u8bef\uff0c\u5b81\u613f\u4ec0\u4e48\u90fd\u4e0d\u8fd4\u56de\uff08\u53d6\u6d88\u8fd9\u4e2a\u7ec4\u4ef6\uff09\u800c\u4e0d\u662f\u5c06\u9519\u8bef\u6254\u5728\u7528\u6237\u8138\u4e0a\u7684\u8bbe\u8ba1\u539f\u5219\\n\\n\u5176\u4ed6\u903b\u8f91\u540c genre\\n\\n\u91cd\u6784\uff1a\u4f7f\u7528 Query Object Model\uff0c\u4f20\u5165\u7684\u5404\u4e2a select \u7684 props \u6253\u5305\u6210 Query\\n\\n\u4e0b\u4e00\u6b65\uff1a \u52a0\u6392\u5e8f Sort\uff0c\u591a\u79cd\u6392\u5e8f\u987a\u5e8f\u8fd8\u662f\u4e00\u4e2a Menu\\n\\n\u5982\u679c\u4e00\u76f4\u5411 api \u53d1\u9001\u8bf7\u6c42\uff08\u4f53\u73b0\u5728 UI \u4e0a\u662f\u4e00\u76f4\u95ea\u70c1\uff09, **\u53ef\u80fd\u662f\u4e0d\u6070\u5f53\u5730\u4f20\u9012\u4e86\u89e3\u6784\u53c8\u91cd\u6784\u7684\u5bf9\u8c61\uff08\u5373\u4f7f\u662f\u4e34\u65f6\u7684\u5bf9\u8c61\uff09\uff0c\u8fd9\u6837\u4e4b\u540e\uff0c\u770b\u8d77\u6765\u5bf9\u8c61\u5185\u90e8\u7684\u503c\u6ca1\u6709\u53d8\u5316\uff0c\u4f46\u662f\u5bf9\u8c61\u4e0d\u65ad\u5730\u66f4\u65b0\uff0c\u7136\u540e React \u4e00\u76f4\u91cd\u590d\u6e32\u67d3**\\n\\n\u5904\u7406\u6ca1\u6709\u56fe\u7247\u7684\u60c5\u51b5\uff1aImage \u7684 src \u4e0d\u80fd\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\uff0c\u9700\u8981\u901a\u8fc7 import \u5bfc\u5165\\n\\n\u52a0\u4e0a\u52a8\u6001\u7684 Heading\\n\\n\u5904\u7406 Button \u7684\u6587\u672c\u548c\u56fe\u7247\u91cd\u53e0\u95ee\u9898\uff1a\u6539\u5b83\u7684 whiteSpace \u5c5e\u6027\u4e3a\\"normal\\", \u518d\u8bbe\u7f6e textAlign={\\"left\\"}\u5de6\u5bf9\u9f50\\n\\nobjectfit=\\"cover\\"\u4fdd\u6301\u56fe\u7247\u957f\u5bbd\u6bd4\\n\\nshipping static data\uff0c\u5f53\u7136\uff0c\u4f5c\u4e3a\u4e4b\u524d\u9009\u62e9\u7684\u56de\u65cb\u9556\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u5c06 Genre\uff0cPlatform \u8fd9\u79cd\u4e0d\u600e\u4e48\u6539\u53d8\u7684\u6570\u636e\u5b58\u50a8\u5728\u672c\u5730\u4e00\u4e2a data \u6587\u4ef6\u5939\u4e4b\u4e2d\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u5230 API \u91cc\u9762\u7684\u67e5\u8be2\\n\\n\u53ef\u4ee5\u4f7f\u7528\u5b98\u65b9\u6587\u6863\u4e0a\u7684\u65b9\u6cd5\u81ea\u5b9a\u4e49\u989c\u8272\u4e3b\u9898\\n\\n#### \u90e8\u7f72\\n\\n\u5148\u672c\u5730\u90e8\u7f72\\n\\n```bash\\nnpm run build\\n```\\n\\n\u4f1a\u751f\u6210 dist \u6587\u4ef6\u5939\uff0c\u91cc\u9762\u6709\u7f16\u8bd1\u5b8c\u7684 js \u4ee3\u7801\uff0c\u6240\u6709\u9700\u8981\u7684\u5916\u90e8\u5305\u548c asset......\\n\\n\u5728 Vercel\uff08https://vercel.com/\uff09\u4e0a\u90e8\u7f72\\n\\n\u4f7f\u7528 github \u8d26\u53f7\u6ce8\u518c\uff0c\u767b\u5f55\uff0c\u4e0b\u8f7d CLI\\n\\n```bash\\nnpm install -g vercel\\n```\\n\\n\u4e4b\u540e\\n\\n```bash\\nvercel\\n```\\n\\n\u63a5\u53d7\u9ed8\u8ba4\u503c\u5373\u53ef\u90e8\u7f72\\n\\n> **ps: \u8fd9\u4e2a\u597d\u50cf\u5728\u4f7f\u7528 cnpm \u7684\u65f6\u5019\u4f1a\u6709\u95ee\u9898\uff0c\u6211\u6ca1\u6709\u90e8\u7f72\u6210\u529f\uff0c\u4e24\u8005\u4ea4\u4e92\u4f1a\u6709\u95ee\u9898**\\n\\n#### What\'s Next\\n\\n- Routing,\\n- State Management,\\n- Fetching Data With React Query\\n\\n- Authentication\\n- Error Handling\\n- Performance Optimazation\\n- ......\\n\\n## \u8fdb\u9636\u90e8\u5206\\n\\n\u8bfe\u7a0b\u5185\u5bb9\uff1a\\n\\n- React Query : \u6570\u636e\u7ba1\u7406\u548c\u7f13\u5b58\\n- Global State Management\\n- React Router\\n\\n### React Query\\n\\n#### basic query\\n\\nWhat is react query\uff1f\\n\\n\u4e00\u4e2a\u7ba1\u7406\u6570\u636e\u7684\u5e93\uff1a A powerful lib for **managing DATA FETCHING and CACHING** in React apps\\n\\n\u5b89\u88c5\\n\\n```bash\\nnpm i @tanstack/react-query\\n```\\n\\nQueryClient \u662f\u6838\u5fc3\u7ec4\u4ef6\uff1a\u5728\u9879\u76ee\u4e4b\u4e2d\u542f\u7528 React Query\\n\\n```tsx\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport React from \\"react\\";\\nimport ReactDOM from \\"react-dom/client\\";\\nimport { QueryClient, QueryClientProvider } from \\"@tanstack/react-query\\";\\nimport App from \\"./App\\";\\nimport \\"./index.css\\";\\n\\nconst queryClient = new QueryClient();\\nReactDOM.createRoot(document.getElementById(\\"root\\") as HTMLElement).render(\\n  <React.StrictMode>\\n    <QueryClientProvider client={queryClient}>\\n      <App />\\n    </QueryClientProvider>\\n  </React.StrictMode>\\n);\\n```\\n\\nuseQuery Hook:\\n\\n\u63a5\u53d7\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5176\u4e2d\u81f3\u5c11\u8981\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a\\n\\n- queryKey: \u7528\u4e8e\u6807\u8bc6\u6570\u636e\u5728 Query \u4e4b\u4e2d\u5b58\u50a8\u7684\u552f\u4e00\u6027\u7684\u952e\uff0ctype \u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\uff08\u6570\u7ec4\u53ef\u4ee5\u5305\u542b\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u4e00\u822c\u5728\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u653e\u540d\u5b57\uff0c\u540e\u9762\u653e\u53c2\u6570\uff0c\u5982`queryKey:[\'todos\', userId]`\uff09\\n- queryFn: \u4e00\u4e2a\u8fd4\u56de Promise \u7684\u51fd\u6570\uff0c\u8fd9\u4e2a Promise \u8981\u4e48\u89e3\u6790\u89e3\u6790\u6570\u636e\uff0c\u8981\u4e48\u629b\u51fa\u9519\u8bef\\n\\n\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u6709\u4ee5\u4e0b\u91cd\u8981\u5c5e\u6027\uff1a\\n\\n- data: \u5b58\u653e Promise \u89e3\u6790\u7684\u503c( if isSuccess \u5c5e\u6027\u4e3a\u771f)\\n- isError: \u5982\u679c isError, \u5219\u53ef\u4ee5\u901a\u8fc7 error \u5c5e\u6027\u5f97\u5230\u9519\u8bef\\n- isPending\uff1a\u5982\u679c isPending, \u67e5\u8be2\u6b63\u5728\u8fdb\u884c\u4e4b\u4e2d\uff0c\u5c1a\u65e0\u7ed3\u679c\\n\\n> ps: \u5728\u6709\u4e9b\u7248\u672c\u4e4b\u4e2d\uff0cisPending \u7684\u540d\u5b57\u662f isLoading\\n\\n\u4f7f\u7528 useQuery Hook \u7684\u597d\u5904\uff1a\\n\\n- Auto retries: \u53ef\u4ee5\u914d\u7f6e React Query\uff0c\u8ba9\u5b83\u81ea\u52a8\u91cd\u8bd5\u51e0\u6b21\\n- Auto reFetch\uff1a\u53ef\u4ee5\u914d\u7f6e React Query\uff0c \u8ba9\u5b83\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u81ea\u52a8\u91cd\u65b0\u4ece\u670d\u52a1\u5668\u53d6\u6570\u636e\\n- \u66f4\u7b80\u6d01\u7684 Error handling && Loading handling && fecthing , \u907f\u514d useState \u548c useEffect \u7684\u6ee5\u7528\\n- **\u63d0\u4f9b\u6570\u636e\u7f13\u5b58**\\n\\nuseEffect \u7684 dep \u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7 queryKey \u6765\u5b9e\u73b0\u540c\u6837\u7684\u529f\u80fd\u7684\uff1a\\n\\n> \u5177\u4f53\u5730\u8bf4\uff0c\u5c06 dep \u901a\u8fc7\u5b57\u7b26\u4e32\u6570\u7ec4\u62fc\u63a5\u6216\u8005\u4f20\u9012\u5bf9\u8c61\u7b49\u62fc\u5230 queryKey \u4e0a\u4e4b\u540e\uff0c\u5982\u679c dep \u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 queryKey, React Query \u770b\u7f13\u5b58\u91cc\u6ca1\u6709\u5c31\u6267\u884c\u56de\u8c03\u51fd\u6570\u4e86\\n\\n\u793a\u4f8b\u4ee3\u7801\uff0cuseQuery \u53d6\u4ee3\u4e86 useState\uff0c useEffect \u7b49\u4ee3\u7801\\n\\n\u6ce8\u610f useQuery \u4e00\u5b9a\u8981\u653e\u5728 React \u7ec4\u4ef6\u5185\u90e8\\n\\n```tsx\\nimport { useQuery } from \\"@tanstack/react-query\\";\\nimport axios from \\"axios\\";\\n\\ninterface Todo {\\n  id: number;\\n  title: string;\\n  userId: number;\\n  completed: boolean;\\n}\\nconst fetchTodos = () =>\\n  axios\\n    .get<Todo[]>(\\"https://jsonplaceholder.typicode.com/todos\\")\\n    .then((res) => res.data);\\n\\nconst TodoList = () => {\\n  // if (isLoading) return <p>Loading...</p>;\\n  const { isError, data, error } = useQuery<Todo[], Error>({\\n    queryKey: [\\"todos\\"],\\n    queryFn: fetchTodos,\\n  });\\n  if (isError) return <p>{error.message}</p>;\\n\\n  return (\\n    <ul className=\\"list-group\\">\\n      {data?.map((todo) => (\\n        <li key={todo.id} className=\\"list-group-item\\">\\n          {todo.title}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\\nexport default TodoList;\\n```\\n\\n\u7136\u540e\u91cd\u6784\u4e00\u4e0b\uff0c\u628a fetchdata \u76f8\u5173\u903b\u8f91\u5c01\u88c5\u5230 useTodo \u7684 hook \u91cc\u9762\u53bb\\n\\nReact Query Devtools \u5de5\u5177\\n\\n\u5b89\u88c5\\n\\n```tsx\\nnpm install @tanstack/react-query-devtools\\n```\\n\\n**\u975e\u5e38\u6709\u7528\uff01**\\n\\n\u5b66\u5230\u7684\u4e00\u4e2a\u6559\u8bad\uff1a\\n**\u4e0d\u8981\u7528 cnpm\uff0c\u78b0\u90fd\u4e0d\u8981\u78b0\uff0c\u4f1a\u53d8\u5f97\u4e0d\u5e78**\\n\u4e0d\u77e5\u9053\u7f51\u4e0a\u90a3\u4e48\u591a\u590d\u5236\u7c98\u8d34 cnpm \u7684\u81ea\u5df1\u6709\u6ca1\u6709\u7528\u8fc7\\n\\n\u8bf7\u7528 nrm\uff0c\u7136\u540e\u5728 taobao\u3001tencent \u548c sjtu \u4e09\u4e2a\u6e90\u4e0a\u6a2a\u8df3\uff0c\u4e00\u822c\u90fd\u80fd\u627e\u5f97\u5230\u5305\uff0c\u4f46\u4ed6\u4eec\u6bcf\u4e00\u4e2a\u90fd\u7f3a\u70b9\u4e1c\u897f\uff0c\u5355\u72ec\u7528\u8fd8\u662f\u4e0d\u884c\\ncnpm \u4e0b\u662f\u80fd\u4e0b\uff0c\u4e0b\u5b8c\u4e86\u5168\u662f\u4e71\u4e03\u516b\u7cdf\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u6839\u672c\u627e\u4e0d\u5230\u4fee\u7684\u65b9\u6cd5\\n\\n> cnpm \u7684\u51fa\u73b0\u4e86\u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898......react query devtools Error: No QueryClient set, use QueryClientProvider to set one\\n>\\n> \u8fd9\u4e2a\u95ee\u9898\u7528\u6b63\u5e38 npm \u4e0d\u4f1a\u51fa\u73b0\uff0c\u4e14\u7f51\u4e0a\u7684\u89e3\u51b3\u65b9\u6cd5\u5bf9 cnpm \u4e0d\u751f\u6548\\n>\\n> \u8fd8\u6709\u5c31\u662f`npm config get proxy`\u770b\u4e00\u4e0b\uff0c\u7b14\u8005\u7684 proxy \u662f null, \u5982\u679c\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u65e0\u6548\u7684 proxy\uff0c\u5916\u9762\u518d\u600e\u4e48\u6362\u6e90\u4ee3\u7406\u90fd\u662f\u6ca1\u7528\u7684\\n\\n```bash\\nnpm install -g nrm\\nnrm ls\\nnrm add https://mirrors.sjtug.sjtu.edu.cn/npm-registry\\nnrm use tencent\\n```\\n\\n\u81ea\u5b9a\u4e49 React Query \u914d\u7f6e: \u4fee\u6539 QueryClient \u5bf9\u8c61, \u4f8b\uff1a\\n\\n```tsx\\nconst queryClient = new QueryClient({\\n  defaultOptions: {\\n    queries: {\\n      cacheTime: 1000 * 60 * 5, // 5 minutes\\n      retry: 3,\\n      staleTime: 1000 * 10, // 10 seconds, After how long the data will be treated as old data.\\n    },\\n  },\\n});\\n```\\n\\n\u4e09\u79cd\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0creact query \u4f1a\u81ea\u52a8\u66f4\u65b0\u6570\u636e\uff1a\\n\\n- \u7f51\u7edc\u91cd\u8fde\\n- \u7ec4\u4ef6\u88ab\u6302\u8f7d\\n- \u7a97\u53e3\u91cd\u65b0\u805a\u7126\uff08\u5207\u5230\u4e86\u53e6\u4e00\u4e2a tab \u518d\u5207\u56de\u6765\uff09\\n\\n\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\uff0c\u5c06\u5b83\u4eec\u5173\u6389\uff0c\u5982`refetchOnWindowFocus:false`\\n\\nreact query \u5148\u7ed9\u7528\u6237\u65e7\u7684\u6570\u636e\uff08cache\uff09\uff0c\u540c\u65f6\u5411\u540e\u7aef\u8bf7\u6c42\u65b0\u6570\u636e\uff0c\u66f4\u65b0\u4e4b\u540e\u518d\u91cd\u65b0\u6e32\u67d3\\n\\n\u5f53\u7136\uff0c\u8fd9\u662f\u5168\u5c40\u7684\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e00\u4e2a query \u81ea\u5b9a\u4e49\uff0c\u5728\u4f20\u5165 useQuery \u7684\u5bf9\u8c61\u91cc\u9762\u52a0\u4e0a cacheTime\uff0cretry \u7b49\u5c5e\u6027\u5373\u53ef\\n\\n\u5b9e\u73b0\u7b5b\u9009\uff1a\\n\\n\u548c\u5148\u524d\u7684\u4e00\u6837\uff0c\u4e0d\u591a\u8d58\u8ff0\uff1b\u9996\u5148\u4f7f\u7528 useState \u548c select \u7ec4\u4ef6\u7ef4\u62a4\u9009\u62e9\u72b6\u6001\uff0c\u4e4b\u540e\u6839\u636e API \u7684\u8def\u7531\u60c5\u51b5\uff0c\u4f20\u5165\u7b5b\u9009\u5bf9\u5e94 id \u4e4b\u7c7b\u7ec4\u6210\u65b0\u7684 url\uff0c\u6539\u4e00\u4e0b queryKey \u5373\u53ef\\n\\n\u5b9e\u73b0\u5206\u9875\uff1a\\n\\n\u4e0a\u4ee3\u7801\uff0c \u601d\u8def\u662f\u5c06\u9875\u9762\u4f5c\u4e3a\u7ef4\u62a4\u7684\u53d8\u91cf\uff0c\\n\\n\u800c\u540e\u7aef\u8bf7\u6c42\u5b9e\u73b0\u53d1\u9001\u4ece `\\\\_start`\u5f00\u59cb\u6570\u76ee\u4e3a \xa0`\\\\_limit`\u7684\u6570\u636e\\n\\n\u5373\u5206\u9875\u5b8c\u5168\u662f\u524d\u7aef\u7684\u5de5\u4f5c\uff0c\u540e\u7aef\u53ea\u8d1f\u8d23\u53d1\u6570\u636e\\n\\n\u4e0a\u4e00\u9875\u6309\u94ae\u9700\u8981\u5728\u9875\u9762\u4e3a 1 \u662f disable\\n\\n\u7136\u540e\u4e3a\u4e86\u7528\u6237\u4f53\u9a8c\uff0c\u5728 useQuery \u91cc\u9762\u52a0\u4e0a `keepPreviousData: true`, \u4f7f\u5f97\u5728 loading \u7684\u65f6\u5019\u7ed9\u7528\u6237\u7f13\u5b58\u7684\u5148\u524d\u7ed3\u679c\u800c\u4e0d\u662f\u4e00\u4e2a loading\\n\\nusePost.tsx\\n\\n```tsx\\nimport axios from \\"axios\\";\\nimport { useQuery } from \\"@tanstack/react-query\\";\\n\\ninterface Post {\\n  id: number;\\n  title: string;\\n  body: string;\\n  userId: number;\\n}\\nexport interface PostQuery {\\n  pagesize: number;\\n  page: number;\\n}\\nconst fetchPosts = <Post,>(params: PostQuery) =>\\n  axios\\n    .get<Post>(\\"https://jsonplaceholder.typicode.com/todos\\", {\\n      params: {\\n        _start: (params.page - 1) * params.pagesize,\\n        _limit: params.pagesize,\\n      },\\n    })\\n    .then((res) => res.data);\\n\\nconst usePosts = (query: PostQuery) => {\\n  return useQuery<Post[], Error>({\\n    queryKey: [\\"posts\\", query],\\n    queryFn: () => fetchPosts(query),\\n    keepPreviousData: true,\\n    cacheTime: 1000 * 60 * 5, // 5 minutes\\n    retry: 3,\\n    staleTime: 1000 * 10,\\n  });\\n};\\nexport default usePosts;\\n```\\n\\nPostList.tsx\\n\\n```tsx\\nimport { useState } from \\"react\\";\\nimport usePosts, { PostQuery } from \\"./components/usePosts\\";\\n\\nconst PostList = () => {\\n  const [query, setQuery] = useState<PostQuery>({ page: 1, pagesize: 10 });\\n  const { error, data: posts, isError, isLoading } = usePosts(query);\\n\\n  if (error) return <p>{error.message}</p>;\\n\\n  return (\\n    <>\\n      {isLoading && <p>Loading...</p>}\\n      <ul className=\\"list-group\\">\\n        {posts?.map((post) => (\\n          <li key={post.id} className=\\"list-group-item\\">\\n            {post.title}\\n          </li>\\n        ))}\\n      </ul>\\n      <button\\n        className=\\"btn btn-primary mb-3 ms-1 my-3 \\"\\n        disabled={query.page === 1}\\n        onClick={() => setQuery({ ...query, page: query.page - 1 })}\\n      >\\n        Prev\\n      </button>\\n      <button\\n        className=\\"btn btn-primary mb-3 ms-1 my-3\\"\\n        onClick={() => setQuery({ ...query, page: query.page + 1 })}\\n      >\\n        Next\\n      </button>\\n    </>\\n  );\\n};\\n\\nexport default PostList;\\n```\\n\\n\u5b9e\u73b0\u65e0\u9650\u9875\u9762\uff08Load More\uff09\\n\\n\u4f7f\u7528 React Query \u81ea\u5e26\u7684 useInfiniteQuery \u66ff\u4ee3 useQuery\\n\\n\u5177\u4f53\u7684\u65b9\u6cd5\u5982\u4e0b\\n\\nPostList.tsx\\n\\n```tsx\\nimport { useState } from \\"react\\";\\nimport usePosts, { PostQuery } from \\"./components/usePosts\\";\\n\\nconst PostList = () => {\\n  const [query, setQuery] = useState<PostQuery>({ pagesize: 10, pageparam: 1 });\\n  const {\\n    error,\\n    data: posts,\\n    isError,\\n    isLoading,\\n    fetchNextPage,\\n    isFetching,\\n  } = usePosts(query);\\n\\n  if (error) return <p>{error.message}</p>;\\n\\n  return (\\n    <>\\n      {isLoading && <p>Loading...</p>}\\n      <ul className=\\"list-group\\">\\n        {posts?.pages.map((post, index) => (\\n          <>\\n            {post.map((item) => (\\n              <li key={index} className=\\"list-group-item\\">\\n                {item.title}\\n              </li>\\n            ))}\\n          </>\\n        ))}\\n      </ul>\\n      <button\\n        className=\\"btn btn-primary mb-3\\"\\n        onClick={() => fetchNextPage()}\\n        disabled={isFetching}\\n      >\\n        {isFetching ? \\"Loading\\" : \\"Load more\\"}\\n      </button>\\n    </>\\n  );\\n};\\n\\nexport default PostList;\\n```\\n\\nusePosts.tsx\\n\\n```tsx\\nimport useData from \\"./hooks\\";\\nimport axios from \\"axios\\";\\nimport { useInfiniteQuery, useQuery } from \\"@tanstack/react-query\\";\\n\\ninterface Post {\\n  id: number;\\n  title: string;\\n  body: string;\\n  userId: number;\\n}\\nexport interface PostQuery {\\n  pagesize: number;\\n  pageparam: number;\\n}\\nconst fetchPosts = <Post,>(params: PostQuery) =>\\n  axios\\n    .get<Post>(\\"https://jsonplaceholder.typicode.com/todos\\", {\\n      params: {\\n        _start: (params.pageparam - 1) * params.pagesize,\\n        _limit: params.pagesize,\\n      },\\n    })\\n    .then((res) => res.data);\\n\\nconst usePosts = (query: PostQuery) => {\\n  return useInfiniteQuery<Post[], Error>({\\n    queryKey: [\\"posts\\", query],\\n    queryFn: () => fetchPosts({ ...query, pageparam: 1 }),\\n    keepPreviousData: true,\\n    cacheTime: 1000 * 60 * 5, // 5 minutes\\n    retry: 3,\\n    staleTime: 1000 * 10,\\n    getNextPageParam: (lastPage, allPages) => {\\n      return lastPage.length > 0 ? allPages.length + 1 : undefined;\\n      // \u6b64\u5904\u7528\u5230\u4e86json\u7684\u7279\u6027\uff1a\u5f53\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2aallPages\u6570\u7ec4\u4e4b\u4e2d\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff08\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\uff09\uff0c\u4f1a\u8fd4\u56de\u7a7a\u6570\u7ec4\\n      // \u6b64\u65f6lastPage\u7684length\u4e3a0\\n    },\\n  });\\n};\\nexport default usePosts;\\n```\\n\\n---\\n\\n#### mutation\\n\\n```tsx\\nconst queryClient = useQueryClient();\\nconst mutation = useMutation({\\n  mutationFn: (todo: Todo) =>\\n    axios\\n      .post<Todo>(\\"https://jsonplaceholder.typicode.com/todos\\")\\n      .then((res) => res.data),\\n  onSuccess: (savedData, newData) => {\\n    // Approach 1: invalidate the cache and refetch the data, unable to deal with fake backend\\n    // queryClient.invalidateQueries({ queryKey: [\\"todos\\"] });\\n    // Approach 2: reset query data in cache\\n    queryClient.setQueryData<Todo[]>([\\"todos\\"], (oldTodos) => [\\n      newData,\\n      ...(oldTodos || []),\\n    ]);\\n  },\\n});\\n```\\n\\nuseMutation hook \u6709\u51e0\u4e2a\u91cd\u8981\u5c5e\u6027\uff1a\\n\\n- mutationFn: \u5728\u8c03\u7528 mutation.mutate \u65b9\u6cd5\u7684\u65f6\u5019\u8c03\u7528\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u6267\u884c\u5411\u670d\u52a1\u5668\u7684\u64cd\u4f5c\uff0c\u63a5\u53d7\u4e00\u4e2a object \u4f5c\u4e3a\u53c2\u6570\\n- onSuccess: mutationFn \u6210\u529f\u7684\u60c5\u51b5\u4e0b\u7684\u56de\u8c03\u51fd\u6570\uff0c\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 data \u662f mutate \u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c**\u7b2c\u4e8c\u4e2a\u53c2\u6570**variable \u662f\u4f20\u9012\u7ed9 mutate \u51fd\u6570\u7684\u503c\uff0c\u5728**\u8fd9\u91cc\u5c31\u662f\u65b0\u7684 Todo \u5143\u7d20**\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f onMutate \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\\n\\n---\\n\\n#### Refactor: ApiClient\\n\\n\u4e4b\u524d\u7684\u4ee3\u7801\u6709\u8026\u5408\u7684\u95ee\u9898\uff0c\u7f51\u7edc\u76f8\u5173\u7684\u903b\u8f91\u4e0d\u5e94\u8be5\u51fa\u73b0\u5728\u81ea\u5b9a\u4e49 Hook \u4e4b\u4e2d\uff0c\u5e76\u4e14\u8fd9\u4e00\u6bb5\u4ee3\u7801\u8fd8\u591a\u6b21\u91cd\u590d\\n\\n\u5728\u521d\u7ea7\u90e8\u5206\u4e4b\u4e2d\uff0c\u6211\u4eec\u7528\u4e8e\u89e3\u8026\u5408\u7684 ApiClient \u6a21\u5757\u53ea\u662f\u7b80\u77ed\u7684\\n\\n```tsx\\nimport axios from \\"axios\\";\\n\\nconst ApiClient = axios.create({\\n  baseURL: \\"https://api.rawg.io/api\\",\\n  params: { key: \\"c93352ea62ed4c7d9095e81593af922f\\" },\\n});\\n\\nexport default ApiClient;\\n```\\n\\n\u800c\u5728\u4e2d\u7ea7\u90e8\u5206\u4e4b\u4e2d\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u7ed9\u5b83\u5b8c\u5584\u4e00\u4e0b\uff0c\u53d8\u6210\u4e00\u4e2a\u7c7b, \u4f8b\u5982\uff1a\\n\\n```tsx\\nimport axios, { Axios, AxiosRequestConfig } from \\"axios\\";\\n\\nconst apiClientInstance = axios.create({\\n  baseURL: \\"https://jsonplaceholder.typicode.com\\",\\n});\\n\\nclass ApiClient<T> {\\n  endpoint: string;\\n  constructor(endpoint: string) {\\n    this.endpoint = endpoint;\\n  }\\n  getAll(params?: any) {\\n    const config: AxiosRequestConfig = {\\n      url: this.endpoint,\\n      method: \\"GET\\",\\n      params: params,\\n    };\\n    const data = apiClientInstance\\n      .get<T[]>(this.endpoint, config)\\n      .then((res) => res.data);\\n    return data;\\n  }\\n  post(data: T) {\\n    const config: AxiosRequestConfig = {\\n      url: this.endpoint,\\n      method: \\"POST\\",\\n      data: data,\\n    };\\n    const dataResponse = apiClientInstance\\n      .post<T>(this.endpoint, data, config)\\n      .then((res) => res.data);\\n    return dataResponse;\\n  }\\n}\\nexport default ApiClient;\\n```\\n\\n\u4e4b\u540e\u6211\u4eec\u7684 useTodos \u548c usePosts \u4e24\u4e2a\u81ea\u5b9a\u4e49 Hook \u7684\u4ee3\u7801\u903b\u8f91\u5c31\u53ef\u4ee5\u5927\u5e45\u5ea6\u7b80\u5316\u4e86\\n\\n\u4f8b\u5982 useTodos\\n\\n```tsx\\nimport { useQuery } from \\"@tanstack/react-query\\";\\nimport ApiClient from \\"../service/ApiClient\\";\\n\\nexport interface Todo {\\n  id: number;\\n  title: string;\\n  userId: number;\\n  completed: boolean;\\n}\\ninterface TodoQuery {\\n  pagesize: number;\\n  page: number;\\n}\\n\\nconst fetchTodos = () => {\\n  const ApiClientInstance = new ApiClient<Todo>(\\"/todos\\");\\n  const data = ApiClientInstance.getAll();\\n  return data;\\n};\\n\\nconst useTodos = () => {\\n  return useQuery<Todo[], Error>({ queryKey: [\\"todos\\"], queryFn: fetchTodos });\\n};\\nexport default useTodos;\\n```\\n\\n\u4e00\u884c\u4ee3\u7801`debugger;` \u4f1a\u5728\u8fd9\u91cc\u505c\u6b62\\n\\n**\u6ce8\u610f\uff1a\u8fd9\u91cc\u56e0\u4e3a\u6211\u4f20\u9012\u7684\u662f fetchTodos \u800c\u4e0d\u662f ApiClientInstance.getAll, \u6240\u4ee5 getAll \u65b9\u6cd5\u88ab\u9690\u5f0f\u5730\u7ed1\u5b9a\u5230\u5bf9\u8c61\u4e0a\u4e86\uff1b\u5982\u679c\u4f20\u9012 ApiClientInstance.getAll, \u4f1a\u51fa\u73b0 this \u4e22\u5931\u7684\u60c5\u51b5\u3002\u8981\u4e00\u52b3\u6c38\u9038\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e24\u4e2a\u65b9\u6cd5**\\n\\n- \u5c06`useQuery`\u7684`queryFn`\u6539\u6210`ApiClientInstance.getAll.bind(ApiCilentInstance)`,\u4f7f\u7528 bind \u663e\u5f0f\u6307\u5b9a\u8fd9\u4e2a\u65b9\u6cd5\u5c5e\u4e8e ApiClientInstance\\n- \u5c06 getAll \u7b49\u65b9\u6cd5\u4ece\u4e00\u822c\u7684\u51fd\u6570\u6539\u4e3a\u7bad\u5934\u51fd\u6570\uff0c\u5982 `getAll<T>{...}`\u6539\u5199\u6210`getAll\\\\<T\\\\>=()=>{...}`\\n\\n\u539f\u7406\uff1a\\n\\n\u7bad\u5934\u51fd\u6570\u6ca1\u6709\u81ea\u5df1\u7684 this \u4e0a\u4e0b\u6587\uff0c\u5b83\u7684 this**\u662f\u7ee7\u627f\u4e8e\u5b9a\u4e49\u65f6\u7684\u4e0a\u4e0b\u6587\uff08\u4e0a\u7ea7\u5bf9\u8c61\uff09\u7684**\\n\\n\u4f8b\u5982\\n\\n```tsx\\nconst obj = {\\n  value: \\"hello\\",\\n  print: () => {\\n    console.log(this.value);\\n  },\\n};\\n\\nobj.print(); // undefined\\n```\\n\\n\u6b64\u5904\uff0c**this \u4e0d\u4f1a\u88ab\u7ed1\u5b9a\u5230\u8c03\u7528\u65f6\u7684\u4e0a\u4e0b\u6587 obj\uff0c\u800c\u662f\u4f1a\u88ab\u7ed1\u5b9a\u5230\u5b9a\u4e49\u65f6\u7684\u4e0a\u4e0b\u6587\uff08\u5168\u5c40\u4f5c\u7528\u57df\uff09\uff0c\u6240\u8c13\u4e0a\u4e0b\u6587\u53ef\u4ee5\u7528\u6808\u5e27 frame \u6765\u7406\u89e3**\\n\\n**\u800c\u5bf9\u4e8e\u4e00\u4e2a class \u7684\u65b9\u6cd5, \u7bad\u5934\u51fd\u6570\u7ed1\u5b9a\u5230\u5b9a\u4e49\u65f6\u7684\u4e0a\u4e0b\u6587\uff08\u8fd9\u4e2a\u7c7b\uff09\uff0c\u800c\u975e\u7bad\u5934\u51fd\u6570\u4f1a\u6839\u636e\u8c03\u7528\u65f6\u7684\u4e0a\u4e0b\u6587\u6765\u51b3\u5b9a this**\\n\\n**\u5982\u679c\u53ea\u662f\u7b80\u5355\u7684\u8c03\u7528\uff0c\u90a3\u4e48\u4e24\u8005\u7684\u7ed3\u679c\u662f\u76f8\u540c\u7684\u3002\u4f46\u662f\u5982\u679c\u5c06\u7c7b\u7684\u975e\u7bad\u5934\u51fd\u6570\u65b9\u6cd5\u4f5c\u4e3a\u56de\u8c03\u51fd\u6570\u4f20\u9012\uff0c\u4f8b\u5982\u4f20\u7ed9\u4e00\u4e2a\u53c2\u6570\u6216\u8005\u662f\u5176\u4ed6\u91cf const sth = instance.method \u8fd9\u6837\uff0c\u4f1a\u9020\u6210 this \u9519\u8bef\u7ed1\u5b9a**\\n\\n\u7ee7\u7eed\u91cd\u6784\\n\\n\u76ee\u524d endpoint \u5982\u679c\u5199\u9519\u4e86\u8fd8\u662f\u5f88\u9ebb\u70e6\uff0c\u5e76\u4e14 type \u662f\u5b9a\u4e49\u5728 hooks \u4e4b\u4e2d\u7684\uff0c\u8fd9\u4e0d\u597d\u3002\u628a type \u548c endpoint \u62bd\u51fa\u6765\u653e\u5728 service \u4e4b\u4e2d\\n\\n```tsx\\nimport ApiClient from \\"./ApiClient\\";\\n\\nexport interface Post {\\n  id: number;\\n  title: string;\\n  body: string;\\n  userId: number;\\n}\\n\\nconst postService = new ApiClient<Post>(\\"/posts\\");\\nexport default postService;\\n```\\n\\n**\u8fd9\u6837\u91cd\u6784\u5b9e\u9645\u4e0a\u662f\u5728\u7ed9\u6574\u4e2a\u5e94\u7528\u5206\u5c42**\\n\\n- \u6700\u5e95\u5c42\u662f ApiClient\uff0c \u8d1f\u8d23\u5904\u7406\u5411\u540e\u7aef\u53d1\u9001\u8bf7\u6c42\\n- \u4e0a\u9762\u662f HTTPService\uff0c\u672c\u8d28\u4e0a\u662f ApiClient \u7684\u5b9e\u4f8b\uff0c\u540c\u65f6\uff0c\u4e0d\u540c\u7684 Service \u4e3a\u4e0a\u7aef\u4e0d\u540c\u7684\u529f\u80fd\u5b9a\u4e49\u6700\u57fa\u672c\u7684\u7c7b\u578b\\n- \u518d\u4e0a\u9762\u662f Custom Hook, \u5c06\u5bf9\u5e94\u7684 HTTPService \u7684\u6570\u636e\u8fdb\u4e00\u6b65\u6253\u5305\u6210\u57fa\u672c\u7684\u5de5\u5177\u65b9\u6cd5\\n- \u6700\u4e0a\u9762\u624d\u662f\u6211\u4eec\u7684 React Components\uff0c\u771f\u6b63\u7684\u524d\u7aef\\n\\n\u5206\u5c42\u7684\u6838\u5fc3\u903b\u8f91\u5728\u4e8e\uff1a**\u4e00\u5c42\u53ea\u5e72\u4e00\u4ef6\u4e8b\u60c5**\uff0c\u5904\u7406\u597d\u81ea\u5df1\u90a3\u4e00\u5c42\u7684\u8f93\u5165\u8f93\u51fa\u5373\u53ef\uff0c\u8ba9\u6211\u4eec\u7684\u4ee3\u7801\u89e3\u8026\u3001\u6613\u61c2\\n\\n### \u5b9e\u6218\\n\\n#### Genres\\n\\n\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u6309\u7167\u524d\u9762\u8bf4\u7684\u91cd\u6784\u5c31\u884c\uff0c\u5728 React Query \u91cc\u9762\u8bbe\u7f6e initialData \u5012\u662f\u4e00\u4e2a\u503c\u5f97\u8bb0\u4f4f\u7684\u6548\u679c\u5b9e\u73b0\\n\\nuseGenre.tsx\\n\\n```tsx\\nimport genres from \\"../data/genres\\";\\nimport useData, { queryConfig } from \\"./useData\\";\\n\\nexport interface Genre {\\n  id: number;\\n  name: string;\\n  image_background: string;\\n}\\n\\n// const useGenres = () => ({ data: genres, isLoading: false, error: null })\\nconst useGenres = () => {\\n  const queryConfig = {\\n    cacheTime: 24 * 60 * 60 * 1000,\\n    staleTime: 24 * 60 * 60 * 1000,\\n    initialData: genres,\\n  } as queryConfig;\\n  return useData<Genre>({ endpoint: \\"/genres\\", queryConfig: queryConfig });\\n};\\nexport default useGenres;\\n```\\n\\nuseData.tsx\\n\\n```tsx\\nimport ApiClient from \\"../services/api-client\\";\\nimport { AxiosRequestConfig, CanceledError } from \\"axios\\";\\nimport { useQuery } from \\"@tanstack/react-query\\";\\nexport type queryConfig = {\\n  [key: string]: any;\\n};\\ntype useDataProps = {\\n  endpoint: string;\\n  config?: AxiosRequestConfig;\\n  dep?: any[];\\n  queryConfig?: queryConfig;\\n};\\nconst useData = <T,>({ endpoint, config, dep, queryConfig }: useDataProps) => {\\n  const apiClient = new ApiClient<T>(endpoint, config);\\n  return useQuery({\\n    queryKey: [endpoint].concat(dep || []),\\n    queryFn: apiClient.get,\\n    ...queryConfig,\\n  });\\n};\\nexport default useData;\\n```\\n\\n\u5b9e\u73b0\u65e0\u9650\u6eda\u52a8\\n\\n```bash\\n npm i react-infinite-scroll-component@6.1\\n```\\n\\n\u540e\u9762\u903b\u8f91\u6bd4\u8f83\u91cd\u590d\\n\\n\u7b80\u5316\u65f6\u95f4\u8868\u8fbe\uff1a ms \u5e93\uff0c\u975e\u5e38\u7b80\u5355\\n\\n---\\n\\n### Global state management\\n\\n#### Reducer\\n\\n> Reducer: A function that allows us to centralize state in a component\\n\\nReducer \u5c06 React \u7ec4\u4ef6\u7684\u72b6\u6001\u7ba1\u7406\u62bd\u79bb\u51fa\u7ec4\u4ef6\u672c\u8eab\uff0c\u4f7f\u5f97\u6574\u4e2a\u72b6\u6001\u7ba1\u7406\u53ea\u9700\u8981\u5173\u6ce8 Reducer\uff0c\u5e76\u4e14\u652f\u6301\u7ba1\u7406\u903b\u8f91\u7684\u91cd\u7528\\n\\nreducer \u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0cstate \u548c action(\u4e00\u822c\u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u4f20\u9012\uff0c\u5176 type \u53c2\u6570\u5bf9\u5e94\u4e86\u6267\u884c\u7684\u52a8\u4f5c\uff0c\u6709\u70b9\u50cf\u72b6\u6001\u673a)\\n\\n\u76f4\u63a5\u770b\u4ee3\u7801\\n\\nreducer/counterReducer.ts\\n\\n```tsx\\ninterface Action {\\n  type: \\"INCREMENT\\" | \\"DECREMENT\\" | \\"RESET\\";\\n}\\nconst counterReducer = (state: number, action: Action) => {\\n  switch (action.type) {\\n    case \\"INCREMENT\\":\\n      return state + 1;\\n    case \\"DECREMENT\\":\\n      return state - 1;\\n    case \\"RESET\\":\\n      return 0;\\n    default:\\n      return state;\\n  }\\n  return state;\\n};\\nexport default counterReducer;\\n```\\n\\ncounter.tsx\\n\\n```tsx\\nimport { useReducer, useState } from \\"react\\";\\nimport counterReducer from \\"./reducers/counterReducer\\";\\n\\nconst Counter = () => {\\n  // const [value, setValue] = useState(0);\\n  const [value, dispatch] = useReducer(counterReducer, 0);\\n  return (\\n    <div>\\n      Counter ({value})\\n      <button\\n        onClick={() => dispatch({ type: \\"INCREMENT\\" })}\\n        className=\\"btn btn-primary mx-1\\"\\n      >\\n        Increment\\n      </button>\\n      <button\\n        onClick={() => dispatch({ type: \\"RESET\\" })}\\n        className=\\"btn btn-primary mx-1\\"\\n      >\\n        Reset\\n      </button>\\n    </div>\\n  );\\n};\\n\\nexport default Counter;\\n```\\n\\n\u5f53\u6267\u884c\u7684\u4efb\u52a1\u53d8\u590d\u6742\u65f6\uff0c\u9700\u8981\u591a\u4e2a\u63a5\u53e3\uff1a\\n\\n\u4f8b\u5982\\n\\n```tsx\\ninterface Task {\\n  id: number;\\n  title: string;\\n}\\n\\ninterface AddTask {\\n  type: \\"ADD\\";\\n  newTask: Task;\\n}\\ninterface DeleteTask {\\n  type: \\"DELETE\\";\\n  id: number;\\n}\\n\\ntype Action = AddTask | DeleteTask;\\n\\nconst taskReducer = (state: Task[], action: Action): Task[] => {\\n  switch (action.type) {\\n    case \\"ADD\\":\\n      return [...state, action.newTask];\\n    case \\"DELETE\\":\\n      return state.filter((task) => task.id !== action.id);\\n    default:\\n      return state;\\n  }\\n};\\nexport default taskReducer;\\n```\\n\\n#### React Context\\n\\n\u5728\u521d\u7ea7\u90e8\u5206\u4e4b\u4e2d\uff0cReact \u7ec4\u4ef6\u4e4b\u95f4\u5171\u4eab\u72b6\u6001\u662f\u901a\u8fc7 props**\u81ea\u4e0a\u800c\u4e0b\u4f20\u9012\u7684**\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u8981\u5728\u7ec4\u4ef6\u6811\u4e0a\u7684\u4e24\u4e2a\u90e8\u5206\u4e4b\u95f4\u5171\u4eab\u67d0\u4e2a\u72b6\u6001\uff0c\u5c31\u5fc5\u987b\u5c06\u8fd9\u4e2a\u72b6\u6001\u4e0a\u79fb\u5230\u516c\u5171\u7236\u7ec4\u4ef6\uff0c\u8fd9\u5bfc\u81f4\u4e86\u51e0\u4e2a\u95ee\u9898\\n\\n1. \u5982\u679c\u516c\u5171\u7236\u7ec4\u4ef6\u5f88\u8fdc\uff0c\u5373\u7ec4\u4ef6\u5c42\u6570\u5f88\u6df1\uff0c\u90a3\u4e48 Props \u8981\u4f20\u9012\u5f88\u591a\u5c42\uff0c\u975e\u5e38\u6076\u5fc3\\n\\n2. \u5982\u679c\u7ec4\u4ef6\u5f88\u591a\uff0c\u90a3\u4e48\u7c7b\u4f3c App \u8fd9\u6837\u7684\u9876\u5c42\u7236\u7ec4\u4ef6\u5c31\u4f1a\u5168\u90fd\u662f\u72b6\u6001\uff0c\u5f71\u54cd\u7406\u89e3\\n\\n\u8fd9\u79cd\u95ee\u9898\u79f0\u4e4b\u4e3a Props drilling\uff0c\u6307 Props \u628a\u7ec4\u4ef6\u94bb\u4e86\u4e00\u5806\u5b54\\n\\n\u4f46\u662f\u6211\u4eec\u5148\u524d\u4e5f\u6709\u63d0\u5230\uff0cReact \u7684 State \u5b9e\u8d28\u4e0a\u662f\u5168\u5c40\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u80fd\u591f\u63d0\u4f9b\u4e00\u79cd\u66f4\u597d\u7684\u673a\u5236\u6765\u5b9e\u73b0\u4e0d\u540c\u7ec4\u4ef6\u4e4b\u95f4\u7684\u72b6\u6001\u5171\u4eab\uff0c\u8fd9\u5c31\u662f React Context\\n\\nReact Context \u89e3\u51b3\u4e86\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5bf9\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5e2e\u52a9\u8f83\u5c0f\\n\\ncontext/taskContext.ts\\n\\n```tsx\\nimport React from \\"react\\";\\nimport { Action, Task } from \\"../reducers/taskReducers\\";\\n\\ninterface TaskContextType {\\n  tasks: Task[];\\n  dispatch: React.Dispatch<Action>;\\n}\\n\\nexport const TaskContext = React.createContext<TaskContextType>(\\n  {} as TaskContextType\\n);\\n```\\n\\n\u6709\u4e86\u8fd9\u4e2a TaskContext \u4e4b\u540e\uff0c\\n\\n\u53ea\u9700\u8981\u5728\u60f3\u4f20\u9012\u7684\u4f4d\u7f6e\u7528\u5b83\u7684 Provider \u5305\u88f9\u5c31\u884c\\n\\n```tsx\\nfunction App() {\\n  const [tasks, dispatch] = useReducer(taskReducer, []);\\n  return (\\n    <TaskContext.Provider value={{ tasks, dispatch }}>\\n      <NavBar />\\n      <HomePage />\\n    </TaskContext.Provider>\\n  );\\n}\\n```\\n\\n\u4e4b\u540e\u5728 NavBar \u91cc\u9762\u5c31\u53ef\u4ee5\u76f4\u63a5\\n\\n```tsx\\nconst { tasks, dispatch } = useContext(TaskContext);\\n```\\n\\nprovider \u4e00\u591a\uff0c\u4ee3\u7801\u7565\u4e11\\n\\n\u53ef\u4ee5\u628a provider \u53d8\u6210\u4e00\u4e2a Components**\uff08Custom Provider\uff09**\\n\\n```tsx\\nimport React, { useReducer } from \\"react\\";\\nimport taskReducer from \\"./reducers/taskReducers\\";\\nimport { TaskContext } from \\"./contexts/taskContext\\";\\ninterface TaskProviderProps {\\n  children: React.ReactNode;\\n}\\nconst TaskProvider = ({ children }: TaskProviderProps) => {\\n  const [tasks, dispatch] = useReducer(taskReducer, []);\\n  return (\\n    <TaskContext.Provider value={{ tasks, dispatch }}>\\n      {children}\\n    </TaskContext.Provider>\\n  );\\n};\\n\\nexport default TaskProvider;\\n```\\n\\n\u7136\u540e App \u5c31\u53d8\u6210\u4e86\u7b80\u6d01\u7684\u6837\u5b50\\n\\n```tsx\\nimport \\"./App.css\\";\\nimport NavBar from \\"./state-management/NavBar\\";\\nimport HomePage from \\"./state-management/HomePage\\";\\nimport AuthProvider from \\"./state-management/AuthProvider\\";\\nimport TaskProvider from \\"./state-management/TaskProvider\\";\\n\\nfunction App() {\\n  return (\\n    <AuthProvider>\\n      <TaskProvider>\\n        <NavBar />\\n        <HomePage />\\n      </TaskProvider>\\n    </AuthProvider>\\n  );\\n}\\n\\nexport default App;\\n```\\n\\n\u4e5f\u53ef\u4ee5\u5c06\u6574\u4e2a useConText \u653e\u5230\u81ea\u5b9a\u4e49 Hook \u91cc\u9762\u53bb\uff0c\u8fdb\u4e00\u6b65\u51cf\u8f7b\u5fc3\u667a\u538b\u529b\uff0c\u53ea\u9700\u8981\u8c03\u81ea\u5df1\u7684 Hook \u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981\u8003\u8651\u4e0a\u4e0b\u6587\\n\\n#### **\u8ba9\u6574\u4e2a\u4ee3\u7801\u66f4\u52a0\u6a21\u5757\u5316**\\n\\n\u6211\u4eec\u73b0\u5728\u6709 TaskList, taskContext, TaskProvider,taskReducer\uff0cuseTask 5 \u4e2a\u548c task \u76f8\u5173\u7684\u6587\u4ef6\\n\\n\u4f46\u662f\u5b83\u4eec\u6563\u843d\u5728\u6574\u4e2a\u9879\u76ee\u7684\u5404\u4e2a\u5730\u65b9\uff0c\u5bf9\u4e8e task \u8fd9\u4e48\u4e00\u4e2a\u5c0f\u529f\u80fd\u90fd\u5199\u4e86 5 \u4e2a\u6587\u4ef6\uff0c\u4e00\u65e6\u529f\u80fd\u591a\u8d77\u6765\uff0c**\u6587\u4ef6\u91cf\u7684\u589e\u52a0\u4f1a\u52a0\u5de8\u8026\u5408**\uff0c\u4e5f\u5bf9\u6211\u4eec\u627e\u548c\u7406\u89e3\u5e26\u6765\u5fc3\u667a\u8d1f\u62c5\\n\\n\u628a\u5b83\u4eec\u653e\u5230\u4e00\u8d77\u53bb\uff0c\u65b0\u5efa\u4e00\u4e2a task \u6587\u4ef6\u5939\uff0c\u5168\u4e22\u8fdb\u53bb\\n\\ntask \u6587\u4ef6\u5939\u5185\u90e8\u662f task \u6a21\u5757\u7684\u5b9e\u73b0\uff0c\u800c\u6574\u4e2a\u6a21\u5757\u7684\u5b9e\u73b0\u4e0d\u662f\u6240\u6709\u7684\u90fd\u9700\u8981\u66b4\u9732\u5728\u5916\u9762\u7684\\n\\n\u8981\u66b4\u9732\u7684\u53ea\u6709\\n\\n- TaskList\\n- [optional] TaskProvider\\n\\n\u5269\u4e0b\u7684\u4e4b\u4e2d\uff0cuseTask hook \u548c taskReducer \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5e94\u8be5\u53ea\u5728 Task \u6a21\u5757\u5185\u90e8\u4f7f\u7528\uff0ctaskContext \u88ab\u5305\u88c5\u8fdb\u4e86 TaskProvider\\n\\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u518d\u52a0\u4e00\u4e2a index.ts \uff0c\u5176\u4e2d\u5bfc\u5165 TaskList \u548c TaskProvider \u518d\u5bfc\u51fa\uff0c\u800c\u5916\u90e8\u6a21\u5757\u4f7f\u7528 Task \u6a21\u5757\u7684\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u4ece Task \u6587\u4ef6\u5939\u5bfc\u5165\uff08\u8f6c\u5230 index\uff09\uff0c**\u4e0d\u5e94\u8be5\u89e6\u53ca\u5185\u90e8\u7ed3\u6784\u548c\u5185\u90e8\u5b9e\u73b0**\\n\\ntask/index.ts\\n\\n```tsx\\nimport TaskList from \\"./TaskList\\";\\nimport TaskProvider from \\"./TaskProvider\\";\\nexport { TaskList, TaskProvider };\\n```\\n\\n#### Best practice: When to use ......\\n\\n**When to use context?**\\n\\n\u5728\u4e00\u4e2a\u9879\u76ee\u4e4b\u4e2d\u53ef\u80fd\u6709\u5f88\u591a\u7684\u72b6\u6001\uff0c\u4f46\u8fd9\u4e9b\u72b6\u6001\u53ef\u4ee5\u5206\u89e3\u6210\\n\\n- (\u4ece)Server \u7aef\u83b7\u53d6\u7684\u72b6\u6001\uff1a\u4f8b\u5982\u6570\u636e\\n- Client UI \u72b6\u6001: \u4f8b\u5982\u7ec4\u4ef6\u7684\u4e00\u4e9b Local State\\n\\n\u4e24\u4e2a\u90e8\u5206\\n\\n**\u5bf9\u4e8e Server \u7aef\u72b6\u6001\uff0c\u4e0d\u5e94\u8be5\u7528 Context\uff0c\u7528 React Query\uff0cReact Query \u5c31\u662f\u4e3a\u4e86\u907f\u514d\u7ec4\u4ef6\u6811\u53d8\u6210\u4e00\u5927\u5768\u5c4e\u88ab\u8bbe\u8ba1\u51fa\u6765\u7684\uff0c\u4e00\u5806 Context \u548c State \u5b9e\u9645\u4e0a\u90fd\u7528 useQuery \u91cc\u9762\u7684 queryKey \u6807\u8bc6\u4e86\u4e4b\u540e\u59d4\u6258\u7ed9 React Query \u7ba1\u7406\u4e86**\u3002\u5982\u679c\u7528 Context\uff0c\u5143\u7d20\u4e00\u591a Provider \u5c31\u4f1a\u4e00\u76f4\u53e0\uff0c\u6700\u7ec8\u4e0d\u53ef\u7ef4\u62a4\\n\\n**\u800c\u5bf9\u4e8e Client \u7aef\u72b6\u6001\uff0c\u5982\u6709\u5171\u4eab\u7684\u9700\u8981\uff0c\u4f8b\u5982 Navbar \u53ef\u80fd\u9700\u8981\u7ec4\u4ef6\u6811\u5e95\u90e8\u7684\u7ec4\u4ef6\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u7528 Context \u6765\u63d0\u4f9b\u7ec4\u4ef6\u4e4b\u95f4\u4f20\u9012\u72b6\u6001\u7684\u7075\u6d3b\u6027**\\n\\n**When to use reducer?**\\n\\n\u770b\u903b\u8f91\u590d\u6742\u4e0e\u5426\uff0c\u5982\u679c\u903b\u8f91\u5f88\u590d\u6742\uff0c\u653e\u5728\u7ec4\u4ef6\u91cc\u5f88\u4e11\u964b\uff0c\u96be\u4ee5\u7406\u89e3\uff0c\u64cd\u4f5c\u5f88\u591a\u8fd8\u5bb9\u6613\u51fa\u9519\u7684\u65f6\u5019\uff0c\u5c31\u5e94\u8be5\u7528 reducer \u628a\u903b\u8f91\u72ec\u7acb\u51fa\u6765\\n\\n\u5982\u679c\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u5c31\u4e00\u884c\u4ee3\u7801\u7684\u4e8b\u60c5\uff0c\u90a3\u76f4\u63a5 useState \u4e5f\u633a\u597d\\n\\n**When to use Redux?**\\n\\nRedux \u548c React Context \u4e0d\u540c\u7684\u5730\u65b9\u662f\uff0cRedux \u662f\u4e00\u4e2a\u5c06\u6240\u6709\u7ec4\u4ef6\u7684\u72b6\u6001\u5168\u90e8\u4ea4\u7ed9 Redux \u7ba1\u7406\uff0c\u8fd9\u6837\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u548c React \u89e3\u8026\u3001\u66f4\u597d\u7684\u7ba1\u7406\u72b6\u6001......\uff1b\u800c React Context \u53ea\u662f\u628a\u72b6\u6001\u5728\u7ec4\u4ef6\u4e4b\u95f4\u66f4\u597d\u7684\u4f20\u9012\u3002\u4e00\u4e2a\u662f\u4ed3\u5e93\uff0c\u4e00\u4e2a\u662f\u5361\u8f66\u3002\\n\\nmosh \u7ed9\u51fa\u7684\u89c2\u70b9\u662f\uff0cRedux \u5f88\u5f3a\u5927\uff0c\u4f46\u4e3a\u4e86\u652f\u6301\u90a3\u4e9b\u5f3a\u5927\uff08\u5374\u672a\u5fc5\u7528\u5f97\u4e0a\uff09\u7684\u529f\u80fd\uff08\u4f8b\u5982\u64a4\u9500\uff09\uff0c\u53cd\u800c\u5728\u5927\u591a\u6570\u4e0d\u9700\u8981\u7684\u9879\u76ee\u4e4b\u4e2d\u5e26\u6765\u4e86\u592a\u591a\u7684\u590d\u6742\u6027\\n\\n\u5728 Server \u7aef\uff0cReact Query \u5df2\u7ecf\u8db3\u591f\u597d\u7528\uff0c\u5e76\u4e14\u5927\u5927\u7b80\u5316\u4e86 Redux \u7684\u529f\u80fd\\n\\n\u5728 Client \u7aef\uff0c\u9996\u5148\u4e00\u822c\u7684\u5e94\u7528\u7a0b\u5e8f\u5ba2\u6237\u7aef\u72b6\u6001\u6bd4\u8f83\u5c11\uff0c\u5176\u6b21\u6709\u7b80\u5355\u7684 useState \u548c useContext, \u903b\u8f91\u590d\u6742\u65f6\u6709 reducer\uff0c\u518d\u590d\u6742 mosh \u4e5f\u63a8\u8350\u7528 Zustand \u8fd9\u4e2a\u8f7b\u91cf\u5316\u7684\u7ba1\u7406\u5668\\n\\n#### Zustand\\n\\n\u5b89\u88c5\uff1a\\n\\n```bash\\nnpm i zustand@4.3.7\\n```\\n\\nZustand \u4f7f\u7528 create \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u72b6\u6001\uff0c\u8fd4\u56de\u4e00\u4e2a React Hook\uff0c\u8fd9\u4e2a hook \u53ef\u4ee5\u5728\u4efb\u4f55\u6a21\u5757\u4e4b\u4e2d\u4f7f\u7528\\n\\n```tsx\\nimport { create } from \\"zustand\\";\\n\\ninterface CounterStore {\\n  counter: number; // states\\n  increment: () => void; // actions or methods\\n  reset: () => void;\\n}\\n\\nconst useCounter = create<CounterStore>((set) => ({\\n  counter: 0,\\n  increment: () => set((state) => ({ counter: state.counter + 1 })),\\n  reset: () => set({ counter: 0 }),\\n}));\\n\\nexport default useCounter;\\n```\\n\\ncreate \u63a5\u53d7\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u8fd9\u4e2a\u7c7b\u578b\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5176\u4e2d\u53ef\u4ee5\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u5982\u679c\u628a\u5b83\u770b\u6210\u72b6\u6001\u673a\u7684\u8bdd\u5c31\u662f state \u548c\u6539\u53d8 state \u7684 method\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f\u4e00\u4e2a set \u51fd\u6570\\n\\nset \u51fd\u6570\u6839\u636e\u63a5\u53d7\u7684\u53c2\u6570\u4e0d\u540c\u6709\u4e24\u79cd\u201c\u91cd\u8f7d\u201d\\n\\n- \u5982\u679c\u63a5\u53d7\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5c06 create \u51fa\u6765\u7684\u72b6\u6001\u7528\u8fd9\u4e2a\u65b0\u5bf9\u8c61\u66f4\u65b0\uff0c\u7c7b\u4f3c setState\\n- \u5982\u679c\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u539f\u5148\u7684 state \u4f5c\u4e3a\u4f20\u5165\u53c2\u6570\uff08**\u4f20\u5165\u53c2\u6570\u4e3a\u76d1\u542c\u5bf9\u8c61**\uff09\uff0c \u800c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5c06\u4f5c\u4e3a\u65b0\u7684 state \u66f4\u65b0\\n\\n\u8fd9\u6837\u4e4b\u540e Counter \u7684\u903b\u8f91\u5c31\u975e\u5e38\u7b80\u6d01\u4e86, \u6ca1\u6709\u4e86\u8868\u610f\u5c1a\u6709\u4e00\u4e9b\u6a21\u7cca\u7684`dispatch({type:\\"somestring\\"})`\\n\\n```tsx\\nimport { useReducer, useState } from \\"react\\";\\nimport counterReducer from \\"./counterReducer\\";\\nimport useCounter from \\"./store\\";\\n\\nconst Counter = () => {\\n  // const [value, setValue] = useState(0);\\n  // const [value, dispatch] = useReducer(counterReducer, 0);\\n  const { counter, increment, reset } = useCounter();\\n  return (\\n    <div>\\n      Counter ({counter})\\n      <button onClick={() => increment()} className=\\"btn btn-primary mx-1\\">\\n        Increment\\n      </button>\\n      <button onClick={() => reset()} className=\\"btn btn-primary mx-1\\">\\n        Reset\\n      </button>\\n    </div>\\n  );\\n};\\n\\nexport default Counter;\\n```\\n\\n**\u8fd8\u80fd\u7528\u5b83\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684 rerender**\\n\\n\u65b9\u6cd5\uff1a\u5047\u8bbe CounterStore \u8fd8\u6709\u53e6\u4e00\u4e2a\u5c5e\u6027 max, \u5728\u8c03\u7528 useCounter \u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u53ea\u60f3\u8981 Counter \u7ec4\u4ef6\u5728 counter \u7684\u503c\u6539\u53d8\u65f6\u624d\u91cd\u65b0\u6e32\u67d3\uff0c\u53ea\u9700\u8981`useCounter(s=>s.counter)`\\n\\n\u7406\u89e3\uff1a \u76f8\u5f53\u4e8e\u6539\u53d8\u4e86 create \u7684\u76d1\u542c\u5bf9\u8c61\uff08\u7c7b\u6bd4 useState\uff09\uff0c\u8fd4\u56de\u7684\u503c\u4e5f\u4f1a\u505a\u5bf9\u5e94\u6539\u53d8\uff0c\u4f46\u662f\u6574\u4e2a\u72b6\u6001\u7684\u8fd4\u56de\u503c\u4f1a\u6b63\u5e38\u66f4\u65b0\\n\\n\u5982\u679c\u76d1\u542c s.counter\uff0c\u8fd4\u56de\u7684\u5c31\u662f counter \u5c5e\u6027\\n\\n\u5982\u679c\u76d1\u542c s.reset\uff0c \u8fd4\u56de\u7684\u5c31\u662f reset \u65b9\u6cd5\\n\\n\u68c0\u67e5 Zustand \u72b6\u6001\\n\\n```bash\\nnpm i simple-zustand-devtools\\nnpm i -D @types/node\\n```\\n\\n> ps: \u8fd9\u4e2a\u5de5\u5177\u6211\u4e0b\u8f7d\u4e86\u4f46\u662f\u6ca1\u627e\u5230\u89c6\u9891\u6f14\u793a\u7684\u6a21\u5757\uff0c\u5c31\u653e\u8fd9\u4e86\uff08doge\\n\\n\u5b9e\u6218\uff1a\u4f7f\u7528 Zustand \u91cd\u6784 gamehub\\n\\n\u6240\u6709 gameQuery \u8fd9\u4e2a local state \u4f20\u6765\u4f20\u53bb\u7684\u5730\u65b9\u5168\u90e8\u5220\u5149\uff0c**\u592a\u723d\u4e86\uff01\uff01\uff01**\\n\\n**\u6709\u4e86\u8fd9\u4e2a\u51e0\u4e4e\u4e0d\u9700\u8981\u4efb\u4f55\u7684 Props**\\n\\n\u6700\u540e\u7684 app.tsx \u8d85\u7ea7\u5e72\u51c0\uff0c\u4e0d\u4f20\u5165\u4efb\u4f55\u51fd\u6570\u548c\u53d8\u91cf\\n\\n```tsx\\nimport \\"./App.css\\";\\nimport { Box, Grid, GridItem, HStack, Show } from \\"@chakra-ui/react\\";\\nimport NavBar from \\"./components/NavBar\\";\\nimport GameGrids from \\"./components/GameGrids\\";\\nimport Aside from \\"./components/Aside\\";\\nimport PlatformSelector from \\"./components/PlatformSelector\\";\\nimport SortSelector from \\"./components/SortSelector\\";\\nimport GameHeading from \\"./components/GameHeading\\";\\n\\nfunction App() {\\n  const templateAreas = {\\n    base: `\\"nav\\" \\"main\\"`, // \u79fb\u52a8\u7aef\u5c0f\u5c4f\u5e55\u6ca1\u6709aside\u4fa7\u8fb9\u680f\\n    lg: `\\"nav nav\\" \\"aside main\\"`, // > 1000px\\n  };\\n  const templateColumns = {\\n    base: \\"1fr\\",\\n    lg: \\"200px 1fr\\",\\n  };\\n\\n  return (\\n    <div className=\\"App\\">\\n      <Grid templateAreas={templateAreas} templateColumns={templateColumns}>\\n        <GridItem area=\\"nav\\">\\n          <NavBar />\\n        </GridItem>\\n        <Show above=\\"lg\\">\\n          <GridItem area=\\"aside\\" paddingX={\\"10px\\"}>\\n            <Aside />\\n          </GridItem>\\n        </Show>\\n\\n        <GridItem area=\\"main\\">\\n          <Box paddingLeft={2}>\\n            <GameHeading />\\n            <HStack spacing={5}>\\n              <PlatformSelector />\\n              <SortSelector />\\n            </HStack>\\n            <GameGrids />\\n          </Box>\\n        </GridItem>\\n      </Grid>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n```\\n\\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u5f0a\u7aef\uff1a\\n\\n**\u964d\u4f4e\u4e86\u7ec4\u4ef6\u53ef\u91cd\u7528\u6027**\uff0c\u73b0\u5728\u6240\u6709\u7684\u7ec4\u4ef6\u90fd\u4f9d\u8d56\u4e8e Store \u4e86\\n\\n\u5982\u679c\u662f\u7b80\u5355\u7684 Props\uff0c\u8fd8\u662f\u76f4\u63a5\u7236\u5b50\u7ec4\u4ef6 Props \u6216\u8005 Context \u4e4b\u7c7b\u4f20\u4f20\\n\\n### React Router\\n\\n- Setting up routes\\n- Handling Errors\\n- Navigating between pages\\n- Dynamic routes\\n- Nested routes\\n- Private routes\\n\\n\u5b89\u88c5\\n\\n```bash\\nnpm i react-router-dom\\n```\\n\\n\u5b83\u7684\u7248\u672c\u517c\u5bb9\u6bd4\u8f83\u55ef\u55ef\uff0c\u6240\u4ee5\u6700\u597d\u63d0\u524d\u9009\u597d\u7248\u672c\uff08\\n\\n#### \u6700\u57fa\u672c\u7684 router\\n\\n```tsx\\nimport { createBrowserRouter } from \\"react-router-dom\\";\\nimport HomePage from \\"./HomePage\\";\\nimport UserListPage from \\"./UserListPage\\";\\nconst router = createBrowserRouter([\\n  {\\n    path: \\"/\\",\\n    element: <HomePage />,\\n  },\\n  {\\n    path: \\"/users\\",\\n    element: <UserListPage />,\\n  },\\n]);\\n\\nexport default router;\\n```\\n\\n\u7136\u540e\uff0c\u5728 main.tsx \u4e4b\u4e2d\u628a App \u7ec4\u4ef6\u6362\u6210 RouterProvider\\n\\n```tsx\\nimport \\"bootstrap/dist/css/bootstrap.css\\";\\nimport React from \\"react\\";\\nimport ReactDOM from \\"react-dom/client\\";\\nimport { QueryClient, QueryClientProvider } from \\"@tanstack/react-query\\";\\nimport { ReactQueryDevtools } from \\"@tanstack/react-query-devtools\\";\\nimport \\"./index.css\\";\\nimport { RouterProvider } from \\"react-router-dom\\";\\nimport router from \\"./routing/router\\";\\n\\nconst queryClient = new QueryClient();\\nReactDOM.createRoot(document.getElementById(\\"root\\") as HTMLElement).render(\\n  <React.StrictMode>\\n    <QueryClientProvider client={queryClient}>\\n      <RouterProvider router={router} /> // \u8fd9\u91cc\\n      <ReactQueryDevtools />\\n    </QueryClientProvider>\\n  </React.StrictMode>\\n);\\n```\\n\\nReact-Router \u91cc\u9762\u6709`\\\\<Link /\\\\>`\u7ec4\u4ef6\uff0c\u6bd4\u8d77\u4f7f\u7528 a href \u8df3\u8f6c\uff0c\u4f18\u70b9\u662f\u8df3\u8f6c\u7684\u65f6\u5019\u4e0d\u4f1a\u5411 Server \u91cd\u65b0\u53d1\u9001\u8bf7\u6c42\uff0c\u7701\u8d44\u6e90\\n\\n\u4f7f\u7528\u7684\u65f6\u5019\u5e73\u66ff\u5373\u53ef\\n\\n\u4f8b\u5982\\n\\n```tsx\\n<a href=\\"/users\\">Users</a>\\n```\\n\\n\u6362\u6210\\n\\n```tsx\\n<Link to=\\"/users\\">Users</Link>\\n```\\n\\n\u8fd8\u6709\u5c31\u662f**useNavigate Hook**, \u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a navigateFunction, \u7136\u540e\u4f20\u9012\u7ed9\u8fd9\u4e2a function \u4e00\u4e2a to, \u5373\u53ef\u5b9e\u73b0\u8df3\u8f6c\\n\\n```tsx\\nimport { useNavigate } from \\"react-router-dom\\";\\n\\nconst ContactPage = () => {\\n  const navigate = useNavigate();\\n  return (\\n    <form\\n      onSubmit={(event) => {\\n        event.preventDefault();\\n        // Redirect the user to the home page\\n        navigate(\\"/\\");\\n      }}\\n    >\\n      <button className=\\"btn btn-primary\\">Submit</button>\\n    </form>\\n  );\\n};\\n\\nexport default ContactPage;\\n```\\n\\n#### \u52a8\u6001\u8def\u7531\\n\\n\u5c31\u662f\u5b9e\u6218\u4e00\u91cc\u9762\u7684 \u5728\u8def\u7531\u91cc\u9762\u4f20\u9012\u53c2\u6570 `/post/:id`\u8fd9\u6837\u5b50\\n\\n```tsx\\n  {\\n    path: \\"/user/:id\\",\\n    element: <UserDetailPage />,\\n  },\\n```\\n\\n\u5bf9\u5e94\u7684, Link \u7528\u6a21\u677f\u5b57\u7b26\u4e32\u5c31\u597d\u4e86\\n\\n```tsx\\n<Link to={`/user/${user.id}`}>{user.name}</Link>\\n```\\n\\n\u51e0\u4e2a\u5e38\u7528\u7684 Hook\\n\\n- `useParams`:\u8fd4\u56de\u4e00\u4e2a\u8bb0\u5f55\u4e86\u6240\u6709\u52a8\u6001\u8def\u7531\u7684\u4f20\u9012\u7684\u53c2\u6570\u7684\u5bf9\u8c61\\n- `useSearchParams`: \u8fd4\u56de\u4e00\u4e2a\u8bb0\u5f55\u4e86\u8def\u7531\u4f20\u9012\u7684\u67e5\u8be2\u53c2\u6570\u7684\u5bf9\u8c61\u548c\u8bbe\u7f6e\u5b83\u7684\u51fd\u6570\u7684\u6570\u7ec4(\u5c31\u662f`[searchParams, setSearchParams]`), \u7136\u540e\u5bf9`searchParams`\u8c03\u7528`get`\u65b9\u6cd5, \u4f20\u5165\u4e00\u4e2a`name`\u80fd\u591f\u5f97\u5230\u8def\u7531\u4f20\u9012\u7684\u67e5\u8be2\u53c2\u6570\u91cc\u9762`name`\u7684\u503c;\u8c03\u7528`toString`\u65b9\u6cd5\u80fd\u591f\u8fd4\u56de\u539f\u59cb\u7684\u67e5\u8be2\u5b57\u7b26\u4e32\\n- `useLocation`\u8fd4\u56de\u5f53\u524d\u8def\u7531\u7684 location \u5bf9\u8c61\\n\\n> The `useParams` hook returns an object of key/value pairs of the dynamic params from the current URL that were matched by the `<Route path>`. Child routes inherit all params from their parent routes.\\n\\n#### Build A NavBar:\u5d4c\u5957\u8def\u7531\\n\\n\u76f4\u63a5\u770b\u4ee3\u7801\\n\\n```tsx\\nimport { createBrowserRouter } from \\"react-router-dom\\";\\nimport HomePage from \\"./HomePage\\";\\nimport UserListPage from \\"./UserListPage\\";\\nimport ContactPage from \\"./ContactPage\\";\\nimport UserDetailPage from \\"./UserDetailPage\\";\\nimport Layout from \\"./Layout\\";\\nconst Router = createBrowserRouter([\\n  {\\n    path: \\"/\\",\\n    element: <Layout />,\\n    children: [\\n      // { path: \\"\\", element: <HomePage /> },\\n      // \u4e0a\u9762\u4e0b\u9762\u7684\u5199\u6cd5\u5747\u53ef\\n      { index: true, element: <HomePage /> },\\n      { path: \\"users\\", element: <UserListPage /> },\\n      { path: \\"user/:id\\", element: <UserDetailPage /> },\\n      { path: \\"contact\\", element: <ContactPage /> },\\n    ],\\n  },\\n]);\\n\\nexport default Router;\\n```\\n\\n\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u8def\u7531\u7684\u5b50\u7ec4\u4ef6\\n\\n\u7136\u540e,\u5728 Layout.tsx \u91cc\u9762\\n\\n```tsx\\nimport { Outlet } from \\"react-router-dom\\";\\nimport NavBar from \\"./NavBar\\";\\n\\nconst Layout = () => {\\n  return (\\n    <>\\n      <NavBar />\\n      <div id=\\"main\\">\\n        <Outlet /> //\\n        \u8fd9\u4e2aOutlet\u5c31\u662f\u5b50\u7ec4\u4ef6\u7684\u5360\u4f4d\u7b26,\u6839\u636e\u8def\u7531\u5728children\u4e4b\u4e2d\u9009\u62e9\u5339\u914d\u7684\u503c\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default Layout;\\n```\\n\\n\u7136\u540e\u4e0d\u7ba1\u5207\u6362\u5230\u54ea\u4e2a\u5b50\u8def\u7531, `<NavBar />`\u7ec4\u4ef6\u603b\u662f\u53ef\u89c6\u7684\\n\\n\u53ef\u4ee5\u7ee7\u7eed\u5d4c\u5957,\u8fbe\u6210\u4e00\u4e9b\u6709\u8da3\u7684\u6548\u679c,\u6bd4\u5982\u5de6\u534a\u8fb9\u5c4f\u5e55\u662f user, \u53f3\u534a\u8fb9\u662f detail\\n\\n```tsx\\nimport { createBrowserRouter } from \\"react-router-dom\\";\\nimport HomePage from \\"./HomePage\\";\\nimport ContactPage from \\"./ContactPage\\";\\nimport UserDetail from \\"./UserDetail\\";\\nimport Layout from \\"./Layout\\";\\nimport UserPage from \\"./UserPage\\";\\nconst Router = createBrowserRouter([\\n  {\\n    path: \\"/\\",\\n    element: <Layout />,\\n    children: [\\n      // { path: \\"\\", element: <HomePage /> },\\n      // \u4e0a\u9762\u4e0b\u9762\u7684\u5199\u6cd5\u5747\u53ef\\n      { index: true, element: <HomePage /> },\\n      {\\n        path: \\"users/\\",\\n        element: <UserPage />,\\n        children: [{ path: \\":id\\", element: <UserDetail /> }], // \u518d\u5d4c\u5957\u4e00\u6b21\\n      },\\n      { path: \\"contact\\", element: <ContactPage /> },\\n    ],\\n  },\\n]);\\n\\nexport default Router;\\n```\\n\\nUserPage.tsx\\n\\n```tsx\\nimport UserList from \\"./UserList\\";\\nimport { Outlet } from \\"react-router-dom\\";\\n\\nconst UserPage = () => {\\n  return (\\n    <div className=\\"row\\">\\n      <div className=\\"col\\">\\n        <UserList />\\n      </div>\\n      <div className=\\"col\\">\\n        <Outlet />\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default UserPage;\\n```\\n\\n#### \u9519\u8bef\u5904\u7406\\n\\n\u5728 router \u91cc\u9762\u52a0\u4e0a errorElement\\n\\n```tsx\\nconst Router = createBrowserRouter([\\n  {\\n    path: \\"/\\",\\n    element: <Layout />,\\n    errorElement: <ErrorPage />,\\n```\\n\\n\u8fd9\u4e2a errorElement \u4f1a\u6355\u83b7\u4e24\u79cd\u7c7b\u578b\u7684\u9519\u8bef:\\n\\n- \u4ee3\u7801\u5185\u90e8\u629b\u51fa\u7684\u9519\u8bef\\n- \u4e0d\u5b58\u5728\u5bf9\u5e94\u8def\u7531\\n\\nReact Router \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a hook, `useRouteError`\\n\\nErrorPage.tsx\\n\\n```tsx\\nimport { isRouteErrorResponse, useRouteError } from \\"react-router-dom\\";\\n\\nconst ErrorPage = () => {\\n  const error = useRouteError();\\n  console.log(error); // \u8fd9\u91cc\u53ef\u4ee5\u5f15\u5165\u5916\u90e8\u5e93,\u5c06error\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e4b\u4e2d\\n  return (\\n    <>\\n      <h1>Oops...</h1>\\n      <p>{isRouteErrorResponse(error) ? \\"Invalid Page\\" : \\"Unexpected Error\\"}</p>\\n      // \u5982\u679c\u662f\u9519\u8bef\u7684\u8def\u7531\u7684Error,\u5c31\u8fd4\u56de\\"Invalid Page\\",\\n      \u5426\u5219(\u4ee3\u7801\u5185\u90e8\u629b\u51fa\u9519\u8bef),\u8fd4\u56de \\"Unexpected Error\\"\\n    </>\\n  );\\n};\\n\\nexport default ErrorPage;\\n```\\n\\n#### \u9690\u79c1\u8def\u7531(Private Route)\uff1a\\n\\n\u8bf4\u5b9e\u8bdd\u6ca1\u592a\u542c\u61c2\uff0c\u5927\u4f53\u601d\u8def\u5c31\u662f\u5c06\u9700\u8981\u9690\u79c1\u4fdd\u62a4\u7684\u8def\u7531\u653e\u5230\u65b0\u7684\u8def\u7531\u7ec4\u91cc\u9762\u53bb\\n\\n\u7136\u540e\u8fd9\u4e2a\u65b0\u8def\u7531\u7ec4\u7684 element \u5185\u90e8\u53ef\u4ee5\u52a0\u767b\u5f55\u9a8c\u8bc1\uff0c\u5982\u679c\u6ca1\u6709\u767b\u5f55\uff0c\u5c31 return \u4e00\u4e2a `<Navigate>`\u5143\u7d20\u8fdb\u884c\u8df3\u8f6c\\n\\n\u56e0\u4e3a\u9700\u8981\u9690\u79c1\u4fdd\u62a4\u7684\u8def\u7531\u6b64\u65f6\u90fd\u662f\u8fd9\u4e2a\u65b0\u8def\u7531\u7ec4\u7684\u5b50\u8def\u7531\uff0c\u6240\u4ee5\u90fd\u4f1a\u88ab\u8fd9\u4e2a\\"\u6839\\"\u7684 element \u8def\u7531\u4fdd\u62a4\\n\\n#### \u5b9e\u6218\uff1a\u7ed9 gameHub \u52a0\u4e0a\u8be6\u7ec6\u9875\u9762\\n\\n\u6211\u4eec\u60f3\u8981\u4e00\u76f4\u4fdd\u6301 NavBar \u7ec4\u4ef6\u53ef\u89c6\uff0c\u90a3\u4e48\u5148\u6574\u4e2a Layout\\n\\nLayout.tsx\\n\\n```tsx\\nimport { Outlet } from \\"react-router-dom\\";\\nimport NavBar from \\"../components/NavBar\\";\\n\\nconst Layout = () => {\\n  return (\\n    <>\\n      <NavBar />\\n      <Outlet />\\n    </>\\n  );\\n};\\n\\nexport default Layout;\\n```\\n\\n\u8fd9\u4e2a Layout \u5c31\u662f\u8def\u7531`\\"/\\"`\u5566\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u5e94\u8be5\u4f5c\u4e3a\u5b83\u7684\u5d4c\u5957\u8def\u7531\uff0c\u653e\u5728`<Outlet />`\u4e4b\u4e2d\\n\\n\u7136\u540e\u5c06\u539f\u6765\u7684 App.tsx \u7684\u7ec4\u4ef6\u653e\u5230\u65b0\u7684`pages`\u6587\u4ef6\u5939\u7684`HomePage.tsx`\\n\\n\u518d\u5c06`GameCard`\u7ec4\u4ef6\u91cc\u9762\u7684`<Text>`\u5bf9\u8c61\u6539\u6210\\n\\n```\\nLink to={`/game/${game.id}\\\\`}\\n```\\n\\n\u4e5f\u5c31\u662f\u7ed3\u5408\u6211\u4eec\u524d\u9762\u52a8\u6001\u8def\u7531\u7684\u77e5\u8bc6\uff0c\u5c31\u6709\u4e86\u8fd9\u6837\u7684\u8def\u7531\\n\\n```tsx\\nimport { createBrowserRouter } from \\"react-router-dom\\";\\nimport GameDetail from \\"../pages/GameDetail\\";\\nimport HomePage from \\"../pages/HomePage\\";\\nimport Layout from \\"../pages/Layout\\";\\n\\nconst GameRouter = createBrowserRouter([\\n  {\\n    path: \\"/\\",\\n    element: <Layout />,\\n    children: [\\n      { index: true, element: <HomePage /> },\\n      { path: \\"game/:id\\", element: <GameDetail /> },\\n    ],\\n  },\\n]);\\n\\nexport default GameRouter;\\n```\\n\\n\u522b\u7684 detail \u9875\u9762\u7684\u7ec6\u8282\u5b9e\u73b0\u5c31\u662f\u524d\u9762\u521d\u7ea7\u90e8\u5206\u7684\u5185\u5bb9\u4e86\uff08\u8db4\\n\\n\u503c\u5f97\u6ce8\u610f\u7684\u5c31\u662f detail \u9875\u9762\u4e0a\u7684 NavBar \u7ec4\u4ef6\u7684\u641c\u7d22\u8981\u60f3\u8fd4\u56de\u4e00\u4e2a\u53ef\u89c6\u5316\u7684\u7ed3\u679c\\n\\n\u9700\u8981\u7a0d\u7a0d\u4fee\u6539\uff0c\u5728 onSubmit \u51fd\u6570\u91cc\u9762\u518d\u8c03\u7528 useNavigate \u7136\u540e navigate \u56de\u539f\u6765\u7684\u4e3b\u9875\uff0c\u8def\u7531\u7684\u90e8\u5206\u5c31\u8fd9\u4e48\u4e9b\u4e86\\n\\n\u5b8c\u7ed3\u6492\u82b1\uff01"},{"id":"/\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668","metadata":{"permalink":"/blog/\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668","source":"@site/blog/\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668.md","title":"\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668","description":"\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668","date":"2024-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"debug","permalink":"/blog/tags/debug"},{"inline":true,"label":"system","permalink":"/blog/tags/system"}],"readingTime":12.08,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668","date":"2024-07-11T00:00:00.000Z","author":"ayanami","tags":["debug","system"]},"unlisted":false,"prevItem":{"title":"react practice:mosh gamehub","permalink":"/blog/\u5b9e\u62182-mosh-gamehub"},"nextItem":{"title":"\u9ed1\u9a6c\u70b9\u8bc4(\u901f\u901a\u7248)","permalink":"/blog/\u9ed1\u9a6c\u70b9\u8bc4"}},"content":"#### \u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668\\n\\n\u4e3b\u8981\u53c2\u8003[1](https://events.static.linuxfound.org/sites/events/files/slides/slides_16.pdf),[2](https://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information)\u4e24\u7bc7\u6587\u7ae0\\n\\n\x3c!-- more --\x3e\\n\\n\u5728\u5199\u77e5\u8bc6\u4e4b\u524d\uff0c\u4e0d\u5982\u5148\u95ee\u81ea\u5df1\u51e0\u4e2a\u95ee\u9898\uff1a\\n\\n- debugger \u7684\u5b9e\u73b0\u539f\u7406\u662f\u4ec0\u4e48\uff1f\\n- \u65ad\u70b9(breakpoint)\u548c\u76d1\u89c6\u70b9(watchpoint)\u7684\u533a\u522b\uff1f\\n- \u65ad\u70b9\u6709\u54ea\u4e9b\u5b9e\u73b0\u65b9\u6cd5\uff1f\u5177\u4f53\u5230 gdb \u4e4b\u4e2d\uff0c\u5b83\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\\n\\n**debugger \u7684\u6700\u57fa\u672c\u539f\u7406\uff0c\u5c31\u662f\u8fd9\u6837\u7684\u4ee3\u7801**\\n\\n```c++\\nint main(int argc, char** argv)\\n\x3c!--truncate--\x3e{\\n    pid_t child_pid;\\n\\n    if (argc < 2) {\\n        fprintf(stderr, \\"Expected a program name as argument\\\\n\\");\\n        return -1;\\n    }\\n\\n    child_pid = fork();\\n    if (child_pid == 0)\\n        run_target(argv[1]);\\n    else if (child_pid > 0)\\n        run_debugger(child_pid);\\n    else {\\n        perror(\\"fork\\");\\n        return -1;\\n    }\\n\\n    return 0;\\n}\\n```\\n\\ndebugger \u4f5c\u4e3a\u7236\u8fdb\u7a0b\uff0c\u4f7f\u7528 fork \u8c03\u51fa\u4e86\u9700\u8981 debug \u7684\u5b50\u8fdb\u7a0b\uff0c\u7136\u540e\u901a\u8fc7\u67d0\u79cd\u65b9\u6cd5\u548c\u5b50\u8fdb\u7a0b\u4ea4\u4e92\uff08\u64cd\u63a7\u5b50\u8fdb\u7a0b\uff09\\n\\n\u90a3\u4e48\u5c31\u5f15\u51fa\u4e86\u8fd9\u6837\u7684\u95ee\u9898\uff1a\\n\\n1. \u600e\u4e48\u64cd\u63a7\u7684\uff08\u5141\u8bb8\u64cd\u63a7\u7684\u673a\u5236\uff09\\n2. \u64cd\u63a7\u4e4b\u540e\u7684\u63a7\u5236\u6d41\\n3. \u5df2\u7ecf\u63a7\u5236\u4e86\uff0cdebug \u4fe1\u606f\u4ece\u54ea\u6765\uff08\u5982\u679c\u4e0d\u505a\u5904\u7406\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7f16\u8bd1\u4e4b\u540e\u662f\u6ca1\u6709\u539f\u6765\u7684\u4ee3\u7801\u884c\u6570\u3001\u53d8\u91cf\u7b26\u53f7\u7b49\u4fe1\u606f\u7684\uff09\\n\\n\u53c8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u603b\u7ed3\u51fa\u4ee5\u4e0b\u51e0\u70b9\uff0c\\n\\n**debug \u9700\u8981\u4fe1\u606f\uff1a**\\n\\n1. \u5728\u9ad8\u7ea7\u4ee3\u7801---&gt;\u6c47\u7f16\u7684\u8fc7\u7a0b\u4e4b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4ee3\u7801\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u6bd4\u5982\u7b2c\u51e0\u884c\u7684\u9ad8\u7ea7\u4ee3\u7801\u5bf9\u5e94\u7b2c\u51e0\u884c\uff08\u5230\u7b2c\u51e0\u884c\uff09\u7684\u6c47\u7f16\u4ee3\u7801\\n\\n2. \u5728\u6c47\u7f16\u4ee3\u7801---&gt;\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8fc7\u7a0b\u4e4b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6709\u7528\u7684\u4fe1\u606f\u4fdd\u5b58\u5728\u53ef\u6267\u884c\u6587\u4ef6\u5185\\n\\n**debug \u9700\u8981\u65ad\u70b9\uff1a**\\n\\n3. \u9700\u8981\u6709\u4e00\u79cd\u65b9\u6cd5\u5728 gdb \u6216\u8005\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e4b\u4e2d\u8fbe\u6210\u4e2d\u65ad\\n4. \u8fdb\u4e00\u6b65\u5730\uff0c\u9700\u8981\u8ba9 gdb\uff08\u7236\u8fdb\u7a0b\uff09\u80fd\u591f\u63a7\u5236\u3001\u76d1\u89c6\u3001\u6539\u53d8\u5b50\u8fdb\u7a0b\uff08\u88ab\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff09\\n\\n\u89e3\u51b3\u4e86\u8fd9\u51e0\u4e2a\u95ee\u9898\uff0c\u7406\u8bba\u4e0a\u5c31\u80fd\u4ea7\u751f debugger\\n\\n\u95ee\u9898 1\uff0c\u5f88\u9057\u61be\uff0c\u7531\u4e8e\u73b0\u4ee3\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u548c\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u7684\u590d\u6742\u6027\uff0c\u6e90\u7a0b\u5e8f\u8bed\u8a00\u548c\u7f16\u8bd1\u5b8c\u6210\u7684\u6c47\u7f16\uff0c\u53c8\u6216\u8005\u8bf4\u6700\u540e\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4\u5f88\u96be\u5b8c\u7f8e\u5bf9\u5e94\uff0c\u7f16\u8bd1\u5668\u5f00\u542f\u5bf9\u5e94\u7684\u7f16\u8bd1\u6307\u4ee4\u4e4b\u540e\u4e5f\u53ea\u80fd\u505a\u5230\u8fd1\u4f3c\uff08**\u4e0d\u80fd\u5b8c\u5168\u76f8\u4fe1 back trace!**\uff09\u4f46\u5927\u4f53\u4e0a\u8fd8\u662f\u5bf9\u7684\u3002\uff08\u4e5f\u53ef\u4ee5\u5f3a\u5236\u8ba9\u7f16\u8bd1\u5668\u4e0d\u4f18\u5316\uff09\\n\\n\u4e0b\u56fe\u8f6c\u8f7d\uff1a `gdb br`\u7684\u5931\u8d25\u4f8b\u5b50\\n\\n\u95ee\u9898 2\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u9700\u8981 gcc **-g** \u7684\u7406\u7531\uff0c**\u4e5f\u662f\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4e0d\u6b62\u4e8e\u5bf9\u5185\u5b58\u5730\u5740\u8bbe\u65ad\u70b9\uff0c\u8fd8\u80fd\u5bf9\u4e00\u4e2a\u51fd\u6570\uff0c\u4e00\u884c\u6e90\u4ee3\u7801\u8bbe\u65ad\u70b9\u7684\u539f\u56e0**\\n\\n> \u73b0\u4ee3\u7f16\u8bd1\u5668\u5728\u5c06\u9ad8\u7ea7\u4ee3\u7801\u8f6c\u6362\u4e3a\u9ad8\u7ea7\u4ee3\u7801\u65b9\u9762\u505a\u5f97\u5f88\u597d\uff0c\u5176\u7f29\u8fdb\u548c\u5d4c\u5957\u7684\u63a7\u5236\u7ed3\u6784\u4ee5\u53ca\u4efb\u610f\u7c7b\u578b\u7684\u53d8\u91cf\u53ef\u4ee5\u5f88\u597d\u5730\u8f6c\u6362\u4e3a\u4e00\u5927\u5806\u79f0\u4e3a\u673a\u5668\u4ee3\u7801\u7684\u4f4d\uff0c\u5176\u552f\u4e00\u76ee\u7684\u662f\u5728\u76ee\u6807 CPU \u4e0a\u5c3d\u53ef\u80fd\u5feb\u5730\u8fd0\u884c\u3002\u5927\u591a\u6570 C \u884c\u88ab\u8f6c\u6362\u4e3a\u591a\u4e2a\u673a\u5668\u4ee3\u7801\u6307\u4ee4\u3002\u53d8\u91cf\u88ab\u63a8\u5230\u5404\u5904 - \u8fdb\u5165\u5806\u6808\u3001\u5bc4\u5b58\u5668\u6216\u5b8c\u5168\u4f18\u5316\u3002**\u7ed3\u6784\u548c\u5bf9\u8c61\u751a\u81f3\u4e0d\u5b58\u5728\u4e8e\u751f\u6210\u7684\u4ee3\u7801\u4e2d - \u5b83\u4eec\u53ea\u662f\u4e00\u4e2a\u62bd\u8c61**\uff0c\u88ab\u8f6c\u6362\u4e3a\u786c\u7f16\u7801\u7684\u504f\u79fb\u91cf\u5230\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\u3002\\n>\\n> \u90a3\u4e48\uff0c\u5f53\u60a8\u8981\u6c42\u8c03\u8bd5\u5668\u5728\u67d0\u4e2a\u51fd\u6570\u7684\u5165\u53e3\u5904\u4e2d\u65ad\u65f6\uff0c\u8c03\u8bd5\u5668\u5982\u4f55\u77e5\u9053\u5728\u54ea\u91cc\u505c\u6b62\u5462\uff1f\u5f53\u4f60\u5411\u5b83\u8be2\u95ee\u53d8\u91cf\u7684\u503c\u65f6\uff0c\u5b83\u662f\u5982\u4f55\u627e\u5230\u8981\u663e\u793a\u7684\u5185\u5bb9\u7684\uff1f**\u7b54\u6848\u662f - \u8c03\u8bd5\u4fe1\u606f**\u3002 \\\\***\\\\*\u8c03\u8bd5\u4fe1\u606f\u7531\u7f16\u8bd1\u5668\u4e0e\u673a\u5668\u4ee3\u7801\u4e00\u8d77\u751f\u6210\u3002\u5b83\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u548c\u539f\u59cb\u6e90\u4ee3\u7801\u4e4b\u95f4\u5173\u7cfb\u7684\u8868\u793a\u3002\u8fd9\u4e9b\u4fe1\u606f\u88ab\u7f16\u7801\u4e3a\u9884\u5b9a\u4e49\u7684\u683c\u5f0f\uff0c\u5e76\u4e0e\u673a\u5668\u4ee3\u7801\u4e00\u8d77\u5b58\u50a8**\u3002\u591a\u5e74\u6765\uff0c\u4e3a\u4e0d\u540c\u7684\u5e73\u53f0\u548c\u53ef\u6267\u884c\u6587\u4ef6\u53d1\u660e\u4e86\u8bb8\u591a\u8fd9\u6837\u7684\u683c\u5f0f\u3002\u7531\u4e8e\u672c\u6587\u7684\u76ee\u7684\u4e0d\u662f\u8c03\u67e5\u8fd9\u4e9b\u683c\u5f0f\u7684\u5386\u53f2\uff0c\u800c\u662f\u5c55\u793a\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u786e\u5b9a\u4e00\u4e9b\u4e8b\u60c5\u3002\u8fd9\u5c06\u662f DWARF\uff0c\u5b83\u4eca\u5929\u51e0\u4e4e\u65e0\u5904\u4e0d\u5728\u5730\u7528\u4f5c Linux \u548c\u5176\u4ed6 Unix-y \u5e73\u53f0\u4e0a ELF \u53ef\u6267\u884c\u6587\u4ef6\u7684\u8c03\u8bd5\u4fe1\u606f\u683c\u5f0f\u3002\\n\\n\u5bf9\u5e94 elf \u6587\u4ef6\u4e2d\u7684.debug\\\\_\\\\*\\\\*\u6bb5\\n\\n\u5982\u4f55\u8fdb\u4e00\u6b65\u9605\u8bfb?\\n\\n`objdump --dwarf=info`\\n\\ninfo \u53ef\u4ee5\u6362\u6210\u522b\u7684\\n\\n\u95ee\u9898 3\u30014\\n\\ndebug \u9700\u8981\u65ad\u70b9\uff0c\u9700\u8981\u67d0\u79cd\u53ef\u6062\u590d\u7684\u4e2d\u65ad\uff0c\u600e\u4e48\u505a\uff1f\\n\\n- \u8f6f\u4ef6\u652f\u6301\\n- \u786c\u4ef6\u652f\u6301\\n\\n\u5148\u8bb2\u786c\u4ef6\u652f\u6301\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002\u5982\u679c\u8bbe\u5907\u6709\u5b9e\u73b0\u786c\u4ef6 debug\uff0c**\u5b83\u4f1a\u5728\u5185\u5b58\u4e4b\u4e2d\u5360\u636e\u4e00\u6bb5\u7279\u6b8a\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u786c\u4ef6\u652f\u6301\u5bf9 cpu \u662f\u53ef\u89c1\u7684**\\n\\n\uff08cpu \u4e5f\u5b9e\u73b0\u4e86 debug \u7684\u63a7\u5236\u5bc4\u5b58\u5668\u548c\u63a7\u5236\u5355\u5143\uff09\u3002**\u800c gdb \u5728 debug \u65f6\uff0c\u4f1a\u5148\u786e\u5b9a\u672c\u673a\u7684\u67b6\u6784\u548c\u786c\u4ef6\u4fe1\u606f\uff0c\u4e4b\u540e\u6839\u636e\u786c\u4ef6\u4fe1\u606f\u53bb\u5bfb\u627e\u76f8\u5173\u7684 debug \u662f\u5426\u6709\u786c\u4ef6\u652f\u6301\u3002**\\n\\n\u800c\u8fd9\u4e2a\u786c\u4ef6\u652f\u6301\u8868\u73b0\u5728\u80fd\u591f\u786c\u4ef6\u4e0a\u5355\u6b65\u6267\u884c\uff0c\u901a\u8fc7\u6bd4\u8f83\u5668\u8bbe\u7f6e\u65ad\u70b9\uff0cetc\\n\\n> Gateway between re-purposed JTAG bit protocol and debug logic\\n>\\n> Debug hardware often visible in a special memory address space\\n>\\n> E.g. (gdb) stop requires writing 0x1 (Halt Request) to address 0x090 (Debugger Run Control Register) of the CPU debug unit.\\n>\\n> - Shift 4 bits into IR\\n>\\n> - Shift 34 bits into DR\\n>\\n> - Shift 4 bits into IR\\n>\\n> - Shift 34 bits into DR\\n>\\n> - Shift 34 bits into DR\\n\\n\u53e6\u4e00\u79cd\u5c31\u662f\u8f6f\u4ef6\u652f\u6301\uff0c\\n\\n\u9996\u5148\u662f\u4e2d\u65ad\uff0c\u5f53\u7a0b\u5e8f\u8fd0\u884c\u5230\u65ad\u70b9\u7684\u65f6\u5019\uff0c\u5b83\u5e94\u8be5\u5411 gdb \u53d1\u51fa\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\uff08\u6bd4\u5982 SIGTRAP\uff09\uff0c\u4e4b\u540e gdb \u7a0b\u5e8f\uff08\u7236\u8fdb\u7a0b\uff09\u63a5\u6536\u5230\u4e2d\u65ad\u4fe1\u53f7\u540e\uff0c\u8fa8\u522b\u51fa\u8fd9\u4e2a\u662f\u65ad\u70b9\u4ea7\u751f\u7684\u4e2d\u65ad\u8fd8\u662f\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\u7684\u4e2d\u65ad\uff0c\u5e76\u52a0\u4ee5\u5904\u7406\\n\\n\u7136\u540e\u662f ptrace \u7cfb\u7edf\u8c03\u7528\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\u53bb\u5f97\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u63a7\u5236\u6743\uff0c\u5305\u62ec\u76d1\u89c6\u3001\u6539\u53d8\u3001\u53d1\u9001\u547d\u4ee4\u7b49\\n\\n```c++\\nvoid run_target(const char* programname)\\n{\\n    procmsg(\\"target started. will run \'%s\'\\\\n\\", programname);\\n\\n    /* Allow tracing of this process */\\n    if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0) {\\n        perror(\\"ptrace\\");\\n        return;\\n    }\\n\\n    /* Replace this process\'s image with the given program */\\n    execl(programname, programname, 0);\\n}\\n```\\n\\n\u800c\u6709\u4e86\u4e2d\u65ad\u4e4b\u540e\uff0c\u4e00\u79cd\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u6cd5\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\\n\\n\u5728\u6307\u5b9a\u7684\u5730\u5740\u4e0a\u8bbe\u4e00\u4e2a\u76d1\u89c6\u70b9 w\\n\\n\u9996\u5148\uff0c\u6bcf\u6b21\u8fd0\u884c\u4e00\u6761\u6307\u4ee4\u4e4b\u540e\u6211\u90fd\u5207\u6362\u5230 debugger\uff0c\u6bd4\u5bf9\u4e00\u4e0b pc \u548c\u76d1\u89c6\u5730\u5740\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u5c31\u505c\u6b62\\n\\n\u8fd9\u79cd\u5207\u6362\u7684\u673a\u5236\u6765\u6e90\u4e8e\uff1a\\n\\n1. wait() \u4e0d\u6b62\u5728\u5b50\u8fdb\u7a0b exit \u65f6\u624d\u4f1a\u9000\u51fa\uff0c\u5728\u5b50\u8fdb\u7a0b\u89e6\u53d1\u4e2d\u65ad\u65f6\u4e5f\u4f1a\u8fd4\u56de\uff0c\u5e76\u4fdd\u5b58\u4e00\u4e9b\u4e2d\u65ad\u4fe1\u606f\\n2. ptrace \u8c03\u7528\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684 request PTRACE_SINGLESTEP\uff0c\u4f1a\u544a\u8bc9 OS \u542f\u52a8\u88ab\u76d1\u63a7\u8fdb\u7a0b\uff0c\u4f46\u662f\u4e00\u6761\u6307\u4ee4\u540e\u505c\u6b62\uff08pc+4\uff09\uff0c\u5e76\u4ea7\u751f\u4e2d\u65ad\u901a\u77e5\u7236\u8fdb\u7a0b\\n\\n```c++\\nvoid run_debugger(pid_t child_pid)\\n{\\n    int wait_status;\\n    unsigned icounter = 0;\\n    procmsg(\\"debugger started\\\\n\\");\\n\\n    /* Wait for child to stop on its first instruction */\\n    wait(&wait_status);\\n\\n    while (WIFSTOPPED(wait_status)) {\\n        icounter++;\\n        /* Make the child execute another instruction */\\n        if (ptrace(PTRACE_SINGLESTEP, child_pid, 0, 0) < 0) {\\n            perror(\\"ptrace\\");\\n            return;\\n        }\\n\\n        /* Wait for child to stop on its next instruction */\\n        wait(&wait_status);\\n    }\\n\\n    procmsg(\\"the child executed %u instructions\\\\n\\", icounter);\\n}\\n```\\n\\n\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u7528\u8fd9\u79cd\u5355\u6b65\u6267\u884c\u6bd4\u5bf9 pc \u7684\u201c\u76d1\u89c6\u70b9\u201d\u65b9\u6cd5\u5b9e\u73b0\u65ad\u70b9\uff0c\u4f46\u8fd9\u4e2a\u65b9\u6cd5\u7684\u95ee\u9898\u662f\uff0c\u6bcf\u6267\u884c\u4e00\u6761\u6307\u4ee4\u90fd\u8981\u4e0d\u65ad\u5207\u6362\u8fdb\u7a0b\uff0c\u6548\u7387\u592a\u4f4e\u4e86\\n\\njyy \u4ecb\u7ecd\uff0c gdb \u7528\u4e86\u4e00\u79cd\u5f88\u795e\u5947\u7684\u65b9\u6cd5\uff1a int 3\uff08\u6ce8\u610f\u8fd9\u4e2a int \u4e0d\u662f integer \u7684 int\uff09\u5077\u9f99\u8f6c\u51e4\\n\\nint 3 \u662f\u4e00\u4e2a\u5355\u5b57\u8282 x86 \u6307\u4ee4\uff0c\u4f5c\u7528\u5c31\u662f\u7b80\u5355\u5730\u53d1\u51fa\u4e00\u4e2a\u4e2d\u65ad SIGTRAP\\n\\n\u5355\u5b57\u8282\u4f7f\u5f97\u5b83\u80fd\u591f\u66ff\u6362\u5230\u4efb\u4f55\u4e00\u6761\u6307\u4ee4\u7684\u5f00\u5934\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8986\u76d6\u4e24\u6761\u53ca\u4ee5\u4e0a\u7684\u6307\u4ee4\\n\\n\u5728\u8bbe\u7f6e\u65ad\u70b9\u7684\u65f6\u5019\uff0c**gdb \u53ef\u4ee5\u5c06\u65ad\u70b9\u5904\u7684\u6307\u4ee4\u4fdd\u5b58\u8d77\u6765\uff0c\u4e4b\u540e\u66ff\u6362\u5b83\u7684\u9996\u4e2a\u5b57\u8282\u4e3a int 3**\\n\\n> **Instruction at the given address is read, saved and replaced with a breakpoint:**\\n>\\n> \u200b **- either a special instruction, // SIGTRAP, int 3**\\n>\\n> \u200b **- or an undefined encoding. // SIGILL**\\n\\n\u4e4b\u540e\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\uff0c\u6267\u884c\u5230 int 3 \u65f6\u4ea7\u751f\u4e2d\u65ad\uff08SIGTRAP\uff0cint 3 \u5c31\u662f\u7b2c\u4e09\u53f7 TRAP\uff0cx86 \u7684\u8c03\u8bd5\u5668\u4e2d\u65ad\uff09\uff0c\u800c gdb \u7a0b\u5e8f\u4f5c\u4e3a\u7236\u8fdb\u7a0b\u6536\u5230\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u8fbe\u6210\u4e2d\u65ad\uff08\u901a\u8fc7 ptrace \u8bbe\u7f6e\u4e86\u4e2d\u65ad\u7684 handler\uff09\uff0c\u4e4b\u540e\u4e5f\u53ef\u4ee5\u5c06\u539f\u6765\u7684\u6307\u4ee4\u66ff\u6362\u56de\u6765\u7ee7\u7eed\u6267\u884c\u3002\\n\\n\u7ee7\u7eed\u6267\u884c\u7684\u7ec6\u8282\uff1a\\n\\n\u5b9e\u9645\u4e0a\u5728\u6709\u4e86 ptrace \u7684\u8c03\u7528\u4e4b\u540e\uff0c\u6bcf\u5f53\u88ab\u76d1\u63a7\u7a0b\u5e8f\u6267\u884c exec \u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u53d1\u51fa\u4e00\u4e2a\u4e2d\u65ad\\n\\n> Indicates that this process is to be traced by its parent. Any signal (except SIGKILL) delivered to this process will cause it to stop and its parent to be notified via wait(). **Also, all subsequent calls to exec() by this process will cause a SIGTRAP to be sent to it, giving the parent a chance to gain control before the new program begins execution**. A process probably shouldn\'t make this request if its parent isn\'t expecting to trace it. (pid, addr, and data are ignored.)\\\\\\n> \u6307\u793a\u6b64\u8fc7\u7a0b\u5c06\u7531\u5176\u7236\u7ea7\u8ddf\u8e2a\u3002\u4f20\u9012\u7ed9\u6b64\u8fdb\u7a0b\u7684\u4efb\u4f55\u4fe1\u53f7\uff08SIGKILL \u9664\u5916\uff09\u90fd\u4f1a\u5bfc\u81f4\u5b83\u505c\u6b62\uff0c\u5e76\u901a\u8fc7 wait\uff08\uff09 \u901a\u77e5\u5176\u7236\u7ea7\u3002\u6b64\u5916\uff0c\u6b64\u8fdb\u7a0b\u5bf9 exec\uff08\uff09 \u7684\u6240\u6709\u540e\u7eed\u8c03\u7528\u90fd\u5c06\u5bfc\u81f4\u5411\u5b83\u53d1\u9001 SIGTRAP\uff0c\u4ece\u800c\u4f7f\u7236\u7ea7\u6709\u673a\u4f1a\u5728\u65b0\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u4e4b\u524d\u83b7\u5f97\u63a7\u5236\u6743\u3002\u5982\u679c\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u4e0d\u5e0c\u671b\u8ddf\u8e2a\u5b83\uff0c\u5219\u8fdb\u7a0b\u53ef\u80fd\u4e0d\u5e94\u53d1\u51fa\u6b64\u8bf7\u6c42\u3002\uff08PID\u3001ADDR \u548c DATA \u5c06\u88ab\u5ffd\u7565\u3002\\n\\n\u5c0f\u7684\u81ea\u95ee\u81ea\u7b54\u73af\u8282\uff1a\\n\\nQ\uff1a\u4e3a\u4ec0\u4e48 gdb \u4e0d\u662f\u7279\u6743\u6307\u4ee4\uff1f\u5b83\u8bfb\u5bc4\u5b58\u5668\u503c\u3001\u5185\u5b58\u503c\u7b49\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\\n\\nA\uff1a**\u4f46 install \u662f\u7279\u6743\u6307\u4ee4\uff08\u7b11\uff09**\uff0cLinux \u4e4b\u4e2d\uff0c\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u81ea\u52a8\u5177\u5907\u53ef\u6267\u884c\u7684\u9ed8\u8ba4\u6743\u9650\u7684\uff08**file mode**\uff09\uff0c\u800c\u4e0d\u662f\u50cf bash \u811a\u672c\u90a3\u6837\u9700\u8981 sudo chmod +x \u7ed9\u4e88\u6743\u9650\u3002\\n\\n\u5e76\u4e14\u54a8\u8be2 gpt \u8fd8\u5f97\u5230\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u60c5\uff1aptrace \u8c03\u7528\u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u5176\u4ed6\u7684\u8fdb\u7a0b\uff0c**\u6240\u4ee5 ptrace \u8c03\u7528\u662f\u9700\u8981 root \u6743\u9650**\uff0c\u4f46\u662f\uff0c**\u7528\u6237\u6743\u9650\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 setuid \u6216\u8005 setcap \u673a\u5236\uff0c\u662f gdb \u80fd\u5bf9\u7279\u5b9a\u7684\u6587\u4ef6\uff0c\u5177\u6709\u7279\u5b9a\u7cfb\u7edf\u8c03\u7528\u7684\u6743\u9650**\\n\\n\u8bfb\u5bc4\u5b58\u5668\u503c\u662f\u4f7f\u7528\u4e86\u7279\u5b9a\u7684\u4e2d\u65ad\uff0c\u8bfb\u5185\u5b58\u662f\u8bfb\u7684\u865a\u62df\u5185\u5b58\u3002"},{"id":"/\u9ed1\u9a6c\u70b9\u8bc4","metadata":{"permalink":"/blog/\u9ed1\u9a6c\u70b9\u8bc4","source":"@site/blog/\u9ed1\u9a6c\u70b9\u8bc4.md","title":"\u9ed1\u9a6c\u70b9\u8bc4(\u901f\u901a\u7248)","description":"\u4e2a\u4eba\u73af\u5883 Ubuntu 24.04","date":"2024-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"\u57f9\u8bad\u73ed","permalink":"/blog/tags/\u57f9\u8bad\u73ed"},{"inline":true,"label":"redis","permalink":"/blog/tags/redis"},{"inline":true,"label":"web","permalink":"/blog/tags/web"}],"readingTime":38.085,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"\u9ed1\u9a6c\u70b9\u8bc4(\u901f\u901a\u7248)","date":"2024-07-11T00:00:00.000Z","author":"ayanami","tags":["\u57f9\u8bad\u73ed","redis","web"]},"unlisted":false,"prevItem":{"title":"\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668","permalink":"/blog/\u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668"},"nextItem":{"title":"js\u57fa\u7840","permalink":"/blog/js\u57fa\u7840"}},"content":"\u4e2a\u4eba\u73af\u5883 Ubuntu 24.04\\n\\n### \u9879\u76ee\u914d\u7f6e\\n\\n- repo: \u641c\u4e00\u641c\u5c31\u884c https://github.com/cs001020/hmdp?tab=readme-ov-file\\n- idea config: \u964djava\u7248\u672c\u523011\u5c31\u80fd\u4e0d\u62a5\u9519\\n- redis, mysql: \u641c\u7d22\u5373\u53ef systemd \u542f\u52a8\\n\\n- nginx \u7a0d\u5fae\u590d\u6742\u4e00\u70b9, \u7ed9\u7684\u662fwin\u4e0b\u7684nginx, \u914d\u5b8csystemd\u4e4b\u540e,\u7528\u4ed6\u7684`nginx.conf`\u66ff\u6362`/etc/nginx/nginx.conf`(\u8bb0\u5f97\u5907\u4efd) \u7136\u540e\u4fee\u6539\\n\\n```\\n        # \u6307\u5b9a\u524d\u7aef\u9879\u76ee\u6240\u5728\u7684\u4f4d\u7f6e\\n        location / {\\n            root   /home/ayanami/www/hmdp/html/hmdp; # \u4fee\u6539\u6b64\u5904, \u6539\u4e3a${\u4e0b\u8f7d\u7684nginx\u6587\u4ef6\u5939\u539f\u6765\u4f4d\u7f6e}/hmdp/html/hmdp\\n\x3c!--truncate--\x3e            index  index.html index.htm;\\n        }\\n```\\n\\n\u5373\u53ef\\n\\n\u53ef\u80fd\u8fd8\u9700\u8981\u5728\u9876\u90e8\u4fee\u6539 `user ${Your User Name}`\\n\\nps: nginx\u4f3c\u4e4e\u5957\u4e00\u5c42\u540e\u4f1a\u8ba9\u4e4b\u524d\u7684\u8fde\u63a5\u7684token\u4e4b\u7c7binvalid\u6389, \u4f8b\u5982b\u7ad9 kimi \u9000\u51fa\u767b\u5f55\\n\\n\u76ee\u524d\u4e0d\u77e5\u9053\u9664\u4e86\u7b80\u5355`sudo systemctl stop nginx`\u7684\u65b9\u6cd5\\n\\n\u4f1a\u4e0d\u4f1anginx\u4e22docker\u91cc\u9762\u4e4b\u7c7b\u522b\u653e\u672c\u673a\u8dd1\u597d\u4e00\u70b9\\n\\n\\n\\n### \u767b\u5f55\\n\\nthreadlocal\\n\\nredis \u5b58 session, \u505a\u6c34\u5e73\u62d3\u5c55\u8d1f\u8f7d\u5747\u8861\\n\\n\u7528\u6237\u6821\u9a8c phone key, \u9a8c\u8bc1\u7801 value\\n\\n\\n\\nsession\u4fe1\u606f, value \u7528hash\u800c\u4e0d\u7528string(json)\\n\\n\u5b58\u50a8session\u6570\u636e value\u662f\u4e00\u4e2a\\"HashMap\\", \u652f\u6301\u5355\u5b57\u6bb5crud, \u5185\u5b58\u5360\u7528\u5c11\\n\\nkey ? \u751f\u6210\u4e00\u4e2a\u552f\u4e00 token, \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\\n\\nredis key\u52a0\u4e1a\u52a1\u524d\u7f00\\"login:code:\\"\\n\\n\u8bbe\u7f6e\u6709\u6548\u671f\\n\\n```java\\nredisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, 2, TimeUnit.MINUTES);\\n```\\n\\n\u8bbe\u7f6e30min\u6709\u6548\u671f\\n\\n```java\\n        // \u4fdd\u5b58\u7528\u6237\u4fe1\u606f\u5230redis\\n        UserDTO userDTO = new UserDTO();\\n        BeanUtils.copyProperties(user, UserDTO.class);\\n        String token = UUID.randomUUID().toString(true);\\n        Map<String, Object> userMap = BeanUtil.beanToMap(userDTO);\\n        stringRedisTemplate.opsForHash().putAll(LOGIN_USER_KEY + token, userMap);\\n        stringRedisTemplate.expire(LOGIN_USER_KEY + token, 30, TimeUnit.MINUTES);\\n        return Result.ok();\\n```\\n\\n\\n\\n\\"\u7528\u6237\u4e0d\u6d3b\u8dc330min\\": \u5728\u62e6\u622a\u5668\u91cc\u9762\u66f4\u65b0token\u6709\u6548\u671f(\u518d\u8c03\u7528\u4e00\u6b21expire\u5c31\u884c)\\n\\n\\n\\n\u81ea\u5b9a\u4e49\u62e6\u622a\u5668\u4e0d\u80fd\u505a\u4f9d\u8d56\u6ce8\u5165? \u8001\u5b9e\u5199\u6784\u9020\u51fd\u6570, \u5728\u5916\u90e8@Configuration\u7684Configurer\u4e2d\u6ce8\u5165, \u518d\u8c03\u7528registry\u65f6\u6784\u9020\\n\\n\u5feb\u6377\u952e\u7f29\u5199\u884c\u5c3e`.var`\\n\\n\u8fd9\u6837redis + threadlocal\u5c31\u7ed5\u5f00\u4e86\u767b\u5f55\u4e2dtomcat\u7684session\u673a\u5236,\u51cf\u5c11session\u4f20\u9012\u5f00\u9500\\n\\n\u524d\u7aef\u5f97\u5230token\u5728\u8bf7\u6c42\u5934\u91cc\u9762\u653e\\n\\n```java\\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\\n        // 1.\u83b7\u53d6\u8bf7\u6c42\u5934token\\n        // 2.\u7531token\u83b7\u53d6redis\u7528\u6237\\n        // 3.\u5224\u65adtoken\u662f\u5426\u5b58\u5728\\n        // 4.\u4fdd\u5b58\u7528\u6237\u5230threadlocal\\n        // 5.\u5237\u65b0\u7528\u6237token\u6709\u6548\u671f\\n        String token = request.getHeader(\\"authorization\\");\\n        if (StrUtil.isBlank(token)){\\n            response.setStatus(401); // unauthorized\\n            return false;\\n        }\\n        Map<Object, Object> userMap = stringRedisTemplate.opsForHash().entries(LOGIN_USER_KEY + token);\\n        UserDTO userDTO = BeanUtil.fillBeanWithMap(userMap, new UserDTO(), false);\\n\\n        // exist, save user info\\n        UserHolder.saveUser(userDTO);\\n\\n        stringRedisTemplate.expire(LOGIN_USER_KEY + token, LOGIN_USER_TTL, TimeUnit.MINUTES);\\n        return true;\\n    }\\n```\\n\\n\\n\\n\u62e6\u622a\u5668\u53ea\u62e6\u9700\u8981\u767b\u5f55\u7684\u8def\u5f84->\u518d\u52a0\u4e00\u4e2a\u65b0\u7684\u62e6\u622a\u5668, \u62e6\u6240\u6709\u8def\u5f84\\n\\n\u62e6\u622a\u5668\u987a\u5e8f, \u53ef\u4ee5.order\u8c03\u6574\u4f18\u5148\u7ea7, \u4eceorder\u5c0f\u5230order\u5927\u6267\u884c, \u4e5f\u53ef\u4ee5\u9ed8\u8ba4(\u76f8\u540corder\u6309\u7167\u6dfb\u52a0\u987a\u5e8f)\\n\\n\\n\\n### \u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898\\n\\n- \u5185\u5b58\u6dd8\u6c70(redis\u673a\u5236)\\n- \u8d85\u65f6\u5254\u9664(\u7528\u6237\u6307\u5b9a)\\n- \u4e3b\u52a8\u66f4\u65b0(\u7acb\u523b\u89e6\u53d1)\\n\\n\u4f4e\u4e00\u81f4\u6027\u7684\u90e8\u5206\u5185\u5b58\u6dd8\u6c70\u6216\u8005\u8d85\u65f6\u5254\u9664\u5c31\u884c, \u5982\u7c7b\u578b\\n\\n\u9ad8\u4e00\u81f4\u6027\u4e3b\u52a8\u66f4\u65b0+\u8d85\u65f6\u515c\u5e95, \u5982\u8be6\u60c5\\n\\n\\n\\n\u4e3b\u52a8\u66f4\u65b0\\n\\n- **cache aside** \u7f13\u5b58\u8c03\u7528\u8005\u8d1f\u8d23\u66f4\u65b0\\n- read/write through \u7f13\u5b58\u548c\u6570\u636e\u5e93\u6574\u4f53\u4f5c\u4e3a\u4e00\u4e2a\u670d\u52a1\u7ef4\u6301\u4e00\u81f4\u6027\\n- Write Behind Caching \u8c03\u7528\u8005\u53ea\u64cd\u4f5c\u7f13\u5b58,\u5176\u4ed6\u7ebf\u7a0b\u5f02\u6b65\u5c06\u7f13\u5b58\u6301\u4e45\u5316\u5230db(\u53ef\u52a0\u6279\u5904\u7406)\\n\\n\u540e\u4e24\u79cd\u8f83\u590d\u6742\\n\\ncache aside\\n\\n\u5220\u9664\u8fd8\u662f\u66f4\u65b0?\\n\\n\u5220\u9664\u662f\u4e00\u79cdlazy alloc, \u5982\u679c\u5728\u591a\u6b21\u66f4\u65b0\u4e2d\u95f4\u6ca1\u6709\u67e5\u8be2\u5c31\u6d6a\u8d39\u4e86,\u8fd8\u4e0d\u5982\u5220,\u4e00\u822c\u5220\u9664\u7f13\u5b58\\n\\n\u7f13\u5b58db\u539f\u5b50\u6027, \u5355\u4f53->\u4e8b\u52a1, \u5206\u5e03\u5f0f->TCC\u7b49\u5206\u5e03\u5f0f\u4e8b\u52a1\\n\\n\u5148\u540e?\\n\\n\\n\\n\u5148\u5220\u7f13\u5b58, \u518d\u66f4\u65b0db\\n\\n\u5e76\u53d1\u4e0b\u6570\u636e\u53ef\u4ee5\u4e0d\u4e00\u81f4, T1 delete cache,T2 cache miss, query db, update cache, T1 write  db\\n\\n\u5f97\u5230\u7f13\u5b58\u548cdb\u4e0d\u4e00\u81f4! \u5e76\u4e14\u89e6\u53d1\u6982\u7387\u5f88\u9ad8, \u56e0\u4e3a\u67e5db\u6162\\n\\n\\n\\n\u5148\u66f4\u65b0db\u518d\u5220\u9664\u7f13\u5b58, \u5927\u90e8\u5206\u65f6\u5019\u662f\u4e00\u81f4\u7684, \u9664\u4e86\\n\\n1. \u7f13\u5b58\u5df2\u5931\u6548\\n2. T1 \u67e5\u7f13\u5b58, \u67e5\u6570\u636e\u5e93\\n3. T2 \u66f4\u65b0\u6570\u636e\u5e93, \u5220\u7f13\u5b58\\n4. T1 \u66f4\u65b0\u7f13\u5b58\\n\\n\u8fd9\u6837\u624d\u4f1a\u4e0d\u4e00\u81f4, \u4f46\u7f13\u5b58\u5df2\u5931\u6548\u548cT1\u67e5\u64cd\u4f5c\u6bd4T2\u66f4\u65b0\u64cd\u4f5c\u8fd8\u6162\u4e24\u4e2a\u6761\u4ef6\u540c\u65f6\u6ee1\u8db3\u662f\u7f55\u89c1\u7684, \u6240\u4ee5\u597d\\n\\n\\n\\n\u6240\u4ee5**\u5148\u66f4\u65b0db\u518d\u5220\u9664\u7f13\u5b58**, \u8fd8\u6709\u540c\u6b65\u95ee\u9898\u4ea4\u7ed9\u8d85\u65f6\u65f6\u95f4\\n\\n\u540c\u65f6\u5148db\u518d\u7f13\u5b58\u65b9\u4fbf\u51fa\u9519\u65f6\u56de\u6eda, \u5982\u679c\u5148\u7f13\u5b58\u518ddb, db\u51fa\u9519\u6eda\u4e0d\u4e86redis\u7f13\u5b58(\u9700\u8981\u624b\u52a8\u4fee\u6539redis)\\n\\n\\n\\n\u7f13\u5b58\u7a7f\u900f\\n\\n\u5ba2\u6237\u7aef\u6076\u610f\u8bf7\u6c42\u4e0d\u5b58\u5728\u6570\u636e,\u6253\u5d29\u6570\u636e\u5e93\\n\\n- **\u7f13\u5b58\u7a7a\u5bf9\u8c61**: \u989d\u5916\u7684\u5185\u5b58\u6d88\u8017, \u77ed\u671f\u4e0d\u4e00\u81f4, \u901a\u8fc7expire TTL\u63a7\u5236\\n- **\u5e03\u9686\u8fc7\u6ee4**: \u5185\u5b58\u5c11, \u4f46\u6709\u5047\u9633\u6027 -> redis bitmap\\n- \u589e\u5f3aid\u590d\u6742\u5ea6\\n- \u505a\u597d\u6570\u636e\u7684\u57fa\u7840\u683c\u5f0f\u6821\u9a8c\\n- \u7528\u6237\u6743\u9650\u6821\u9a8c, \u70ed\u70b9\u53c2\u6570\u9650\u6d41\\n\\n\\n\\n\u7f13\u5b58\u96ea\u5d29:\\n\\n\u5927\u91cf\u7f13\u5b58key\u540c\u65f6\u5931\u6548(\u4f8b\u5982\u540c\u65f6\u8fc7\u671f)\u6216\u8005redis\u5b95\u673a, \u5927\u91cf\u8bf7\u6c42\u6253\u5230db, db\u5b95\u673a\\n\\n- key TTL \u52a0\u968f\u673a\u503c\\n- \u964d\u7ea7\u9650\u6d41\\n- \u591a\u7ea7\u7f13\u5b58(\u524d\u7aef, nginx, jvm)\u7b49\\n\\n\\n\\n\u7f13\u5b58\u51fb\u7a7f:\\n\\n\u70ed\u70b9key(\u88ab\u9ad8\u5e76\u53d1\u8bbf\u95ee\u4e14\u7f13\u5b58\u91cd\u5efa\u4e1a\u52a1\u6bd4\u8f83\u590d\u6742(\u4f8b\u5982db\u9700\u8981\u505a\u591a\u8868join\u548c\u8fd0\u7b97)\u7684key)\u5931\u6548\\n\\nN\u4e2a\u7ebf\u7a0b\u90fd\u5728\u8bf7\u6c42db\u5e76\u4e14\u5c1d\u8bd5\u7f13\u5b58\u91cd\u5efa\\n\\n- **\u4e92\u65a5\u9501, \u91cd\u5efa\u5148\u62ff\u9501**\\n- **\u903b\u8f91\u8fc7\u671f**\\n\\n\u4e92\u65a5\u9501\u7684\u4e0d\u8db3\u5728\u4e8e\u7ebf\u7a0b\u8fd8\u662f\u4f1a\u7a7a\u7b49, \u4f46\u4fdd\u8bc1\u4e00\u81f4\u6027, \u5e76\u4e14\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\\n\\n\u903b\u8f91\u8fc7\u671f\u89e3\u51b3\u6839\u672c\u95ee\u9898, \u70ed\u70b9key\u4e0d\u91c7\u7528redis\u7684\u8fc7\u671f\u7b56\u7565\u4e0d\u5c31\u597d\u4e86?(\u9877\u523b\u70bc\u5316!)\\n\\n\u4e0d\u8bbe\u7f6eTTL, \u800c\u662f\u5728value\u91cc\u9762\u52a0\u4e0a`{expired: timestamp}`\\n\\n\u5728\u4e1a\u52a1\u4ee3\u7801\u53d1\u73b0\u903b\u8f91\u8fc7\u671f\u4e4b\u540e, \u62ff\u9501, \u5f00\u542f\u4e00\u4e2a\u65b0\u7ebf\u7a0b(\u4e00\u822c\u5b9e\u9645\u4e0a\u662f\u7ed9\u7ebf\u7a0b\u6c60\u4e00\u4e2a\u4efb\u52a1)\u505a\u6574\u4e2a\u67e5\u8be2\u548c\u91cd\u5efa\u7f13\u5b58\u7684\u64cd\u4f5c\\n\\n\u7136\u540e\u5728\u8fd9\u4e2a\u65b0\u7ebf\u7a0b\u505a\u5b8c\u653e\u9501\u4e4b\u524d, \u5176\u4ed6\u7ebf\u7a0b\u5c31\u5c1d\u8bd5\u62ff\u9501-\u5931\u8d25-\u8fd4\u56de\u65e7\u6570\u636e\\n\\n\\n\\n\u8fd9\u91cc\u7684\u81ea\u5b9a\u4e49\u4e92\u65a5\u9501\u7528\u4e86\u4e2a\u5f88\u751f\u8349\u7684\u65b9\u6cd5, redis\u7684`setnx`\u547d\u4ee4\\n\\n`setnx lock 1`\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u6210\u529f\\n\\n\u653e\u9501\u5c31`del lock`\\n\\n\u4f30\u8ba1\u5e95\u5c42\u662fCAS\u6216\u8005\u5c31\u662f\u7b80\u5355\u7684mutex\u4e4b\u7c7b, \u4f46\u653e\u5728redis\u91cc\u9762\u4e86, \u7b80\u5316\u4e86java\u903b\u8f91\\n\\n\u9501\u7684\u8d85\u65f6\u65f6\u95f4? \u770b\u4e1a\u52a1\u65f6\u95f4\u6765\u5b9a\\n\\n\\n\\n\u57fa\u4e8e\u9501\u7684\u67e5\u8be2\u4ee3\u7801demo\u5982\u4e0b\\n\\n```java\\n@Service\\npublic class ShopServiceImpl extends ServiceImpl<ShopMapper, Shop> implements IShopService {\\n    @Autowired\\n    private StringRedisTemplate stringRedisTemplate;\\n\\n    private Boolean tryLock(String key){\\n        Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, \\"1\\", 10, TimeUnit.SECONDS);\\n        return BooleanUtil.isTrue(flag);\\n    }\\n    private void unlock(String key){\\n        stringRedisTemplate.delete(key);\\n    }\\n    public Result queryShopById(Long id) throws InterruptedException {\\n        Map<Object,Object> shopMap = stringRedisTemplate.opsForHash().entries(CACHE_SHOP_KEY + id);\\n        if (!shopMap.isEmpty()){\\n            Shop shop = BeanUtil.fillBeanWithMap(shopMap, new Shop(), false);\\n            return Result.ok(shop);\\n        }\\n        // cache miss\\n        // \u907f\u514d\u7f13\u5b58\u51fb\u7a7f, \u5148\u62ff\u9501\\n        String CACHE_SHOP_LOCK = \\"shop:lock:\\";\\n        if (tryLock(CACHE_SHOP_LOCK + id)){\\n            try {\\n                Shop shop = super.getById(id);\\n                if (shop != null){\\n                    stringRedisTemplate.opsForHash().putAll(CACHE_SHOP_KEY + id, BeanUtil.beanToMap(shop, new HashMap<>(),\\n                            CopyOptions.create().setIgnoreNullValue(true)\\n                                    .setFieldValueEditor((fieldname, fieldvalue) -> fieldvalue == null ? \\"\\" : fieldvalue.toString())));\\n                    stringRedisTemplate.expire(CACHE_SHOP_KEY + id, CACHE_SHOP_TTL, TimeUnit.MINUTES);\\n                    return Result.ok(shop);\\n                }\\n                // \u7f13\u5b58\u7a7f\u900f, \u5199\u5165\u7a7a\u7f13\u5b58\\n                HashMap<Object, Object> nullMap = new HashMap<>();\\n                nullMap.put(\\"null\\", \\"null\\");\\n                stringRedisTemplate.opsForHash().putAll(CACHE_SHOP_KEY + id, nullMap);\\n                stringRedisTemplate.expire(CACHE_SHOP_KEY + id, CACHE_NULL_TTL, TimeUnit.MINUTES);\\n                return Result.fail(\\"\u5546\u94fa\u4e0d\u5b58\u5728\\");\\n            } finally {\\n                unlock(CACHE_SHOP_LOCK + id);\\n            }\\n        }\\n        // \u62ff\u4e0d\u5230, \u7b49\u5f85\u540e\u91cd\u8bd5\\n        Thread.sleep(100);\\n        return queryShopById(id);\\n    }\\n\\n}\\n\\n```\\n\\n\\n\\n\u7136\u540e\u7528Jmeter \u8d771000\u4e2a\u7ebf\u7a0b\u7528200QPS\u6253\u4e00\u6253\\n\\n\u53d1\u73b0\u8fd9\u4e2a\u9501\u7684\u903b\u8f91\u8fd8\u662f\u6ca1\u4ec0\u4e48\u95ee\u9898\u7684, \u53ea\u67e5\u8be2\u4e86\u4e00\u6b21\u7f13\u5b58\\n\\n\\n\\n\\n\\n\u8fd8\u53ef\u4ee5\u8fd9\u4e48\u5c01\u88c5\u4e00\u4e0b\\n\\n```java\\npackage com.hmdp.utils;\\n\\nimport cn.hutool.core.util.BooleanUtil;\\nimport cn.hutool.json.JSONUtil;\\nimport io.lettuce.core.RedisURI;\\nimport lombok.Data;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.data.redis.core.StringRedisTemplate;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.io.Serializable;\\nimport java.util.Optional;\\nimport java.util.concurrent.TimeUnit;\\nimport java.util.function.Function;\\n\\n\\n@Slf4j\\n@Component\\npublic class CacheClient {\\n    private StringRedisTemplate stringRedisTemplate;\\n\\n\\n    public CacheClient(StringRedisTemplate stringRedisTemplate) {\\n        this.stringRedisTemplate = stringRedisTemplate;\\n    }\\n\\n    public void set(String key, Object value, long timeout, TimeUnit unit) {\\n        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), timeout, unit);\\n    }\\n\\n    public <R> Optional<R> get(String key, Class<R> type){\\n        String json = stringRedisTemplate.opsForValue().get(key);\\n        if (json == null){\\n            return Optional.empty();\\n        }\\n        R result = JSONUtil.toBean(json, type);\\n        if (result == null){\\n            return Optional.empty();\\n        }\\n        return Optional.of(result);\\n    }\\n\\n    public void delete(String key){\\n        stringRedisTemplate.delete(key);\\n    }\\n\\n    public <R, ID extends Serializable> Optional<R> queryWithPassThrough(String keyPrefix, ID id, Class<R> type, Function<ID, Optional<R>> dbQuery, long timeout, TimeUnit unit) {\\n        // 1. \u67e5\u7f13\u5b58\\n        Optional<R> cacheVal = get(keyPrefix + id, type);\\n        if(cacheVal.isPresent()){\\n            return cacheVal;\\n        }\\n        // 2. \u4e0d\u5b58\u5728\u67e5db\\n        Optional<R> result = dbQuery.apply(id);\\n        // 3. \u5b58\u5728\u8fd4\u56de\\n        if (result.isPresent()){\\n            // 3.1 \u66f4\u65b0\u7f13\u5b58\\n            set(keyPrefix + id, result.get(), timeout, unit);\\n            return result;\\n        }\\n        // 4. \u5747\u4e0d\u5b58\u5728\u66f4\u65b0\u7f13\u5b58\u4e3a\u7a7a\\n        set(keyPrefix + id, null, timeout, unit);\\n        return Optional.empty();\\n    }\\n\\n    private Boolean tryLock(String key){\\n        Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, \\"1\\", 10, TimeUnit.SECONDS);\\n        return BooleanUtil.isTrue(flag);\\n    }\\n    private void unlock(String key){\\n        stringRedisTemplate.delete(key);\\n    }\\n\\n    // \u7528\u4e8e\u70ed\u70b9key(\u88ab\u9ad8\u5e76\u53d1\u8bbf\u95ee\u4e14\u7f13\u5b58\u91cd\u5efa\u4e1a\u52a1\u6bd4\u8f83\u590d\u6742(\u4f8b\u5982db\u9700\u8981\u505a\u591a\u8868join\u548c\u8fd0\u7b97)\u7684key), \u907f\u514d\u7f13\u5b58\u51fb\u7a7f\\n    public <R, ID extends Serializable> Optional<R> queryWithLock(String keyPrefix, ID id, Class<R> type, Function<ID, Optional<R>> dbQuery, long timeout, TimeUnit unit) {\\n        // 1. \u67e5\u7f13\u5b58\\n        Optional<R> cacheVal = get(keyPrefix + id, type);\\n        if(cacheVal.isPresent()){\\n            return cacheVal;\\n        }\\n        // 2. \u4e0d\u5b58\u5728\u67e5db\\n        // \u907f\u514d\u7f13\u5b58\u51fb\u7a7f, \u5148\u62ff\u9501\\n        String CACHE_LOCK = \\"lock:\\" + keyPrefix + \\":\\" + id;\\n        if (tryLock(CACHE_LOCK)){\\n            try {\\n                Optional<R> result = dbQuery.apply(id);\\n                System.out.println(\\"result = \\" + result);\\n                // 3. \u5b58\u5728\u8fd4\u56de\\n                if (result.isPresent()){\\n                    // 3.1 \u66f4\u65b0\u7f13\u5b58\\n                    set(keyPrefix + id, result.get(), timeout, unit);\\n                    return result;\\n                }\\n                // 4. \u5747\u4e0d\u5b58\u5728\u66f4\u65b0\u7f13\u5b58\u4e3a\u7a7a\\n                set(keyPrefix + id, \\"{}\\", timeout, unit);\\n                return Optional.empty();\\n            } catch (Exception e) {\\n                throw new RuntimeException(e);\\n            }\\n            finally {\\n                unlock(CACHE_LOCK);\\n            }\\n        }\\n        // 5. \u672a\u83b7\u53d6\u5230\u9501, \u7b49\u5f85\u540e\u91cd\u8bd5\\n        try {\\n            Thread.sleep(100);\\n        } catch (InterruptedException e) {\\n            e.printStackTrace();\\n        }\\n        return queryWithLock(keyPrefix, id, type, dbQuery, timeout, unit);\\n    }\\n}\\n\\n```\\n\\n\\n\\n### \u8ba2\u5355\\n#### id\u751f\u6210\u5668\\n\u4e0d\u91c7\u7528\u81ea\u589eID, \u4e3b\u8981\u662f\u81ea\u589e\u4e0d\u65b9\u4fbf\u5206\u8868, \u6539\u4e3a\u5168\u5c40\u552f\u4e00ID\u751f\u6210\u5668\\n\\n\u5982\u4f55\u5b9e\u73b0\u552f\u4e00ID? \u8fd8\u662f\u7528redis\u5b9e\u73b0\u5e76\u53d1\u4e0b\u7684\u63a7\u5236, \u4e5f\u65b9\u4fbf\u62d3\u5c55\u5230\u5206\u5e03\u5f0f, \u4f7f\u7528redis\u7684`incr`\\n\\nid\u8bbe\u8ba1\u4e3a \u65f6\u95f4\u6233+seqNo, \u8fd8\u6709\u5c31\u662f\u628akey\u8bbe\u7f6e\u4e3a\u65e5\u671f\u4ee5\u907f\u514d\u8d85\u51fa32\u4f4d\\n\\n```java\\npackage com.hmdp.utils;\\n\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.data.redis.core.StringRedisTemplate;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.time.LocalDateTime;\\nimport java.time.ZoneOffset;\\nimport java.time.format.DateTimeFormatter;\\n\\n@Component\\npublic class RedisIdWorker {\\n    @Autowired\\n    private StringRedisTemplate stringRedisTemplate;\\n\\n    private static final long BEGIN_TIMESTAMP = 1640995200L;\\n    private static final long COUNT_SEQ_BITS = 32;\\n\\n    public long nextId(String keyPrefix){\\n        LocalDateTime now = LocalDateTime.now();\\n        long nowSecond = now.toEpochSecond(ZoneOffset.UTC);\\n        long timeStamp = nowSecond - BEGIN_TIMESTAMP;\\n        // id: sign bit + timestamp + seqNo\\n        // \u4e3a\u4e86\u907f\u514d\u8d85\u8fc72^32, \u4f7f\u7528\u65e5\u4f5c\u4e3akey\u7684\u540e\u7f00\\n        // \u83b7\u53d6\u65e5\u671f\\n        String yyyyMMdd = now.format(DateTimeFormatter.ofPattern(\\"yyyyMMdd\\")); // \\"20241019\\"\\n        long seqNo = stringRedisTemplate.opsForValue().increment(\\"incr:\\" + keyPrefix + \\":\\" + yyyyMMdd);\\n        return timeStamp << COUNT_SEQ_BITS | seqNo;\\n    }\\n}\\n\\n```\\n\\n\\n\\n\\n\\n\\n\\n#### \u79d2\u6740\u8d85\u5356\u95ee\u9898\\n\\n\u7b80\u5355\u7684getStock\u67e5\u8be2\u5e93\u5b58, \u4e0d\u8db3\u8fd4\u56de\u5728\u9ad8\u5e76\u53d1\u4e0b\u662f\u4f1a\u5bc4\u7684(jmeter \u6253\u4e00\u6253, \u6253\u4e0d\u51fa\u6765\u7684\u591a\u8bd5\u51e0\u6b21)\\n\\n![image-20241019222129520](https://s2.loli.net/2024/10/19/Y73avpAWHoiNxnr.png)\\n\\n```java\\n    @Transactional\\n    @Override\\n    public Result seckillVoucher(Long voucherId) {\\n        // 1. \u662f\u5426\u5b58\u5728\u8be5\u79d2\u6740\u4f18\u60e0\u5238\\n        SeckillVoucher voucher = seckillVoucherService.getById(voucherId);\\n        // 2. \u662f\u5426\u5728\u79d2\u6740\u65f6\u95f4\u5185\\n        if (LocalDateTime.now().isBefore(voucher.getBeginTime()) || LocalDateTime.now().isAfter(voucher.getEndTime())) {\\n            return Result.fail(\\"\u4e0d\u5728\u79d2\u6740\u65f6\u95f4\u5185\\");\\n        }\\n        // 3. \u662f\u5426\u8fd8\u6709\u5e93\u5b58\\n        if (voucher.getStock() < 1) {\\n            return Result.fail(\\"\u5e93\u5b58\u4e0d\u8db3\\");\\n        }\\n        // 4. \u751f\u6210\u8ba2\u5355\\n        VoucherOrder order = new VoucherOrder();\\n        order.setId(redisIdWorker.nextId(SECKILL_STOCK_KEY));\\n        // 5. \u6263\u51cf\u5e93\u5b58\\n        seckillVoucherService.update().setSql(\\"stock = stock - 1\\").eq(\\"voucher_id\\", voucherId).update();\\n        return Result.ok(order);\\n    }\\n```\\n\\n\u8fd9\u6837\u5355\u5355\u52a0\u4e00\u4e2a@Transactional\u53ea\u662f\u4fdd\u8bc1\u4e86\u9519\u8bef\u56de\u6eda, \u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5e76\u53d1\u6b21\u5e8f(\u9664\u975e\u6bd4\u5982\u5f3a\u6307\u5b9aisolation sequential)\\n\\n\\n\\n\u5e93\u5b58\u51cf\u8fd8\u6ca1\u6709commit\\n\\n\u4e0d\u662f\u539f\u5b50\u6027\u5bfc\u81f4\u7684\\n\\n\u6240\u4ee5\u8981\u52a0\u9501: \u60b2\u89c2\u9501/\u4e50\u89c2\u9501\\n\\n\u4e50\u89c2\u9501: \u8ba4\u4e3a\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\u4e0d\u4e00\u5b9a\u4f1a\u53d1\u751f, \u53ea\u5728\u66f4\u65b0\u7684\u65f6\u5019\u5224\u65ad\u662f\u5426\u6709\u7ebf\u7a0b\u5df2\u7ecf\u6539\u8fc7\u4e86\\n\\n\u5982\u679c\u6ca1\u6709\u4fee\u6539\u5c31\u662f\u5b89\u5168\u7684, \u6709\u53ef\u4ee5\u91cd\u8bd5\u6216\u8005\u5f02\u5e38\\n\\n\u5224\u65ad\u4fee\u6539\u8fc7:\\n\\n- \u7248\u672c\u53f7\u6cd5\\n\\n\u5728\u8fd9\u91cc\u5c31\u662f, `set stock = stock - 1 where id = 10 and stock = original_stock`\\n\\n(\u5e7f\u4e49CAS)\\n\\n\u8fd9\u5b9e\u9645\u4e0a\u662f\u4f9d\u8d56\u4e8e\u5e76\u53d1\u4e8b\u52a1\u65f6\u4f1a\u91cd\u65b0\u5224\u65ad\u8fd9\u4e00\u884c\u662f\u5426\u6210\u7acb\\n\\npg doc\\n\\n> `UPDATE`, `DELETE`, `SELECT FOR UPDATE`, and `SELECT FOR SHARE` commands behave the same as `SELECT` in terms of searching for target rows: they will only find target rows that were committed as of the command start time. However, such a target row might have already been updated (or deleted or locked) by another concurrent transaction by the time it is found. In this case, the would-be updater will wait for the first updating transaction to commit or roll back (if it is still in progress). If the first updater rolls back, then its effects are negated and the second updater can proceed with updating the originally found row. If the first updater commits, the second updater will ignore the row if the first updater deleted it, otherwise it will attempt to apply its operation to the updated version of the row. The search condition of the command (the `WHERE` clause) is re-evaluated to see if the updated version of the row still matches the search condition. If so, the second updater proceeds with its operation using the updated version of the row. In the case of `SELECT FOR UPDATE` and `SELECT FOR SHARE`, this means it is the updated version of the row that is locked and returned to the client.\\n> `UPDATE` \u3001 `DELETE` \u3001 `SELECT FOR UPDATE`\u548c`SELECT FOR SHARE`\u547d\u4ee4\u5728\u641c\u7d22\u76ee\u6807\u884c\u65b9\u9762\u4e0e`SELECT`\u7684\u884c\u4e3a\u76f8\u540c\uff1a\u5b83\u4eec\u53ea\u4f1a\u67e5\u627e\u622a\u81f3\u547d\u4ee4\u5f00\u59cb\u65f6\u95f4\u5df2\u63d0\u4ea4\u7684\u76ee\u6807\u884c\u3002\u7136\u800c\uff0c\u8fd9\u6837\u7684\u76ee\u6807\u884c\u5728\u88ab\u53d1\u73b0\u65f6\u53ef\u80fd\u5df2\u7ecf\u88ab\u53e6\u4e00\u4e2a\u5e76\u53d1\u4e8b\u52a1\u66f4\u65b0\uff08\u6216\u5220\u9664\u6216\u9501\u5b9a\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6f5c\u5728\u7684\u66f4\u65b0\u7a0b\u5e8f\u5c06\u7b49\u5f85\u7b2c\u4e00\u4e2a\u66f4\u65b0\u4e8b\u52a1\u63d0\u4ea4\u6216\u56de\u6eda\uff08\u5982\u679c\u4ecd\u5728\u8fdb\u884c\u4e2d\uff09\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u66f4\u65b0\u7a0b\u5e8f\u56de\u6eda\uff0c\u5219\u5176\u6548\u679c\u5c06\u88ab\u5426\u5b9a\uff0c\u7b2c\u4e8c\u4e2a\u66f4\u65b0\u7a0b\u5e8f\u53ef\u4ee5\u7ee7\u7eed\u66f4\u65b0\u6700\u521d\u627e\u5230\u7684\u884c\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u66f4\u65b0\u7a0b\u5e8f\u63d0\u4ea4\uff0c\u5219\u7b2c\u4e8c\u4e2a\u66f4\u65b0\u7a0b\u5e8f\u5c06\u5ffd\u7565\u7b2c\u4e00\u4e2a\u66f4\u65b0\u7a0b\u5e8f\u5220\u9664\u7684\u884c\uff0c\u5426\u5219\u5b83\u5c06\u5c1d\u8bd5\u5c06\u5176\u64cd\u4f5c\u5e94\u7528\u4e8e\u8be5\u884c\u7684\u66f4\u65b0\u7248\u672c\u3002\u91cd\u65b0\u8bc4\u4f30\u547d\u4ee4\u7684\u641c\u7d22\u6761\u4ef6\uff08 `WHERE`\u5b50\u53e5\uff09\uff0c\u4ee5\u67e5\u770b\u8be5\u884c\u7684\u66f4\u65b0\u7248\u672c\u662f\u5426\u4ecd\u7136\u4e0e\u641c\u7d22\u6761\u4ef6\u5339\u914d\u3002\u5982\u679c\u662f\uff0c\u5219\u7b2c\u4e8c\u66f4\u65b0\u5668\u4f7f\u7528\u8be5\u884c\u7684\u66f4\u65b0\u7248\u672c\u7ee7\u7eed\u5176\u64cd\u4f5c\u3002\u5728`SELECT FOR UPDATE`\u548c`SELECT FOR SHARE`\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u662f\u9501\u5b9a\u5e76\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u884c\u7684\u66f4\u65b0\u7248\u672c\u3002\\n\\nmysql \u9ed8\u8ba4\u662f\u66f4\u9ad8\u4e00\u6863\u7684 repeatable read\\n\\nhttps://dev.mysql.com/doc/refman/8.4/en/innodb-consistent-read.html\\n\\n\\n\\nupdate\u7684set\u90e8\u5206\u672c\u8eab\u662f\u4e00\u5b9a\u6709\u539f\u5b50\u6027\u7684(\u53ea\u8981\u652f\u6301\u9501\u548c\u4e8b\u52a1, \u65e0\u975e\u662f\u9501\u6574\u8868\u8fd8\u662f\u884c\u7ea7\u9501)\\n\\n\u4f46update\u9700\u8981\u4e00\u4e2aread\u7684\u8fc7\u7a0b, \u8fd9\u90e8\u5206\u5728\u4f4e\u4e00\u81f4\u6027\u4e0b\u662f\u53ef\u4ee5\u4e0d\u540c\u7684(\u4e0d\u52a0\u8bfb\u9501), \u8fd9\u4e5f\u662f\u8fd9\u91cc\u9700\u8981\u68c0\u67e5\u7684\u539f\u56e0\\n\\n\\n\\n\\n\\n\u6700\u540e\u5c31\u662f\u7b80\u5355\u52a0\u4e00\u4e2a eq\u5224\u65ad\\n\\n```java\\n        boolean succcess = seckillVoucherService.update().setSql(\\"stock = stock - 1\\").\\n                eq(\\"voucher_id\\", voucherId).\\n                eq(\\"stock\\", voucher.getStock()).\\n                update();\\n        if (!succcess){\\n            return Result.fail(\\"\u5e93\u5b58\u4e0d\u8db3\\");\\n        }\\n```\\n\\n\u53ef\u4ee5\u8bd5\u8bd5, \u9ad8qps\u4e00\u6837\u6253\u4e0d\u52a8\u7684\\n\\n\u5b9e\u9645\u4e0a\u6709\u66f4\u597d\u7684\u65b9\u6848, \u53ef\u4ee5\u89c2\u5bdf\u5230, \u5728\u8fd8\u6709\u5e93\u5b58\u7684\u65f6\u5019, \u8fd9\u6837\u7684\u5224\u65ad\u65b9\u5f0f\u4e5f\u4f1a\u5bfc\u81f4\u90e8\u5206\u8bf7\u6c42\u7531\u4e8e\u89e6\u53d1\u4e86\u51b2\u7a81\u800c\u5931\u8d25\\n\\n\u6240\u4ee5\u7528\\n\\n```java\\n        boolean succcess = seckillVoucherService.update().setSql(\\"stock = stock - 1\\").\\n                eq(\\"voucher_id\\", voucherId).\\n                gt(\\"stock\\", 0). // \u5927\u4e8e0\u5c31\u884c\\n                update();\\n```\\n\\n\\n\\n#### \u4e00\u4eba\u4e00\u5355\\n\u4e00\u4e2a\u7528\u6237\u53ea\u80fd\u4e70\u4e00\u4e2a\u4f18\u60e0\u5238\\n\u6709\u4ee5\u4e0b\u51e0\u70b9\u9700\u8981\u6ce8\u610f:\\n\\n1. \u8fd9\u91cc\u7528\u60b2\u89c2\u9501, \u7531\u4e8e\u662f\u4e0d\u505c\u7684insert, \u6240\u4ee5\u4e50\u89c2\u9501\u4e0d\u597d\u505a\\n2. **\u60b2\u89c2\u9501\u7684`synchronized` \u7684key\u7528`userId.toString().intern()`**\\n   - \u4e0d\u540cuser\u5e94\u8be5\u6709\u4e0d\u540c\u7684\u9501, \u800c\u4e0d\u662f\u4e00\u628a\u5927\u9501\u9000\u5316\u6210\u4e32\u884c.\\n   - synchronized\u5fc5\u987b\u653e\u5728(\u4e8b\u52a1\u7684)\u5916\u9762, \u4e5f\u5c31\u662f\u8c03\u7528\u7684\u5730\u65b9\u800c\u4e0d\u662f\u88ab\u8c03\u7528\u51fd\u6570\u5185\u90e8\u9501, \u5426\u5219sychronized\u5148\u9000\u51fa,\u76f8\u5f53\u4e8e\u5148\u653e\u9501\u518dcommit\\n   - \u5728\u9501\u7684\u65f6\u5019, \u9700\u8981\u6ce8\u610f\u5230userId\u662f\u4e00\u4e2a\u672c\u5730\u53d8\u91cf, \u4e0d\u80fd\u9501\u5728\u5bf9\u8c61\u4e0a, **\u9700\u8981\u9501\u5728\u5b57\u7b26\u4e32\u7684\u5b57\u9762\u503c\u4e0a**, \u6240\u4ee5\u6709`toString().intern()`, \u9501\u5728\u4e86\u5e38\u91cf\u6c60\u7684\u5bf9\u8c61\u4e0a\\n3. \u8c03\u7528\u7684\u65f6\u5019, \u9700\u8981\u6ce8\u610f\u5230\u4e8b\u52a1\u7684\u5e95\u5c42\u5b9e\u73b0\u662f\u52a0\u4e86\u4e00\u4e2aproxy\u4ee3\u7406\u7c7b, \u5982\u679c\u76f4\u63a5`CheckAndSaveOrder`\u662f\u5728this\u4e0a\u8c03\u7528, \u5c31\u6ca1\u6709\u4e86\u4e8b\u52a1\u7684\u6548\u679c, \u6240\u4ee5\u4f7f\u7528`AopContext.currentProxy()`\u83b7\u53d6\u4ee3\u7406\u7c7b\u540e\u8c03\u7528.\\n\\n(\u5728\u4f9d\u8d56\u91cc\u9762\u52a0\u4e0a\\n\\n```xml\\n        <dependency>\\n            <groupId>org.aspectj</groupId>\\n            <artifactId>aspectjweaver</artifactId>\\n            <version>1.9.7</version>\\n        </dependency>\\n```\\n\\n\u5728Application\u5904\u52a0\u4e0a`@EnableAspectJAutoProxy(exposeProxy = true)` \u66b4\u9732\u4ee3\u7406\\n\\n```java\\n@EnableAspectJAutoProxy(exposeProxy = true)\\n@MapperScan(\\"com.hmdp.mapper\\")\\n@SpringBootApplication\\npublic class HmDianPingApplication {\\n    //...\\n}\\n\\n```\\n\\n\\n\\n)\\n\\n\u6700\u540e\u4ee3\u7801\u8fd9\u6837(\u5b9a\u6b7bid\u662f\u65b9\u4fbf\u6d4b\u8bd5)\\n\\n```java\\n    @Override\\n    public Result seckillVoucher(Long voucherId) {\\n        // 1. \u662f\u5426\u5b58\u5728\u8be5\u79d2\u6740\u4f18\u60e0\u5238\\n        SeckillVoucher voucher = seckillVoucherService.getById(voucherId);\\n        // 2. \u662f\u5426\u5728\u79d2\u6740\u65f6\u95f4\u5185\\n        if (LocalDateTime.now().isBefore(voucher.getBeginTime()) || LocalDateTime.now().isAfter(voucher.getEndTime())) {\\n            return Result.fail(\\"\u4e0d\u5728\u79d2\u6740\u65f6\u95f4\u5185\\");\\n        }\\n        // 3. \u662f\u5426\u8fd8\u6709\u5e93\u5b58\\n        if (voucher.getStock() < 1) {\\n            return Result.fail(\\"\u5e93\u5b58\u4e0d\u8db3\\");\\n        }\\n        // Long userId = UserHolder.getUser().getId();\\n        Long userId = 1L;\\n        VoucherOrder order;\\n        synchronized (userId.toString().intern()) {\\n            // get proxy object\\n            IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();\\n            order = proxy.CheckAndSaveOrder(voucherId);\\n            if (order == null) {\\n                return Result.fail(\\"\u60a8\u5df2\u7ecf\u62a2\u8d2d\u8fc7\u4e86\\");\\n            }\\n        }\\n\\n        // 5. \u6263\u51cf\u5e93\u5b58\\n        boolean succcess = seckillVoucherService.update().setSql(\\"stock = stock - 1\\").\\n                eq(\\"voucher_id\\", voucherId).\\n                gt(\\"stock\\", 0).\\n                update();\\n        if (!succcess) {\\n            return Result.fail(\\"\u5e93\u5b58\u4e0d\u8db3\\");\\n        }\\n        return Result.ok(order);\\n    }\\n\\n    @Transactional\\n    @Override\\n    public VoucherOrder CheckAndSaveOrder(Long voucherId){\\n        // \u4e00\u4eba\u4e00\u5355\u6821\u9a8c\\n//        boolean exist =super.lambdaQuery().eq(VoucherOrder::getUserId, UserHolder.getUser().getId()).\\n//                eq(VoucherOrder::getVoucherId, voucherId).count() > 0;\\n        boolean exist =super.lambdaQuery().eq(VoucherOrder::getUserId, 1).\\n                eq(VoucherOrder::getVoucherId, voucherId).count() > 0;\\n        if (exist) {\\n            return null;\\n        }\\n        // 4. \u751f\u6210\u8ba2\u5355\\n        VoucherOrder order = new VoucherOrder();\\n        order.setId(redisIdWorker.nextId(SECKILL_STOCK_KEY));\\n        order.setVoucherId(voucherId);\\n        order.setCreateTime(LocalDateTime.now());\\n        order.setUpdateTime(LocalDateTime.now());\\n        order.setStatus(1);\\n        // Long userId = UserHolder.getUser().getId();\\n        Long userId = 1L;\\n        order.setUserId(userId);\\n        boolean success = super.save(order);\\n        if (!success) {\\n            return null;\\n        }\\n        return order;\\n  \\n    }\\n```\\n\\n\\n#### \u96c6\u7fa4\u5b89\u5168\u95ee\u9898\\n\\n\u52a0\u9501\u53ef\u4ee5\u89e3\u51b3\u5355\u673a\u4e00\u4eba\u4e00\u5355, \u4f46\u4e0d\u80fd\u89e3\u51b3\u96c6\u7fa4\u4e00\u4eba\u4e00\u5355\\n\\n\u5982\u4e0b\u5c31\u5bc4\\n\\n```nginx\\n    upstream backend {\\n        server 127.0.0.1:8081 max_fails=5 fail_timeout=10s weight=1;\\n        server 127.0.0.1:8082 max_fails=5 fail_timeout=10s weight=1;\\n    }\\n```\\n\\n(\u53ef\u4ee5copy\u4e00\u4e2aapplication\u518d\u542f\u52a8(vmoptions:-Dserver.port=8082\u6539\u7aef\u53e3)\u5c31\u8ba9idea\u53c8\u542f\u52a8\u4e86\u4e00\u4e2atomcat)\\n\\n\u7ecf\u5178\u628a\u52a0\u9501\u903b\u8f91\u4e22\u5230redis\\n\\n\\n\\n#### \u5206\u5e03\u5f0f\u9501\\n\\nsynchronized\u8c03\u7528\u672c\u5730JVM\u7684\u9501\u76d1\u89c6\u5668\\n\\n\u5206\u5e03\u5f0f\u9501\uff1a\u591a\u8fdb\u7a0b\u53ef\u89c1\u4e14\u4e92\u65a5\\n\\n- \u9ad8\u53ef\u7528\\n- \u9ad8\u6027\u80fd\\n- \u5b89\u5168\u6027\\n\\n- \u53ef\u91cd\u5165\uff1f\u516c\u5e73\uff1f...\\n\\n\\n\\n\u5206\u5e03\u5f0f\u9501\uff1a\\n\\n|        | mysql             | redis                             | zookeeper                  |\\n| ------ | ----------------- | --------------------------------- | -------------------------- |\\n| \u4e92\u65a5   | mysql\u672c\u8eab\u7684\u4e92\u65a5\u9501 | setnx\u8fd9\u6837\u7684\u4e92\u65a5\u547d\u4ee4               | \u8282\u70b9\u552f\u4e00\u6027\u548c\u6709\u5e8f\u6027\u5b9e\u73b0\u4e92\u65a5 |\\n| \u9ad8\u53ef\u7528 | \u597d                | \u597d                                | \u597d                         |\\n| \u9ad8\u6027\u80fd | \u4e00\u822c              | \u597d                                | \u4e00\u822c\uff08\u5f3a\u4e00\u81f4\u6027\uff09           |\\n| \u5b89\u5168\u6027 | \u65ad\u5f00\u8fde\u63a5\u81ea\u52a8\u91ca\u653e  | \u9700\u8981\u624b\u52a8\u5220key\uff0c\u4f46\u53ef\u4ee5\u5229\u7528\u8fc7\u671f\u65f6\u95f4 | \u65ad\u5f00\u8fde\u63a5\u81ea\u52a8\u91ca\u653e           |\\n\\n\\n\\n\\n\\nredis setnx: set if not exists\\n\\n```redis\\nsetnx key value\\nexpire key 10\\ndel key\\n```\\n\\nsetnx\u548cexpire\u4e2d\u95f4\u5b95\u673a\uff1f-> \u539f\u5b50\u6027\\n\\n\u5408\u5e76\u6210\u4e00\u6761\u547d\u4ee4\\n\\n```redis\\nSET lock thread1 EX 10 NX\\ndel lock\\n```\\n\\n\\n\\n\\n\\n\u4e00\u4e2a\u5927\u6982\u7684\u4ee3\u7801\u50cf\u8fd9\u6837\\n\\n```java\\npublic class RedisDistributedLock implements ILock{\\n    @Resource\\n    private StringRedisTemplate redisTemplate;\\n    private static final String LOCK_PREFIX = \\"lock:\\";\\n\\n    private static String getKey(String name){\\n        return LOCK_PREFIX + name;\\n    }\\n\\n    @Override\\n    public boolean tryLock(String name, long Timeout) {\\n        String key = getKey(name);\\n        long value = Thread.currentThread().getId();\\n        Boolean success = redisTemplate.opsForValue().setIfAbsent(key, String.valueOf(value), Timeout, TimeUnit.SECONDS);\\n        return Boolean.TRUE.equals(success); // success != null && success\\n    }\\n\\n    @Override\\n    public void unlock(String name) {\\n        redisTemplate.delete(getKey(name));\\n    }\\n}\\n```\\n\\n\\n\\n\u5b58\u5728\u7684\u95ee\u9898:\\n\\n\u4e1a\u52a1A\u963b\u585e\u8d85\u8fc7\u8d85\u65f6\u65f6\u95f4->\u53e6\u4e00\u4e2a\u7ebf\u7a0bB\u62ff\u9501->\u963b\u585e\u7ebf\u7a0bA\u7ed3\u675f\u963b\u585e,\u628a\u9501\u91ca\u653e->\u5bc4\uff0c\u8fd9\u65f6\u5019C\u53ef\u4ee5\u62a2B\u9501\u4e86\\n\\n\u89e3\u51b3\u65b9\u6848\uff0c\u91ca\u653e\u524d\u68c0\u67e5\u8fd9\u9501\u8fd8\u662f\u4e0d\u662f\u81ea\u5df1\u7684\\n\\n\\n\\n\u83b7\u53d6\u9501->\u4e1a\u52a1\u8d85\u65f6\u6216\u8005\u670d\u52a1\u5b95\u673a, \u81ea\u52a8\u91ca\u653e\u9501/\u6210\u529f\u6267\u884c\u4e1a\u52a1,\u5224\u65ad\u9501\u7684\u6301\u6709\u8005\u8fd8\u662f\u5426\u662f\u81ea\u5df1,\u662f\u81ea\u5df1\u624b\u52a8\u91ca\u653e\u9501\\n\\n\u9501\u6807\u8bc6-> UUID(as jvm id) + \u7ebf\u7a0bid\\n\\n```java\\npublic class RedisDistributedLock implements ILock {\\n    @Resource\\n    private StringRedisTemplate redisTemplate;\\n    private static final String LOCK_PREFIX = \\"lock:\\";\\n    // JVM\u552f\u4e00\u6807\u8bc6\\n    private static final String JVMPrefix = UUID.randomUUID().toString(true);\\n\\n    private static String getKey(String name){\\n        return LOCK_PREFIX + name;\\n    }\\n    private static String getUniqueValue(){\\n        return JVMPrefix + \\"-\\" + Thread.currentThread().getId();\\n    }\\n    @Override\\n    public boolean tryLock(String name, long Timeout) {\\n        String key = getKey(name);\\n        String value = getUniqueValue();\\n        Boolean success = redisTemplate.opsForValue().setIfAbsent(key, value, Timeout, TimeUnit.SECONDS);\\n        return Boolean.TRUE.equals(success); // success != null && success\\n    }\\n\\n    @Override\\n    public void unlock(String name) {\\n        String whoTakes = redisTemplate.opsForValue().get(getKey(name));\\n        if (getUniqueValue().equals(whoTakes)){\\n            redisTemplate.delete(getKey(name));\\n        }\\n    }\\n}\\n\\n```\\n\\n\u4f46\u8fd8\u6709\u95ee\u9898\\n\\n\u5728\u5224\u65ad\u5b8c\u7684\u65f6\u5019\uff0c\u89e6\u53d1\u4e86GC\u963b\u585e\uff0c\u7136\u540e\u8d85\u65f6\u91ca\u653e\u4e86\uff0c\u7136\u540e\u5176\u4ed6\u7ebf\u7a0b\u62ff\u8d70\uff0c\u7136\u540e\u5c31\u662f\u8bef\u5220\\n\\n\u63d0\u4f9b\u539f\u5b50\u6027: redis \u7684 lua \u811a\u672c\u6a21\u5f0f\\n\\n\u591a\u6761redis\u547d\u4ee4\u5199\u5230\u4e00\u884clua\u91cc\u9762\uff0c\u4ece\u800c\u8ba9redis\u4fdd\u8bc1\u539f\u5b50\u6027\\n\\n\\n\\nredis\u7684`EVAL`\u547d\u4ee4\u6267\u884c\u811a\u672c\\n\\n`help @scripting`\\n\\n\u4f8b\u5982\\n\\n`EVAL \\"return redis.call(\'set\', KEYS[1], ARGV[1])\\" 1 name Rose`\\n\\n1\uff1a\u67091\u4e2akey\u7c7b\u578b\u53c2\u6570, \u653e\u5165KEYS[1]\\n\\n```lua\\nlocal key = KEYS[1]\\nlocal me = ARGV[1]\\n\\n-- \u83b7\u53d6\u9501\u7684\u6301\u6709\u8005\\nlocal whoTakes = redis.call(\'get\', key)\\nif(whoTakes == me) then\\n    return redis.call(\'del\', key)\\nend\\nreturn 0\\n```\\n\\n\u6700\u540e\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f15\u5165\u4e86\\n\\n```java\\nprivate static final DefaultRedisScript<Long> UNLOCK_SCRIPT;\\nstatic {\\n    UNLOCK_SCRIPT = new DefaultRedisScript<>();\\n    UNLOCK_SCRIPT.setResultType(Long.class);\\n    UNLOCK_SCRIPT.setLocation(new ClassPathResource(\\"unlock.lua\\")); // classpath:unlock.lua\\n    // classpath, \u7c7b\u8def\u5f84, \u9ed8\u8ba4\u662f\u5f53\u524d\u76ee\u5f55\uff0c\u4f46\u662fspringboot + maven\u4f1a\u5c06resources\uff0c\u4f9d\u8d56\u7b49\u76ee\u5f55\u81ea\u52a8\u52a0\u5165classpath\u7b80\u5316\u914d\u7f6e\\n}\\n```\\n\\n```java\\npublic void unlock(String name) {\\n        String whoTakes = redisTemplate.opsForValue().get(getKey(name));\\n//        if (getUniqueValue().equals(whoTakes)){\\n//            redisTemplate.delete(getKey(name));\\n//        }\\n        // \u4e3a\u4e86\u907f\u514d\u8bef\u5220\uff0c\u4fdd\u8bc1GC\u6216\u8005\u5176\u4ed6java\u5185\u90e8\u5835\u585e\u4e0b\u7684\u539f\u5b50\u6027\uff0c\u4f7f\u7528lua\u811a\u672c\\n        redisTemplate.execute(UNLOCK_SCRIPT, Collections.singletonList(getKey(name)), getUniqueValue());\\n    }\\n```\\n\\n\\n\\n\u8fd9\u4e2a\u7b80\u5355\u7684\u5206\u5e03\u5f0f\u9501\u5269\u4e0b\u7684\u95ee\u9898\uff1a\\n\\n- \u4e0d\u53ef\u91cd\u5165->\u6539\u9020\u811a\u672c\\n- \u4e0d\u53ef\u91cd\u8bd5\\n- \u8d85\u65f6\u91ca\u653e\\n- \u4e3b\u4ece\u4e00\u81f4 \u4e3b\u8282\u70b9\u83b7\u53d6\u9501\u5c1a\u672a\u540c\u6b65\u7ed9\u4ece\u8282\u70b9\uff0c\u7136\u540e\u4e3b\u8282\u70b9\u6302\u4e86\\n\\n\\n\\n\u4f7f\u7528\u6210\u719f\u6846\u67b6 Redisson\\n\\n\u5404\u79cd\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\uff1a\\n\\n\u53ef\u91cd\u5165\u9501\u3001\u516c\u5e73\u9501\u3001\u8054\u9501\u3001\u8bfb\u5199\u9501\u3001\u53ef\u8fc7\u671f\u4fe1\u53f7\u91cf\u3001...\\n\\n\\n\\n\\n\\n```java\\npackage com.hmdp.config;\\n\\nimport org.redisson.Redisson;\\nimport org.redisson.api.RedissonClient;\\nimport org.redisson.config.Config;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\n\\n@Configuration\\npublic class RedissonConfig {\\n    @Value(\\"${spring.redis.host}\\")\\n    private String host;\\n\\n    @Value(\\"${spring.redis.port}\\")\\n    private String port;\\n\\n    @Value(\\"${spring.redis.password}\\")\\n    private String password;\\n    @Bean\\n    public RedissonClient redissonClient(){\\n        Config config = new Config();\\n        String address = \\"redis://\\" + host + \\":\\" + port;\\n        config.useSingleServer().setAddress(address).setPassword(password);\\n        return Redisson.create(config);\\n    }\\n}\\n\\n```\\n\\ntryLock \u5c1d\u8bd5\u83b7\u53d6\u9501\u95f4\u9694\u65f6\u95f4\uff0c\u81ea\u52a8\u91ca\u653e\u65f6\u95f4\uff0c \u65f6\u95f4\u5355\u4f4d\\n\\n\\n\\n\u914d\u7f6e\u5b8c\u4e4b\u540e\u53ef\u4ee5\u7b80\u5355\u7684demo\u6d4b\u8bd5\\n\\n```java\\nimport com.hmdp.HmDianPingApplication;\\nimport org.junit.Test;\\nimport org.junit.runner.RunWith;\\nimport org.redisson.api.RLock;\\nimport org.redisson.api.RedissonClient;\\n\\nimport javax.annotation.Resource;\\nimport java.util.concurrent.TimeUnit;\\nimport org.springframework.boot.test.context.SpringBootTest;\\nimport org.springframework.test.context.junit4.SpringRunner;\\n\\n@RunWith(SpringRunner.class)\\n@SpringBootTest(classes = HmDianPingApplication.class)\\npublic class RedissonDemoTest {\\n    @Resource\\n    private RedissonClient redissonClient;\\n\\n    @Test\\n    public void TryLockTest() throws InterruptedException {\\n        RLock lock = redissonClient.getLock(\\"redisson:anylock\\");\\n        // \u6ce8\u610f\u8fd9\u91cc\u7684key\u4e0d\u80fd\u548credisTemplate\u7684key\u91cd\u590d\uff0c\u5426\u5219\u5f71\u54cd\u7c7b\u578b\u5224\u65ad\u4f1a\u5bc4\\n        boolean isLock = lock.tryLock(1, 10, TimeUnit.SECONDS);\\n        if(isLock){\\n            try {\\n                System.out.println(\\"Get lock success\\");\\n            } finally {\\n                lock.unlock();\\n            }\\n        }\\n    }\\n}\\n\\n```\\n\\n\\n\\n\u4e4b\u524d\u7684api\u5927\u6982\u4fee\u6539\u6210\\n\\n```java\\nda//    @Resource\\n//    private RedisDistributedLock lock;\\n    @Resource\\n    private RedissonClient redissonClient;\\n\\n    @Override\\n    public Result seckillVoucher(Long voucherId) {\\n        // 1. \u662f\u5426\u5b58\u5728\u8be5\u79d2\u6740\u4f18\u60e0\u5238\\n        SeckillVoucher voucher = seckillVoucherService.getById(voucherId);\\n        // 2. \u662f\u5426\u5728\u79d2\u6740\u65f6\u95f4\u5185\\n        if (LocalDateTime.now().isBefore(voucher.getBeginTime()) || LocalDateTime.now().isAfter(voucher.getEndTime())) {\\n            return Result.fail(\\"\u4e0d\u5728\u79d2\u6740\u65f6\u95f4\u5185\\");\\n        }\\n        // 3. \u662f\u5426\u8fd8\u6709\u5e93\u5b58\\n        if (voucher.getStock() < 1) {\\n            return Result.fail(\\"\u5e93\u5b58\u4e0d\u8db3\\");\\n        }\\n        // Long userId = UserHolder.getUser().getId();\\n        Long userId = 1L;\\n        VoucherOrder order;\\n//        synchronized (userId.toString().intern()) {\\n//            // get proxy object\\n//            IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();\\n//            order = proxy.CheckAndSaveOrder(voucherId);\\n//            if (order == null) {\\n//                return Result.fail(\\"\u60a8\u5df2\u7ecf\u62a2\u8d2d\u8fc7\u4e86\\");\\n//            }\\n//        }\\n        RLock lock = redissonClient.getLock(\\"redisson:order:lock:\\" + userId);\\n        boolean success = false;\\n        try{\\n            success = lock.tryLock(1, 10, TimeUnit.SECONDS);\\n        } catch (InterruptedException e) {\\n            if(lock.isHeldByCurrentThread()){\\n                lock.unlock();\\n            }\\n            throw new RuntimeException(e);\\n        }\\n\\n        if(!success){\\n            // \u6b64\u7528\u6237\u5e76\u53d1\u4e0b\u5355\\n            return Result.fail(\\"\u60a8\u5df2\u7ecf\u62a2\u8d2d\u8fc7\u4e86\\");\\n        }\\n        // \u62ff\u5230\u9501\\n        try{\\n            IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();\\n            order = proxy.CheckAndSaveOrder(voucherId);\\n            if (order == null) {\\n                return Result.fail(\\"\u60a8\u5df2\u7ecf\u62a2\u8d2d\u8fc7\u4e86\\");\\n            }\\n            // 5. \u6263\u51cf\u5e93\u5b58\\n            success = seckillVoucherService.update().setSql(\\"stock = stock - 1\\").\\n                    eq(\\"voucher_id\\", voucherId).\\n                    gt(\\"stock\\", 0).\\n                    update();\\n        } finally {\\n            lock.unlock();\\n        }\\n\\n        if (!success) {\\n            return Result.fail(\\"\u5e93\u5b58\u4e0d\u8db3\\");\\n        }\\n        return Result.ok(order);\\n    }\\n```\\n\\n\u6253\u4e00\u6253\u53d1\u73b0\u786e\u5b9eok\\n\\n\\n\\nredisson\u662f\u7b26\u5408java\u7ebf\u7a0b\u89c4\u8303\u7684\uff0c\u53ea\u6709\u62ff\u9501\u7684\u7ebf\u7a0b\u53ef\u4ee5\u653e\u9501\\n\\n\\n\\nredisson\u53ef\u91cd\u5165\u9501\u539f\u7406\\n\\nredis\u7684hset, hset\u7684field\u662fthreadId, value\u662f\u8ba1\u6570\u503c\\n\\n\u4e4b\u540elua\u811a\u672c, \u62ff\u9501\u653e\u9501\u4fee\u6539\u8ba1\u6570\u5373\u53ef(`hset, hexists, hincrby`)\\n\\n\\n\\nredisson\u7684lock\u6709\u7c7b\u4f3cfutex\u7684\u8bbe\u8ba1\uff0c\u5229\u7528\u4e86redis\u7684pub/sub\u548cfuture(\u5e95\u5c42\u7684park/unpark/\u56de\u8c03)\u673a\u5236\u8fbe\u5230\u8ba9\u51facpu\u800c\u4e0d\u662f\u81ea\u65cb\u7684\u673a\u5236\uff08\u5728\u7b49\u5f85\u9501\u7684\u65f6\u5019\u8ba2\u9605\u89e3\u9501\u4e8b\u4ef6\uff0c\u7136\u540eawait\u8ba9\u51fa\uff09\\n\\n\u8fd8\u6709\u4e00\u4e2awatch dog\u673a\u5236, \u5982\u679c\u6307\u5b9a`leaseTime`\u4e3a-1,\u5219\u8ba9redisson\u542f\u52a8\u4e00\u4e2a\u540e\u53f0\u7ebf\u7a0b,\u5728\u8981\u8fc7\u671f\u7684\u65f6\u5019\u81ea\u52a8\u7eed\u7ea6\u5ef6\u957f\u9501\u7684expire\u65f6\u95f4\uff08\u6bcf30s\uff09\\n\\n\\n\\n\u6ca1\u6709\u89e3\u51b3\u7684\u95ee\u9898\u4e5f\u5c31\u662f\u4e3b\u4ece\u590d\u5236\u4e3b\u5b95\u673a\u5bfc\u81f4\u7684\u4ece\u91cd\u65b0\u9009\u4e3e\u4e3b\uff0c\u5bfc\u81f4\u4e3b\u9501\u4fe1\u606f\u4e22\u5931\uff0c\u4ece\u62ff\u9501\u7684\u95ee\u9898\\n\\n\\n\\n\\n\\n![image-20241027002737472](https://s2.loli.net/2024/10/27/3h8sOXdqTtbZQcm.png)\\n\\n\\n\\n\u4e3b\u4ece\u540c\u6b65\u95ee\u9898\u600e\u4e48\u89e3\u51b3\uff1f\\n\\n\u4e0d\u8981\u4e3b\u4ece, \u5168\u90e8\u53d8\u6210redis node\uff08node\u53ef\u4ee5\u6709slave\uff09\\n\\n\u83b7\u53d6\u9501\u53d8\u6210\u9700\u8981\u5728**\u5168\u90e8\u7684**redis node\u4e0a\u62ff\u5230\u9501\u624d\u884c->\u53ea\u8981\u6709\u4e00\u4e2anode\u5b58\u6d3b\uff0c\u5c31\u53ef\u4ee5\u907f\u514dslave\u9519\u8bef\u62ff\u5230\u9501\\n\\n\u653e\u9501\u7684\u65f6\u5019\u7b80\u5355\u80fd\u653e\u90fd\u653e\uff08\u8349\uff09\uff0c\u653e\u4e0d\u4e86\uff08\u6bd4\u5982\u6302\u4e86\uff09\u8981\u4e48\u4f9d\u8d56\u8d85\u65f6\uff0c\u8981\u4e48\u4f9d\u8d56\u91cd\u8bd5\\n\\n\u603b\u4e4b\u4e0d\u8d1f\u8d23\u8282\u70b9\u6302\u4e86\u6216\u8005\u5fc3\u8df3\u65b9\u6848\u4e4b\u7c7b\uff0c\u5c31\u662fredis\u5df2\u6709\u7684\u4e3b\u4ece\u673a\u5236\uff0c\u4e00\u4e2a\u8282\u70b9\u6302\u4e86\u5c31\u7b49redis\u7ed9\u4ed6\u5207\u6362\u5230slave, \u624d\u80fd\u518d\u6b21\u6210\u529f\u62ff\u9501\\n\\n\u8d85\u65f6\u662f\u6709\u7528\u7684\uff08\u96fe\\n\\n\\n\\n\u62ff\u9501\u662f\u539f\u5b50\u7684, \u5982\u679c\u6709\u62ff\u4e0d\u5230\u4f1a\u56de\u6eda\\n\\n\u8fd9\u53ebmultilock\\n\\n\u7f3a\u9677\uff1a\u8fd0\u7ef4\u6210\u672c\u9ad8\\n\\n\\n\\n\u8fd0\u7ef4\u6210\u672c\u548c\u4e3b\u8282\u70b9\u5b95\u673a\u7684\u60c5\u51b5\u4e0b\u5206\u5e03\u5f0f\u9501\u6b63\u5e38\u8fd0\u884c\u8fd9\u4e2aedge case\u7684trade off\\n\\n\\n\\n### \u4f18\u5316\u79d2\u6740\\n\\njmetor\u6d4bQPS\uff0c\u51c6\u5907\u597dtoken\u6587\u4ef6\uff0c\u5728\u8bf7\u6c42\u91cc\u9762\u5f15\u7528\u53d8\u91cf\u540e\u770b\u805a\u5408\u62a5\u544a\\n\\n\u73b0\u5728\uff1adb\u5bc6\u96c6+\u5206\u5e03\u5f0f\u9501\uff0c\u6027\u80fd\u5dee\\n\\n\u6539\u9020\u4e3a\u5f02\u6b65\u64cd\u4f5c\uff0cqueue, db\u4e0d\u8981\u5835\u5728\u8fd9\u91cc\\n\\n\\n\\n\u67e5\u8be2->\u5224\u65ad\u5e93\u5b58->\u67e5\u8be2\u8ba2\u5355->\u6821\u9a8c\u4e00\u4eba\u4e00\u5355->\u51cf\u5e93\u5b58->\u521b\u5efa\u8ba2\u5355\\n\\n\u5224\u65ad\u5e93\u5b58&\u6821\u9a8c \u653e\u5728redis? \u7ed3\u679c\u5b58\u5230\u963b\u585e\u961f\u5217\\n\\n\u51cf\u5e93\u5b58\u548c\u521b\u5efa\u8ba2\u5355\u662fupdate\u62ff\u9501\u4e32\u884c\u5199\u7684->\u4ea4\u7ed9\u540e\u53f0\u7ebf\u7a0b\u5f02\u6b65\u5237, \u751a\u81f3\u6279\u91cf\u5199\\n\\n \\n\\n\u540c\u65f6redis\u5185\u90e8\u4e00\u6bb5\u903b\u8f91\u4e5f\u9700\u8981\u662f\u539f\u5b50\u7684->lua\u811a\u672c\\n\\nlua\u811a\u672c\u903b\u8f91\\n\\n```lua\\n--- param: userId, voucherId\\n--- return: result(int): 0 success, 1 \u5e93\u5b58\u4e0d\u8db3, 2 \u4e00\u4eba\u4e00\u5355\\n--- \u6ce8\u610forderid\u662fjava\u91cc\u9762\u7684\u5168\u5c40id\u751f\u6210\u5668\uff08redisIdWorker\uff09\u751f\u6210\u7684, \u4e0d\u9700\u8981lua\u7ba1\\n--- \u5224\u65ad\u65f6\u95f4\u53ef\u4ee5\u653e\u5728\u811a\u672c\u91cc\u9762\uff0c\u4f46\u6ca1\u6709\u5fc5\u8981\uff0c\u4e0d\u7ba1\u5728\u91cc\u9762\u8fd8\u662f\u5916\u9762\u90fd\u9700\u8981\u5230\u65f6\u6e05\u6389redis, \u4e0d\u5982redis\u76f4\u63a5\u628a\u76f8\u5173key\u7684\u8d85\u65f6\u8bbe\u7f6e\u6210\u65f6\u95f4\uff08\u6216\u8005\u8d77\u989d\u5916\u7684\u5b9a\u65f6\u4efb\u52a1\uff09\uff0c\u7b80\u5316\u811a\u672c\u903b\u8f91\\nlocal userId = ARGV[1]\\nlocal voucherId = ARGV[2]\\n\\nlocal stockKey = \\"seckill:stock:\\" .. voucherId\\nlocal orderKey = \\"seckill:order:\\" .. voucherId --- order set(\u8bb0\u5f55\u4e70\u8fc7\u7684userId\u96c6\u5408)\\n\\n--- \u5224\u65ad\u5e93\u5b58\\nif(tonumber(redis.call(\'get\', stockKey) <= 0)) then\\n     return 1\\nend\\n\\n--- \u5224\u65ad\u7528\u6237\u662f\u5426\u4e0b\u8fc7\u5355\\nif(tonumber(redis.call(\'sismember\', orderKey, userId)) == 1) then\\n     return 2\\nend\\n\\n--- \u6210\u529f\u4e0b\u5355\uff0c\u51cf\u5c11\u5e93\u5b58,\u8bb0\u5f55\u5df2\u4e0b\u5355\\nredis.call(\'incrby\', stockKey, -1)\\nredis.call(\'sadd\', orderKey, userId)\\n```\\n\\n\\n\\n\u6574\u4e2a\u5f02\u6b65\u7684\u4ee3\u7801\u6d41\u7a0b\\n\\n- \u6ce8\u5165\u4e00\u4e2a\u7ebf\u7a0b\u6c60\uff0c\u4f8b\u5982\u5355\u4e2a\u7ebf\u7a0b\u7684\\n- \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff0c\u65e0\u9650\u5730\u4ece\u963b\u585e\u961f\u5217\u4e4b\u4e2d\u8bfb\u53d6\u4fe1\u606f\uff0c\u5e76\u8fdb\u884c\u5904\u7406\u3002\u4f7f\u7528`@PostConstruct`\u6ce8\u89e3\uff0c\u5728\u521d\u59cb\u5316\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5c06\u8fd9\u4e2a\u4efb\u52a1\u63d0\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\\n- \u5728\u4efb\u52a1\u91cc\u9762\u9700\u8981\u6ce8\u610f\uff0c\u6b64\u65f6userId\u548cproxy\u90fd\u4e0d\u80fd\u518d\u4f7f\u7528\uff08\u90fd\u662f\u4ecethreadlocal\u91cc\u9762\u62ff\u7684\uff09\uff0cproxy\u63d0\u524d\u4fdd\u5b58\u5728\u5916\u9762\uff0cuserId\u4ece\u4f20\u5165\u7684VoucherOrder\u5bf9\u8c61\u62ff\\n\\n\\n\\n\u6700\u540e\u7684\u4ee3\u7801\u793a\u4f8b\\n\\n```java\\npackage com.hmdp.service.impl;\\n\\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\\nimport com.hmdp.dto.Result;\\nimport com.hmdp.entity.SeckillVoucher;\\nimport com.hmdp.entity.Voucher;\\nimport com.hmdp.entity.VoucherOrder;\\nimport com.hmdp.mapper.VoucherOrderMapper;\\nimport com.hmdp.service.ISeckillVoucherService;\\nimport com.hmdp.service.IUserService;\\nimport com.hmdp.service.IVoucherOrderService;\\nimport com.hmdp.utils.CacheClient;\\nimport com.hmdp.utils.RedisDistributedLock;\\nimport com.hmdp.utils.RedisIdWorker;\\nimport com.hmdp.utils.UserHolder;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.redisson.api.RLock;\\nimport org.redisson.api.RedissonClient;\\nimport org.springframework.aop.framework.AopContext;\\nimport org.springframework.core.io.ClassPathResource;\\nimport org.springframework.data.redis.core.StringRedisTemplate;\\nimport org.springframework.data.redis.core.script.DefaultRedisScript;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.transaction.annotation.Transactional;\\n\\nimport javax.annotation.PostConstruct;\\nimport javax.annotation.Resource;\\nimport java.time.LocalDateTime;\\nimport java.util.Collections;\\nimport java.util.Optional;\\nimport java.util.concurrent.*;\\n\\nimport static com.hmdp.utils.RedisConstants.SECKILL_STOCK_KEY;\\nimport static com.hmdp.utils.RedisConstants.SECKILL_VOUCHER_KEY;\\n\\n\\n@Slf4j\\n@Service\\npublic class VoucherOrderServiceOptImpl extends ServiceImpl<VoucherOrderMapper, VoucherOrder> implements IVoucherOrderService {\\n    @Resource\\n    private ISeckillVoucherService seckillVoucherService;\\n    @Resource\\n    private RedisIdWorker redisIdWorker;\\n    @Resource\\n    private RedissonClient redissonClient;\\n    @Resource\\n    private CacheClient cacheClient;\\n    @Resource\\n    private StringRedisTemplate stringRedisTemplate;\\n\\n    private static ArrayBlockingQueue<VoucherOrder> orderQueue;\\n    private static ExecutorService orderExecutor;\\n    static {\\n        orderQueue = new ArrayBlockingQueue<VoucherOrder>(1024 * 1024);\\n        orderExecutor = Executors.newSingleThreadExecutor();\\n    }\\n    private static DefaultRedisScript<Long> seckillScript;\\n    static {\\n        seckillScript = new DefaultRedisScript<>();\\n        seckillScript.setResultType(Long.class);\\n        seckillScript.setLocation(new ClassPathResource(\\"classpath:seckill.lua\\"));\\n    }\\n    private final IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();\\n    private final Runnable orderTask = ()->{\\n        while(true){\\n            try {\\n                VoucherOrder order = orderQueue.take(); // \u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u4f1a\u963b\u585e\\n                handleOrder(order);\\n            } catch (Exception e) {\\n                log.error(\\"\u4e0b\u5355\u5f02\u5e38\\", e);\\n            }\\n        }\\n    };\\n    @PostConstruct\\n    public void init(){\\n        orderExecutor.submit(orderTask);\\n    }\\n\\n    private void handleOrder(VoucherOrder order){\\n        Long userId = order.getUserId();\\n        RLock lock = redissonClient.getLock(\\"redisson:order:lock:\\" + userId);\\n        boolean success = false;\\n        try{\\n            success = lock.tryLock(1, 10, TimeUnit.SECONDS);\\n        } catch (InterruptedException e) {\\n            log.error(\\"\u83b7\u53d6\u9501\u5f02\u5e38\\", e);\\n        }\\n\\n        if(!success){\\n            // \u6b64\u7528\u6237\u5e76\u53d1\u4e0b\u5355, \u8fd9\u91cc\u56e0\u4e3aredis\u5df2\u7ecf\u662f\u539f\u5b50\u6027\u811a\u672c\uff0c\u539f\u5219\u4e0a\u4e0d\u5e94\u8be5\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\\n            log.error(userId + \\"\u5df2\u7ecf\u62a2\u8d2d\u8fc7\u4e86\\");\\n        }\\n        // \u62ff\u5230\u9501\\n        try{\\n            success = proxy.CheckAndSaveOrder(order);\\n            if (!success) {\\n                log.error(\\"\u4e0b\u5355\u5931\u8d25\\");\\n            }\\n            // 5. \u6263\u51cf\u5e93\u5b58\\n            success = seckillVoucherService.update().setSql(\\"stock = stock - 1\\").\\n                    eq(\\"voucher_id\\", order.getVoucherId()).\\n                    gt(\\"stock\\", 0).\\n                    update();\\n            if (!success) {\\n                log.error(\\"\u4e0b\u5355\u5931\u8d25\\");\\n            }\\n        } finally {\\n            lock.unlock();\\n        }\\n    }\\n\\n    @Override\\n    public Result seckillVoucher(Long voucherId) {\\n        // 1. \u662f\u5426\u5b58\u5728\u8be5\u79d2\u6740\u4f18\u60e0\u5238\\n        // SeckillVoucher voucher = seckillVoucherService.getById(voucherId);\\n        Optional<SeckillVoucher> voucherOptional = cacheClient.get(SECKILL_VOUCHER_KEY + voucherId, SeckillVoucher.class);\\n        if (voucherOptional.isPresent()) {\\n            return Result.fail(\\"\u79d2\u6740\u4f18\u60e0\u5238\u4e0d\u5b58\u5728\\");\\n        }\\n        SeckillVoucher voucher = voucherOptional.get();\\n        // 2. \u662f\u5426\u5728\u79d2\u6740\u65f6\u95f4\u5185\\n        if (LocalDateTime.now().isBefore(voucher.getBeginTime()) || LocalDateTime.now().isAfter(voucher.getEndTime())) {\\n            return Result.fail(\\"\u4e0d\u5728\u79d2\u6740\u65f6\u95f4\u5185\\");\\n        }\\n        // 3. \u662f\u5426\u8fd8\u6709\u5e93\u5b58\u548c\u4e00\u4eba\u4e00\u5355(\u6821\u9a8c\u903b\u8f91\u5728lua\u811a\u672c\u4e2d)\\n        Long userId = 1L;\\n        Long resultLong = stringRedisTemplate.execute(seckillScript, Collections.emptyList(), voucherId.toString(), userId.toString());\\n        int result = resultLong.intValue();\\n        if (result == 1) {\\n            return Result.fail(\\"\u5e93\u5b58\u4e0d\u8db3\\");\\n        }\\n        if (result == 2) {\\n            return Result.fail(\\"\u60a8\u5df2\u7ecf\u62a2\u8d2d\u8fc7\u4e86\\");\\n        }\\n        // \u751f\u6210\u4efb\u52a1\uff0c\u8fd4\u56de\u7ed3\u679c\\n        VoucherOrder order = new VoucherOrder();\\n        order.setId(redisIdWorker.nextId(SECKILL_STOCK_KEY));\\n        order.setVoucherId(voucherId);\\n        order.setCreateTime(LocalDateTime.now());\\n        order.setUpdateTime(LocalDateTime.now());\\n        order.setStatus(1);\\n        order.setUserId(userId);\\n        orderQueue.offer(order);\\n        return Result.ok(order);\\n    }\\n\\n    @Transactional\\n    public boolean CheckAndSaveOrder(VoucherOrder order){\\n        boolean exist = super.lambdaQuery().eq(VoucherOrder::getUserId, 1).\\n                eq(VoucherOrder::getVoucherId, order.getVoucherId()).count() > 0;\\n        if (exist) {\\n            return false;\\n        }\\n        return super.save(order);\\n    }\\n}\\n\\n```\\n\\n\u5e73\u5747\u503c\u5927\u6982\u52a0\u901f\u4e86\u51e0\u500d\uff0c\u800c\u6700\u5c0f\u503c\u52a0\u901f\u975e\u5e38\u591a\\n\\n\\n\\n\u95ee\u9898\uff1a\\n\\n- jdk\u963b\u585e\u961f\u5217\u53ef\u80fd\u4e0d\u591f\u7528\uff08\u9ad8\u5e76\u53d1\u6253\u7206/\u8d85\u51fa\u961f\u5217\u5bb9\u91cf\uff09\\n- \u79d2\u6740\u7684\u6570\u636e\u5b89\u5168\u95ee\u9898\uff0c\u5047\u5982\u6302\u4e86\u5c31\u5bc4\u4e86\\n\\n\u6d88\u606f\u4ee3\u7406 message broker\\n\\n\\n\\nredis\u6d88\u606f\u961f\u5217\uff1a\\n\\n- list\u6a21\u62df\\n- PubSub \u70b9\u5bf9\u70b9\\n- Stream \u6bd4\u8f83\u5b8c\u5584\u7684\u6d88\u606f\u961f\u5217\u6a21\u578b\\n\\n\\n\\nlist\u6a21\u62df\u9700\u8981\u7528`BRPOP, BRPOSH, BLPOP, BLPUSH`\u5f97\u5230\u963b\u585e\u6548\u679c\\n\\n\u4f46\u65e0\u6cd5\u907f\u514d\u6d88\u606f\u4e22\u5931\uff0c\u5e76\u4e14\u53ea\u652f\u6301\u5355\u6d88\u8d39\u8005\\n\\n\\n\\npubsub\\n\\n- `SUBSCRIBE channel [channel]`\u8ba2\u9605\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u9891\u9053\\n- `PUBLISH channel msg`\u5411\u4e00\u4e2a\u9891\u9053\u53d1\u6d88\u606f\\n- `PSUBSCRIBE pattern [pattern]` \u8ba2\u9605\u901a\u914d\u7b26\u7684\u591a\u4e2a\u9891\u9053\\n  - \u652f\u6301`*`, `?`,`[]`\\n\\n\\n\\n\u652f\u6301\u591a\u751f\u4ea7\u591a\u6d88\u8d39\uff0c\u4f46\\n\\n- \u4e0d\u652f\u6301\u6570\u636e\u6301\u4e45\u5316\\n- \u5806\u79ef\u6709\u4e0a\u9650->\u653e\u5728\u6d88\u8d39\u8005\u7684\u7f13\u5b58\u533a\\n- \u65e0\u6cd5\u907f\u514d\u6d88\u606f\u4e22\u5931\\n\\n\\n\\nStream: [\u6570\u636e\u7c7b\u578b](https://redis.io/docs/latest/develop/data-types/streams/)\\n\\n\u6700\u7b80\u5355\u7528\u6cd5\\n\\nXADD\u5199\\n\\n```shell\\nXADD users * name jack age 21\\n# XADD [key] * [field value [field value...]]\\n# * \u8868\u793aredis\u751f\u6210id, \u683c\u5f0f\u662f \u65f6\u95f4\u6233+seq ID(0,1,2,...),\u8bfb\u7684\u65f6\u5019\u7528seqID\u5c31\u884c\\n```\\n\\n\\n\\nXLEN\u67e5\u770bkey\u91cc\u9762\u7684\u6d88\u606f\u957f\u5ea6\\n\\nXREAD\u8bfb\\n\\n```shell\\n# XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key...] ID [ID...]\\nXREAD COUNT 1 STREAMS users 0\\n```\\n\\n\\n\\n\u53ef\u4ee5\u591a\u8bfb\uff0c\u6bcf\u4e2aclient\u6709\u81ea\u5df1\u7684\u8ba1\u6570\\n\\n```shell\\nXREAD COUNT 1 BLOCK 0 STREAMS users $\\n# $ \u8868\u793a\u6700\u65b0\u6d88\u606f, BLOCK 0 \u6c38\u4e45\u963b\u585e\\n```\\n\\n\\n\\n\u4f46$\u7684\u884c\u4e3a\u8fd8\u548coffset\u4e0d\u4e00\u6837\uff0c\u4ed6\u59cb\u7ec8\u662f\u201c\u8fd9\u6761\u547d\u4ee4\u5f00\u59cb\u540e\u201d\u7684\u6700\u65b0\uff0c\u4e0d\u662f`offset += count`\u800c\u662f`offset = queue.lastIndex();`\\n\\n\\n\\n- \u6d88\u606f\u53ef\u56de\u6eaf\\n- \u4e00\u53d1\u591a\u8bfb\\n- \u53ef\u4ee5\u963b\u585e\u8bfb\\n- \u4f46\u6709\u6f0f\u8bfb\u98ce\u9669\\n\\n\\n\\n\u6d88\u8d39\u8005\u7ec4 Consumer Group\\n\\n- \u6d88\u606f\u5206\u6d41\\n- \u6d88\u606f\u6807\u8bc6\uff08offset\uff09 `>`\u4ece\u4e0b\u4e00\u4e2a\u672a\u6d88\u8d39\u7684\u6d88\u606f\u5f00\u59cb\\n- \u6d88\u606f\u786e\u8ba4\uff0c\u62ff\u5230\u6d88\u606f\u540e\u4f1a\u8fdb\u5165pending-list, XACK\u6807\u8bc6\u5904\u7406\u5b8c\u6210\u524d\u4e0d\u79fb\u9664\\n\\n\\n\\nredistemplate opsForStream\u5c31\u884c\uff0c\u548c\u547d\u4ee4\u662f\u5bf9\u5e94\u7684\\n\\n\u5f97\u5230\u7684\u662flist, \u518d\u5f97\u5230\u5355\u4e2a`{id, entries}`\u7684\u5bf9\u8c61\uff0c\u6700\u540e\u628aentries\u8f6c\u6362\u56de\u6d88\u606f\u4f53\\n\\n\\n\\n### \u5b9e\u6218\\n\\n\u70b9\u8d5e\uff1a\u653e\u7528\u6237**ID**\u5728redis\u96c6\u5408\\n\\n\u8fd8\u662f**\u5148\u6539db\u518d\u6539redis**\\n\\n\\n\\n\u70b9\u8d5e\u6392\u884c\u699c\uff08\\"xxx, ...\u7b49\u8d5e\u4e86\\"\uff0c\u5fae\u4fe1\u6309\u65f6\u95f4\u6392\u5e8f\uff09\u6539\u6210sortedset\u5c31\u884c, \u7136\u540e\u53d6\u51fa\u7528\u6237\u7684\u65f6\u5019\u52a0\u4e2aorder by\\n\\n\\n\\n\\n\\n\u5173\u6ce8\u548c\u53d6\u5173 db\u5c42\u7ea7\u662ffollow\u8868\uff0c\u4f46\u7f13\u5b58\u5462\uff1f\u5168\u90e8\u6d88\u606f\u961f\u5217\uff1f\u524d\u7aefws? \\n\\n\u4e4b\u524d\u770b\u5230\u4e00\u4e2a\u65b9\u6848\u662f\u7ed9\u7528\u6237\u5efa\u4e00\u4e2a\u672a\u8bfb\u6d88\u606f\u8868\uff0c\u540e\u7aef\u767b\u5f55\u540e\u5b9a\u65f6\u62c9\u53d6\u4e00\u904d\u81ea\u5df1\u5173\u6ce8\u7684\u6240\u6709\u4eba\u7684\u65b0\u6d88\u606f\uff08\u5728\u5173\u6ce8\u8868\u91cc\u9762 user_id, follow_id, last_update \u6bd4\u8f83\u6700\u540e\u66f4\u65b0\u65f6\u95f4\u548c\u5173\u6ce8\u7684\u4eba\u7684\u65b0\u5e16\u5b50\u5c31\u884c\uff09\uff0c\u5e76\u901a\u8fc7ws/\u8f6e\u8be2\u7b49\u53d1\u7ed9\u524d\u7aef\\n\\n\u8fd9\u6837\u7684\u4f18\u70b9\u5728\u4e8e\u907f\u514d\u4e00\u4e2a\u88ab\u51e0\u4e07\u51e0\u5341\u4e07\u7528\u6237\u5173\u6ce8\u7684\u52a8\u6001\u5bf9\u6570\u636e\u5e93\u9020\u6210\u5927\u538b\u529b\\n\\n\u5173\u6ce8\u5217\u8868\u5e94\u8be5\u653eredis, \u8fd9\u4e2a\u6ca1\u6709\u5fc5\u8981\u4e00\u76f4\u67e5\u8868\\n\\n\u5171\u540c\u5173\u6ce8: \u7531\u4e8e\u5df2\u7ecf\u6709redis\u7684\u5173\u6ce8\u5217\u8868\u4e86\uff0c\u76f4\u63a5redis\u6c42\u4ea4\u5c31\u884c\\n\\n\\n\\n\u5173\u6ce8\u63a8\u9001 Feed\u6d41\\n\\n- timeline \u4e0d\u505a\u5185\u5bb9\u7b5b\u9009\\n- \u667a\u80fd\u6392\u5e8f \u4f9d\u8d56\u4e8e\u7b97\u6cd5\\n\\ntimeline:\\n\\n- \u62c9\u6a21\u5f0f\uff08\u8bfb\u6269\u6563\uff09\uff0c\u53ea\u6709\u201c\u53d1\u4ef6\u7bb1\u201d\u6ca1\u6709\u201c\u6536\u4ef6\u7bb1\u201d\uff0c\u53ea\u6709\u5728\u8bfb\u7684\u65f6\u5019\u624d\u4f1a\u53bb\u8bfb\u526f\u672c\uff08\u4e0d\u843d\u76d8\uff09\uff0c\u6d88\u606f\u53ea\u5728\u53d1\u9001\u7aef\u5b58\uff0c\u5ef6\u65f6\u8f83\u9ad8\u7701\u5185\u5b58\uff0c\u5b9e\u73b0\u590d\u6742\\n- \u63a8\u6a21\u5f0f (\u5199\u6269\u6563)\uff0c\u53ea\u6709\u201c\u6536\u4ef6\u7bb1\u201d\u6ca1\u6709\u201c\u53d1\u4ef6\u7bb1\u201d\uff0c\u65b0\u6d88\u606f\u76f4\u63a5\u5b58\u5230\u6240\u6709\u5173\u6ce8\u8005\u7684\u6536\u4ef6\u7bb1\uff0c\u5ef6\u65f6\u4f4e\uff0c\u4e0d\u9700\u8981\u62c9\u53d6\u6392\u5e8f\uff0c\u4f46\u5360\u78c1\u76d8\uff0c\u5b9e\u73b0\u7b80\u5355\\n- **\u63a8\u62c9\u7ed3\u5408**\uff08\u8bfb\u5199\u6df7\u5408\uff09\uff1a\\n  - \u63a8\u9001\u6570\u5c11\uff08\u4f8b\u5982`<1000`\uff09\u63a8\uff0c\u63a8\u9001\u6570\u591a\u62c9\\n  - \u8fd8\u53ef\u4ee5\u5224\u6d3b\uff0c\u53ea\u7ed9\u6d3b\u8dc3\u7528\u6237\u63a8\uff0c\u4e0d\u6d3b\u8dc3\u7528\u6237\u62c9\uff0c\u8fd9\u6837\u51cf\u5c11\u63a8\u7684\u6570\u91cf\uff0c\u53c8\u4f18\u5316\u4e86\u6d3b\u8dc3\u7528\u6237\u9891\u7e41\u8bfb\u7684\u5185\u5b58\u5f00\u9500\\n  - ...\u5176\u4ed6\u7b56\u7565\\n  - \u5b9e\u73b0\u975e\u5e38\u590d\u6742\\n\\n\u9ed1\u9a6c\u7684\u610f\u601d\u662f\u5343\u4e07\u4ee5\u4e0b\u7684\u7528\u6237\u6570\u63a8\u6a21\u5f0f\u90fd\u4e0d\u4f1a\u6709\u5927\u95ee\u9898\u8349\\n\\n\\n\\n\u63a8\u6a21\u5f0f\uff1a\\n\\nfeed\u6d41\u7684\u5206\u9875\u95ee\u9898\uff1a\u8bfb\u7b2c\u4e00\u9875->\u63d2\u5165->\u8bfb\u7b2c\u4e8c\u9875\uff1f\uff1f\uff1f\uff08\u611f\u89c9\u4e0d\u662f\u4ec0\u4e48\u7279\u522b\u7684case...\u522b\u7684\u5206\u9875\u4e00\u822c\u4e5f\u4e0d\u8003\u8651\u8fd9\u4e2a\u554a\uff0c\u53ef\u80fd\u9ad8\u901f\u66f4\u65b0\u7684\u6d41\u9700\u8981\uff09\\n\\n\u89e3\u51b3\u65b9\u6cd5\u5012\u662f\u5f88\u7b80\u5355\uff0c\u6eda\u52a8\u5206\u9875\uff0c\u8bb0\u5f55\u4e0a\u4e00\u6b21\u7684\u6700\u540e\u4e00\u6761\u3002\u4e4b\u540e\u4ece\u5b83\u5411\u540eN\u6761\\n\\nredis sortedset \u6309\u7167 score range\u67e5\u8be2 (zrange byscore)\\n\\nopsForZSet\\n\\n\\n\\n\u9644\u8fd1\u5546\u6237 redis GEO \\n\\n\\n\\n\u7528\u6237\u7b7e\u5230 BitMap\\n\\n\\n\\nUV \u7edf\u8ba1hyperloglog\uff1a\\n\\n- UV \u72ec\u7acb\u8bbf\u95ee\u91cf\uff08\u8bbf\u5ba2\u91cf\uff09\\n- PV \u70b9\u51fb\u91cf\\n\\nloglog\u7b97\u6cd5\u6d3e\u751f\u7684\u6982\u7387\u7b97\u6cd5\uff0c\u4e0d\u9700\u8981\u5b58\u503c; \u8bef\u5dee\u5c0f\u4e8e1%, \u5355\u4e2aHLL\u7684\u5185\u5b58\u6c38\u8fdc\u5c0f\u4e8e16KB\\n\\nPFADD PFCOUNT PFMERGE\\n\\n\u7b97\u6cd5\u672c\u8eab\u81ea\u52a8\u53bb\u91cd"},{"id":"/js\u57fa\u7840","metadata":{"permalink":"/blog/js\u57fa\u7840","source":"@site/blog/js\u57fa\u7840.md","title":"js\u57fa\u7840","description":"js\u7684\u6570\u636e","date":"2024-02-22T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":14.56,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"js\u57fa\u7840","date":"2024-02-22T00:00:00.000Z","author":"ayanami","tags":["javascript"]},"unlisted":false,"prevItem":{"title":"\u9ed1\u9a6c\u70b9\u8bc4(\u901f\u901a\u7248)","permalink":"/blog/\u9ed1\u9a6c\u70b9\u8bc4"},"nextItem":{"title":"11-14-11-26\u5b66\u4e60\u53cc\u5468\u8bb0","permalink":"/blog/11-14-11-26\u5b66\u4e60\u53cc\u5468\u8bb0"}},"content":"#### js\u7684\u6570\u636e\\n\\n\u4e0d\u533a\u5206\u6574\u6570\u548c\u6d6e\u70b9\u6570 3 / 2 === 1.5\\n\\n\u652f\u6301\u8fdb\u5236\u548c\u79d1\u5b66\u8ba1\u6570\\n\\n```javascript\\nconsole.log(0b111110111); // 503\\nconsole.log(0o767); // 503\\nconsole.log(0x1f7); // 503\\nconsole.log(5.03e2); // 503\\n```\\n\\n\x3c!-- more --\x3e\\n\x3c!--truncate--\x3eBigInt\uff1a \u4efb\u610f\u957f\u5ea6\u7684\u6574\u6570, \u4f7f\u7528\u540e\u7f00\'n\' \u8868\u793a\\n\\n```javascript\\nconsole.log(3n/2n); // 1n\\n```\\n\\n\\n\\nMath\u5bf9\u8c61\\n\\n```javascript\\nMath.sin(3.5); // 3.5rad\\nconst circumference = 2 * Math.PI * r;\\n```\\n\\n\\n\\n\u5b57\u7b26\u4e32\u8f6c\u6362\u6570\u5b57\\n\\n```javascript\\nconsole.log(parseInt(\\"10\\"));\\nconsole.log(parseFloat(\\"10.5\\"));\\nconsole.log(parseInt(\\"0x10\\"));\\n\\nparseInt(\\"hello\\", 10); // NaN\\n```\\n\\n\\n\\n\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\\n\\n```javascript\\n\\"\\" + 12345; // \\"12345\\"\\n```\\n\\n\\n\\n\u6bd4\u8f83 \\\\=\\\\= \u662f\u7c7b\u578b\u81ea\u9002\u5e94\u7684\uff0c 1 \\\\=\\\\= true, \\\\=\\\\=\\\\= \u4e0d\u662f\uff0c 1 \\\\!\\\\=\\\\= true\\n\\n\\n\\n\u7279\u6b8a\u6570\u5b57\\n\\n```javascript\\nisNaN(NaN); //true\\n1 / 0; //  Infinity\\n-1 / 0; // -Infinity\\n```\\n\\n\u5b57\u7b26\u4e32\u6709\u7528\u7684\u65b9\u6cd5\\n\\n```javascript\\nconsole.log(\\"hello\\".toUpperCase());\\nconsole.log(\\"hello\\".replace(\\"h\\", \\"H\\"));\\n```\\n\\n\\n\\n\\n\\nJavaScript \u4e2d\u7684\u5b57\u7b26\u4e32\u662f Unicode \u5b57\u7b26\u5e8f\u5217\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5b83\u4eec\u662f UTF-16 \u7f16\u7801\u7684\u3002\\n\\n```javascript\\nconsole.log(\\"\u4f60\u597d\uff0c\u4e16\u754c\uff01\\");\\n```\\n\\n\\n\\n\u6a21\u677f\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528\u53cd\u5f15\u53f7\\\\`\\\\`\\n\\n```javascript\\nlet age = 10;\\nconsole.log(`I am ${age} years old.`); // Template literal\\n```\\n\\n\\n\\n\\n\\n#### js\u7684\u6570\u7ec4\\n\\n```javascript\\nconst t = [1, -1, 3];\\nconsole.log(t.length); // 3\\nconsole.log(t[1]);\\nt.forEach((value) => {\\n  console.log(value);\\n});\\n\\n```\\n\\n\\n\\njs\u4e4b\u4e2d\uff0cconst\u7684\u6570\u7ec4\u610f\u5473\u7740\u8fd9\u4e2a\u6307\u9488\u662fconst\u7684\uff0c\u4e0d\u610f\u5473\u7740\u6570\u7ec4\u5143\u7d20\u4e0d\u53ef\u53d8\u5316\\n\\n\u56e0\u800c\u6539\u53d8\u6570\u7ec4\u7684\u597d\u7684\u7f16\u7a0b\u8303\u5f0f\u662f\u4f7f\u7528 concat\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\\n\\n```javascript\\nt.push(5); // \u6539\u53d8\u4e86\u539f\u6765\u7684t\\n\\nt.concat(5);  // \u65b0\u5efa\u4e86\u4e00\u4e2acopy\u518dpush\\nconsole.log(t);\\n```\\n\\n| \u65b9\u6cd5\u540d\u79f0                                             | \u63cf\u8ff0                                                         |\\n| :--------------------------------------------------- | :----------------------------------------------------------- |\\n| `a.toString()`                                       | \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5143\u7d20\u901a\u8fc7\u9017\u53f7\u5206\u9694\u3002   |\\n| `a.toLocaleString()`                                 | \u6839\u636e\u5bbf\u4e3b\u73af\u5883\u7684\u533a\u57df\u8bbe\u7f6e\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5143\u7d20\u901a\u8fc7\u9017\u53f7\u5206\u9694\u3002 |\\n| `a.concat(item1[, item2[, ...[, itemN]]])`           | \u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u5305\u542b\u539f\u5148 `a` \u548c `item1\u3001item2\u3001\u2026\u2026\u3001itemN` \u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 |\\n| `a.join(sep)`                                        | \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5143\u7d20\u901a\u8fc7\u6307\u5b9a\u7684 `sep` \u5206\u9694\u3002 |\\n| `a.pop()`                                            | \u5220\u9664\u5e76\u8fd4\u56de\u6570\u7ec4\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002                             |\\n| `a.push(item1, ..., itemN)`                          | \u5c06 `item1\u3001item2\u3001\u2026\u2026\u3001itemN` \u8ffd\u52a0\u81f3\u6570\u7ec4 `a`\u3002                |\\n| `a.reverse()`                                        | \u6570\u7ec4\u9006\u5e8f\uff08\u4f1a\u66f4\u6539\u539f\u6570\u7ec4 `a`\uff09\u3002                               |\\n| `a.shift()`                                          | \u5220\u9664\u5e76\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002                                 |\\n| `a.slice(start, end)`                                | \u8fd4\u56de\u5b50\u6570\u7ec4\uff0c\u4ee5 `a[start]` \u5f00\u5934\uff0c\u4ee5 `a[end]` \u524d\u4e00\u4e2a\u5143\u7d20\u7ed3\u5c3e\u3002 |\\n| `a.sort([cmpfn])`                                    | \u4f9d\u636e\u53ef\u9009\u7684\u6bd4\u8f83\u51fd\u6570 `cmpfn` \u8fdb\u884c\u6392\u5e8f\uff0c\u5982\u679c\u672a\u6307\u5b9a\u6bd4\u8f83\u51fd\u6570\uff0c\u5219\u6309\u5b57\u7b26\u987a\u5e8f\u6bd4\u8f83\uff08\u5373\u4f7f\u88ab\u6bd4\u8f83\u5143\u7d20\u662f\u6570\u5b57\uff09\u3002 |\\n| `a.splice(start, delcount[, item1[, ...[, itemN]]])` | \u4ece `start` \u5f00\u59cb\uff0c\u5220\u9664 `delcount` \u4e2a\u5143\u7d20\uff0c\u7136\u540e\u63d2\u5165\u6240\u6709\u7684 `item`\u3002 |\\n| `a.unshift(item1[, item2[, ...[, itemN]]])`          | \u5c06 `item` \u63d2\u5165\u6570\u7ec4\u5934\u90e8\uff0c\u8fd4\u56de\u6570\u7ec4\u65b0\u957f\u5ea6\uff08\u8003\u8651 `undefined`\uff09\u3002 |\\n\\nmap\u65b9\u6cd5\u7684\u7528\u5904\u793a\u4f8b\\n\\n```javascript\\nconst t2 = t.map((value) => \\"<li>\\" + value + \\"</li>\\");\\nconsole.log(t2);\\n```\\n\\n\\n\\n\u89e3\u6784\u8d4b\u503c\\n\\n```javascript\\nconst [first, second, ...rest] = t;\\nconsole.log(first, second); // 1, -1\\nconsole.log(rest);\\n```\\n\\n\\n\\n\\n\\n#### js\u7684\u5bf9\u8c61\uff1a\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\\n\\n```javascript\\nconst obj = {\\n    key: 0,\\n    key2: \\"haha\\",\\n    key3: false,\\n    key4:()=>{\\n        console.log(\\"Hello!\\");\\n    }\\n}\\nvar obj = {\\n  name: \\"Carrot\\",\\n  _for: \\"Max\\", //\'for\' \u662f\u4fdd\u7559\u5b57\u4e4b\u4e00\uff0c\u4f7f\u7528\'_for\'\u4ee3\u66ff\\n  details: {\\n    color: \\"orange\\",\\n    size: 12,\\n  }, // \u5bf9\u8c61\u91cc\u9762\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u548c\u5bf9\u8c61\\n};\\nobj.details.color; // orange\\nobj[\\"details\\"][\\"size\\"]; // 12\\n```\\n\\n\\n\\n\u8981\u8bbf\u95ee\u5bf9\u8c61\u5185\u7684\u5c5e\u6027\\n\\n```javascript\\nconsole.log(obj.key);\\nconsole.log(obj[key]);\\nobj.newkey=\\"New key\\";\\nobj[\'split word attribute should be in bracket\']=0;\\n```\\n\\n\\n\\n#### js\u7684\u5faa\u73af\\n\\n\u7c7b\u4f3cc++\u7684for, while\uff0c do-while\u662f\u652f\u6301\u7684\\n\\n\u8fd8\u652f\u6301\\n\\n```javascript\\nfor(let value of array){}\\n\\nfor(let key in obj){}\\n```\\n\\n\\n\\n#### js\u7684\u903b\u8f91\u8fd0\u7b97\u7b26\\n\\n\u540cc++\\n\\n```javascript\\nlet name = cachedName || (cacheName = getName());\\nvar allowed = age > 18 ? \\"yes\\" : \\"no\\";\\n\\n// \u6709switch\\nswitch (a) {\\n  case 1: // \u7ee7\u7eed\u5411\u4e0b\\n  case 2:\\n    eatIt();\\n    break;\\n  default:\\n    doNothing();\\n}\\n\\n```\\n\\n\\n\\n#### js\u7684\u51fd\u6570\\n\\n\u7bad\u5934\u51fd\u6570\\n\\n```javascript\\nconst f = (p1, p2)=>{\\n    return p1+p2;\\n}\\nconst f2 = p1 => {\\n    return p1*p1;\\n}\\nconst f3 = p=>p*p;\\nconst t=[1,2,3];\\nconst tSquared = t.map(p=>p*p)\\n\\n```\\n\\n\\n\\n\u51fd\u6570\u7684\u53c2\u6570\\n\\n```javascript\\nfunction add() {\\n  let sum = 0;\\n  for (let i = 0; i < arguments.length; i++) {\\n    sum += arguments[i];\\n  }\\n  return sum;\\n}\\nconsole.log(add(1, 2, 3, 4, 5));\\n\\n// \u6216\u8005\\nfunction add2(...args) {\\n  let sum = 0;\\n  for (let value of args) {\\n    sum += value;\\n  }\\n  return sum;\\n}\\n\\n// \u53c8\u6216\u8005\u60f3\u4f20\u9012\u4e00\u4e2a\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u5217\u8868\\nlet array = [1,2,3];\\nadd.apply(null, array);\\n```\\n\\n\\n\\n\\n\\nthis:  **JavaScript\u4e2d*this*\u7684\u503c\u662f\u6839\u636e\u65b9\u6cd5\u88ab\u8c03\u7528\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u7684**\\n\\n```javascript\\nconst obj = {\\n  name: \\"object\\",\\n  value: 42,\\n  call: () => {\\n    console.log(\\"The secret is \\" + this.value);\\n  },\\n};\\nobj.call();\\n// \u5f97\u5230 undefined, \u539f\u56e0\u5728\u4e8ethis\u4e0d\u7ed1\u5b9a ()=>{}\u533f\u540d\u51fd\u6570\u7684\u5b9a\u4e49,\u800c\u662f\u7ed1\u5b9a\u8c03\u7528\u5904\u7684\u5168\u5c40\u5bf9\u8c61\uff0c\u5168\u5c40\u5bf9\u8c61\u6ca1\u6709call()\u65b9\u6cd5\uff0c\u56e0\u800c\u662fundefined\\n\\n\\nconst obj2 = {\\n  name: \\"object\\",\\n  value: 42,\\n  call: function() {\\n    console.log(\\"The secret is \\" + this.value);\\n  },\\n};\\nobj.call();\\n// \u6b63\u5e38\u5f97\u523042\\n```\\n\\n\\n\\n\u5185\u90e8\u51fd\u6570\uff1a\u53ef\u4ee5\u8bbf\u95ee\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\uff08\u9ed8\u8ba4\u5168\u90e8\u90fd\u53ef\u89c1\uff09\\n\\n\\n\\n\\n\\n#### js\u7684OOP\\n\\n\u4e00\u4e2a\u4e0d\u592a\u597d\u7684\u7248\u672c\uff1a\u95ee\u9898\u5728\u4e8e\u6bcf\u6b21\u8c03\u7528\u6784\u9020\u51fd\u6570\u90fd\u6784\u9020\u4e86\u4e00\u6b21\u51fd\u6570\u5bf9\u8c61\\n\\n```javascript\\nfunction Person(first, last) {\\n  this.first = first;\\n  this.last = last;\\n  this.fullName = function () {\\n    return this.first + \\" \\" + this.last;\\n  };\\n  this.fullNameReversed = function () {\\n    return this.last + \\", \\" + this.first;\\n  };\\n}\\nvar s = new Person(\\"Simon\\", \\"Willison\\");\\n\\n```\\n\\n\\n\\n\u597d\u7684\u5b9e\u73b0\uff1a\u4f7f\u7528\u4e86\u539f\u578b\u94feprototype\\n\\n> `Person.prototype` \u662f\u4e00\u4e2a\u53ef\u4ee5\u88ab `Person` \u7684\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\u7684\u5bf9\u8c61\u3002\u5b83\u662f\u4e00\u4e2a\u540d\u53eb\u539f\u578b\u94fe\uff08prototype chain\uff09\u7684\u67e5\u8be2\u94fe\u7684\u4e00\u90e8\u5206\uff1a\u5f53\u4f60\u8bd5\u56fe\u8bbf\u95ee `Person` \u67d0\u4e2a\u5b9e\u4f8b\uff08\u4f8b\u5982\u4e0a\u4e2a\u4f8b\u5b50\u4e2d\u7684 s\uff09\u4e00\u4e2a\u6ca1\u6709\u5b9a\u4e49\u7684\u5c5e\u6027\u65f6\uff0c\u89e3\u91ca\u5668\u4f1a\u9996\u5148\u68c0\u67e5\u8fd9\u4e2a `Person.prototype` \u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u8fd9\u6837\u4e00\u4e2a\u5c5e\u6027\u3002\u6240\u4ee5\uff0c\u4efb\u4f55\u5206\u914d\u7ed9 `Person.prototype` \u7684\u4e1c\u897f\u5bf9\u901a\u8fc7 `this` \u5bf9\u8c61\u6784\u9020\u7684\u5b9e\u4f8b\u90fd\u662f\u53ef\u7528\u7684\u3002\\n>\\n> \u8fd9\u4e2a\u7279\u6027\u529f\u80fd\u5341\u5206\u5f3a\u5927\uff0cJavaScript \u5141\u8bb8\u4f60\u5728\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u65f6\u5019\u4fee\u6539\u539f\u578b\uff08prototype\uff09\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6 (runtime) \u7ed9\u5df2\u5b58\u5728\u7684\u5bf9\u8c61\u6dfb\u52a0\u989d\u5916\u7684\u65b9\u6cd5\uff1a\\n\\n```javascript\\nfunction Person(first, last) {\\n  this.first = first;\\n  this.last = last;\\n}\\nPerson.prototype.fullName = function () {\\n  return this.first + \\" \\" + this.last;\\n};\\nPerson.prototype.fullNameReversed = function () {\\n  return this.last + \\", \\" + this.first;\\n};\\n\\nPerson.prototype.toString = function () {\\n  return \\"<Person: \\" + this.fullName() + \\">\\";\\n};\\nvar s = new Person(\\"Simon\\", \\"Willison\\");\\n```\\n\\n\\n\\n```javascript\\nString.prototype.bracket = function () {\\n  return \\"(\\" + this + \\")\\";\\n};\\nconsole.log(\\"Hello\\".bracket()); // (Hello)\\n```\\n\\n\\n\\n\\n\\n```javascript\\nfunction Person(first, last) {\\n  this.first = first;\\n  this.last = last;\\n}\\nPerson.prototype.fullName = function(){\\n    return this.first + \\" \\" + this.last;\\n}\\nPerson.prototype.fullNameReversed  = function(){\\n    return this.last + \\", \\" + this.first;\\n}\\nvar s = new Person(\\"Simon\\", \\"Willison\\");\\n\\n```\\n\\n\\n\\n#### js\u7684\u95ed\u5305\\n\\n> ## [\u95ed\u5305](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Language_overview#\u95ed\u5305)\\n>\\n> \u95ed\u5305\u662f JavaScript \u4e2d\u6700\u5f3a\u5927\u7684\u62bd\u8c61\u6982\u5ff5\u4e4b\u4e00\u2014\u2014\u4f46\u5b83\u4e5f\u662f\u6700\u5bb9\u6613\u9020\u6210\u56f0\u60d1\u7684\u3002\u5b83\u7a76\u7adf\u662f\u505a\u4ec0\u4e48\u7684\u5462\uff1f\\n>\\n> JSCopy to Clipboard\\n>\\n> ```\\n> function makeAdder(a) {\\n>   return function (b) {\\n>     return a + b;\\n>   };\\n> }\\n> var add5 = makeAdder(5);\\n> var add20 = makeAdder(20);\\n> add5(6); // ?\\n> add20(7); // ?\\n> ```\\n>\\n> `makeAdder` \u8fd9\u4e2a\u540d\u5b57\u672c\u8eab\uff0c\u4fbf\u5e94\u8be5\u80fd\u8bf4\u660e\u51fd\u6570\u662f\u7528\u6765\u505a\u4ec0\u4e48\u7684\uff1a\u5b83\u4f1a\u7528\u4e00\u4e2a\u53c2\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u201cadder\u201d\u51fd\u6570\uff0c\u518d\u7528\u53e6\u4e00\u4e2a\u53c2\u6570\u6765\u8c03\u7528\u88ab\u521b\u5efa\u7684\u51fd\u6570\u65f6\uff0c`makeAdder` \u4f1a\u5c06\u4e00\u524d\u4e00\u540e\u4e24\u4e2a\u53c2\u6570\u76f8\u52a0\u3002\\n>\\n> \u4ece\u88ab\u521b\u5efa\u7684\u51fd\u6570\u7684\u89c6\u89d2\u6765\u770b\u7684\u8bdd\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u7684\u6765\u6e90\u95ee\u9898\u4f1a\u66f4\u663e\u800c\u6613\u89c1\uff1a\u65b0\u51fd\u6570\u81ea\u5e26\u4e00\u4e2a\u53c2\u6570\u2014\u2014\u5728\u65b0\u51fd\u6570\u88ab\u521b\u5efa\u65f6\uff0c\u4fbf\u94a6\u5b9a\u3001\u94a6\u70b9\u4e86\u524d\u4e00\u4e2a\u53c2\u6570\uff08\u5982\u4e0a\u65b9\u4ee3\u7801\u4e2d\u7684 a\u30015 \u548c 20\uff0c\u53c2\u8003 `makeAdder` \u7684\u7ed3\u6784\uff0c\u5b83\u5e94\u5f53\u4f4d\u4e8e\u65b0\u51fd\u6570\u5916\u90e8\uff09\uff1b\u65b0\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u53c8\u63a5\u6536\u4e86\u540e\u4e00\u4e2a\u53c2\u6570\uff08\u5982\u4e0a\u65b9\u4ee3\u7801\u4e2d\u7684 b\u30016 \u548c 7\uff0c\u4f4d\u4e8e\u65b0\u51fd\u6570\u5185\u90e8\uff09\u3002\u6700\u7ec8\uff0c\u65b0\u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u524d\u4e00\u4e2a\u53c2\u6570\u4fbf\u4f1a\u548c\u7531\u5916\u5c42\u51fd\u6570\u4f20\u5165\u7684\u540e\u4e00\u4e2a\u53c2\u6570\u76f8\u52a0\u3002\\n>\\n> \u8fd9\u91cc\u53d1\u751f\u7684\u4e8b\u60c5\u548c\u524d\u9762\u4ecb\u7ecd\u8fc7\u7684\u5185\u5d4c\u51fd\u6570\u5341\u5206\u76f8\u4f3c\uff1a\u4e00\u4e2a\u51fd\u6570\u88ab\u5b9a\u4e49\u5728\u4e86\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u7684\u5185\u90e8\uff0c\u5185\u90e8\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5916\u90e8\u51fd\u6570\u7684\u53d8\u91cf\u3002\u552f\u4e00\u7684\u4e0d\u540c\u662f\uff0c\u5916\u90e8\u51fd\u6570\u5df2\u7ecf\u8fd4\u56de\u4e86\uff0c\u90a3\u4e48\u5e38\u8bc6\u544a\u8bc9\u6211\u4eec\u5c40\u90e8\u53d8\u91cf\u201c\u5e94\u8be5\u201d\u4e0d\u518d\u5b58\u5728\u3002\u4f46\u662f\u5b83\u4eec\u5374\u4ecd\u7136\u5b58\u5728\u2014\u2014\u5426\u5219 `adder` \u51fd\u6570\u5c06\u4e0d\u80fd\u5de5\u4f5c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u91cc\u5b58\u5728 `makeAdder` \u7684\u5c40\u90e8\u53d8\u91cf\u7684\u4e24\u4e2a\u4e0d\u540c\u7684\u201c\u526f\u672c\u201d\u2014\u2014\u4e00\u4e2a\u662f `a` \u7b49\u4e8e 5\uff0c\u53e6\u4e00\u4e2a\u662f `a` \u7b49\u4e8e 20\u3002\u90a3\u4e9b\u51fd\u6570\u7684\u8fd0\u884c\u7ed3\u679c\u5c31\u5982\u4e0b\u6240\u793a\uff1a\\n>\\n> ```\\n> add5(6); // \u8fd4\u56de 11\\n> add20(7); // \u8fd4\u56de 27\\n> ```\\n>\\n> \u4e0b\u9762\u6765\u8bf4\u8bf4\uff0c\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u4e86\u4e0d\u5f97\u7684\u4e8b\u60c5\u3002\u6bcf\u5f53 JavaScript \u6267\u884c\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u4f5c\u7528\u57df\u5bf9\u8c61\uff08scope object\uff09\uff0c\u7528\u6765\u4fdd\u5b58\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u521b\u5efa\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u5b83\u4f7f\u7528\u4e00\u5207\u88ab\u4f20\u5165\u51fd\u6570\u7684\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\uff08\u521d\u59cb\u5316\u540e\uff0c\u5b83\u5305\u542b\u4e00\u5207\u88ab\u4f20\u5165\u51fd\u6570\u7684\u53d8\u91cf\uff09\u3002\u8fd9\u4e0e\u90a3\u4e9b\u4fdd\u5b58\u7684\u6240\u6709\u5168\u5c40\u53d8\u91cf\u548c\u51fd\u6570\u7684\u5168\u5c40\u5bf9\u8c61\uff08global object\uff09\u76f8\u7c7b\u4f3c\uff0c\u4f46\u4ecd\u6709\u4e00\u4e9b\u5f88\u91cd\u8981\u7684\u533a\u522b\uff1a\u7b2c\u4e00\uff0c\u6bcf\u6b21\u51fd\u6570\u88ab\u6267\u884c\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\uff0c\u7279\u5b9a\u7684\u4f5c\u7528\u57df\u5bf9\u8c61\uff1b\u7b2c\u4e8c\uff0c\u4e0e\u5168\u5c40\u5bf9\u8c61\uff08\u5982\u6d4f\u89c8\u5668\u7684 `window` \u5bf9\u8c61\uff09\u4e0d\u540c\u7684\u662f\uff0c\u4f60\u4e0d\u80fd\u4ece JavaScript \u4ee3\u7801\u4e2d\u76f4\u63a5\u8bbf\u95ee\u4f5c\u7528\u57df\u5bf9\u8c61\uff0c\u4e5f\u6ca1\u6709 \u53ef\u4ee5\u904d\u5386\u5f53\u524d\u4f5c\u7528\u57df\u5bf9\u8c61\u4e2d\u7684\u5c5e\u6027 \u7684\u65b9\u6cd5\u3002\\n>\\n> \u6240\u4ee5\uff0c\u5f53\u8c03\u7528 `makeAdder` \u65f6\uff0c\u89e3\u91ca\u5668\u521b\u5efa\u4e86\u4e00\u4e2a\u4f5c\u7528\u57df\u5bf9\u8c61\uff0c\u5b83\u5e26\u6709\u4e00\u4e2a\u5c5e\u6027\uff1a`a`\uff0c\u8fd9\u4e2a\u5c5e\u6027\u88ab\u5f53\u4f5c\u53c2\u6570\u4f20\u5165 `makeAdder` \u51fd\u6570\u3002\u7136\u540e `makeAdder` \u8fd4\u56de\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u51fd\u6570\uff08\u6682\u8bb0\u4e3a `adder`\uff09\u3002\u901a\u5e38\uff0cJavaScript \u7684\u5783\u573e\u56de\u6536\u5668\u4f1a\u5728\u8fd9\u65f6\u56de\u6536 `makeAdder` \u521b\u5efa\u7684\u4f5c\u7528\u57df\u5bf9\u8c61\uff08\u6682\u8bb0\u4e3a `b`\uff09\uff0c\u4f46\u662f\uff0c`makeAdder` \u7684\u8fd4\u56de\u503c\uff0c\u65b0\u51fd\u6570 `adder`\uff0c\u62e5\u6709\u4e00\u4e2a\u6307\u5411\u4f5c\u7528\u57df\u5bf9\u8c61 `b` \u7684\u5f15\u7528\u3002\u6700\u7ec8\uff0c\u4f5c\u7528\u57df\u5bf9\u8c61 `b` \u4e0d\u4f1a\u88ab\u5783\u573e\u56de\u6536\u5668\u56de\u6536\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u5f15\u7528\u6307\u5411\u65b0\u51fd\u6570 `adder`\u3002\\n>\\n> \u4f5c\u7528\u57df\u5bf9\u8c61\u7ec4\u6210\u4e86\u4e00\u4e2a\u540d\u4e3a\u4f5c\u7528\u57df\u94fe\uff08scope chain\uff09\u7684\uff08\u8c03\u7528\uff09\u94fe\u3002\u5b83\u548c JavaScript \u7684\u5bf9\u8c61\u7cfb\u7edf\u4f7f\u7528\u7684\u539f\u578b\uff08prototype\uff09\u94fe\u76f8\u7c7b\u4f3c\u3002\\n>\\n> \u4e00\u4e2a**\u95ed\u5305**\uff0c\u5c31\u662f \u4e00\u4e2a\u51fd\u6570 \u4e0e\u5176 \u88ab\u521b\u5efa\u65f6\u6240\u5e26\u6709\u7684\u4f5c\u7528\u57df\u5bf9\u8c61 \u7684\u7ec4\u5408\u3002\u95ed\u5305\u5141\u8bb8\u4f60\u4fdd\u5b58\u72b6\u6001\u2014\u2014\u6240\u4ee5\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u6765\u4ee3\u66ff\u5bf9\u8c61\u3002[\u8fd9\u4e2a StackOverflow \u5e16\u5b50\u91cc](https://stackoverflow.com/questions/111102/how-do-javascript-closures-work)\u6709\u4e00\u4e9b\u5173\u4e8e\u95ed\u5305\u7684\u8be6\u7ec6\u4ecb\u7ecd\u3002\\n\\n\\n\\n#### js\u7684\u6b63\u5219\\n\\n\u521b\u5efa\u6b63\u5219\uff0c\u4f7f\u7528 /exp/ \u6216\u8005 RegExp\\n\\n\u5e38\u7528\u65b9\u6cd5\uff0c test, exec\uff0c match, replace\\n\\n```javascript\\nconst regex = /ab+c/g;\\nconst regex2 = new RegExp(\\"ab+c\\", \\"g\\");\\nconsole.log(regex.test(\\"abc\\")); // \u8f93\u51fa\uff1atrue\\nconsole.log(regex.test(\\"ac\\")); // \u8f93\u51fa\uff1afalse\\nconsole.log(regex.exec(\\"abc\\")); // \u8f93\u51fa\uff1a[ \'abc\', index: 0, input: \'abc\', groups: undefined ]\\nconsole.log(regex.exec(\\"ac\\")); // \u8f93\u51fa\uff1anull\\nconst str = \'abc abc\';\\nconsole.log(str.match(regex)); // \u8f93\u51fa\uff1a[ \'abc\', \'abc\' ]\\nconsole.log(str.replace(regex, \'xyz\')); // \u8f93\u51fa\uff1a\'xyz xyz\'\\n// /[exp]/[flags]\\n// RegExp(\\"[exp]\\", [flags]);\\n// what are flags? g \u5168\u5c40\u5339\u914d, i \u5ffd\u7565\u5927\u5c0f\u5199\uff0c u unicode......\\n```\\n\\n\\n\\n#### js\u7684\u5f02\u6b65\\n\\nasync function foo(){} \u521b\u5efa\u5f02\u6b65\u51fd\u6570\uff0c**\u6240\u6709\u7684\u5f02\u6b65\u51fd\u6570\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2apromise**\\n\\n\u5bf9\u4e00\u4e2apromise\u6709then\u65b9\u6cd5\\n\\nfoo().then(dosomething())\\n\\n\u5f02\u6b65\u51fd\u6570\u8fd8\u6709await\u5173\u952e\u5b57\uff0c\u7528\u4e8e**\u5728\u5f02\u6b65\u51fd\u6570\u5185\u90e8**\u6307\u793a\u6682\u505c\u76f4\u81f3promise\u88ab\u89e3\u6790\u6216\u62d2\u7edd\\n\\n```javascript\\nasync function foo() {\\n  try {\\n    const response = await fetch(\'https://api.example.com/data\');\\n      // \u6b64\u5904\u4f1a\u7b49\u5f85response\u88ab\u89e3\u6790\uff08\u6210\u529ffetch\uff09\u6216\u62d2\u7edd\uff08fetch\u5931\u8d25\uff0c\u8f6c\u5230err\uff09, \u518d\u8fd0\u884c\u4e0b\u4e00\u884c\\n    const data = await response.json();\\n      // \u6b64\u5904\u540c\u7406\\n    console.log(data);\\n      // \u5982\u679c\u6ca1\u6709\u4e24\u4e2aawait\uff0c\u8fd9\u91cc\u5927\u6982\u7387\u662fundefined\\n  } catch (err) {\\n    console.error(\'An error occurred:\', err);\\n  }\\n}\\n\\nfoo();\\n```\\n\\n\\n\\nasync.parallel\u65b9\u6cd5\\n\\n\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u6570\u7ec4(\u5176\u4e2d\u6bcf\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u6709\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570) \u548c \u4e00\u4e2a\u6700\u7ec8\u56de\u8c03\u51fd\u6570\uff08\u53c2\u6570\u4e3a\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u548c\u4e00\u4e2a\u7ed3\u679c\u6570\u7ec4\uff09\\n\\n\u5e76\u884c\u5730\u6267\u884c\u51fd\u6570\u6570\u7ec4\u5185\u7684\u6bcf\u4e2a\u51fd\u6570\uff0c\u5f53\u4ed6\u4eec\u5168\u90e8\u5b8c\u6210\u65f6\uff0c\u6267\u884c\u6700\u7ec8\u56de\u8c03\u51fd\u6570\\n\\n```javascript\\nasync.parallel([func1(callback1), func2(callback2), ...], finalcallback(err, results){})\\n```\\n\\n\\n\\n\u4e5f\u53ef\u4ee5\u5c06\u51fd\u6570\u6570\u7ec4\u6539\u4e3a\u5bf9\u8c61\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5c5e\u6027\u4ee3\u8868\u4e00\u4e2a\u51fd\u6570\\n\\n\\n\\n\u793a\u4f8b\u4e4b\u4e2dexec\u8c03\u7528callback\u7684\u65b9\u6cd5\u5df2\u7ecf\u88abmongoose\u5f03\u7528\uff0c\u7528 Promise.all\u8fbe\u6210\u5e76\u884c\u6548\u679c\\n\\n```javascript\\nexports.genre_detail = async function (req, res, next) {\\n  try {\\n    const genre = Genre.findById(req.params.id).exec();\\n    const genre_books = Book.find({ genre: req.params.id }).exec();\\n\\n    const results = await Promise.all([genre, genre_books]);  //\u8fd9\u91cc\u4e00\u5b9a\u8981await \u5426\u5219\u4e0b\u9762\u662fundefined\\n\\n    if (results[0] == null) {\\n      var err = new Error(\\"Genre not found\\");\\n      err.status = 404;\\n      return next(err);\\n    }\\n\\n    res.render(\\"genre_detail\\", {\\n      title: \\"Genre Detail\\",\\n      genre: results[0],\\n      genre_books: results[1],\\n    });\\n  } catch (err) {\\n    return next(err);\\n  }\\n};\\n```"},{"id":"/11-14-11-26\u5b66\u4e60\u53cc\u5468\u8bb0","metadata":{"permalink":"/blog/11-14-11-26\u5b66\u4e60\u53cc\u5468\u8bb0","source":"@site/blog/11-14-11-26\u5b66\u4e60\u53cc\u5468\u8bb0.md","title":"11-14-11-26\u5b66\u4e60\u53cc\u5468\u8bb0","description":"11.14-11.26 \u5b66\u4e60\u53cc\u5468\u8bb0\uff1a","date":"2023-12-21T00:00:00.000Z","tags":[{"inline":true,"label":"daily","permalink":"/blog/tags/daily"}],"readingTime":16.91,"hasTruncateMarker":true,"authors":[{"name":"ayanami"}],"frontMatter":{"title":"11-14-11-26\u5b66\u4e60\u53cc\u5468\u8bb0","date":"2023-12-21T00:00:00.000Z","author":"ayanami","tags":["daily"]},"unlisted":false,"prevItem":{"title":"js\u57fa\u7840","permalink":"/blog/js\u57fa\u7840"}},"content":"11.14-11.26 \u5b66\u4e60\u53cc\u5468\u8bb0\uff1a\\n\\n\u6700\u8fd1\u4e8b\u52a1\u7a0d\u591a\uff0c\u4e14\u66f4\u591a\u65f6\u95f4\u82b1\u5728\u4e86\u5199\u4ee3\u7801\u4e0a~~\u4e14\u7565\u6446~~\uff0c\u6545\u5b66\u4e60\u7684\u77e5\u8bc6\u578b\u5185\u5bb9\u8f83\u5c11\\n\\n\u5b8c\u6210\u4e86 pa1 \u548c 081 \u7684 lab1\\n\\n---\\n\\n\x3c!-- more --\x3e\\n\\n#### \u5c0f\u77e5\u8bc6 get:\\n\\n##### \u641c\u7d22\u5f15\u64ce\u7684\u5c0f\u6280\u5de7\uff1a\u82f1\u6587\u7b26\u53f7\\n\\n\u641c\u7d22\u5f15\u64ce\u5bf9\u7b26\u53f7\u7684\u652f\u6301\u662f\u5f88\u5dee\u7684\uff0c\u751a\u81f3\u4f1a\u88ab\u8bc6\u522b\u6210\u901a\u914d\u7b26\u4e4b\u7c7b\\n\\n\u6b63\u786e\u7684\u641c\u7d22\u7b26\u53f7\u7684\u59ff\u52bf\u662f\u4f7f\u7528\u82f1\u6587\u4ee3\u66ff\u7b26\u53f7\\n\\ne.g.\uff08google\uff09\u53ef\u4ee5\u641c\u641c\u5bf9\u6bd4\u4e00\u4e0b\\n\x3c!--truncate--\x3e\\npython \\\\_\\\\_ \u548c python bundle \u7684\u5bf9\u6bd4\\n\\n\\\\* in bash \u548c asterisk in bash \u7684\u5bf9\u6bd4\\n\\n\u5e38\u7528\u7279\u6b8a\u7b26\u53f7\u82f1\u6587\uff1a\\n\\n? question mark ! exclamation mask\\n\\n` backtick \\\\$ dollar - hyphen # sharp or hash ~ tilde\\n\\n& ampersand \\\\* asterisk \\\\_ underscore ^ caret , comma\\n\\n. dot / forward slash \\\\ backslash \\\\< \\\\> angle bracket [] bracket () brace\\n\\n\\"\\" quotation mark\\n\\n##### \u6b63\u5219\u8868\u8fbe\u5f0f\u9519\u7528\u8ba9 cpu \u5360\u7528\u7387\u63d0\u5347 N \u500d\uff08\u96fe\uff09\\n\\n<code>$(\\\\d+)\\\\*^</code> : \u4e00\u4e2a <code>\\\\*</code> \u662f\u5982\u4f55\u8ba9\u7b97\u6cd5\u590d\u6742\u5ea6\u4ece O(N)\u53d8\u6210 O(2^N^)\u7684\uff0c\u5339\u914d 1111111111111111111111111111a \u76f4\u63a5\u7206\u70b8\\n\\n<code>$(1+1+)+0^</code> : \u540c\u7406 \u5339\u914d 11111111111111111111111111111 \u5c31\u5bc4\u4e86\\n\\n\u539f\u7406\uff1a\u53c2\u8003[\u8fd9\u4e2a](https://houbb.github.io/2020/01/07/regex-and-dfa-02)\uff0c\u5199\u5f97\u771f\u4e0d\u9519\\n\\n\u753b\u4e2a\u56fe\u5c31\u61c2\u4e86\\n\\n---\\n\\n#### \u914d\u7f6e wsl \u7684\u4ee3\u7406\\n\\n\u4f7f\u7528 CFW\uff0c\u6253\u5f00\u7cfb\u7edf\u4ee3\u7406\u3001\u5141\u8bb8\u5c40\u57df\u7f51\u94fe\u63a5\uff0c\u4f7f\u7528\u6b64\u811a\u672c\\n\\n```bash\\n# \u8f6c\u8f7d\u81ea https://www.cnblogs.com/jaycethanks/p/17360464.html\\n# \u83b7\u53d6wsl\u865a\u62df\u673a\u7684ip\uff0c \u5e76\u4ee3\u7406\u81f3windows 7890 \u7aef\u53e3\\necho \\"\u8bbe\u5b9awsl\u7f51\u7edc\u4ee3\u7406\u52307890\u5916\u7f51\u8bbf\u95ee\u7aef\u53e3......\\"\\nhost_ip=$(cat /etc/resolv.conf |grep \\"nameserver\\" |cut -f 2 -d \\" \\")\\nexport ALL_PROXY=\\"http://$host_ip:7890\\"\\n# curl \u547d\u4ee4\u68c0\u67e5\uff0c\u5e76\u4ec5\u8f93\u51fa\u72b6\u6001\u7801\\necho \\"\u5c1d\u8bd5\u901a\u8fc7curl\u547d\u4ee4\u68c0\u67e5 google \u662f\u5426\u53ef\u4ee5\u8bbf\u95ee......\u8fd4\u56de\u72b6\u6001\u7801\u4e3a\uff1a\\"\\ncurl -s -o /dev/null -w \\"%{http_code}\\\\n\\" https://www.google.com\\n```\\n\\n\u653e\u5230<code>~/.bashrc</code>\u4e0b\\n\\n\u518d<code>source ~/.bashrc</code>\u5373\u53ef\\n\\n\u788e\u788e\u5ff5\uff1a\u672c\u6765\u914d\u7f6e wsl \u4ee3\u7406\u4e3b\u8981\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u4ee3\u7801\u8865\u5168\u5728 wsl \u4e4b\u4e2d\uff08\u5373 vsc \u5f00\u542f remote \u6a21\u5f0f\u4e0b\uff09\u4e0d\u53ef\u7528\u7684\u95ee\u9898\uff0c\u7ed3\u679c\u914d\u5b8c\u4e4b\u540e\u770b\u5230\u8fd9\u6837\u7684 issue\\n\\n> **[yxw820603](https://github.com/yxw820603)** commented [on Oct 7](https://github.com/THUDM/CodeGeeX2/issues/110#issuecomment-1751579150) \u2022 edited\\n>\\n> \u7ecf\u8fc7\u7b80\u5355\u6d4b\u8bd5\uff0c\u786e\u5b9a\u63d2\u4ef6\u65e0\u6cd5\u5728 Remote-SSH \u7684\u60c5\u51b5\u4e0b\u5de5\u4f5c\u3002\\n\\n\u4e0d\u8fc7 codeium \u5012\u662f\u6298\u817e\u534a\u5929\u80fd\u7528\u4e86\uff0c\u867d\u7136\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0cwsl \u4e0b\u7684\u6548\u679c\u6bd4\u8d77\u6b63\u5e38\u672c\u673a\u5dee\u4e0d\u5c11......\u5ef6\u8fdf\u5f88\u5927\\n\\n\u5199\u7801\u7684\u65f6\u5019\u8fd8\u78b0\u5230\u4e00\u4e2a\u5f88\u641e\u7684\u4e8b\u60c5\\n\\n<code>grep \\"-D\\"</code>\u4f1a\u628a\\"-D\\"\u89e3\u91ca\u6210\u53c2\u6570-D,\\"\\"\u89e3\u91ca\u6210\u5b57\u9762\u91cf\\n\\n\u60f3\u5230\u7684\u89c4\u907f\u65b9\u6cd5\u662f\u6572\u4e2a\u7a7a\u683c <code>grep \\"[space]-D\\"</code>\\n\\n---\\n\\n#### \u6d45\u5165\u7406\u89e3\u65ad\u70b9\u548c\u8c03\u8bd5\u5668\\n\\n\u4e3b\u8981\u53c2\u8003\u8fd9\u4e24\u7bc7\\n[1](https://events.static.linuxfound.org/sites/events/files/slides/slides_16.pdf),[2](https://eli.thegreenplace.net/2011/02/07/how-debuggers-work-part-3-debugging-information)\\n\\n\u5728\u5199\u77e5\u8bc6\u4e4b\u524d\uff0c\u4e0d\u5982\u5148\u95ee\u81ea\u5df1\u51e0\u4e2a\u95ee\u9898\uff1a\\n\\n- debugger \u7684\u5b9e\u73b0\u539f\u7406\u662f\u4ec0\u4e48\uff1f\\n- \u65ad\u70b9(breakpoint)\u548c\u76d1\u89c6\u70b9(watchpoint)\u7684\u533a\u522b\uff1f\\n- \u65ad\u70b9\u6709\u54ea\u4e9b\u5b9e\u73b0\u65b9\u6cd5\uff1f\u5177\u4f53\u5230 gdb \u4e4b\u4e2d\uff0c\u5b83\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\\n\\ndebugger \u7684\u6700\u57fa\u672c\u539f\u7406\uff0c\u5c31\u662f\u8fd9\u6837\u7684\u4ee3\u7801\\n\\n```c++\\nint main(int argc, char** argv)\\n{\\n    pid_t child_pid;\\n\\n    if (argc < 2) {\\n        fprintf(stderr, \\"Expected a program name as argument\\\\n\\");\\n        return -1;\\n    }\\n\\n    child_pid = fork();\\n    if (child_pid == 0)\\n        run_target(argv[1]);\\n    else if (child_pid > 0)\\n        run_debugger(child_pid);\\n    else {\\n        perror(\\"fork\\");\\n        return -1;\\n    }\\n\\n    return 0;\\n}\\n```\\n\\ndebugger \u4f5c\u4e3a\u7236\u8fdb\u7a0b\uff0c\u4f7f\u7528 fork \u8c03\u51fa\u4e86\u9700\u8981 debug \u7684\u5b50\u8fdb\u7a0b\uff0c\u7136\u540e\u901a\u8fc7\u67d0\u79cd\u65b9\u6cd5\u548c\u5b50\u8fdb\u7a0b\u4ea4\u4e92\uff08\u64cd\u63a7\u5b50\u8fdb\u7a0b\uff09\\n\\n\u90a3\u4e48\u5c31\u5f15\u51fa\u4e86\u8fd9\u6837\u7684\u95ee\u9898\uff1a\\n\\n1. \u600e\u4e48\u64cd\u63a7\u7684\uff08\u5141\u8bb8\u64cd\u63a7\u7684\u673a\u5236\uff09\\n2. \u64cd\u63a7\u4e4b\u540e\u7684\u63a7\u5236\u6d41\\n3. \u5df2\u7ecf\u63a7\u5236\u4e86\uff0cdebug \u4fe1\u606f\u4ece\u54ea\u6765\uff08\u5982\u679c\u4e0d\u505a\u5904\u7406\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7f16\u8bd1\u4e4b\u540e\u662f\u6ca1\u6709\u539f\u6765\u7684\u4ee3\u7801\u884c\u6570\u3001\u53d8\u91cf\u7b26\u53f7\u7b49\u4fe1\u606f\u7684\uff09\\n\\n\u53c8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u603b\u7ed3\u51fa\u4ee5\u4e0b\u51e0\u70b9\uff0c\\n\\ndebug \u9700\u8981\u4fe1\u606f\uff1a\\n\\n1. \u5728\u9ad8\u7ea7\u4ee3\u7801---\x3e\u6c47\u7f16\u7684\u8fc7\u7a0b\u4e4b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4ee3\u7801\u7684\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\uff0c\u6bd4\u5982\u7b2c\u51e0\u884c\u7684\u9ad8\u7ea7\u4ee3\u7801\u5bf9\u5e94\u7b2c\u51e0\u884c\uff08\u5230\u7b2c\u51e0\u884c\uff09\u7684\u6c47\u7f16\u4ee3\u7801\\n\\n2. \u5728\u6c47\u7f16\u4ee3\u7801---\x3e\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8fc7\u7a0b\u4e4b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6709\u7528\u7684\u4fe1\u606f\u4fdd\u5b58\u5728\u53ef\u6267\u884c\u6587\u4ef6\u5185\\n\\ndebug \u9700\u8981\u65ad\u70b9\uff1a\\n\\n3. \u9700\u8981\u6709\u4e00\u79cd\u65b9\u6cd5\u5728 gdb \u6216\u8005\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e4b\u4e2d\u8fbe\u6210\u4e2d\u65ad\\n4. \u8fdb\u4e00\u6b65\u5730\uff0c\u9700\u8981\u8ba9 gdb\uff08\u7236\u8fdb\u7a0b\uff09\u80fd\u591f\u63a7\u5236\u3001\u76d1\u89c6\u3001\u6539\u53d8\u5b50\u8fdb\u7a0b\uff08\u88ab\u8c03\u8bd5\u7684\u8fdb\u7a0b\uff09\\n\\n\u89e3\u51b3\u4e86\u8fd9\u51e0\u4e2a\u95ee\u9898\uff0c\u7406\u8bba\u4e0a\u5c31\u80fd\u4ea7\u751f debugger\\n\\n\u95ee\u9898 1\uff0c\u5f88\u9057\u61be\uff0c\u7531\u4e8e\u73b0\u4ee3\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u548c\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u7684\u590d\u6742\u6027\uff0c\u6e90\u7a0b\u5e8f\u8bed\u8a00\u548c\u7f16\u8bd1\u5b8c\u6210\u7684\u6c47\u7f16\uff0c\u53c8\u6216\u8005\u8bf4\u6700\u540e\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4\u5f88\u96be\u5b8c\u7f8e\u5bf9\u5e94\uff0c\u7f16\u8bd1\u5668\u5f00\u542f\u5bf9\u5e94\u7684\u7f16\u8bd1\u6307\u4ee4\u4e4b\u540e\u4e5f\u53ea\u80fd\u505a\u5230\u8fd1\u4f3c\uff08**\u4e0d\u80fd\u5b8c\u5168\u76f8\u4fe1 back trace!**\uff09\u4f46\u5927\u4f53\u4e0a\u8fd8\u662f\u5bf9\u7684\u3002\uff08\u4e5f\u53ef\u4ee5\u5f3a\u5236\u8ba9\u7f16\u8bd1\u5668\u4e0d\u4f18\u5316\uff09\\n\\n\u4e0b\u56fe\u8f6c\u8f7d\uff1a <code>gdb br</code>\u7684\u5931\u8d25\u4f8b\u5b50\\n\\n![image-20231123221703870](https://s2.loli.net/2023/11/24/LlfdwUEMvmtT3S2.png)\\n\\n![image-20231123221731588](https://s2.loli.net/2023/11/24/nxWOHEMZNSKTa9G.png)\\n\\n\u95ee\u9898 2\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u9700\u8981 gcc **-g** \u7684\u7406\u7531\uff0c\u4e5f\u662f\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4e0d\u6b62\u4e8e\u5bf9\u5185\u5b58\u5730\u5740\u8bbe\u65ad\u70b9\uff0c\u8fd8\u80fd\u5bf9\u4e00\u4e2a\u51fd\u6570\uff0c\u4e00\u884c\u6e90\u4ee3\u7801\u8bbe\u65ad\u70b9\u7684\u539f\u56e0\\n\\n> \u73b0\u4ee3\u7f16\u8bd1\u5668\u5728\u5c06\u9ad8\u7ea7\u4ee3\u7801\u8f6c\u6362\u4e3a\u9ad8\u7ea7\u4ee3\u7801\u65b9\u9762\u505a\u5f97\u5f88\u597d\uff0c\u5176\u7f29\u8fdb\u548c\u5d4c\u5957\u7684\u63a7\u5236\u7ed3\u6784\u4ee5\u53ca\u4efb\u610f\u7c7b\u578b\u7684\u53d8\u91cf\u53ef\u4ee5\u5f88\u597d\u5730\u8f6c\u6362\u4e3a\u4e00\u5927\u5806\u79f0\u4e3a\u673a\u5668\u4ee3\u7801\u7684\u4f4d\uff0c\u5176\u552f\u4e00\u76ee\u7684\u662f\u5728\u76ee\u6807 CPU \u4e0a\u5c3d\u53ef\u80fd\u5feb\u5730\u8fd0\u884c\u3002\u5927\u591a\u6570 C \u884c\u88ab\u8f6c\u6362\u4e3a\u591a\u4e2a\u673a\u5668\u4ee3\u7801\u6307\u4ee4\u3002\u53d8\u91cf\u88ab\u63a8\u5230\u5404\u5904 - \u8fdb\u5165\u5806\u6808\u3001\u5bc4\u5b58\u5668\u6216\u5b8c\u5168\u4f18\u5316\u3002**\u7ed3\u6784\u548c\u5bf9\u8c61\u751a\u81f3\u4e0d\u5b58\u5728\u4e8e\u751f\u6210\u7684\u4ee3\u7801\u4e2d - \u5b83\u4eec\u53ea\u662f\u4e00\u4e2a\u62bd\u8c61**\uff0c\u88ab\u8f6c\u6362\u4e3a\u786c\u7f16\u7801\u7684\u504f\u79fb\u91cf\u5230\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\u3002\\n>\\n> \u90a3\u4e48\uff0c\u5f53\u60a8\u8981\u6c42\u8c03\u8bd5\u5668\u5728\u67d0\u4e2a\u51fd\u6570\u7684\u5165\u53e3\u5904\u4e2d\u65ad\u65f6\uff0c\u8c03\u8bd5\u5668\u5982\u4f55\u77e5\u9053\u5728\u54ea\u91cc\u505c\u6b62\u5462\uff1f\u5f53\u4f60\u5411\u5b83\u8be2\u95ee\u53d8\u91cf\u7684\u503c\u65f6\uff0c\u5b83\u662f\u5982\u4f55\u627e\u5230\u8981\u663e\u793a\u7684\u5185\u5bb9\u7684\uff1f**\u7b54\u6848\u662f - \u8c03\u8bd5\u4fe1\u606f**\u3002\\n>\\n> **\u8c03\u8bd5\u4fe1\u606f\u7531\u7f16\u8bd1\u5668\u4e0e\u673a\u5668\u4ee3\u7801\u4e00\u8d77\u751f\u6210\u3002\u5b83\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u548c\u539f\u59cb\u6e90\u4ee3\u7801\u4e4b\u95f4\u5173\u7cfb\u7684\u8868\u793a\u3002\u8fd9\u4e9b\u4fe1\u606f\u88ab\u7f16\u7801\u4e3a\u9884\u5b9a\u4e49\u7684\u683c\u5f0f\uff0c\u5e76\u4e0e\u673a\u5668\u4ee3\u7801\u4e00\u8d77\u5b58\u50a8**\u3002\u591a\u5e74\u6765\uff0c\u4e3a\u4e0d\u540c\u7684\u5e73\u53f0\u548c\u53ef\u6267\u884c\u6587\u4ef6\u53d1\u660e\u4e86\u8bb8\u591a\u8fd9\u6837\u7684\u683c\u5f0f\u3002\u7531\u4e8e\u672c\u6587\u7684\u76ee\u7684\u4e0d\u662f\u8c03\u67e5\u8fd9\u4e9b\u683c\u5f0f\u7684\u5386\u53f2\uff0c\u800c\u662f\u5c55\u793a\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u786e\u5b9a\u4e00\u4e9b\u4e8b\u60c5\u3002\u8fd9\u5c06\u662f DWARF\uff0c\u5b83\u4eca\u5929\u51e0\u4e4e\u65e0\u5904\u4e0d\u5728\u5730\u7528\u4f5c Linux \u548c\u5176\u4ed6 Unix-y \u5e73\u53f0\u4e0a ELF \u53ef\u6267\u884c\u6587\u4ef6\u7684\u8c03\u8bd5\u4fe1\u606f\u683c\u5f0f\u3002\\n\\n\u5bf9\u5e94 elf \u6587\u4ef6\u4e2d\u7684.debug\\\\_\\\\*\\\\*\u6bb5\\n\\n![image-20231123223152372](https://s2.loli.net/2023/11/24/gCWjndKMXcq4Gyi.png)\\n\\n\u5982\u4f55\u8fdb\u4e00\u6b65\u9605\u8bfb?\\n\\n<code>objdump --dwarf=info</code>\\n\\ninfo \u53ef\u4ee5\u6362\u6210\u522b\u7684\\n\\n![image-20231123223310051](https://s2.loli.net/2023/11/24/DQtJcnh7CyRp9mK.png)\\n\\n![image-20231123223328905](https://s2.loli.net/2023/11/24/lypIGeNi9BZJ8Mc.png)\\n\\n\u95ee\u9898 3\u30014\\n\\ndebug \u9700\u8981\u65ad\u70b9\uff0c\u9700\u8981\u67d0\u79cd\u53ef\u6062\u590d\u7684\u4e2d\u65ad\uff0c\u600e\u4e48\u505a\uff1f\\n\\n- \u8f6f\u4ef6\u652f\u6301\\n- \u786c\u4ef6\u652f\u6301\\n\\n\u5148\u8bb2\u786c\u4ef6\u652f\u6301\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u3002\u5982\u679c\u8bbe\u5907\u6709\u5b9e\u73b0\u786c\u4ef6 debug\uff0c\u5b83\u4f1a\u5728\u5185\u5b58\u4e4b\u4e2d\u5360\u636e\u4e00\u6bb5\u7279\u6b8a\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u786c\u4ef6\u652f\u6301\u5bf9 cpu \u662f\u53ef\u89c1\u7684\\n\\n\uff08cpu \u4e5f\u5b9e\u73b0\u4e86 debug \u7684\u63a7\u5236\u5bc4\u5b58\u5668\u548c\u63a7\u5236\u5355\u5143\uff09\u3002\u800c gdb \u5728 debug \u65f6\uff0c\u4f1a\u5148\u786e\u5b9a\u672c\u673a\u7684\u67b6\u6784\u548c\u786c\u4ef6\u4fe1\u606f\uff0c\u4e4b\u540e\u6839\u636e\u786c\u4ef6\u4fe1\u606f\u53bb\u5bfb\u627e\u76f8\u5173\u7684 debug \u662f\u5426\u6709\u786c\u4ef6\u652f\u6301\u3002\\n\\n\u800c\u8fd9\u4e2a\u786c\u4ef6\u652f\u6301\u8868\u73b0\u5728\u80fd\u591f\u786c\u4ef6\u4e0a\u5355\u6b65\u6267\u884c\uff0c\u901a\u8fc7\u6bd4\u8f83\u5668\u8bbe\u7f6e\u65ad\u70b9\uff0cetc\\n\\n> Gateway between re-purposed JTAG bit protocol and debug logic\\n>\\n> Debug hardware often visible in a special memory address space\\n>\\n> E.g. (gdb) stop requires writing 0x1 (Halt Request) to address 0x090 (Debugger Run Control Register) of the CPU debug unit.\\n>\\n> - Shift 4 bits into IR\\n>\\n> - Shift 34 bits into DR\\n> - Shift 4 bits into IR\\n> - Shift 34 bits into DR\\n> - Shift 34 bits into DR\\n\\n\u53e6\u4e00\u79cd\u5c31\u662f\u8f6f\u4ef6\u652f\u6301\uff0c\\n\\n\u9996\u5148\u662f\u4e2d\u65ad\uff0c\u5f53\u7a0b\u5e8f\u8fd0\u884c\u5230\u65ad\u70b9\u7684\u65f6\u5019\uff0c\u5b83\u5e94\u8be5\u5411 gdb \u53d1\u51fa\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\uff08\u6bd4\u5982 SIGTRAP\uff09\uff0c\u4e4b\u540e gdb \u7a0b\u5e8f\uff08\u7236\u8fdb\u7a0b\uff09\u63a5\u6536\u5230\u4e2d\u65ad\u4fe1\u53f7\u540e\uff0c\u8fa8\u522b\u51fa\u8fd9\u4e2a\u662f\u65ad\u70b9\u4ea7\u751f\u7684\u4e2d\u65ad\u8fd8\u662f\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\u7684\u4e2d\u65ad\uff0c\u5e76\u52a0\u4ee5\u5904\u7406\\n\\n![image-20231127222802586](https://s2.loli.net/2023/11/27/a1AtXh7PgYDwsCW.png)\\n\\n\u7136\u540e\u662f ptrace \u7cfb\u7edf\u8c03\u7528\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\u53bb\u5f97\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u63a7\u5236\u6743\uff0c\u5305\u62ec\u76d1\u89c6\u3001\u6539\u53d8\u3001\u53d1\u9001\u547d\u4ee4\u7b49\\n\\n```c++\\nvoid run_target(const char* programname)\\n{\\n    procmsg(\\"target started. will run \'%s\'\\\\n\\", programname);\\n\\n    /* Allow tracing of this process */\\n    if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0) {\\n        perror(\\"ptrace\\");\\n        return;\\n    }\\n\\n    /* Replace this process\'s image with the given program */\\n    execl(programname, programname, 0);\\n}\\n```\\n\\n\u800c\u6709\u4e86\u4e2d\u65ad\u4e4b\u540e\uff0c\u4e00\u79cd\u7b80\u5355\u7684\u5b9e\u73b0\u65b9\u6cd5\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a\\n\\n\u5728\u6307\u5b9a\u7684\u5730\u5740\u4e0a\u8bbe\u4e00\u4e2a\u76d1\u89c6\u70b9 w\\n\\n\u9996\u5148\uff0c\u6bcf\u6b21\u8fd0\u884c\u4e00\u6761\u6307\u4ee4\u4e4b\u540e\u6211\u90fd\u5207\u6362\u5230 debugger\uff0c\u6bd4\u5bf9\u4e00\u4e0b pc \u548c\u76d1\u89c6\u5730\u5740\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u5c31\u505c\u6b62\\n\\n\u8fd9\u79cd\u5207\u6362\u7684\u673a\u5236\u6765\u6e90\u4e8e\uff1a\\n\\n1. wait() \u4e0d\u6b62\u5728\u5b50\u8fdb\u7a0b exit \u65f6\u624d\u4f1a\u9000\u51fa\uff0c\u5728\u5b50\u8fdb\u7a0b\u89e6\u53d1\u4e2d\u65ad\u65f6\u4e5f\u4f1a\u8fd4\u56de\uff0c\u5e76\u4fdd\u5b58\u4e00\u4e9b\u4e2d\u65ad\u4fe1\u606f\\n2. ptrace \u8c03\u7528\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684 request PTRACE_SINGLESTEP\uff0c\u4f1a\u544a\u8bc9 OS \u542f\u52a8\u88ab\u76d1\u63a7\u8fdb\u7a0b\uff0c\u4f46\u662f\u4e00\u6761\u6307\u4ee4\u540e\u505c\u6b62\uff08pc+4\uff09\uff0c\u5e76\u4ea7\u751f\u4e2d\u65ad\u901a\u77e5\u7236\u8fdb\u7a0b\\n\\n```c++\\nvoid run_debugger(pid_t child_pid)\\n{\\n    int wait_status;\\n    unsigned icounter = 0;\\n    procmsg(\\"debugger started\\\\n\\");\\n\\n    /* Wait for child to stop on its first instruction */\\n    wait(&wait_status);\\n\\n    while (WIFSTOPPED(wait_status)) {\\n        icounter++;\\n        /* Make the child execute another instruction */\\n        if (ptrace(PTRACE_SINGLESTEP, child_pid, 0, 0) < 0) {\\n            perror(\\"ptrace\\");\\n            return;\\n        }\\n\\n        /* Wait for child to stop on its next instruction */\\n        wait(&wait_status);\\n    }\\n\\n    procmsg(\\"the child executed %u instructions\\\\n\\", icounter);\\n}\\n```\\n\\n\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u7528\u8fd9\u79cd\u5355\u6b65\u6267\u884c\u6bd4\u5bf9 pc \u7684\u201c\u76d1\u89c6\u70b9\u201d\u65b9\u6cd5\u5b9e\u73b0\u65ad\u70b9\uff0c\u4f46\u8fd9\u4e2a\u65b9\u6cd5\u7684\u95ee\u9898\u662f\uff0c\u6bcf\u6267\u884c\u4e00\u6761\u6307\u4ee4\u90fd\u8981\u4e0d\u65ad\u5207\u6362\u8fdb\u7a0b\uff0c\u6548\u7387\u592a\u4f4e\u4e86\\n\\njyy \u4ecb\u7ecd\uff0c gdb \u7528\u4e86\u4e00\u79cd\u5f88\u795e\u5947\u7684\u65b9\u6cd5\uff1a int 3\uff08\u6ce8\u610f\u8fd9\u4e2a int \u4e0d\u662f integer \u7684 int\uff09\u5077\u9f99\u8f6c\u51e4\\n\\nint 3 \u662f\u4e00\u4e2a\u5355\u5b57\u8282 x86 \u6307\u4ee4\uff0c\u4f5c\u7528\u5c31\u662f\u7b80\u5355\u5730\u53d1\u51fa\u4e00\u4e2a\u4e2d\u65ad SIGTRAP\\n\\n\u5355\u5b57\u8282\u4f7f\u5f97\u5b83\u80fd\u591f\u66ff\u6362\u5230\u4efb\u4f55\u4e00\u6761\u6307\u4ee4\u7684\u5f00\u5934\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8986\u76d6\u4e24\u6761\u53ca\u4ee5\u4e0a\u7684\u6307\u4ee4\\n\\n\u5728\u8bbe\u7f6e\u65ad\u70b9\u7684\u65f6\u5019\uff0c**gdb \u53ef\u4ee5\u5c06\u65ad\u70b9\u5904\u7684\u6307\u4ee4\u4fdd\u5b58\u8d77\u6765\uff0c\u4e4b\u540e\u66ff\u6362\u5b83\u7684\u9996\u4e2a\u5b57\u8282\u4e3a int 3**\\n\\n> **Instruction at the given address is read, saved and replaced with a breakpoint:**\\n>\\n> \u200b - either a special instruction, // SIGTRAP, int 3\\n>\\n> \u200b - or an undefined encoding. // SIGILL\\n\\n\u4e4b\u540e\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\uff0c\u6267\u884c\u5230 int 3 \u65f6\u4ea7\u751f\u4e2d\u65ad\uff08SIGTRAP\uff0cint 3 \u5c31\u662f\u7b2c\u4e09\u53f7 TRAP\uff0cx86 \u7684\u8c03\u8bd5\u5668\u4e2d\u65ad\uff09\uff0c\u800c gdb \u7a0b\u5e8f\u4f5c\u4e3a\u7236\u8fdb\u7a0b\u6536\u5230\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u8fbe\u6210\u4e2d\u65ad\uff08\u901a\u8fc7 ptrace \u8bbe\u7f6e\u4e86\u4e2d\u65ad\u7684 handler\uff09\uff0c\u4e4b\u540e\u4e5f\u53ef\u4ee5\u5c06\u539f\u6765\u7684\u6307\u4ee4\u66ff\u6362\u56de\u6765\u7ee7\u7eed\u6267\u884c\u3002\\n\\n\u7ee7\u7eed\u6267\u884c\u7684\u7ec6\u8282\uff1a\\n\\n\u5b9e\u9645\u4e0a\u5728\u6709\u4e86 ptrace \u7684\u8c03\u7528\u4e4b\u540e\uff0c\u6bcf\u5f53\u88ab\u76d1\u63a7\u7a0b\u5e8f\u6267\u884c exec \u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u53d1\u51fa\u4e00\u4e2a\u4e2d\u65ad\\n\\n> Indicates that this process is to be traced by its parent. Any signal (except SIGKILL) delivered to this process will cause it to stop and its parent to be notified via wait(). **Also, all subsequent calls to exec() by this process will cause a SIGTRAP to be sent to it, giving the parent a chance to gain control before the new program begins execution**. A process probably shouldn\'t make this request if its parent isn\'t expecting to trace it. (pid, addr, and data are ignored.)\\n> \u6307\u793a\u6b64\u8fc7\u7a0b\u5c06\u7531\u5176\u7236\u7ea7\u8ddf\u8e2a\u3002\u4f20\u9012\u7ed9\u6b64\u8fdb\u7a0b\u7684\u4efb\u4f55\u4fe1\u53f7\uff08SIGKILL \u9664\u5916\uff09\u90fd\u4f1a\u5bfc\u81f4\u5b83\u505c\u6b62\uff0c\u5e76\u901a\u8fc7 wait\uff08\uff09 \u901a\u77e5\u5176\u7236\u7ea7\u3002\u6b64\u5916\uff0c\u6b64\u8fdb\u7a0b\u5bf9 exec\uff08\uff09 \u7684\u6240\u6709\u540e\u7eed\u8c03\u7528\u90fd\u5c06\u5bfc\u81f4\u5411\u5b83\u53d1\u9001 SIGTRAP\uff0c\u4ece\u800c\u4f7f\u7236\u7ea7\u6709\u673a\u4f1a\u5728\u65b0\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u4e4b\u524d\u83b7\u5f97\u63a7\u5236\u6743\u3002\u5982\u679c\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u4e0d\u5e0c\u671b\u8ddf\u8e2a\u5b83\uff0c\u5219\u8fdb\u7a0b\u53ef\u80fd\u4e0d\u5e94\u53d1\u51fa\u6b64\u8bf7\u6c42\u3002\uff08PID\u3001ADDR \u548c DATA \u5c06\u88ab\u5ffd\u7565\u3002\\n\\n\u5c0f\u7684\u81ea\u95ee\u81ea\u7b54\u73af\u8282\uff1a\\n\\nQ\uff1a\u4e3a\u4ec0\u4e48 gdb \u4e0d\u662f\u7279\u6743\u6307\u4ee4\uff1f\u5b83\u8bfb\u5bc4\u5b58\u5668\u503c\u3001\u5185\u5b58\u503c\u7b49\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\\n\\nA\uff1a**\u4f46 install \u662f\u7279\u6743\u6307\u4ee4\uff08\u7b11\uff09**\uff0cLinux \u4e4b\u4e2d\uff0c\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u81ea\u52a8\u5177\u5907\u53ef\u6267\u884c\u7684\u9ed8\u8ba4\u6743\u9650\u7684\uff08**file mode**\uff09\uff0c\u800c\u4e0d\u662f\u50cf bash \u811a\u672c\u90a3\u6837\u9700\u8981 sudo chmod +x \u7ed9\u4e88\u6743\u9650\u3002\\n\\n\u5e76\u4e14\u54a8\u8be2 gpt \u8fd8\u5f97\u5230\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u60c5\uff1aptrace \u8c03\u7528\u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u5176\u4ed6\u7684\u8fdb\u7a0b\uff0c**\u6240\u4ee5 ptrace \u8c03\u7528\u662f\u9700\u8981 root \u6743\u9650**\uff0c\u4f46\u662f\uff0c**\u7528\u6237\u6743\u9650\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 setuid \u6216\u8005 setcap \u673a\u5236\uff0c\u662f gdb \u80fd\u5bf9\u7279\u5b9a\u7684\u6587\u4ef6\uff0c\u5177\u6709\u7279\u5b9a\u7cfb\u7edf\u8c03\u7528\u7684\u6743\u9650**\\n\\n\u8bfb\u5bc4\u5b58\u5668\u503c\u662f\u4f7f\u7528\u4e86\u7279\u5b9a\u7684\u4e2d\u65ad\uff0c\u8bfb\u5185\u5b58\u662f\u8bfb\u7684\u865a\u62df\u5185\u5b58\u3002\\n\\n#### \u5bf9\u9875\u8868\u7684\u8fdb\u4e00\u6b65\u63a2\u8ba8\\n\\n\u5728\u5199\u77e5\u8bc6\u4e4b\u524d\uff0c\u4e0d\u5982\u5148\u95ee\u81ea\u5df1\u51e0\u4e2a\u95ee\u9898\uff1a\\n\\n- \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u591a\u7ea7\u9875\u8868\uff1f\u591a\u7ea7\u9875\u8868\u7684\u539f\u7406\u548c\u5177\u4f53\u5b9e\u73b0\u662f\u4ec0\u4e48\uff1f\u4ec0\u4e48\u662f\u9875\u8868\u76ee\u5f55\uff08page table dir\uff09\uff1f\\n- \u9875\u8868\u7684\u57fa\u5740\u5bc4\u5b58\u5668\uff0c\u5728 xv6 \u4e2d\u662f\u4ec0\u4e48\uff1f\u5728\u9875\u8868\u8fd8\u6ca1\u6709\u5efa\u7acb\u4e4b\u524d\u548c\u5efa\u7acb\u9875\u8868\uff0c\u8bbe\u7f6e\u57fa\u5740\u4e4b\u65f6\uff0c\u5185\u6838\u4ee3\u7801\u662f\u600e\u4e48\u8fd0\u884c\u7684\uff1f\\n- \u8ba1\u7b97\u673a\u7684 cache \u5177\u4f53\u662f\u5728\u4ec0\u4e48\u4f4d\u7f6e\uff1f\u5b83\u63a5\u53d7\u7684\u548c\u8fd4\u56de\u7684\u662f\u7269\u7406\u5730\u5740\u8fd8\u662f\u865a\u62df\u5730\u5740\uff1f\\n- \u591a\u8fdb\u7a0b\u4e0b\uff0c\u5185\u6838\u6808\u5728\u5b9e\u9645\u5185\u5b58\u7684\u54ea\u91cc\uff1f\u6709\u51e0\u4e2a\uff1f\u53c8\u662f\u5982\u4f55\u4fdd\u8bc1\u591a\u4e2a\u5185\u6838\u6808\u4e0d\u91cd\u53e0\u7684\uff1f\\n\\n#### xv6 \u7684\u6587\u4ef6\u7cfb\u7edf\u548c\u7cfb\u7edf\u8c03\u7528\\n\\n\u5728\u5199\u77e5\u8bc6\u4e4b\u524d\uff0c\u4e0d\u5982\u5148\u95ee\u81ea\u5df1\u51e0\u4e2a\u95ee\u9898\uff1a\\n\\n- \u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\u5199\u4e00\u4e2a ls \u7684\u5927\u4f53\u601d\u8def\uff1f\\n\\n- \u6587\u4ef6\u91cd\u547d\u540d\uff0c\u8f6f\u786c\u94fe\u63a5\u7a76\u7adf\u662f\u4ec0\u4e48\uff1f\u6587\u4ef6\u5939\u53c8\u662f\u4ec0\u4e48\uff1f\\n\\n- \u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u7ba1\u9053\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\\n\\n- \u7cfb\u7edf\u8c03\u7528\u662f\u5982\u4f55\u5b9e\u73b0\u7684\\n\\n- \u591a\u8fdb\u7a0b\u4e0b\uff0c\u5185\u6838\u6808\u5728\u5b9e\u9645\u5185\u5b58\u7684\u54ea\u91cc\uff1f\u6709\u51e0\u4e2a\uff1f\u53c8\u662f\u5982\u4f55\u4fdd\u8bc1\u591a\u4e2a\u5185\u6838\u6808\u4e0d\u91cd\u53e0\u7684\uff1f\\n\\n- \u5b8f\u5185\u6838\u548c\u5fae\u5185\u6838\u7684\u5229\u5f0a\uff1f\\n\\n\u6587\u4ef6\u7cfb\u7edf\u90e8\u5206\uff1a\\n\\nLinux \u6587\u4ef6\u7684\u6838\u5fc3\u6807\u8bc6\u662f inode\\n\\n\u540d\u5b57\u4e4b\u4e8e inode \u53f7\u597d\u6bd4\u57df\u540d\u4e4b\u4e8e ip \u5730\u5740\\n\\n\u662f\u7531\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7ba1\u7406\u8fd9\u4e00\u4e2a \\\\<filename, inode number\\\\>\u7684 map\\n\\n\u8fd9\u5c31\u53c8\u5f15\u51fa\u4e86\u6587\u4ef6\u5939\u662f\u4ec0\u4e48\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u2014\u2014\u4ec0\u4e48\u4e5f\u4e0d\u662f\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a \u8bb0\u5f55\u4e86\u5e95\u4e0b\u6587\u4ef6\u7684\\\\<filename, inode number\\\\>\u7684 map \u6570\u636e\\n\\n#### KISS \u6cd5\u5219\uff0crisc \u548c cisc"}]}}')}}]);