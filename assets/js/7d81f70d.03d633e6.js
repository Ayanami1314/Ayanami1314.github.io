"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7670],{8240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>_,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>s});var r=n(74848),d=n(28453);const c={},a=void 0,i={id:"Chcore\u6e90\u7801\u9605\u8bfb/\u591a\u6838\u652f\u6301\u4e0e\u8c03\u5ea6/\u591a\u6838\u8c03\u5ea6",title:"\u591a\u6838\u8c03\u5ea6",description:"\u8c03\u5ea6\u7684\u57fa\u672capi",source:"@site/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u591a\u6838\u652f\u6301\u4e0e\u8c03\u5ea6/\u591a\u6838\u8c03\u5ea6.md",sourceDirName:"Chcore\u6e90\u7801\u9605\u8bfb/\u591a\u6838\u652f\u6301\u4e0e\u8c03\u5ea6",slug:"/Chcore\u6e90\u7801\u9605\u8bfb/\u591a\u6838\u652f\u6301\u4e0e\u8c03\u5ea6/\u591a\u6838\u8c03\u5ea6",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u591a\u6838\u652f\u6301\u4e0e\u8c03\u5ea6/\u591a\u6838\u8c03\u5ea6",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"notesSidebar",previous:{title:"\u591a\u6838\u652f\u6301",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u591a\u6838\u652f\u6301\u4e0e\u8c03\u5ea6/\u591a\u6838\u652f\u6301"},next:{title:"\u5f02\u5e38\u7ba1\u7406",permalink:"/docs/Chcore\u6e90\u7801\u9605\u8bfb/\u5f02\u5e38\u7ba1\u7406/"}},_={},s=[{value:"\u8c03\u5ea6\u7684\u57fa\u672capi",id:"\u8c03\u5ea6\u7684\u57fa\u672capi",level:3},{value:"\u534f\u4f5c\u5f0f\u8c03\u5ea6",id:"\u534f\u4f5c\u5f0f\u8c03\u5ea6",level:3},{value:"\u62a2\u5360\u5f0f\u8c03\u5ea6",id:"\u62a2\u5360\u5f0f\u8c03\u5ea6",level:3}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"\u8c03\u5ea6\u7684\u57fa\u672capi",children:"\u8c03\u5ea6\u7684\u57fa\u672capi"}),"\n",(0,r.jsx)(t.p,{children:"\u8c03\u5ea6\u961f\u5217\u521d\u59cb\u5316"}),"\n",(0,r.jsx)(t.p,{children:"\u5341\u5206\u7b80\u5355\u5c31\u76f4\u63a5\u653e\u6e90\u7801\u4e86"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"int rr_sched_init(void)\n{\n        int i = 0;\n\n        /* Initialize global variables */\n        for (i = 0; i < PLAT_CPU_NUM; i++) {\n                init_list_head(&(rr_ready_queue_meta[i].queue_head));\n                lock_init(&(rr_ready_queue_meta[i].queue_lock));\n                rr_ready_queue_meta[i].queue_len = 0;\n        }\n\n        return 0;\n}\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://sjtu-ipads.github.io/OS-Course-Lab/Lab4/scheduler.html#%E8%B0%83%E5%BA%A6%E9%98%9F%E5%88%97%E5%85%A5%E9%98%9F",children:(0,r.jsx)(t.strong,{children:"\u8c03\u5ea6\u961f\u5217\u5165\u961f"})})}),"\n",(0,r.jsxs)(t.p,{children:["\u5185\u6838\u521d\u59cb\u5316\u8fc7\u7a0b\u7ed3\u675f\u4e4b\u540e\u4f1a\u8c03\u7528",(0,r.jsx)(t.code,{children:"create_root_thread"}),"\u6765\u521b\u5efa\u7b2c\u4e00\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u53ca\u7ebf\u7a0b\uff0c\u5728",(0,r.jsx)(t.code,{children:"create_root_thread"}),"\u6700\u540e\u4f1a\u8c03\u7528",(0,r.jsx)(t.code,{children:"sched_enqueue"}),"\u51fd\u6570\u5c06\u521b\u5efa\u7684\u7ebf\u7a0b\u52a0\u5165\u8c03\u5ea6\u961f\u5217\u4e4b\u4e2d\u3002",(0,r.jsx)(t.code,{children:"sched_enqueue"}),"\xa0\u6700\u7ec8\u4f1a\u8c03\u7528kernel/sched/policy_rr.c\u4e2d\u5b9a\u4e49\u7684",(0,r.jsx)(t.code,{children:"rr_sched_enqueue"}),"\u51fd\u6570\u3002\u8be5\u51fd\u6570\u9996\u5148\u6311\u9009\u5408\u9002\u7684CPU\u6838\u5fc3\u7684\u5c31\u7eea\u961f\u5217\uff08\u8003\u8651\u7ebf\u7a0b\u662f\u5426\u7ed1\u6838\u4ee5\u53ca\u5404\u4e2aCPU\u6838\u5fc3\u4e4b\u95f4\u7684\u8d1f\u8f7d\u5747\u8861\uff09\uff0c\u7136\u540e\u8c03\u7528",(0,r.jsx)(t.code,{children:"__rr_sched_enqueue"}),"\u5c06\u7ebf\u7a0b\u63d2\u5165\u5230\u9009\u4e2d\u7684\u5c31\u7eea\u961f\u5217\u4e2d\u3002"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"\u6311\u9009\u5408\u9002\u7684\u5c31\u7eea\u961f\u5217\u5728rr\u7b56\u7565\u4e4b\u4e2d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7b97\u6cd5\uff1a\u5982\u679c\u5f53\u524d\u961f\u5217\u957f\u5ea6\u6ca1\u6709\u8fbe\u5230\u8d1f\u8f7d\u5747\u8861\u7684\u9608\u503c\uff0c\u5c31\u9009\u62e9\u5f53\u524d\u7684cpu\uff0c\u5982\u679c\u8fbe\u5230\u9608\u503c\u4e86\uff0c\u5c31\u9009\u62e9\u4efb\u52a1\u6570\u91cf\u6700\u5c11\u7684cpu\uff0c\u5e76\u589e\u52a0\u961f\u5217\u957f\u5ea6"}),"\n",(0,r.jsx)(t.p,{children:"\u8fd9\u91cc\u7684\u9608\u503c\u53ef\u8c03\u8282\uff0c\u4f46\u8fd8\u662f\u5c5e\u4e8e\u975e\u5e38\u7b80\u5355\u7684\u7b56\u7565\uff0c\u540c\u65f6\u8fd9\u91cc\u5bf9\u4e8e\u6bcf\u4e2acpu\u7684meta data\u4e5f\u662f\u5c5e\u4e8e\u4e00\u628a\u5927\u9501\u4fdd\u5e73\u5b89\u7684\u573a\u666f\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u4ec0\u4e48\u4f18\u5316"}),"\n",(0,r.jsx)(t.p,{children:"\u53c8\u56e0\u4e3a\u662frr, \u6240\u4ee5\u4f18\u5148\u7ea7\u5e76\u6ca1\u6709\u8d77\u4ec0\u4e48\u4f5c\u7528\uff0c\u7b80\u5355\u5224\u65ad\u540e\u5c31\u76f4\u63a5list append"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"int __rr_sched_enqueue(struct thread *thread, int cpuid)\n{\n        if (thread->thread_ctx->type == TYPE_IDLE) {\n                return 0;\n        }\n\n        /* Already in the ready queue */\n        if (thread_is_ts_ready(thread)) {\n                return -EINVAL;\n        }\n\n        thread->thread_ctx->cpuid = cpuid;\n        thread_set_ts_ready(thread);\n        obj_ref(thread);\n        list_append(&(thread->ready_queue_node),\n                    &(rr_ready_queue_meta[cpuid].queue_head));\n        rr_ready_queue_meta[cpuid].queue_len++;\n\n        return 0;\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u540c\u7406\uff0c\u51fa\u961f\u64cd\u4f5c\u4e5f\u5c31\u662f\u5f88\u7b80\u5355\u7684api"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"/*\n * remove @thread from its current residual ready queue\n */\nint rr_sched_dequeue(struct thread *thread)\n{\n        BUG_ON(!thread);\n        BUG_ON(!thread->thread_ctx);\n        /* IDLE thread will **not** be in any ready queue */\n        BUG_ON(thread->thread_ctx->type == TYPE_IDLE);\n\n        unsigned int cpuid = 0;\n        int ret = 0;\n\n        cpuid = thread->thread_ctx->cpuid;\n        lock(&(rr_ready_queue_meta[cpuid].queue_lock));\n        ret = __rr_sched_dequeue(thread);\n        unlock(&(rr_ready_queue_meta[cpuid].queue_lock));\n        return ret;\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u9009\u62e9\u53ef\u8c03\u5ea6\u7684\u7ebf\u7a0b\u6bd4\u8f83\u590d\u6742\u4e00\u4e9b\uff0c\u7531\u4e8e\u6d89\u53ca\u5230\u4e86fast path\u4f18\u5316\u6765\u5c3d\u91cf\u51cf\u5c11\u9501\u5f00\u9500"}),"\n",(0,r.jsx)(t.p,{children:"\u5177\u4f53\u800c\u8a00\uff0c\u5728\u9009\u53d6\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u524d\uff0c\u5148\u505a\u4e86\u4e00\u6b21\u5224\u7a7a\uff0c\u5982\u679c\u51c6\u5907\u961f\u5217\u662f\u7a7a\u5c31\u76f4\u63a5\u8fd4\u56deidle\u7ebf\u7a0b"}),"\n",(0,r.jsx)(t.p,{children:"\u4e0d\u7a7a\u7684\u60c5\u51b5\u4e0b\u518d\u5c1d\u8bd5\u62ff\u9501\uff0c\u51cf\u5c11\u8f7b\u5de5\u4f5c\u8d1f\u8f7d\u4e0b\u7684\u9501\u7ade\u4e89"}),"\n",(0,r.jsx)(t.p,{children:"\u62ff\u9501\u540e\u904d\u5386\u81ea\u5df1\u6838\u5fc3\u4e0a\u7684ready queue\uff0c\u627e\u4e00\u4e2a\u5f53\u524d\u72b6\u6001\u4e3afree\u7684\u6216\u8005\u5c31\u662f\u5f53\u524d\u7684thread\uff0c\u5982\u679c\u6ca1\u627e\u5230\u5219\u8fd4\u56deidle"}),"\n",(0,r.jsx)(t.p,{children:"\uff08\u6309\u7167\u6ce8\u91ca\u7684\u8bf4\u6cd5\u8fd9\u4e2a\u597d\u50cf\u548c\u591a\u6838\u4e0b\u7ebf\u7a0b\u5728\u4e0d\u540c\u6838\u5fc3\u4e0a\u7684\u8c03\u5ea6\u6709\u5173\uff0c\u867d\u7136\u7ebf\u7a0b\u5728cpu\u6838\u5fc3\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u8fdb\u884c\u5206\u914d\uff0c\u4f46\u662f\u7ebf\u7a0b\u76f8\u5173\u7684\u5185\u6838\u4e0a\u4e0b\u6587\uff08\u5982\u5185\u6838\u6808\uff09\u8fd8\u9700\u8981\u65f6\u95f4\u8fc1\u79fb\u548c\u91ca\u653e\uff08\u4f8b\u5982\u6b63\u5728\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u548c\u4e2d\u65ad\uff09\uff0c\u6240\u4ee5\u4f1a\u51fa\u73b0ready queue\u6ca1\u4e00\u4e2afree\u7684\uff0c\u662f\u56e0\u4e3a\u5728fast path \u5224\u65ad\u5230\u62ff\u9501\u7684\u65f6\u5019\u88ab\u4e2d\u65ad\u7b49\u6539\u53d8\u72b6\u6001\u4e86\u5417\uff09"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"/*\n * Choose an appropriate thread and dequeue from ready queue\n */\nstruct thread *rr_sched_choose_thread(void)\n{\n        unsigned int cpuid = smp_get_cpu_id();\n        struct thread *thread = NULL;\n\n        if (!list_empty(&(rr_ready_queue_meta[cpuid].queue_head))) {\n                lock(&(rr_ready_queue_meta[cpuid].queue_lock));\n        again:\n                if (list_empty(&(rr_ready_queue_meta[cpuid].queue_head))) {\n                        unlock(&(rr_ready_queue_meta[cpuid].queue_lock));\n                        goto out;\n                }\n                /*\n                 * When the thread is just moved from another cpu and\n                 * the kernel stack is used by the origina core, try\n                 * to find another thread.\n                 */\n                if (!(thread = find_runnable_thread(\n                              &(rr_ready_queue_meta[cpuid].queue_head)))) {\n                        unlock(&(rr_ready_queue_meta[cpuid].queue_lock));\n                        goto out;\n                }\n\n                BUG_ON(__rr_sched_dequeue(thread));\n                if (thread_is_exiting(thread) || thread_is_exited(thread)) {\n                        /* Thread need to exit. Set the state to TE_EXITED */\n                        thread_set_exited(thread);\n                        goto again;\n                }\n                unlock(&(rr_ready_queue_meta[cpuid].queue_lock));\n                return thread;\n        }\nout:\n        return &idle_threads[cpuid];\n}\n\n/*\n * find_runnable_thread\n * ** Shoule hold a dedicated lock for the thread_list and this function can\n * only be called in the critical section!! ** Only the thread which kernel\n * state is free can be choosed\n */\nstruct thread *find_runnable_thread(struct list_head *thread_list)\n{\n        struct thread *thread;\n\n        for_each_in_list (\n                thread, struct thread, ready_queue_node, thread_list) {\n                if (!thread_is_suspend(thread)\n                    && (thread->thread_ctx->kernel_stack_state == KS_FREE\n                        || thread == current_thread)) {\n                        return thread;\n                }\n        }\n        return NULL;\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u81f3\u4e8err_sched\u672c\u8eab\u5219\u662f\u5982\u4e0b\u7684\u903b\u8f91"}),"\n",(0,r.jsx)(t.p,{children:"\u5982\u679c\u6ca1\u6709old, \u5c31choose one"}),"\n",(0,r.jsx)(t.p,{children:"\u5982\u679c\u6709old, \u67e5\u770bold\u7684\u7c7b\u578b\uff0c\u6709\u4e9bipc\u76f8\u5173\u7684thread type\u9700\u8981\u7ed9\u8c03\u5ea6\u7684\u65b0\u7ebf\u7a0b\u4f20\u9012context"}),"\n",(0,r.jsxs)(t.p,{children:["\u67e5\u770b\u7ebf\u7a0b\u81ea\u5df1\u7684\u65f6\u95f4\u7247( ",(0,r.jsx)(t.code,{children:"sc->budget,sc\u662fschedular context"}),") \u662f\u5426\u8017\u5c3d\uff0c\u5982\u679c\u6ca1\u8017\u5c3d\u5c31\u7ee7\u7eed"]}),"\n",(0,r.jsx)(t.p,{children:"\u8017\u5c3d\u5219\u5207\u6362\u5230\u65b0\u7684\u7ebf\u7a0b"}),"\n",(0,r.jsx)(t.p,{children:"\u5207\u6362\u7684\u8fc7\u7a0b\u672c\u8eab\u662f\u5f88\u7b80\u5355\u7684\uff0c\u6bd5\u7adf\u6b64\u65f6\u8fd8\u6ca1\u6709\u8fd4\u56de\u7ed9\u7528\u6237\u6001\uff0c\u53ea\u662f\u4fee\u6539current_thread\u76f8\u5173\u7684\u4e00\u4e9b\u5143\u6570\u636e\uff0c\u5e76\u5728\u65b0\u7684\u7ebf\u7a0b\u4e0a\u8bbe\u7f6eprev_thread"}),"\n",(0,r.jsx)(t.p,{children:"(\u8fd4\u56de\u7528\u6237\u6001\u7684\u5b9e\u4f8b\u5728sched_to_thread\uff0c \u5185\u90e8\u6bd4\u8f83\u590d\u6742\uff0c\u53ef\u80fd\u8de8\u6838\u8c03\u5ea6\uff0c\u6b64\u65f6\u9700\u8981\u901a\u8fc7ipi\uff08\u4f53\u7cfb\u7ed3\u6784\u7279\u5b9a\u7684\u5904\u7406\u5668\u95f4\u4e2d\u65ad\uff09\u6765\u7b49\u5f85\u76ee\u6807cpu\u6838\u5904\u7406\u597d\u5f53\u524d\u7684\u4e2d\u65ad\u7b49\u4e8b\u4ef6\u91ca\u653e\u5185\u6838\u6808\uff0c \u518d\u8fdb\u884c\u4f53\u7cfb\u7ed3\u6784\u7279\u5b9a\u7684\u4e0a\u4e0b\u6587\u5207\u6362\uff08\u5bc4\u5b58\u5668\u7684save/load\uff09\u548c\u7528\u6237\u6001\u8fd4\u56de)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:'/*\n * Schedule a thread to execute.\n * current_thread can be NULL, or the state is TS_RUNNING or\n * TS_WAITING/TS_BLOCKING. This function will suspend current running thread, if\n * any, and schedule another thread from\n * `(rr_ready_queue_meta[cpuid].queue_head)`.\n * ***the following text might be outdated***\n * 1. Choose an appropriate thread through calling *chooseThread* (Simple\n * Priority-Based Policy)\n * 2. Update current running thread and left the caller to restore the executing\n * context\n */\nint rr_sched(void)\n{\n        /* WITH IRQ Disabled */\n        struct thread *old = current_thread;\n        struct thread *new = 0;\n\n        if (old) {\n                BUG_ON(!old->thread_ctx);\n\n                /* old thread may pass its scheduling context to others. */\n                if (old->thread_ctx->type != TYPE_SHADOW\n                    && old->thread_ctx->type != TYPE_REGISTER) {\n                        BUG_ON(!old->thread_ctx->sc);\n                }\n\n                /* Set TE_EXITING after check won\'t cause any trouble, the\n                 * thread will be recycle afterwards. Just a fast path. */\n                /* Check whether the thread is going to exit */\n                if (thread_is_exiting(old)) {\n                        /* Set the state to TE_EXITED */\n                        thread_set_exited(old);\n                }\n\n                /* check old state */\n                if (!thread_is_exited(old)) {\n                        if (thread_is_ts_running(old)) {\n                                /* A thread without SC should not be TS_RUNNING.\n                                 */\n                                BUG_ON(!old->thread_ctx->sc);\n                                if (old->thread_ctx->sc->budget != 0\n                                    && !thread_is_suspend(old)) {\n                                        switch_to_thread(old);\n                                        return 0; /* no schedule needed */\n                                }\n                                rr_sched_refill_budget(old, DEFAULT_BUDGET);\n                                BUG_ON(rr_sched_enqueue(old) != 0);\n                        } else if (!thread_is_ts_blocking(old)\n                                   && !thread_is_ts_waiting(old)) {\n                                kinfo("thread state: %d\\n",\n                                      old->thread_ctx->state);\n                                BUG_ON(1);\n                        }\n                }\n        }\n\n        BUG_ON(!(new = rr_sched_choose_thread()));\n        switch_to_thread(new);\n\n        return 0;\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"\u534f\u4f5c\u5f0f\u8c03\u5ea6",children:"\u534f\u4f5c\u5f0f\u8c03\u5ea6"}),"\n",(0,r.jsx)(t.p,{children:"\u6709\u4e86\u4e0a\u6587\u7684api\u4e4b\u540e\u975e\u5e38\u7b80\u5355\uff01"}),"\n",(0,r.jsx)(t.p,{children:"\u5b9e\u73b0\u534f\u4f5c\u5f0f\u8c03\u5ea6\u53ea\u9700\u8981\u8ba9\u7528\u6237\u6001\u80fd\u591f\u53d1\u8d77\u653e\u5f03\u7ebf\u7a0b\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662fyield\u7684syscall\u5c31\u597d\u4e86"}),"\n",(0,r.jsx)(t.p,{children:"\u5185\u6838\u91cc\u9762\u5c31\u7b80\u5355\u7684\u5c06\u4ed6\u7684\u65f6\u95f4\u7247\u6e05\u7a7a\uff0c\u7528sched\uff08\u8fd9\u662fpolicy\u7c7b\u7684\u57fa\u7c7b\u7684\u201c\u865a\u51fd\u6570\u201d\uff0c \u6b64\u5904\u4f1a\u88ab\u201c\u91cd\u8f7d\u201d\u4e3arr_sched\uff09\u5207\u6362\u7ebf\u7a0b\uff0c\u518deret\u5c31\u597d\u4e86"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"/* SYSCALL functions */\nvoid sys_yield(void)\n{\n        current_thread->thread_ctx->sc->budget = 0;\n        sched();\n        eret_to_thread(switch_context());\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u5176\u5b9eswitch_context\u91cc\u9762\u8fd8\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u9700\u8981\u5207\u6362\u5f88\u591a\u4e1c\u897f"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"vmspace \u8fd9\u4e2a\u7ed3\u6784\u5728thread\u91cc\u9762(\u8fd8\u8bb0\u5f97\u8fd9\u7684\u6838\u5fc3\u6570\u636e\u673a\u6784\u662f\u4e00\u4e2arbtree\u7684root\u5417\uff0c \u56de\u770b\u5185\u5b58\u7ba1\u7406)\uff0c\u4f46\u662f\u9700\u8981\u5207\u6362\u9875\u8868\uff08\u9875\u8868\u7684\u5730\u5740\u4e5f\u5728vmspace\u4e4b\u4e2d\u7ef4\u62a4\uff09"}),"\n",(0,r.jsxs)(t.li,{children:["tls(thread local storage\uff0c \u5728arm\u67b6\u6784\u7684\u5178\u578b\u5b9e\u73b0\u4e4b\u4e2d\u662fTPIDR_EL0\u5bc4\u5b58\u5668\uff0c\u5b83\u5b58\u7740\u4e00\u4e2a\u7ebf\u7a0b\u7279\u5b9a\u7684\u6807\u8bc6\u7b26)","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"anyway\uff0cOS\u5176\u5b9e\u4e0d\u77e5\u9053\u8fd9\u91cc\u9762\u5b58\u7684\u662f\u4ec0\u4e48\u4e1c\u897f\uff0c\u4ed6\u53ea\u662f\u628a\u8fd9\u4e2a\u5bc4\u5b58\u5668\u5f53\u6210\u7ebf\u7a0b\u7279\u5b9a\u7684\u6807\u8bc6\u7b26\uff0c\u5e76\u5728\u81ea\u5df1\u7684\u7ebf\u7a0b\u5b9e\u73b0\u4e4b\u4e2d\u7ef4\u62a4\u800c\u5df2\u3002\u81f3\u4e8e\u8bed\u8a00\u5c42\u9762\u7684tls\u5982\u4f55\u5b9e\u73b0\uff0c\u90a3\u662f\u7f16\u8bd1\u5668\u5f00\u53d1\u8005\u6216\u8005\u5e93\u5f00\u53d1\u8005\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\u5b58\u4e00\u4e2a\u7279\u5b9a\u7684\u7a7a\u95f4\u7684\u6307\u9488\uff08\u4f8b\u5982\u5c0f\u7684\u5728\u6808\u4e0a\uff0c \u5927\u7684\u5728\u5806\u4e0a\uff09"}),"\n",(0,r.jsxs)(t.li,{children:["arm compiler\u7684\u652f\u6301\u6587\u6863 ",(0,r.jsx)(t.a,{href:"https://developer.arm.com/documentation/dui0205/g/arm-compiler-reference/compiler-specific-features/thread-local-storage",children:"https://developer.arm.com/documentation/dui0205/g/arm-compiler-reference/compiler-specific-features/thread-local-storage"})]}),"\n",(0,r.jsxs)(t.li,{children:["\u5bf9tls\u7684\u4e00\u4e9b\u8ba8\u8bba ",(0,r.jsx)(t.a,{href:"https://forum.osdev.org/viewtopic.php?t=36597",children:"https://forum.osdev.org/viewtopic.php?t=36597"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:"fpu \u76f8\u5173"}),"\n",(0,r.jsx)(t.li,{children:"\u5176\u4ed6\u60f3\u8981\u6dfb\u52a0\u7684\u673a\u5236\uff0c\u4f8b\u5982\u4fdd\u5b58\u548c\u6e05\u7406TLB\u7684\u4e00\u4e9b\u6570\u636e\uff08history\uff09 \u2026"}),"\n",(0,r.jsx)(t.li,{children:"\u628a\u5207\u6362\u7684\u7ebf\u7a0b\u76f8\u5173\u7684\u5bc4\u5b58\u5668\u8bbe\u7f6e\u5230cpu\u4e0a"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"\u5177\u4f53\u4ee3\u7801\u5982\u4e0b"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:'/*\n * This function is used after current_thread is set (a new thread needs to be\n * scheduled).\n *\n * Switch context between current_thread and current_thread->prev_thread:\n * including: vmspace, fpu, tls, ...\n *\n * Return the context pointer which should be set to stack pointer register.\n */\nvaddr_t switch_context(void)\n{\n        struct thread *target_thread;\n        struct thread_ctx *target_ctx;\n        struct thread *prev_thread;\n\n        target_thread = current_thread;\n        if (!target_thread || !target_thread->thread_ctx) {\n                kwarn("%s no thread_ctx", __func__);\n                return 0;\n        }\n\n        target_ctx = target_thread->thread_ctx;\n\n        prev_thread = target_thread->prev_thread;\n        if (prev_thread == THREAD_ITSELF)\n                return (vaddr_t)target_ctx;\n\n#if FPU_SAVING_MODE == EAGER_FPU_MODE\n        save_fpu_state(prev_thread);\n        restore_fpu_state(target_thread);\n#else\n        /* FPU_SAVING_MODE == LAZY_FPU_MODE */\n        if (target_thread->thread_ctx->type > TYPE_KERNEL)\n                disable_fpu_usage();\n#endif\n\n        /* Switch the TLS information: save and restore */\n        switch_tls_info(prev_thread, target_thread);\n\n#ifndef CHCORE_KERNEL_TEST\n        BUG_ON(!target_thread->vmspace);\n        /*\n         * Recording the CPU the thread runs on: for TLB maintainence.\n         * switch_context is always required for running a (new) thread.\n         * So, we invoke record_running_cpu here.\n         */\n        record_history_cpu(target_thread->vmspace, smp_get_cpu_id());\n        if ((!prev_thread) || (prev_thread->vmspace != target_thread->vmspace))\n                switch_thread_vmspace_to(target_thread);\n#else /* CHCORE_KERNEL_TEST */\n        /* TYPE_TESTS threads do not have vmspace. */\n        if (target_thread->thread_ctx->type != TYPE_TESTS) {\n                BUG_ON(!target_thread->vmspace);\n                record_history_cpu(target_thread->vmspace, smp_get_cpu_id());\n                switch_thread_vmspace_to(target_thread);\n        }\n#endif /* CHCORE_KERNEL_TEST */\n\n        arch_switch_context(target_thread);\n\n        return (vaddr_t)target_ctx;\n}\n\nvoid arch_switch_context(struct thread *target)\n{\n\tstruct per_cpu_info *info;\n\n\tinfo = get_per_cpu_info();\n\n\t/* Set the `cur_exec_ctx` in the per_cpu info. */\n\tinfo->cur_exec_ctx = (u64)target->thread_ctx;\n}\n\n'})}),"\n",(0,r.jsx)(t.h3,{id:"\u62a2\u5360\u5f0f\u8c03\u5ea6",children:"\u62a2\u5360\u5f0f\u8c03\u5ea6"}),"\n",(0,r.jsx)(t.p,{children:"\u62a2\u5360\u5f0f\u9996\u5148\u8981\u652f\u6301\u7684\u5c31\u662f\u65f6\u949f\u4e2d\u65ad"}),"\n",(0,r.jsx)(t.p,{children:"\u800c\u65f6\u949f\u4e2d\u65ad\u7684\u652f\u6301\u5b9e\u9645\u4e0a\u548c\u5176\u4ed6\u5916\u8bbe\u4e5f\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u62bd\u8c61\u8d77\u6765\u5c31\u662f\u5bf9\u5bc4\u5b58\u5668\u7684\u8bfb\u548c\u5199\uff0c\u4ee5\u53ca\u914d\u7f6e\u771f\u6b63\u8fde\u63a5cpu\u5f15\u811a\u7684\u90a3\u4e2a\u90e8\u5206\u5230\u5e95\u4ec0\u4e48\u65f6\u5019\u53d1\u4fe1\u53f7"}),"\n",(0,r.jsx)(t.p,{children:"\u5f15\u7528\u6587\u6863"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"Arm Generic Timer \u7528\u5230\u7684\u5bc4\u5b58\u5668"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"CNTPCT_EL0: \u5b83\u7684\u503c\u4ee3\u8868\u4e86\u5f53\u524d\u7684 system count\u3002"}),"\n",(0,r.jsx)(t.li,{children:"CNTFRQ_EL0: \u5b83\u7684\u503c\u4ee3\u8868\u4e86\u7269\u7406\u65f6\u949f\u8fd0\u884c\u7684\u9891\u7387\uff0c\u5373\u6bcf\u79d2\u949f system count \u4f1a\u589e\u52a0\u591a\u5c11\u3002"}),"\n",(0,r.jsx)(t.li,{children:"CNTP_CVAL_EL0: \u662f\u4e00\u4e2a64\u4f4d\u5bc4\u5b58\u5668\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u5411\u8be5\u5bc4\u5b58\u5668\u5199\u5165\u4e00\u4e2a\u503c\uff0c\u5f53 system count \u8fbe\u5230\u6216\u8d85\u8fc7\u8be5\u503c\u65f6\uff0c\u7269\u7406\u65f6\u949f\u4f1a\u89e6\u53d1\u4e2d\u65ad\u3002"}),"\n",(0,r.jsx)(t.li,{children:"CNTP_TVAL_EL0: \u662f\u4e00\u4e2a32\u4f4d\u5bc4\u5b58\u5668\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u5199\u5165 TVAL\uff0c\u5904\u7406\u5668\u4f1a\u5728\u5185\u90e8\u8bfb\u53d6\u5f53\u524d\u7684\u7cfb\u7edf\u8ba1\u6570\uff0c\u52a0\u4e0a\u5199\u5165\u7684\u503c\uff0c\u7136\u540e\u586b\u5145 CVAL\u3002"}),"\n",(0,r.jsx)(t.li,{children:"CNTP_CTL_EL0: \u7269\u7406\u65f6\u949f\u7684\u63a7\u5236\u5bc4\u5b58\u5668\uff0c\u7b2c0\u4f4dENABLE\u63a7\u5236\u65f6\u949f\u662f\u5426\u5f00\u542f\uff0c1\u4ee3\u8868enble\uff0c0\u4ee3\u8868disable\uff1b\u7b2c1\u4f4dIMASK\u4ee3\u8868\u662f\u5426\u5c4f\u853d\u65f6\u949f\u4e2d\u65ad\uff0c0\u4ee3\u8868\u4e0d\u5c4f\u853d\uff0c1\u4ee3\u8868\u5c4f\u853d\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:'void plat_timer_init(void)\n{\n\tu64 count_down = 0;\n\tu64 timer_ctl = 0;\n\tu32 cpuid = smp_get_cpu_id();\n\n\t/* Since QEMU only emulate the generic timer, we use the generic timer here */\n\tasm volatile ("mrs %0, cntpct_el0":"=r" (cntp_init));\n\tkdebug("timer init cntpct_el0 = %lu\\n", cntp_init);\n\tasm volatile ("mrs %0, cntfrq_el0":"=r" (cntp_freq));\n\tkdebug("timer init cntfrq_el0 = %lu\\n", cntp_freq);\n\n\t/* Calculate the tv */\n\tcntp_tval = (cntp_freq * TICK_MS / 1000);\n\ttick_per_us = cntp_freq / 1000 / 1000;\n\tkinfo("CPU freq %lu, set timer %lu\\n", cntp_freq, cntp_tval);\n\n\t/* set the timervalue here */\n\tasm volatile ("msr cntp_tval_el0, %0"::"r" (cntp_tval));\n\tasm volatile ("mrs %0, cntp_tval_el0":"=r" (count_down));\n\tkdebug("timer init cntp_tval_el0 = %lu\\n", count_down);\n\n\t/* Enable CNTPNSIRQ and CNTVIRQ */\n\tput32(core_timer_irqcntl[cpuid], INT_SRC_TIMER1 | INT_SRC_TIMER3);\n\n\t/* Set the control register */\n\ttimer_ctl = 0 << 1 | 1;\t/* IMASK = 0 ENABLE = 1 */\n\tasm volatile ("msr cntp_ctl_el0, %0"::"r" (timer_ctl));\n\tasm volatile ("mrs %0, cntp_ctl_el0":"=r" (timer_ctl));\n\tkdebug("timer init cntp_ctl_el0 = %lu\\n", timer_ctl);\n\t/* enable interrupt controller */\n\treturn;\n}\n\n'})}),"\n",(0,r.jsx)(t.p,{children:"\u62a2\u5360\u5f0f\u7684\u6838\u5fc3\u4fbf\u662f\u4e0b\u9762\u7684\u4e00\u6bb5\u8bdd"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["ChCore\u8bb0\u5f55\u6bcf\u4e2a\u7ebf\u7a0b\u6240\u62e5\u6709\u7684\u65f6\u95f4\u7247\uff08",(0,r.jsx)(t.code,{children:"thread->thread_ctx->sc->budget"}),"\uff09\uff0c",(0,r.jsx)(t.strong,{children:"\u4e3a\u4e86\u80fd\u591f\u8ba9\u7ebf\u7a0b\u4e4b\u95f4\u8f6e\u8f6c\u8fd0\u884c\uff0c\u6211\u4eec\u5e94\u5f53\u5728\u5904\u7406\u65f6\u949f\u4e2d\u65ad\u65f6\u9012\u51cf\u5f53\u524d\u8fd0\u884c\u7ebf\u7a0b\u7684\u65f6\u95f4\u7247\uff0c\u5e76\u5728\u5f53\u524d\u8fd0\u884c\u7ebf\u7a0b\u7684\u65f6\u95f4\u7247\u8017\u5c3d\u65f6\u8fdb\u884c\u8c03\u5ea6\uff0c\u9009\u53d6\u65b0\u7684\u7ebf\u7a0b\u8fd0\u884c\u3002"})]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:'\tswitch (irq) {\n\tcase INT_SRC_TIMER1:\n\t\t/* CNTPNSIRQ (Physical Non-Secure timer IRQ) */\n\t\t// kinfo("handle_timer_irq\\n");\n\t\thandle_timer_irq();\n\t\treturn;\n\t\t// ...\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:'        tick_delta = get_next_tick_delta(); \n        // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4e0d\u662f\u4e00\u4e2a\u56fa\u5b9a\u503c\uff08\u65f6\u949f\u56fa\u5b9a\uff09\u7684\u539f\u56e0\u662f\u65f6\u949f\u4e0d\u53ea\u5e72\u5b9a\u65f6\u786c\u4e2d\u65ad\u7684\u6d3b\n        // \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7ebf\u7a0b\u7684\u7b49\u5f85\u3001\u7761\u7720\u4e4b\u7c7b\u4f1a\u5bfc\u81f4\u4e0b\u4e00\u6b21\u65f6\u949firq\u7684\u63d0\u524d\n        unlock(local_sleep_list_lock);\n\n        time_states[smp_get_cpu_id()].next_expire = current_tick + tick_delta;\n        plat_handle_timer_irq(tick_delta);\n\n        /* Current running thread in current_threads[cpuid] */\n        if (current_thread) {\n                BUG_ON(!current_thread->thread_ctx->sc);\n                BUG_ON(current_thread->thread_ctx->sc->budget == 0);\n                current_thread->thread_ctx->sc->budget--;\n        } else {\n                kdebug("Timer: system not runnig!\\n");\n        }\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-c",children:"// kernel/arch/aarch64/irq/irq_entry.c\n/* Interrupt handler for interrupts happening when in EL0. */\nvoid handle_irq(void)\n{\n\tplat_handle_irq();\n\tsched_periodic(); // \u5728rr policy\u91cc\u9762\u5c31\u662fsched\n\t// pb policy\u91cc\u9762\u4e00\u822csched\u662fpb fifo, \u800cperiodic\u662frr \u9700\u8981\u533a\u5206\n\teret_to_thread(switch_context()); // \u8fd4\u56de\u7528\u6237\u6001\n}\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u652f\u6301\u4e86\u62a2\u5360\u5f0f\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u7528\u6237\u6001\u7a0b\u5e8f\u5c31\u80fd\u6253\u7834\u521d\u59cb\u8fdb\u7a0bprocmgr\u7684\u5faa\u73af\u771f\u6b63\u8fd0\u884c\u4e86"})]})}function l(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(96540);const d={},c=r.createContext(d);function a(e){const t=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);